module M_692__incorrect [#"692.rs" 9 0 9 76]
  let%span s6920 = "692.rs" 9 57 9 61
  let%span s6921 = "692.rs" 9 66 9 72
  let%span s6922 = "692.rs" 6 11 7 84
  let%span s6923 = "692.rs" 8 10 8 15
  let%span sops4 = "../../../creusot-contracts/src/std/ops.rs" 150 14 150 114
  let%span sops5 = "../../../creusot-contracts/src/std/ops.rs" 155 14 155 101
  let%span sops6 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops7 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops8 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops9 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops10 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops11 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops12 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  
  use creusot.prelude.Any
  
  type t_B'0
  
  predicate inv'0 (_1 : t_B'0)
  
  predicate resolve'0 (_1 : t_B'0)
  
  type t_C'0
  
  predicate inv'1 (_1 : t_C'0)
  
  predicate resolve'1 (_1 : t_C'0)
  
  predicate precondition'0 (self : t_C'0) (args : ())
  
  predicate precondition'1 (self : t_B'0) (args : bool)
  
  predicate postcondition_once'0 (self : t_C'0) (args : ()) (result : bool)
  
  predicate postcondition_mut'0 (self : t_C'0) (args : ()) (result_state : t_C'0) (result : bool)
  
  function fn_mut_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops12] postcondition_once'0 self args res
  = (exists res_state : t_C'0 . postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate unnest'0 (self : t_C'0) (_2 : t_C'0)
  
  function unnest_trans'0 (self : t_C'0) (b : t_C'0) (c : t_C'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_C'0, b : t_C'0, c : t_C'0 . ([%#sops9] unnest'0 self b)
   -> ([%#sops10] unnest'0 b c)  -> ([%#sops11] unnest'0 self c)
  
  function unnest_refl'0 (self : t_C'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_C'0 . [%#sops8] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_C'0) (args : ()) (res_state : t_C'0) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_C'0, args : (), res_state : t_C'0, res : bool . ([%#sops6] postcondition_mut'0 self args res_state res)
   -> ([%#sops7] unnest'0 self res_state)
  
  predicate postcondition'0 (self : t_C'0) (args : ()) (result : bool)
  
  function fn_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops5] postcondition_once'0 self args res
  = (resolve'1 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : t_C'0) (args : ()) (res_state : t_C'0) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : t_C'0, args : (), res_state : t_C'0, res : bool . [%#sops4] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  meta "compute_max_steps" 1000000
  
  let rec incorrect'0[#"692.rs" 9 0 9 76] (cond:t_C'0) (branch:t_B'0) (return'  (ret:()))= {[@expl:incorrect 'cond' type invariant] [%#s6920] inv'1 cond}
    {[@expl:incorrect 'branch' type invariant] [%#s6921] inv'0 branch}
    {[@expl:incorrect requires] [%#s6922] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch b
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 branch} s1
      | s1 = -{resolve'0 branch}- s2
      | s2 = {[@expl:type invariant] inv'1 cond} s3
      | s3 = -{resolve'1 cond}- s4
      | s4 = bb1 ]
    
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = Any.any_l () | & cond : t_C'0 = cond | & branch : t_B'0 = branch ] 
    [ return' (result:())-> {[@expl:incorrect ensures] [%#s6923] false} (! return' {result}) ]

end
module M_692__valid_normal [#"692.rs" 12 0 12 34]
  let%span s6920 = "692.rs" 13 16 13 20
  let%span s6921 = "692.rs" 11 10 11 15
  let%span s6922 = "692.rs" 15 11 15 15
  let%span s6923 = "692.rs" 14 25 14 45
  let%span s6924 = "692.rs" 17 25 17 26
  let%span s6925 = "692.rs" 17 36 17 37
  let%span s6926 = "692.rs" 16 27 16 62
  let%span s6927 = "692.rs" 6 11 7 84
  let%span s6928 = "692.rs" 8 10 8 15
  let%span sord9 = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord10 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord11 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord12 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord13 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord14 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord15 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord16 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord17 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord18 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord19 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord20 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord21 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sresolve22 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops23 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops24 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops25 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops26 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops27 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops28 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops29 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  let%span sops30 = "../../../creusot-contracts/src/std/ops.rs" 150 14 150 114
  let%span sops31 = "../../../creusot-contracts/src/std/ops.rs" 155 14 155 101
  let%span sord32 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  type closure1'1  =
    { _0'0: UInt32.t }
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord32] if UInt32.lt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord21] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord19] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord20] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord17] cmp_log'0 x y = C_Less'0)
   -> ([%#sord18] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord14] cmp_log'0 x y
  = o)  -> ([%#sord15] cmp_log'0 y z = o)  -> ([%#sord16] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord13] cmp_log'0 x x = C_Equal'0
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord12] UInt32.gt x y = (cmp_log'0 x y = C_Greater'0)
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord11] UInt32.ge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord10] UInt32.lt x y = (cmp_log'0 x y = C_Less'0)
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord9] UInt32.le x y = (cmp_log'0 x y <> C_Greater'0)
  
  let rec closure1'0[#"692.rs" 14 15 14 47] (_1:closure1'1) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &res <- UInt32.gt _1._0'0 ([%#s6922] (7 : UInt32.t)) ] s1
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
     ]
    ) [ & _0 : bool = Any.any_l () | & _1 : closure1'1 = _1 | & res : bool = Any.any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#s6923] result = UInt32.gt _1._0'0 (7 : UInt32.t)}
      (! return' {result}) ]
  
  
  type closure2'1  =
    { _0'1: MutBorrow.t UInt32.t }
  
  predicate resolve'1 (self : MutBorrow.t closure2'1) =
    [%#sresolve22] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t closure2'1) =
    resolve'1 _1
  
  predicate postcondition_once'0 (self : closure2'1) (args : bool) (result : ()) =
    [%#s6926] let b = args in b /\ (self._0'1).final = (2 : UInt32.t) \/ not b /\ (self._0'1).final = (1 : UInt32.t)
  
  predicate resolve'5 (self : MutBorrow.t UInt32.t) =
    [%#sresolve22] self.final = self.current
  
  predicate resolve'4 (_1 : MutBorrow.t UInt32.t) =
    resolve'5 _1
  
  predicate resolve'2 (_1 : closure2'1) =
    resolve'4 _1._0'1
  
  predicate unnest'0 (self : closure2'1) (_2 : closure2'1) =
    (_2._0'1).final = (self._0'1).final
  
  predicate postcondition_mut'0 (self : closure2'1) (args : bool) (result_state : closure2'1) (result : ()) =
    (let b = args in b /\ (result_state._0'1).current = (2 : UInt32.t)
    \/ not b /\ (result_state._0'1).current = (1 : UInt32.t))
    /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure2'1) (args : bool) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure2'1, args : bool, res : () . [%#sops29] postcondition_once'0 self args res
  = (exists res_state : closure2'1 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  function unnest_trans'0 (self : closure2'1) (b : closure2'1) (c : closure2'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure2'1, b : closure2'1, c : closure2'1 . ([%#sops26] unnest'0 self b)
   -> ([%#sops27] unnest'0 b c)  -> ([%#sops28] unnest'0 self c)
  
  function unnest_refl'0 (self : closure2'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure2'1 . [%#sops25] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure2'1) (args : bool) (res_state : closure2'1) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure2'1, args : bool, res_state : closure2'1, res : () . ([%#sops23] postcondition_mut'0 self args res_state res)
   -> ([%#sops24] unnest'0 self res_state)
  
  let rec closure2'0[#"692.rs" 16 17 16 64] (_1:MutBorrow.t closure2'1) (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s6924] (2 : UInt32.t) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_4 <- [%#s6925] (1 : UInt32.t) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_1 <- { _1 with current = { _0'1 = { (_1.current)._0'1 with current = _4 } } } ] s1
      | s1 = -{resolve'0 _1}- s2
      | s2 = return' {_0} ]
     ]
    )
    [ & _0 : () = Any.any_l () | & _1 : MutBorrow.t closure2'1 = _1 | & b : bool = b | & _4 : UInt32.t = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:closure ensures] [%#s6926] b /\ ((_1.final)._0'1).current = (2 : UInt32.t)
      \/ not b /\ ((_1.final)._0'1).current = (1 : UInt32.t)}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
  
  
  predicate precondition'0 (self : closure1'1) (args : ()) =
    let () = args in true
  
  predicate precondition'1 (self : closure2'1) (args : bool) =
    let b = args in true
  
  predicate postcondition_once'1 (self : closure1'1) (args : ()) (result : bool) =
    [%#s6923] let () = args in result = UInt32.gt self._0'0 (7 : UInt32.t)
  
  predicate resolve'3 (_1 : closure1'1) =
    true
  
  predicate unnest'1 (self : closure1'1) (_2 : closure1'1) =
    _2._0'0 = self._0'0
  
  predicate postcondition_mut'1 (self : closure1'1) (args : ()) (result_state : closure1'1) (result : bool) =
    (let () = args in result = UInt32.gt result_state._0'0 (7 : UInt32.t)) /\ unnest'1 self result_state
  
  function fn_mut_once'1 (self : closure1'1) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'1_spec : forall self : closure1'1, args : (), res : bool . [%#sops29] postcondition_once'1 self args res
  = (exists res_state : closure1'1 . postcondition_mut'1 self args res_state res /\ resolve'3 res_state)
  
  function unnest_trans'1 (self : closure1'1) (b : closure1'1) (c : closure1'1) : ()
  
  axiom unnest_trans'1_spec : forall self : closure1'1, b : closure1'1, c : closure1'1 . ([%#sops26] unnest'1 self b)
   -> ([%#sops27] unnest'1 b c)  -> ([%#sops28] unnest'1 self c)
  
  function unnest_refl'1 (self : closure1'1) : ()
  
  axiom unnest_refl'1_spec : forall self : closure1'1 . [%#sops25] unnest'1 self self
  
  function postcondition_mut_unnest'1 (self : closure1'1) (args : ()) (res_state : closure1'1) (res : bool) : ()
  
  axiom postcondition_mut_unnest'1_spec : forall self : closure1'1, args : (), res_state : closure1'1, res : bool . ([%#sops23] postcondition_mut'1 self args res_state res)
   -> ([%#sops24] unnest'1 self res_state)
  
  predicate postcondition'0 (self : closure1'1) (args : ()) (result : bool) =
    [%#s6923] let () = args in result = UInt32.gt self._0'0 (7 : UInt32.t)
  
  function fn_once'0 (self : closure1'1) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : closure1'1, args : (), res : bool . [%#sops31] postcondition_once'1 self args res
  = (resolve'3 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : closure1'1) (args : ()) (res_state : closure1'1) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : closure1'1, args : (), res_state : closure1'1, res : bool . [%#sops30] postcondition_mut'1 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec incorrect'0 (cond:closure1'1) (branch:closure2'1) (return'  (ret:()))= {[@expl:incorrect requires] [%#s6927] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch b
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    any [ return' (result:())-> {[%#s6928] false} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec valid_normal'0[#"692.rs" 12 0 12 34] (n:UInt32.t) (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#s6920] (0 : UInt32.t) ] s1
      | s1 =  [ &cond <- { _0'0 = n } ] s2
      | s2 = MutBorrow.borrow_mut <UInt32.t> {r}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_7 <- _ret' ]  [ &r <- _ret'.final ] s3)
      | s3 =  [ &branch <- { _0'1 = _7 } ] s4
      | s4 = incorrect'0 {cond} {branch} (fun (_ret':()) ->  [ &_8 <- _ret' ] s5)
      | s5 = bb1 ]
    
    | bb1 = s0 [ s0 =  [ &_0 <- r ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : UInt32.t = Any.any_l ()
    | & n : UInt32.t = n
    | & r : UInt32.t = Any.any_l ()
    | & cond : closure1'1 = Any.any_l ()
    | & branch : closure2'1 = Any.any_l ()
    | & _7 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _8 : () = Any.any_l () ]
     [ return' (result:UInt32.t)-> {[@expl:valid_normal ensures] [%#s6921] false} (! return' {result}) ] 
end
