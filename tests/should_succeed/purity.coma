module M_purity__qyi14899607085053415061__f [#"purity.rs" 12 4 12 10] (* <i32 as Foo> *)
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec f'0[#"purity.rs" 12 4 12 10] (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_purity__calls_f [#"purity.rs" 16 0 16 16]
  let rec f'0 (return'  (ret:()))= any [ return' (result:())-> (! return' {result}) ] 
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec calls_f'0[#"purity.rs" 16 0 16 16] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = f'0 (fun (_ret':()) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : () = Any.any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_purity__result [#"purity.rs" 39 0 39 15]
  let%span spurity0 = "purity.rs" 40 18 40 32
  let%span spurity1 = "purity.rs" 36 4 36 21
  let%span spurity2 = "purity.rs" 29 8 29 9
  
  function g'0 [#"purity.rs" 28 4 28 17]  : int =
    [%#spurity2] 1
  
  function calls_g'0 [#"purity.rs" 35 0 35 23]  : int =
    [%#spurity1] g'0
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec result'0[#"purity.rs" 39 0 39 15] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = {[@expl:assertion] [%#spurity0] calls_g'0 = 1} s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = Any.any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
