module M_inference__call_with_one [#"inference.rs" 6 0 6 52]
  let%span sinference0 = "inference.rs" 7 6 7 7
  let%span sinference1 = "inference.rs" 6 40 6 41
  let%span sinference2 = "inference.rs" 4 11 4 34
  let%span sinference3 = "inference.rs" 5 10 5 42
  let%span sops4 = "../../../creusot-contracts/src/std/ops.rs" 175 27 175 52
  let%span sops5 = "../../../creusot-contracts/src/std/ops.rs" 176 26 176 60
  let%span sops6 = "../../../creusot-contracts/src/std/ops.rs" 150 14 150 114
  let%span sops7 = "../../../creusot-contracts/src/std/ops.rs" 155 14 155 101
  let%span sinvariant8 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sops9 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops10 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops11 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops12 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops13 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops14 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops15 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F'0
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate invariant'0 (self : t_F'0) =
    [%#sinvariant8] inv'0 self
  
  predicate inv'1 (_1 : t_F'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_F'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate precondition'0 (self : t_F'0) (args : Int32.t)
  
  predicate postcondition_once'0 (self : t_F'0) (args : Int32.t) (result : Int32.t)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : Int32.t) (result_state : t_F'0) (result : Int32.t)
  
  function fn_mut_once'0 (self : t_F'0) (args : Int32.t) (res : Int32.t) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : Int32.t, res : Int32.t . [%#sops15] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'0 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops12] unnest'0 self b)
   -> ([%#sops13] unnest'0 b c)  -> ([%#sops14] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops11] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : Int32.t) (res_state : t_F'0) (res : Int32.t) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : Int32.t, res_state : t_F'0, res : Int32.t . ([%#sops9] postcondition_mut'0 self args res_state res)
   -> ([%#sops10] unnest'0 self res_state)
  
  predicate postcondition'0 (self : t_F'0) (args : Int32.t) (result : Int32.t)
  
  function fn_once'0 (self : t_F'0) (args : Int32.t) (res : Int32.t) : ()
  
  axiom fn_once'0_spec : forall self : t_F'0, args : Int32.t, res : Int32.t . [%#sops7] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : t_F'0) (args : Int32.t) (res_state : t_F'0) (res : Int32.t) : ()
  
  axiom fn_mut'0_spec : forall self : t_F'0, args : Int32.t, res_state : t_F'0, res : Int32.t . [%#sops6] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec call'0 (self:t_F'0) (args:Int32.t) (return'  (ret:Int32.t))= {[@expl:call 'self' type invariant] inv'1 self}
    {[@expl:call requires] [%#sops4] precondition'0 self args}
    any [ return' (result:Int32.t)-> {[%#sops5] postcondition'0 self args result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec call_with_one'0[#"inference.rs" 6 0 6 52] (f:t_F'0) (return'  (ret:Int32.t))= {[@expl:call_with_one 'f' type invariant] [%#sinference1] inv'0 f}
    {[@expl:call_with_one requires] [%#sinference2] precondition'0 f (1 : Int32.t)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 =  [ &_5 <- [%#sinference0] (1 : Int32.t) ] s1
      | s1 = call'0 {f} {_5} (fun (_ret':Int32.t) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb4 ] 
    | bb4 = return' {_0} ]
    ) [ & _0 : Int32.t = Any.any_l () | & f : t_F'0 = f | & _5 : Int32.t = Any.any_l () ] 
    [ return' (result:Int32.t)-> {[@expl:call_with_one ensures] [%#sinference3] postcondition'0 f (1 : Int32.t) result}
      (! return' {result}) ]

end
module M_inference__call_with_one_mut [#"inference.rs" 12 0 12 60]
  let%span sinference0 = "inference.rs" 13 6 13 7
  let%span sinference1 = "inference.rs" 12 43 12 44
  let%span sinference2 = "inference.rs" 10 11 10 37
  let%span sinference3 = "inference.rs" 11 10 11 53
  let%span sops4 = "../../../creusot-contracts/src/std/ops.rs" 169 27 169 52
  let%span sops5 = "../../../creusot-contracts/src/std/ops.rs" 170 26 170 71
  let%span sresolve6 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops7 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops8 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops9 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops10 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops11 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops12 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops13 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  let%span sinvariant14 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F'0
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate invariant'0 (self : MutBorrow.t t_F'0) =
    [%#sinvariant14] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_F'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MutBorrow.t t_F'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate precondition'0 (self : t_F'0) (args : Int32.t)
  
  predicate postcondition_once'0 (self : t_F'0) (args : Int32.t) (result : Int32.t)
  
  predicate resolve'2 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : Int32.t) (result_state : t_F'0) (result : Int32.t)
  
  function fn_mut_once'0 (self : t_F'0) (args : Int32.t) (res : Int32.t) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : Int32.t, res : Int32.t . [%#sops13] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops10] unnest'0 self b)
   -> ([%#sops11] unnest'0 b c)  -> ([%#sops12] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : Int32.t) (res_state : t_F'0) (res : Int32.t) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : Int32.t, res_state : t_F'0, res : Int32.t . ([%#sops7] postcondition_mut'0 self args res_state res)
   -> ([%#sops8] unnest'0 self res_state)
  
  let rec call_mut'0 (self:MutBorrow.t t_F'0) (args:Int32.t) (return'  (ret:Int32.t))= {[@expl:call_mut 'self' type invariant] inv'1 self}
    {[@expl:call_mut requires] [%#sops4] precondition'0 self.current args}
    any
    [ return' (result:Int32.t)-> {[%#sops5] postcondition_mut'0 self.current args self.final result}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t t_F'0) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_F'0) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec call_with_one_mut'0[#"inference.rs" 12 0 12 60] (f:MutBorrow.t t_F'0) (return'  (ret:Int32.t))= {[@expl:call_with_one_mut 'f' type invariant] [%#sinference1] inv'1 f}
    {[@expl:call_with_one_mut requires] [%#sinference2] precondition'0 f.current (1 : Int32.t)}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 f.current}
        MutBorrow.borrow_final <t_F'0> {f.current} {MutBorrow.get_id f}
          (fun (_ret':MutBorrow.t t_F'0) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &f <- { f with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_5 <- [%#sinference0] (1 : Int32.t) ] s2
      | s2 = call_mut'0 {_4} {_5} (fun (_ret':Int32.t) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Int32.t = Any.any_l ()
    | & f : MutBorrow.t t_F'0 = f
    | & _4 : MutBorrow.t t_F'0 = Any.any_l ()
    | & _5 : Int32.t = Any.any_l () ]
    
    [ return' (result:Int32.t)-> {[@expl:call_with_one_mut ensures] [%#sinference3] postcondition_mut'0 f.current (1 : Int32.t) f.final result}
      (! return' {result}) ]

end
module M_inference__call_with_one_once [#"inference.rs" 18 0 18 61]
  let%span sinference0 = "inference.rs" 19 6 19 7
  let%span sinference1 = "inference.rs" 18 49 18 50
  let%span sinference2 = "inference.rs" 16 11 16 34
  let%span sinference3 = "inference.rs" 17 10 17 47
  let%span sops4 = "../../../creusot-contracts/src/std/ops.rs" 163 27 163 49
  let%span sops5 = "../../../creusot-contracts/src/std/ops.rs" 164 26 164 62
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_F'0
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate precondition'0 (self : t_F'0) (args : Int32.t)
  
  predicate postcondition_once'0 (self : t_F'0) (args : Int32.t) (result : Int32.t)
  
  let rec call_once'0 (self:t_F'0) (args:Int32.t) (return'  (ret:Int32.t))= {[@expl:call_once 'self' type invariant] inv'0 self}
    {[@expl:call_once requires] [%#sops4] precondition'0 self args}
    any [ return' (result:Int32.t)-> {[%#sops5] postcondition_once'0 self args result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec call_with_one_once'0[#"inference.rs" 18 0 18 61] (f:t_F'0) (return'  (ret:Int32.t))= {[@expl:call_with_one_once 'f' type invariant] [%#sinference1] inv'0 f}
    {[@expl:call_with_one_once requires] [%#sinference2] precondition'0 f (1 : Int32.t)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0
      [ s0 =  [ &_5 <- [%#sinference0] (1 : Int32.t) ] s1
      | s1 = call_once'0 {f} {_5} (fun (_ret':Int32.t) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : Int32.t = Any.any_l () | & f : t_F'0 = f | & _5 : Int32.t = Any.any_l () ] 
    [ return' (result:Int32.t)-> {[@expl:call_with_one_once ensures] [%#sinference3] postcondition_once'0 f (1 : Int32.t) result}
      (! return' {result}) ]

end
module M_inference__closure_fn [#"inference.rs" 22 0 22 19]
  let%span sinference0 = "inference.rs" 25 32 25 33
  let%span sinference1 = "inference.rs" 26 41 26 42
  let%span sinference2 = "inference.rs" 27 37 27 38
  let%span sinference3 = "inference.rs" 27 4 27 39
  let%span sinference4 = "inference.rs" 26 4 26 43
  let%span sinference5 = "inference.rs" 25 4 25 34
  let%span sinference6 = "inference.rs" 23 29 23 30
  let%span sinference7 = "inference.rs" 4 11 4 34
  let%span sinference8 = "inference.rs" 5 10 5 42
  let%span sinference9 = "inference.rs" 10 11 10 37
  let%span sinference10 = "inference.rs" 11 10 11 53
  let%span sinference11 = "inference.rs" 16 11 16 34
  let%span sinference12 = "inference.rs" 17 10 17 47
  let%span sinference13 = "inference.rs" 23 16 23 24
  let%span sresolve14 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops15 = "../../../creusot-contracts/src/std/ops.rs" 150 14 150 114
  let%span sops16 = "../../../creusot-contracts/src/std/ops.rs" 155 14 155 101
  let%span sops17 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops18 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops19 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops20 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops21 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops22 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops23 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  
  use creusot.int.Int32
  use creusot.prelude.Any
  use creusot.prelude.MutBorrow
  
  let rec closure0'0[#"inference.rs" 23 16 23 24] [@coma:extspec] (_1:()) (x:Int32.t) (return'  (ret:Int32.t))= bb0
    [ bb0 = s0
      [ s0 = Int32.add {x} {[%#sinference6] (1 : Int32.t)} (fun (_ret':Int32.t) ->  [ &_0 <- _ret' ] s1)
      | s1 = return' {_0} ]
     ]
     [ & _0 : Int32.t = Any.any_l () | & x : Int32.t = x ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  predicate precondition'0 (self : ()) (args : Int32.t) =
    [%#sinference13] let x = args in closure0'0'pre self x
  
  predicate postcondition_once'0 (self : ()) (args : Int32.t) (result : Int32.t) =
    [%#sinference13] let x = args in closure0'0'post'return' self x result
  
  predicate resolve'2 (_1 : ()) =
    true
  
  predicate unnest'0 (self : ()) (_2 : ()) =
    true
  
  predicate postcondition_mut'0 (self : ()) (args : Int32.t) (result_state : ()) (result : Int32.t) =
    (let x = args in closure0'0'post'return' self x result) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : ()) (args : Int32.t) (res : Int32.t) : ()
  
  axiom fn_mut_once'0_spec : forall self : (), args : Int32.t, res : Int32.t . [%#sops23] postcondition_once'0 self args res
  = (exists res_state : () . postcondition_mut'0 self args res_state res /\ resolve'2 res_state)
  
  function unnest_trans'0 (self : ()) (b : ()) (c : ()) : ()
  
  axiom unnest_trans'0_spec : forall self : (), b : (), c : () . ([%#sops20] unnest'0 self b)
   -> ([%#sops21] unnest'0 b c)  -> ([%#sops22] unnest'0 self c)
  
  function unnest_refl'0 (self : ()) : ()
  
  axiom unnest_refl'0_spec : forall self : () . [%#sops19] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : ()) (args : Int32.t) (res_state : ()) (res : Int32.t) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : (), args : Int32.t, res_state : (), res : Int32.t . ([%#sops17] postcondition_mut'0 self args res_state res)
   -> ([%#sops18] unnest'0 self res_state)
  
  predicate postcondition'0 (self : ()) (args : Int32.t) (result : Int32.t) =
    [%#sinference13] let x = args in closure0'0'post'return' self x result
  
  function fn_once'0 (self : ()) (args : Int32.t) (res : Int32.t) : ()
  
  axiom fn_once'0_spec : forall self : (), args : Int32.t, res : Int32.t . [%#sops16] postcondition_once'0 self args res
  = (resolve'2 self /\ postcondition'0 self args res)
  
  function fn_mut'0 (self : ()) (args : Int32.t) (res_state : ()) (res : Int32.t) : ()
  
  axiom fn_mut'0_spec : forall self : (), args : Int32.t, res_state : (), res : Int32.t . [%#sops15] postcondition_mut'0 self args res_state res
  = (self = res_state /\ postcondition'0 self args res)
  
  let rec call_with_one'0 (f:()) (return'  (ret:Int32.t))= {[@expl:call_with_one requires] [%#sinference7] precondition'0 f (1 : Int32.t)}
    any [ return' (result:Int32.t)-> {[%#sinference8] postcondition'0 f (1 : Int32.t) result} (! return' {result}) ] 
  
  let rec call_with_one_mut'0 (f:MutBorrow.t ()) (return'  (ret:Int32.t))= {[@expl:call_with_one_mut requires] [%#sinference9] precondition'0 f.current (1 : Int32.t)}
    any
    [ return' (result:Int32.t)-> {[%#sinference10] postcondition_mut'0 f.current (1 : Int32.t) f.final result}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t ()) =
    [%#sresolve14] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t ()) =
    resolve'1 _1
  
  let rec call_with_one_once'0 (f:()) (return'  (ret:Int32.t))= {[@expl:call_with_one_once requires] [%#sinference11] precondition'0 f (1 : Int32.t)}
    any
    [ return' (result:Int32.t)-> {[%#sinference12] postcondition_once'0 f (1 : Int32.t) result} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec closure_fn'0[#"inference.rs" 22 0 22 19] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &f <- () ] s1 | s1 = call_with_one'0 {f} (fun (_ret':Int32.t) ->  [ &_4 <- _ret' ] s2) | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_3 <- _4 = ([%#sinference0] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_3 = false} (! bb3) | br1 -> {_3} (! bb2) ]  ]
    
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <()> {f} (fun (_ret':MutBorrow.t ()) ->  [ &_11 <- _ret' ]  [ &f <- _ret'.final ] s1)
      | s1 = MutBorrow.borrow_final <()> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret':MutBorrow.t ()) ->  [ &_10 <- _ret' ]  [ &_11 <- { _11 with current = _ret'.final } ] s2)
      | s2 = call_with_one_mut'0 {_10} (fun (_ret':Int32.t) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb4 ]
    
    | bb4 = s0
      [ s0 = -{resolve'0 _11}- s1
      | s1 =  [ &_8 <- _9 = ([%#sinference1] (2 : Int32.t)) ] s2
      | s2 = any [ br0 -> {_8 = false} (! bb6) | br1 -> {_8} (! bb5) ]  ]
    
    | bb5 = s0 [ s0 = call_with_one_once'0 {f} (fun (_ret':Int32.t) ->  [ &_15 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 =  [ &_14 <- _15 = ([%#sinference2] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_14 = false} (! bb9) | br1 -> {_14} (! bb8) ]  ]
    
    | bb8 = return' {_0}
    | bb9 = {[%#sinference3] false} any
    | bb6 = {[%#sinference4] false} any
    | bb3 = {[%#sinference5] false} any ]
    )
    [ & _0 : () = Any.any_l ()
    | & f : () = Any.any_l ()
    | & _3 : bool = Any.any_l ()
    | & _4 : Int32.t = Any.any_l ()
    | & _8 : bool = Any.any_l ()
    | & _9 : Int32.t = Any.any_l ()
    | & _10 : MutBorrow.t () = Any.any_l ()
    | & _11 : MutBorrow.t () = Any.any_l ()
    | & _14 : bool = Any.any_l ()
    | & _15 : Int32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inference__closure_fn_mut [#"inference.rs" 30 0 30 23]
  let%span sinference0 = "inference.rs" 31 16 31 17
  let%span sinference1 = "inference.rs" 37 41 37 42
  let%span sinference2 = "inference.rs" 38 37 38 38
  let%span sinference3 = "inference.rs" 39 17 39 18
  let%span sinference4 = "inference.rs" 39 4 39 19
  let%span sinference5 = "inference.rs" 38 4 38 39
  let%span sinference6 = "inference.rs" 37 4 37 43
  let%span sinference7 = "inference.rs" 10 11 10 37
  let%span sinference8 = "inference.rs" 11 10 11 53
  let%span sinference9 = "inference.rs" 16 11 16 34
  let%span sinference10 = "inference.rs" 17 10 17 47
  let%span sresolve11 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops12 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops13 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops14 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops15 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops16 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops17 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops18 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type closure0'1  =
    { _0'0: MutBorrow.t Int32.t }
  
  predicate resolve'2 (self : MutBorrow.t closure0'1) =
    [%#sresolve11] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t closure0'1) =
    resolve'2 _1
  
  predicate resolve'4 (self : MutBorrow.t Int32.t) =
    [%#sresolve11] self.final = self.current
  
  predicate resolve'3 (_1 : MutBorrow.t Int32.t) =
    resolve'4 _1
  
  predicate resolve'1 (_1 : closure0'1) =
    resolve'3 _1._0'0
  
  predicate unnest'0 (self : closure0'1) (_2 : closure0'1) =
    (_2._0'0).final = (self._0'0).final
  
  let rec closure0'0[#"inference.rs" 32 16 32 24] [@coma:extspec] (_1:MutBorrow.t closure0'1) (x:Int32.t) (return'  (ret:Int32.t))= bb0
    [ bb0 = s0
      [ s0 = Int32.add {((_1.current)._0'0).current} {x}
          (fun (_ret':Int32.t) ->
             [ &_1 <- { _1 with current = { _0'0 = { (_1.current)._0'0 with current = _ret' } } } ] 
            s1)
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &_0 <- ((_1.current)._0'0).current ] s3
      | s3 = return' {_0} ]
     ]
     [ & _0 : Int32.t = Any.any_l () | & _1 : MutBorrow.t closure0'1 = _1 | & x : Int32.t = x ] 
    [ return' (result:Int32.t)-> return' {result} ]
  
  
  predicate postcondition_once'0 (self : closure0'1) (args : Int32.t) (result : Int32.t) =
    let x = args in exists __bor_self : MutBorrow.t closure0'1 . closure0'0'post'return' __bor_self x result
    /\ __bor_self.current = self
  
  predicate postcondition_mut'0 (self : closure0'1) (args : Int32.t) (result_state : closure0'1) (result : Int32.t) =
    (let x = args in exists __bor_self : MutBorrow.t closure0'1 . closure0'0'post'return' __bor_self x result
    /\ __bor_self.current = self /\ __bor_self.final = result_state)
    /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure0'1) (args : Int32.t) (res : Int32.t) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure0'1, args : Int32.t, res : Int32.t . [%#sops18] postcondition_once'0 self args res
  = (exists res_state : closure0'1 . postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  function unnest_trans'0 (self : closure0'1) (b : closure0'1) (c : closure0'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure0'1, b : closure0'1, c : closure0'1 . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function unnest_refl'0 (self : closure0'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure0'1 . [%#sops14] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure0'1) (args : Int32.t) (res_state : closure0'1) (res : Int32.t) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure0'1, args : Int32.t, res_state : closure0'1, res : Int32.t . ([%#sops12] postcondition_mut'0 self args res_state res)
   -> ([%#sops13] unnest'0 self res_state)
  
  predicate precondition'0 (self : closure0'1) (args : Int32.t) =
    let x = args in forall __bor_self : MutBorrow.t closure0'1 . __bor_self.current = self
     -> closure0'0'pre __bor_self x
  
  let rec call_with_one_mut'0 (f:MutBorrow.t closure0'1) (return'  (ret:Int32.t))= {[@expl:call_with_one_mut requires] [%#sinference7] precondition'0 f.current (1 : Int32.t)}
    any
    [ return' (result:Int32.t)-> {[%#sinference8] postcondition_mut'0 f.current (1 : Int32.t) f.final result}
      (! return' {result}) ]
  
  
  let rec call_with_one_once'0 (f:closure0'1) (return'  (ret:Int32.t))= {[@expl:call_with_one_once requires] [%#sinference9] precondition'0 f (1 : Int32.t)}
    any
    [ return' (result:Int32.t)-> {[%#sinference10] postcondition_once'0 f (1 : Int32.t) result} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec closure_fn_mut'0[#"inference.rs" 30 0 30 23] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &y <- [%#sinference0] (0 : Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {y}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_3 <- _ret' ]  [ &y <- _ret'.final ] s2)
      | s2 =  [ &f <- { _0'0 = _3 } ] s3
      | s3 = MutBorrow.borrow_mut <closure0'1> {f}
          (fun (_ret':MutBorrow.t closure0'1) ->  [ &_8 <- _ret' ]  [ &f <- _ret'.final ] s4)
      | s4 = MutBorrow.borrow_final <closure0'1> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret':MutBorrow.t closure0'1) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final } ] s5)
      | s5 = call_with_one_mut'0 {_7} (fun (_ret':Int32.t) ->  [ &_6 <- _ret' ] s6)
      | s6 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 =  [ &_5 <- _6 = ([%#sinference1] (1 : Int32.t)) ] s2
      | s2 = any [ br0 -> {_5 = false} (! bb3) | br1 -> {_5} (! bb2) ]  ]
    
    | bb2 = s0 [ s0 = call_with_one_once'0 {f} (fun (_ret':Int32.t) ->  [ &_12 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_11 <- _12 = ([%#sinference2] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb5) ]  ]
    
    | bb5 = s0
      [ s0 =  [ &_16 <- y = ([%#sinference3] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_16 = false} (! bb8) | br1 -> {_16} (! bb7) ]  ]
    
    | bb7 = return' {_0}
    | bb8 = {[%#sinference4] false} any
    | bb6 = {[%#sinference5] false} any
    | bb3 = s0 [ s0 = -{resolve'1 f}- s1 | s1 = {[%#sinference6] false} any ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & y : Int32.t = Any.any_l ()
    | & f : closure0'1 = Any.any_l ()
    | & _3 : MutBorrow.t Int32.t = Any.any_l ()
    | & _5 : bool = Any.any_l ()
    | & _6 : Int32.t = Any.any_l ()
    | & _7 : MutBorrow.t closure0'1 = Any.any_l ()
    | & _8 : MutBorrow.t closure0'1 = Any.any_l ()
    | & _11 : bool = Any.any_l ()
    | & _12 : Int32.t = Any.any_l ()
    | & _16 : bool = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_inference__closure_fn_once [#"inference.rs" 42 0 42 24]
  let%span sinference0 = "inference.rs" 43 21 43 22
  let%span sinference1 = "inference.rs" 44 16 44 17
  let%span sinference2 = "inference.rs" 51 37 51 38
  let%span sinference3 = "inference.rs" 52 17 52 18
  let%span sinference4 = "inference.rs" 52 4 52 19
  let%span sinference5 = "inference.rs" 51 4 51 39
  let%span sinference6 = "inference.rs" 16 11 16 34
  let%span sinference7 = "inference.rs" 17 10 17 47
  let%span sinference8 = "inference.rs" 45 12 45 25
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type closure0'1  =
    { _0'0: Int32.t; _1'0: Int32.t }
  
  let rec closure0'0[#"inference.rs" 45 12 45 25] [@coma:extspec] (_1:closure0'1) (x:Int32.t) (return'  (ret:Int32.t))= bb0
    [ bb0 = s0
      [ s0 =  [ &move_y <- _1._0'0 ] s1
      | s1 = Int32.add {move_y} {x} (fun (_ret':Int32.t) ->  [ &_4 <- _ret' ] s2)
      | s2 = Int32.add {_1._1'0} {_4} (fun (_ret':Int32.t) ->  [ &_1 <- { _1 with _1'0 = _ret' } ] s3)
      | s3 =  [ &_0 <- _1._1'0 ] s4
      | s4 = bb1 ]
    
    | bb1 = bb2
    | bb2 = return' {_0} ]
    
    [ & _0 : Int32.t = Any.any_l ()
    | & _1 : closure0'1 = _1
    | & x : Int32.t = x
    | & move_y : Int32.t = Any.any_l ()
    | & _4 : Int32.t = Any.any_l () ]
     [ return' (result:Int32.t)-> return' {result} ] 
  
  predicate precondition'0 (self : closure0'1) (args : Int32.t) =
    [%#sinference8] let x = args in closure0'0'pre self x
  
  predicate postcondition_once'0 (self : closure0'1) (args : Int32.t) (result : Int32.t) =
    [%#sinference8] let x = args in closure0'0'post'return' self x result
  
  let rec call_with_one_once'0 (f:closure0'1) (return'  (ret:Int32.t))= {[@expl:call_with_one_once requires] [%#sinference6] precondition'0 f (1 : Int32.t)}
    any
    [ return' (result:Int32.t)-> {[%#sinference7] postcondition_once'0 f (1 : Int32.t) result} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec closure_fn_once'0[#"inference.rs" 42 0 42 24] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &y <- [%#sinference0] (2 : Int32.t) ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &z <- [%#sinference1] (0 : Int32.t) ] s1
      | s1 =  [ &f <- { _0'0 = y; _1'0 = z } ] s2
      | s2 = call_with_one_once'0 {f} (fun (_ret':Int32.t) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 =  [ &_5 <- _6 = ([%#sinference2] (3 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_5 = false} (! bb4) | br1 -> {_5} (! bb3) ]  ]
    
    | bb3 = s0
      [ s0 =  [ &_10 <- z = ([%#sinference3] (0 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]  ]
    
    | bb5 = bb7
    | bb7 = bb8
    | bb8 = return' {_0}
    | bb6 = {[%#sinference4] false} any
    | bb4 = {[%#sinference5] false} any ]
    )
    [ & _0 : () = Any.any_l ()
    | & y : Int32.t = Any.any_l ()
    | & z : Int32.t = Any.any_l ()
    | & f : closure0'1 = Any.any_l ()
    | & _5 : bool = Any.any_l ()
    | & _6 : Int32.t = Any.any_l ()
    | & _10 : bool = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
