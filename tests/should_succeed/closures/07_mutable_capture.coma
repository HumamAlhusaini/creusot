module M_07_mutable_capture__test_fnmut [#"07_mutable_capture.rs" 5 0 5 29]
  let%span s07_mutable_capture = "07_mutable_capture.rs" 17 20 17 33
  let%span s07_mutable_capture'0 = "07_mutable_capture.rs" 4 11 4 24
  let%span s07_mutable_capture'1 = "07_mutable_capture.rs" 10 17 10 18
  let%span s07_mutable_capture'2 = "07_mutable_capture.rs" 11 12 11 13
  let%span s07_mutable_capture'3 = "07_mutable_capture.rs" 7 19 7 33
  let%span s07_mutable_capture'4 = "07_mutable_capture.rs" 8 18 8 35
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  
  use creusot.prelude.MutBorrow
  use creusot.int.UInt32
  use creusot.int.Int32
  use mach.int.Int
  use creusot.prelude.Any
  
  type closure1  =
    { _0: MutBorrow.t UInt32.t }
  
  predicate resolve (self : MutBorrow.t closure1) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0'0 : MutBorrow.t closure1) =
    resolve _0'0
  
  predicate postcondition_once (self : closure1) (args : ()) (result : Int32.t) =
    [%#s07_mutable_capture'4] let () = args in UInt32.t'int (self._0).final = UInt32.t'int (self._0).current + 1
  
  predicate resolve'1 (self : MutBorrow.t UInt32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0'0 : MutBorrow.t UInt32.t) =
    resolve'1 _0'0
  
  predicate resolve'3 (_0'0 : closure1) =
    resolve'2 _0'0._0
  
  predicate unnest (self : closure1) (_1 : closure1) =
    (_1._0).final = (self._0).final
  
  predicate postcondition_mut (self : closure1) (args : ()) (result_state : closure1) (result : Int32.t) =
    (let () = args in UInt32.t'int (result_state._0).current = UInt32.t'int (self._0).current + 1)
    /\ unnest self result_state
  
  function fn_mut_once (self : closure1) (args : ()) (res : Int32.t) : ()
  
  axiom fn_mut_once_spec : forall self : closure1, args : (), res : Int32.t . [%#sops'5] postcondition_once self args res
  = (exists res_state : closure1 . postcondition_mut self args res_state res /\ resolve'3 res_state)
  
  function unnest_trans (self : closure1) (b : closure1) (c : closure1) : ()
  
  axiom unnest_trans_spec : forall self : closure1, b : closure1, c : closure1 . ([%#sops'2] unnest self b)
   -> ([%#sops'3] unnest b c)  -> ([%#sops'4] unnest self c)
  
  function unnest_refl (self : closure1) : ()
  
  axiom unnest_refl_spec : forall self : closure1 . [%#sops'1] unnest self self
  
  function postcondition_mut_unnest (self : closure1) (args : ()) (res_state : closure1) (res : Int32.t) : ()
  
  axiom postcondition_mut_unnest_spec : forall self : closure1, args : (), res_state : closure1, res : Int32.t . ([%#sops] postcondition_mut self args res_state res)
   -> ([%#sops'0] unnest self res_state)
  
  let rec closure1[#"07_mutable_capture.rs" 8 8 8 37] (self:MutBorrow.t closure1) (return'  (x:Int32.t))= {[@expl:closure requires] [%#s07_mutable_capture'3] UInt32.t'int ((self.current)._0).current
    < 1000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt32.add {((_1.current)._0).current} {[%#s07_mutable_capture'1] (1 : UInt32.t)}
          (fun (_ret:UInt32.t) ->  [ &_1 <- { _1 with current = { _0 = { (_1.current)._0 with current = _ret } } } ] s1)
      | s1 = -{resolve'0 _1}- s2
      | s2 =  [ &res'0 <- [%#s07_mutable_capture'2] (5 : Int32.t) ] s3
      | s3 =  [ &res <- res'0 ] s4
      | s4 =  [ &_0'0 <- res ] s5
      | s5 = return''0 {_0'0} ]
     ]
    )
    [ & _0'0 : Int32.t = Any.any_l ()
    | & _1 : MutBorrow.t closure1 = self
    | & res : Int32.t = Any.any_l ()
    | & res'0 : Int32.t = Any.any_l () ]
    
    [ return''0 (result:Int32.t)-> {[@expl:closure ensures] [%#s07_mutable_capture'4] UInt32.t'int ((self.final)._0).current
      = UInt32.t'int ((self.current)._0).current + 1}
      {[@expl:closure unnest] unnest self.current self.final}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec test_fnmut[#"07_mutable_capture.rs" 5 0 5 29] (x:UInt32.t) (return'  (x'0:()))= {[@expl:test_fnmut requires] [%#s07_mutable_capture'0] UInt32.t'int x
    = 100000}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {x'0}
          (fun (_ret:MutBorrow.t UInt32.t) ->  [ &_4 <- _ret ]  [ &x'0 <- _ret.final ] s1)
      | s1 =  [ &c <- { _0 = _4 } ] s2
      | s2 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret:MutBorrow.t closure1) ->  [ &_6 <- _ret ]  [ &c <- _ret.final ] s3)
      | s3 = closure1 {_6} (fun (_ret:Int32.t) ->  [ &_5 <- _ret ] s4)
      | s4 = bb1 ]
    
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <closure1> {c}
          (fun (_ret:MutBorrow.t closure1) ->  [ &_9 <- _ret ]  [ &c <- _ret.final ] s1)
      | s1 = closure1 {_9} (fun (_ret:Int32.t) ->  [ &_8 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = -{resolve'3 c}- s1
      | s1 = {[@expl:assertion] [%#s07_mutable_capture] UInt32.t'int x'0 = 100002} s2
      | s2 = return''0 {_0'0} ]
     ]
    )
    [ & _0'0 : () = Any.any_l ()
    | & x'0 : UInt32.t = x
    | & c : closure1 = Any.any_l ()
    | & _4 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _5 : Int32.t = Any.any_l ()
    | & _6 : MutBorrow.t closure1 = Any.any_l ()
    | & _7 : () = Any.any_l ()
    | & _8 : Int32.t = Any.any_l ()
    | & _9 : MutBorrow.t closure1 = Any.any_l ()
    | & _10 : () = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
