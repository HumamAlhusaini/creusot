module M_03_generic_bound__closure_param [#"03_generic_bound.rs" 5 0 5 34]
  let%span s03_generic_bound = "03_generic_bound.rs" 6 8 6 9
  let%span s03_generic_bound'0 = "03_generic_bound.rs" 5 29 5 30
  let%span sops = "../../../creusot-contracts/src/std/ops.rs" 176 16 176 17
  let%span sops'0 = "../../../creusot-contracts/src/std/ops.rs" 176 27 176 52
  let%span sops'1 = "../../../creusot-contracts/src/std/ops.rs" 177 26 177 60
  let%span sops'2 = "../../../creusot-contracts/src/std/ops.rs" 151 14 151 114
  let%span sops'3 = "../../../creusot-contracts/src/std/ops.rs" 156 14 156 101
  let%span sops'4 = "../../../creusot-contracts/src/std/ops.rs" 116 15 116 59
  let%span sops'5 = "../../../creusot-contracts/src/std/ops.rs" 117 14 117 36
  let%span sops'6 = "../../../creusot-contracts/src/std/ops.rs" 122 14 122 31
  let%span sops'7 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 29
  let%span sops'8 = "../../../creusot-contracts/src/std/ops.rs" 128 15 128 26
  let%span sops'9 = "../../../creusot-contracts/src/std/ops.rs" 129 14 129 28
  let%span sops'10 = "../../../creusot-contracts/src/std/ops.rs" 134 14 135 105
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_F
  
  predicate inv (_0 : t_F)
  
  predicate invariant' (self : t_F) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0 : t_F)
  
  axiom inv_axiom [@rewrite] : forall x : t_F [inv'0 x] . inv'0 x = invariant' x
  
  predicate precondition (self : t_F) (args : UInt32.t)
  
  predicate postcondition_once (self : t_F) (args : UInt32.t) (result : ())
  
  predicate resolve (_0 : t_F)
  
  predicate postcondition_mut (self : t_F) (args : UInt32.t) (result_state : t_F) (result : ())
  
  function fn_mut_once (self : t_F) (args : UInt32.t) (res : ()) : ()
  
  axiom fn_mut_once_spec : forall self : t_F, args : UInt32.t, res : () . [%#sops'10] postcondition_once self args res
  = (exists res_state : t_F . postcondition_mut self args res_state res /\ resolve res_state)
  
  predicate unnest (self : t_F) (_1 : t_F)
  
  function unnest_trans (self : t_F) (b : t_F) (c : t_F) : ()
  
  axiom unnest_trans_spec : forall self : t_F, b : t_F, c : t_F . ([%#sops'7] unnest self b)
   -> ([%#sops'8] unnest b c)  -> ([%#sops'9] unnest self c)
  
  function unnest_refl (self : t_F) : ()
  
  axiom unnest_refl_spec : forall self : t_F . [%#sops'6] unnest self self
  
  function postcondition_mut_unnest (self : t_F) (args : UInt32.t) (res_state : t_F) (res : ()) : ()
  
  axiom postcondition_mut_unnest_spec : forall self : t_F, args : UInt32.t, res_state : t_F, res : () . ([%#sops'4] postcondition_mut self args res_state res)
   -> ([%#sops'5] unnest self res_state)
  
  predicate postcondition (self : t_F) (args : UInt32.t) (result : ())
  
  function fn_once (self : t_F) (args : UInt32.t) (res : ()) : ()
  
  axiom fn_once_spec : forall self : t_F, args : UInt32.t, res : () . [%#sops'3] postcondition_once self args res
  = (resolve self /\ postcondition self args res)
  
  function fn_mut (self : t_F) (args : UInt32.t) (res_state : t_F) (res : ()) : ()
  
  axiom fn_mut_spec : forall self : t_F, args : UInt32.t, res_state : t_F, res : () . [%#sops'2] postcondition_mut self args res_state res
  = (self = res_state /\ postcondition self args res)
  
  let rec call (self_:t_F) (arg:UInt32.t) (return'  (x:()))= {[@expl:call 'self_' type invariant] [%#sops] inv'0 self_}
    {[@expl:call requires] [%#sops'0] precondition self_ arg}
    any [ return''0 (result:())-> {[%#sops'1] postcondition self_ arg result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec closure_param[#"03_generic_bound.rs" 5 0 5 34] (f:t_F) (return'  (x:()))= {[@expl:closure_param 'f' type invariant] [%#s03_generic_bound'0] inv f}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- [%#s03_generic_bound] (0 : UInt32.t) ] s1
      | s1 = call {f'0} {_3} (fun (_ret:()) ->  [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv f'0} s1 | s1 = -{resolve f'0}- s2 | s2 = bb2 ] 
    | bb2 = return''0 {_0} ]
    ) [ & _0 : () = Any.any_l () | & f'0 : t_F = f | & _3 : UInt32.t = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
module M_03_generic_bound__caller [#"03_generic_bound.rs" 9 0 9 15]
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  let rec closure0[#"03_generic_bound.rs" 10 18 10 27] [@coma:extspec] (self:()) (_x:UInt32.t) (return'  (x:()))= bb0
    [ bb0 = return''0 {_0} ]
     [ & _0 : () = Any.any_l () ]  [ return''0 (result:())-> return' {result} ] 
  
  let rec closure_param (f:()) (return'  (x:()))= any [ return''0 (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec caller[#"03_generic_bound.rs" 9 0 9 15] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- () ] s1 | s1 = closure_param {_1} (fun (_ret:()) ->  [ &_0 <- _ret ] s2) | s2 = bb1 ] 
    | bb1 = return''0 {_0} ]
    ) [ & _0 : () = Any.any_l () | & _1 : () = Any.any_l () ]  [ return''0 (result:())-> (! return' {result}) ] 
end
