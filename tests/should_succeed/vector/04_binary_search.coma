module M_04_binary_search__binary_search [#"04_binary_search.rs" 26 0 26 71]
  let%span s04_binary_search0 = "04_binary_search.rs" 27 20 27 21
  let%span s04_binary_search1 = "04_binary_search.rs" 28 19 28 20
  let%span s04_binary_search2 = "04_binary_search.rs" 31 19 31 20
  let%span s04_binary_search3 = "04_binary_search.rs" 35 16 35 90
  let%span s04_binary_search4 = "04_binary_search.rs" 34 16 34 62
  let%span s04_binary_search5 = "04_binary_search.rs" 33 16 33 56
  let%span s04_binary_search6 = "04_binary_search.rs" 36 17 36 18
  let%span s04_binary_search7 = "04_binary_search.rs" 37 26 37 27
  let%span s04_binary_search8 = "04_binary_search.rs" 37 19 37 27
  let%span s04_binary_search9 = "04_binary_search.rs" 48 19 48 20
  let%span s04_binary_search10 = "04_binary_search.rs" 19 11 19 36
  let%span s04_binary_search11 = "04_binary_search.rs" 20 11 20 23
  let%span s04_binary_search12 = "04_binary_search.rs" 21 10 21 61
  let%span s04_binary_search13 = "04_binary_search.rs" 22 10 23 46
  let%span s04_binary_search14 = "04_binary_search.rs" 24 10 25 63
  let%span svec15 = "../../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span smodel16 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex17 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec19 = "../../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span s04_binary_search20 = "04_binary_search.rs" 16 4 16 31
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sord22 = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord23 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord24 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord25 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord26 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord27 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord28 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord29 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord30 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord31 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord32 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord33 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord34 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord35 = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord36 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord37 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord38 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord39 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord40 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord41 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord42 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord43 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord44 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord45 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord46 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord47 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sslice48 = "../../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span sslice49 = "../../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span s04_binary_search50 = "04_binary_search.rs" 10 8 10 74
  let%span sord51 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  let%span sord52 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'1 (self : t_Vec'0) : Seq.seq UInt32.t
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec21] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt32.t =
    [%#smodel16] view'1 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'0 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec15] UInt64.t'int result = Seq.length (view'0 self)} (! return' {result}) ]
  
  
  type t_Result'0  =
    | C_Ok'0 UInt64.t
    | C_Err'0 UInt64.t
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : UInt32.t) (o : UInt32.t) : t_Ordering'0 =
    [%#sord51] if UInt32.lt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord34] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord32] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord33] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt32.t, y : UInt32.t . ([%#sord30] cmp_log'0 x y = C_Less'0)
   -> ([%#sord31] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt32.t) (y : UInt32.t) (z : UInt32.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt32.t, y : UInt32.t, z : UInt32.t, o : t_Ordering'0 . ([%#sord27] cmp_log'0 x y
  = o)  -> ([%#sord28] cmp_log'0 y z = o)  -> ([%#sord29] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt32.t) : ()
  
  axiom refl'0_spec : forall x : UInt32.t . [%#sord26] cmp_log'0 x x = C_Equal'0
  
  function cmp_gt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord25] UInt32.gt x y = (cmp_log'0 x y = C_Greater'0)
  
  function cmp_ge_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord24] UInt32.ge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord23] UInt32.lt x y = (cmp_log'0 x y = C_Less'0)
  
  function cmp_le_log'0 (x : UInt32.t) (y : UInt32.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt32.t, y : UInt32.t . [%#sord22] UInt32.le x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt32.t =
    [%#sindex17] Seq.get (view'1 self) ix
  
  function cmp_log'1 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord52] if UInt64.lt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord47] (x = y) = (cmp_log'1 x y = C_Equal'0)
  
  function antisym2'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord45] cmp_log'1 x y = C_Greater'0)
   -> ([%#sord46] cmp_log'1 y x = C_Less'0)
  
  function antisym1'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord43] cmp_log'1 x y = C_Less'0)
   -> ([%#sord44] cmp_log'1 y x = C_Greater'0)
  
  function trans'1 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'1_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord40] cmp_log'1 x y
  = o)  -> ([%#sord41] cmp_log'1 y z = o)  -> ([%#sord42] cmp_log'1 x z = o)
  
  function refl'1 (x : UInt64.t) : ()
  
  axiom refl'1_spec : forall x : UInt64.t . [%#sord39] cmp_log'1 x x = C_Equal'0
  
  function cmp_gt_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord38] UInt64.gt x y = (cmp_log'1 x y = C_Greater'0)
  
  function cmp_ge_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord37] UInt64.ge x y = (cmp_log'1 x y <> C_Less'0)
  
  function cmp_lt_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord36] UInt64.lt x y = (cmp_log'1 x y = C_Less'0)
  
  function cmp_le_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord35] UInt64.le x y
  = (cmp_log'1 x y <> C_Greater'0)
  
  predicate inv'1 (_1 : UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : UInt64.t [inv'1 x] . inv'1 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt32.t) =
    [%#sslice48] UInt64.t'int self < Seq.length seq
  
  predicate inv'2 (_1 : UInt32.t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : UInt32.t [inv'2 x] . inv'2 x = true
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt32.t) (out : UInt32.t) =
    [%#sslice49] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:UInt32.t))= {[@expl:index 'self' type invariant] inv'0 self}
    {[@expl:index 'index' type invariant] inv'1 index}
    {[@expl:index requires] [%#svec18] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:UInt32.t)-> {inv'2 result}
      {[%#svec19] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
  
  
  predicate sorted_range'0 [#"04_binary_search.rs" 8 0 8 52] (s : Seq.seq UInt32.t) (l : int) (u : int) =
    [%#s04_binary_search50] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> UInt32.le (Seq.get s i) (Seq.get s j)
  
  predicate sorted'0 [#"04_binary_search.rs" 15 0 15 30] (s : Seq.seq UInt32.t) =
    [%#s04_binary_search20] sorted_range'0 s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search'0[#"04_binary_search.rs" 26 0 26 71] (arr:t_Vec'0) (elem:UInt32.t) (return'  (ret:t_Result'0))= {[@expl:binary_search requires #0] [%#s04_binary_search10] Seq.length (view'0 arr)
    <= UInt64.t'int (v_MAX'0 : UInt64.t)}
    {[@expl:binary_search requires #1] [%#s04_binary_search11] sorted'0 (view'0 arr)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {arr} (fun (_ret':UInt64.t) ->  [ &_10 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_9 <- _10 = ([%#s04_binary_search0] (0 : UInt64.t)) ] s1
      | s1 = any [ br0 -> {_9 = false} (! bb3) | br1 -> {_9} (! bb2) ]  ]
    
    | bb2 = s0 [ s0 =  [ &_0 <- C_Err'0 ([%#s04_binary_search1] (0 : UInt64.t)) ] s1 | s1 = bb21 ] 
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':UInt64.t) ->  [ &size <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &base <- [%#s04_binary_search2] (0 : UInt64.t) ] s1 | s1 = bb5 ] 
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant #0] [%#s04_binary_search5] 0 < UInt64.t'int size
        /\ UInt64.t'int size + UInt64.t'int base <= Seq.length (view'0 arr)}
        {[@expl:loop invariant #1] [%#s04_binary_search4] forall i : UInt64.t . UInt64.lt i base
         -> UInt32.le (index_logic'0 arr (UInt64.t'int i)) elem}
        {[@expl:loop invariant #2] [%#s04_binary_search3] forall i : UInt64.t . UInt64.t'int base + UInt64.t'int size
        < UInt64.t'int i
        /\ UInt64.t'int i < Seq.length (view'0 arr)  -> UInt32.lt elem (index_logic'0 arr (UInt64.t'int i))}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 =  [ &_22 <- UInt64.gt size ([%#s04_binary_search6] (1 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_22 = false} (! bb13) | br1 -> {_22} (! bb7) ]  ]
        
        | bb7 = s0
          [ s0 =  [ &_26 <- ([%#s04_binary_search7] (2 : UInt64.t)) = ([%#s04_binary_search8] (0 : UInt64.t)) ] s1
          | s1 = {[@expl:division by zero] [%#s04_binary_search8] not _26} s2
          | s2 = bb8 ]
        
        | bb8 = s0
          [ s0 = UInt64.div {size} {[%#s04_binary_search7] (2 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &half <- _ret' ] s1)
          | s1 = UInt64.add {base} {half} (fun (_ret':UInt64.t) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':UInt32.t) ->  [ &_33 <- _ret' ] s3)
          | s3 = bb9 ]
        
        | bb9 = s0
          [ s0 =  [ &_31 <- UInt32.gt _33 elem ] s1
          | s1 = any [ br0 -> {_31 = false} (! bb11) | br1 -> {_31} (! bb10) ]  ]
        
        | bb10 = s0 [ s0 =  [ &_30 <- base ] s1 | s1 = bb12 ] 
        | bb11 = s0 [ s0 =  [ &_30 <- mid ] s1 | s1 = bb12 ] 
        | bb12 = s0
          [ s0 =  [ &base <- _30 ] s1
          | s1 = UInt64.sub {size} {half} (fun (_ret':UInt64.t) ->  [ &size <- _ret' ] s2)
          | s2 = bb5 ]
         ]
       ]
    
    | bb13 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':UInt32.t) ->  [ &_40 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 =  [ &cmp <- _40 ] s1
      | s1 =  [ &_43 <- cmp = elem ] s2
      | s2 = any [ br0 -> {_43 = false} (! bb16) | br1 -> {_43} (! bb15) ]  ]
    
    | bb15 = s0 [ s0 =  [ &_0 <- C_Ok'0 base ] s1 | s1 = bb20 ] 
    | bb16 = s0
      [ s0 =  [ &_47 <- UInt32.lt cmp elem ] s1 | s1 = any [ br0 -> {_47 = false} (! bb18) | br1 -> {_47} (! bb17) ]  ]
    
    | bb17 = s0
      [ s0 = UInt64.add {base} {[%#s04_binary_search9] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_50 <- _ret' ] s1)
      | s1 =  [ &_0 <- C_Err'0 _50 ] s2
      | s2 = bb19 ]
    
    | bb18 = s0 [ s0 =  [ &_0 <- C_Err'0 base ] s1 | s1 = bb19 ] 
    | bb19 = bb20
    | bb20 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : t_Result'0 = Any.any_l ()
    | & arr : t_Vec'0 = arr
    | & elem : UInt32.t = elem
    | & _9 : bool = Any.any_l ()
    | & _10 : UInt64.t = Any.any_l ()
    | & size : UInt64.t = Any.any_l ()
    | & base : UInt64.t = Any.any_l ()
    | & _22 : bool = Any.any_l ()
    | & half : UInt64.t = Any.any_l ()
    | & _26 : bool = Any.any_l ()
    | & mid : UInt64.t = Any.any_l ()
    | & _30 : UInt64.t = Any.any_l ()
    | & _31 : bool = Any.any_l ()
    | & _33 : UInt32.t = Any.any_l ()
    | & cmp : UInt32.t = Any.any_l ()
    | & _40 : UInt32.t = Any.any_l ()
    | & _43 : bool = Any.any_l ()
    | & _47 : bool = Any.any_l ()
    | & _50 : UInt64.t = Any.any_l () ]
    
    [ return' (result:t_Result'0)-> {[@expl:binary_search ensures #0] [%#s04_binary_search12] forall x : UInt64.t . result
      = C_Ok'0 x  -> index_logic'0 arr (UInt64.t'int x) = elem}
      {[@expl:binary_search ensures #1] [%#s04_binary_search13] forall x : UInt64.t . result = C_Err'0 x
       -> (forall i : UInt64.t . UInt64.lt i x  -> UInt32.le (index_logic'0 arr (UInt64.t'int i)) elem)}
      {[@expl:binary_search ensures #2] [%#s04_binary_search14] forall x : UInt64.t . result = C_Err'0 x
       -> (forall i : UInt64.t . UInt64.lt x i /\ UInt64.t'int i < Seq.length (view'0 arr)
       -> UInt32.lt elem (index_logic'0 arr (UInt64.t'int i)))}
      (! return' {result}) ]

end
