module M_09_capacity__change_capacity [#"09_capacity.rs" 6 0 6 41]
  let%span s09_capacity0 = "09_capacity.rs" 7 14 7 17
  let%span s09_capacity1 = "09_capacity.rs" 8 20 8 23
  let%span s09_capacity2 = "09_capacity.rs" 10 16 10 17
  let%span s09_capacity3 = "09_capacity.rs" 6 26 6 27
  let%span s09_capacity4 = "09_capacity.rs" 4 10 4 33
  let%span s09_capacity5 = "09_capacity.rs" 5 10 5 67
  let%span svec6 = "../../../creusot-contracts/src/std/vec.rs" 124 26 124 43
  let%span svec7 = "../../../creusot-contracts/src/std/vec.rs" 128 26 128 43
  let%span svec8 = "../../../creusot-contracts/src/std/vec.rs" 132 26 132 43
  let%span svec9 = "../../../creusot-contracts/src/std/vec.rs" 136 26 136 43
  let%span svec10 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span smodel11 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sindex12 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sresolve13 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 71 20 71 41
  let%span sinvariant15 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sseq16 = "../../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed17 = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_T'0
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate invariant'3 (self : t_T'0) =
    [%#sboxed17] inv'4 self
  
  predicate inv'3 (_1 : t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_T'0) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec10] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec14] inv'2 (view'0 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'1 (self : MutBorrow.t t_Vec'0) =
    [%#sinvariant15] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  function view'1 (self : MutBorrow.t t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel11] view'0 self.current
  
  let rec reserve'0 (self:MutBorrow.t t_Vec'0) (additional:UInt64.t) (return'  (ret:()))= {[@expl:reserve 'self' type invariant] inv'1 self}
    any [ return' (result:())-> {[%#svec6] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  let rec reserve_exact'0 (self:MutBorrow.t t_Vec'0) (additional:UInt64.t) (return'  (ret:()))= {[@expl:reserve_exact 'self' type invariant] inv'1 self}
    any [ return' (result:())-> {[%#svec7] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  let rec shrink_to_fit'0 (self:MutBorrow.t t_Vec'0) (return'  (ret:()))= {[@expl:shrink_to_fit 'self' type invariant] inv'1 self}
    any [ return' (result:())-> {[%#svec8] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  let rec shrink_to'0 (self:MutBorrow.t t_Vec'0) (min_capacity:UInt64.t) (return'  (ret:()))= {[@expl:shrink_to 'self' type invariant] inv'1 self}
    any [ return' (result:())-> {[%#svec9] view'0 self.final = view'1 self} (! return' {result}) ] 
  
  predicate resolve'1 (self : MutBorrow.t t_Vec'0) =
    [%#sresolve13] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_Vec'0) =
    resolve'1 _1
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex12] Seq.get (view'0 self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec change_capacity'0[#"09_capacity.rs" 6 0 6 41] (v:MutBorrow.t t_Vec'0) (return'  (ret:()))= {[@expl:change_capacity 'v' type invariant] [%#s09_capacity3] inv'1 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 v.current}
        MutBorrow.borrow_mut <t_Vec'0> {v.current}
          (fun (_ret':MutBorrow.t t_Vec'0) ->
             [ &_5 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final } ] 
            s1)
      | s1 = reserve'0 {_5} {[%#s09_capacity0] (100 : UInt64.t)} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = {inv'0 v.current}
        MutBorrow.borrow_mut <t_Vec'0> {v.current}
          (fun (_ret':MutBorrow.t t_Vec'0) ->
             [ &_7 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final } ] 
            s1)
      | s1 = reserve_exact'0 {_7} {[%#s09_capacity1] (200 : UInt64.t)} (fun (_ret':()) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = {inv'0 v.current}
        MutBorrow.borrow_mut <t_Vec'0> {v.current}
          (fun (_ret':MutBorrow.t t_Vec'0) ->
             [ &_9 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final } ] 
            s1)
      | s1 = shrink_to_fit'0 {_9} (fun (_ret':()) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = {inv'0 v.current}
        MutBorrow.borrow_final <t_Vec'0> {v.current} {MutBorrow.get_id v}
          (fun (_ret':MutBorrow.t t_Vec'0) ->
             [ &_11 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final } ] 
            s1)
      | s1 = shrink_to'0 {_11} {[%#s09_capacity2] (1 : UInt64.t)} (fun (_ret':()) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb4 ]
    
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'1 v} s1 | s1 = -{resolve'0 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & v : MutBorrow.t t_Vec'0 = v
    | & _4 : () = Any.any_l ()
    | & _5 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _6 : () = Any.any_l ()
    | & _7 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _8 : () = Any.any_l ()
    | & _9 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _10 : () = Any.any_l ()
    | & _11 : MutBorrow.t t_Vec'0 = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:change_capacity ensures #0] [%#s09_capacity4] Seq.length (view'0 v.final)
      = Seq.length (view'1 v)}
      {[@expl:change_capacity ensures #1] [%#s09_capacity5] forall i : int . 0 <= i /\ i < Seq.length (view'1 v)
       -> index_logic'0 v.final i = index_logic'0 v.current i}
      (! return' {result}) ]

end
module M_09_capacity__clear_vec [#"09_capacity.rs" 14 0 14 35]
  let%span s09_capacity0 = "09_capacity.rs" 14 20 14 21
  let%span s09_capacity1 = "09_capacity.rs" 13 10 13 26
  let%span svec2 = "../../../creusot-contracts/src/std/vec.rs" 140 26 140 45
  let%span svec3 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sresolve4 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec5 = "../../../creusot-contracts/src/std/vec.rs" 71 20 71 41
  let%span sinvariant6 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sseq7 = "../../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed8 = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_T'0
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate invariant'3 (self : t_T'0) =
    [%#sboxed8] inv'4 self
  
  predicate inv'3 (_1 : t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_T'0) =
    [%#sseq7] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec3] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec5] inv'2 (view'0 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'1 (self : MutBorrow.t t_Vec'0) =
    [%#sinvariant6] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  let rec clear'0 (self:MutBorrow.t t_Vec'0) (return'  (ret:()))= {[@expl:clear 'self' type invariant] inv'1 self}
    any [ return' (result:())-> {[%#svec2] Seq.length (view'0 self.final) = 0} (! return' {result}) ] 
  
  predicate resolve'1 (self : MutBorrow.t t_Vec'0) =
    [%#sresolve4] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_Vec'0) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec clear_vec'0[#"09_capacity.rs" 14 0 14 35] (v:MutBorrow.t t_Vec'0) (return'  (ret:()))= {[@expl:clear_vec 'v' type invariant] [%#s09_capacity0] inv'1 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 v.current}
        MutBorrow.borrow_final <t_Vec'0> {v.current} {MutBorrow.get_id v}
          (fun (_ret':MutBorrow.t t_Vec'0) ->
             [ &_4 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final } ] 
            s1)
      | s1 = clear'0 {_4} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 v} s1 | s1 = -{resolve'0 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & v : MutBorrow.t t_Vec'0 = v
    | & _3 : () = Any.any_l ()
    | & _4 : MutBorrow.t t_Vec'0 = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:clear_vec ensures] [%#s09_capacity1] Seq.length (view'0 v.final) = 0}
      (! return' {result}) ]

end
