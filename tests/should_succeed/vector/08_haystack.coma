module M_08_haystack__search [#"08_haystack.rs" 21 0 21 60]
  let%span s08_haystack0 = "08_haystack.rs" 23 17 23 18
  let%span s08_haystack1 = "08_haystack.rs" 23 8 23 11
  let%span s08_haystack2 = "08_haystack.rs" 23 8 23 11
  let%span s08_haystack3 = "08_haystack.rs" 22 16 22 110
  let%span s08_haystack4 = "08_haystack.rs" 23 8 23 11
  let%span s08_haystack5 = "08_haystack.rs" 23 8 23 11
  let%span s08_haystack6 = "08_haystack.rs" 25 17 25 18
  let%span s08_haystack7 = "08_haystack.rs" 25 8 25 11
  let%span s08_haystack8 = "08_haystack.rs" 25 8 25 11
  let%span s08_haystack9 = "08_haystack.rs" 24 20 24 66
  let%span s08_haystack10 = "08_haystack.rs" 25 8 25 11
  let%span s08_haystack11 = "08_haystack.rs" 25 8 25 11
  let%span s08_haystack12 = "08_haystack.rs" 15 11 15 65
  let%span s08_haystack13 = "08_haystack.rs" 16 10 16 85
  let%span s08_haystack14 = "08_haystack.rs" 17 10 19 106
  let%span s08_haystack15 = "08_haystack.rs" 20 10 20 137
  let%span svec16 = "../../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span sops17 = "../../../creusot-contracts/src/std/ops.rs" 226 26 226 53
  let%span sops18 = "../../../creusot-contracts/src/std/ops.rs" 227 26 227 49
  let%span sops19 = "../../../creusot-contracts/src/std/ops.rs" 228 26 228 91
  let%span siter20 = "../../../creusot-contracts/src/std/iter.rs" 206 27 206 47
  let%span siter21 = "../../../creusot-contracts/src/std/iter.rs" 207 26 207 53
  let%span s08_haystack22 = "08_haystack.rs" 8 16 11 62
  let%span smodel23 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span srange24 = "../../../creusot-contracts/src/std/iter/range.rs" 97 12 101 76
  let%span siter25 = "../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span srange26 = "../../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span svec27 = "../../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec28 = "../../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span snum29 = "../../../creusot-contracts/src/std/num.rs" 25 28 25 33
  let%span sops30 = "../../../creusot-contracts/src/std/ops.rs" 212 14 212 86
  let%span siter31 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter32 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span sindex33 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span srange35 = "../../../creusot-contracts/src/std/iter/range.rs" 107 14 107 45
  let%span srange36 = "../../../creusot-contracts/src/std/iter/range.rs" 108 27 108 29
  let%span srange37 = "../../../creusot-contracts/src/std/iter/range.rs" 112 15 112 32
  let%span srange38 = "../../../creusot-contracts/src/std/iter/range.rs" 113 15 113 32
  let%span srange39 = "../../../creusot-contracts/src/std/iter/range.rs" 114 14 114 42
  let%span srange40 = "../../../creusot-contracts/src/std/iter/range.rs" 115 91 115 93
  let%span srange41 = "../../../creusot-contracts/src/std/iter/range.rs" 75 10 75 43
  let%span srange42 = "../../../creusot-contracts/src/std/iter/range.rs" 78 8 79 74
  let%span srange43 = "../../../creusot-contracts/src/std/iter/range.rs" 89 12 89 57
  let%span sresolve44 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span srange45 = "../../../creusot-contracts/src/std/iter/range.rs" 35 14 35 45
  let%span srange46 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 32
  let%span srange47 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 32
  let%span srange48 = "../../../creusot-contracts/src/std/iter/range.rs" 42 14 42 42
  let%span srange49 = "../../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sslice50 = "../../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span sslice51 = "../../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'3 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = true
  
  use creusot.int.UInt64
  
  use seq.Seq
  
  use creusot.int.UInt8
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  function view'1 (self : t_Vec'0) : Seq.seq UInt8.t
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec34] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt8.t =
    [%#smodel23] view'1 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'3 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec16] UInt64.t'int result = Seq.length (view'0 self)} (! return' {result}) ]
  
  
  predicate inv'4 (_1 : UInt64.t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : UInt64.t [inv'4 x] . inv'4 x = true
  
  type t_RangeInclusive'0  =
    { t_RangeInclusive__start'0: UInt64.t; t_RangeInclusive__end'0: UInt64.t; t_RangeInclusive__exhausted'0: bool }
  
  predicate inv'0 (_1 : t_RangeInclusive'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_RangeInclusive'0 [inv'0 x] . inv'0 x = true
  
  function start_log'0 (self : t_RangeInclusive'0) : UInt64.t
  
  function end_log'0 (self : t_RangeInclusive'0) : UInt64.t
  
  function deep_model'0 (self : UInt64.t) : int =
    [%#snum29] UInt64.t'int self
  
  function is_empty_log'0 (self : t_RangeInclusive'0) : bool
  
  axiom is_empty_log'0_spec : forall self : t_RangeInclusive'0 . [%#sops30] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  let rec new'0 (start:UInt64.t) (end':UInt64.t) (return'  (ret:t_RangeInclusive'0))= {[@expl:new 'start' type invariant] inv'4 start}
    {[@expl:new 'end' type invariant] inv'4 end'}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'0 result}
      {[%#sops17] start_log'0 result = start}
      {[%#sops18] end_log'0 result = end'}
      {[%#sops19] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      (! return' {result}) ]
  
  
  predicate into_iter_pre'0 (self : t_RangeInclusive'0) =
    [%#siter31] true
  
  predicate into_iter_post'0 (self : t_RangeInclusive'0) (res : t_RangeInclusive'0) =
    [%#siter32] self = res
  
  let rec into_iter'0 (self:t_RangeInclusive'0) (return'  (ret:t_RangeInclusive'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter20] into_iter_pre'0 self}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'0 result}
      {[%#siter21] into_iter_post'0 self result}
      (! return' {result}) ]
  
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt8.t =
    [%#sindex33] Seq.get (view'1 self) ix
  
  predicate match_at'0 [#"08_haystack.rs" 7 0 7 77] (needle : t_Vec'0) (haystack : t_Vec'0) (pos : int) (len : int) =
    [%#s08_haystack22] len <= Seq.length (view'0 needle)
    /\ pos <= Seq.length (view'0 haystack) - len
    /\ (forall i : int . 0 <= i /\ i < len  -> index_logic'0 needle i = index_logic'0 haystack (pos + i))
  
  use seq.Seq
  
  function range_inclusive_len'0 (r : t_RangeInclusive'0) : int =
    [%#srange42] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : t_RangeInclusive'0 . [%#srange41] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  use seq.Seq
  
  predicate produces'0 (self : t_RangeInclusive'0) (visited : Seq.seq UInt64.t) (o : t_RangeInclusive'0) =
    [%#srange24] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'0 (a : t_RangeInclusive'0) (ab : Seq.seq UInt64.t) (b : t_RangeInclusive'0) (bc : Seq.seq UInt64.t) (c : t_RangeInclusive'0) : ()
  
   =
    [%#srange40] ()
  
  axiom produces_trans'0_spec : forall a : t_RangeInclusive'0, ab : Seq.seq UInt64.t, b : t_RangeInclusive'0, bc : Seq.seq UInt64.t, c : t_RangeInclusive'0 . ([%#srange37] produces'0 a ab b)
   -> ([%#srange38] produces'0 b bc c)  -> ([%#srange39] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_RangeInclusive'0) : () =
    [%#srange36] ()
  
  axiom produces_refl'0_spec : forall self : t_RangeInclusive'0 . [%#srange35] produces'0 self (Seq.empty : Seq.seq UInt64.t) self
  
  predicate inv'1 (_1 : Seq.seq UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq UInt64.t [inv'1 x] . inv'1 x = true
  
  use creusot.prelude.MutBorrow
  
  predicate inv'5 (_1 : MutBorrow.t t_RangeInclusive'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t t_RangeInclusive'0 [inv'5 x] . inv'5 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt64.t
  
  predicate inv'6 (_1 : t_Option'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'0 [inv'6 x] . inv'6 x = true
  
  predicate completed'0 (self : MutBorrow.t t_RangeInclusive'0) =
    [%#srange43] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_RangeInclusive'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'5 self}
    any
    [ return' (result:t_Option'0)-> {inv'6 result}
      {[%#siter25] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t t_RangeInclusive'0) =
    [%#sresolve44] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_RangeInclusive'0) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt64.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  type t_Range'0  =
    { t_Range__start'0: UInt64.t; t_Range__end'0: UInt64.t }
  
  predicate inv'2 (_1 : t_Range'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Range'0 [inv'2 x] . inv'2 x = true
  
  predicate into_iter_pre'1 (self : t_Range'0) =
    [%#siter31] true
  
  predicate into_iter_post'1 (self : t_Range'0) (res : t_Range'0) =
    [%#siter32] self = res
  
  let rec into_iter'1 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'2 self}
    {[@expl:into_iter requires] [%#siter20] into_iter_pre'1 self}
    any [ return' (result:t_Range'0)-> {inv'2 result} {[%#siter21] into_iter_post'1 self result} (! return' {result}) ] 
  
  predicate produces'1 (self : t_Range'0) (visited : Seq.seq UInt64.t) (o : t_Range'0) =
    [%#srange26] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'1 (a : t_Range'0) (ab : Seq.seq UInt64.t) (b : t_Range'0) (bc : Seq.seq UInt64.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'1_spec : forall a : t_Range'0, ab : Seq.seq UInt64.t, b : t_Range'0, bc : Seq.seq UInt64.t, c : t_Range'0 . ([%#srange46] produces'1 a ab b)
   -> ([%#srange47] produces'1 b bc c)  -> ([%#srange48] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_Range'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_Range'0 . [%#srange45] produces'1 self (Seq.empty : Seq.seq UInt64.t) self
  
  predicate inv'7 (_1 : MutBorrow.t t_Range'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : MutBorrow.t t_Range'0 [inv'7 x] . inv'7 x = true
  
  predicate resolve'3 (self : MutBorrow.t t_Range'0) =
    [%#sresolve44] self.final = self.current
  
  predicate completed'1 (self : MutBorrow.t t_Range'0) =
    [%#srange49] resolve'3 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  let rec next'1 (self:MutBorrow.t t_Range'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'7 self}
    any
    [ return' (result:t_Option'0)-> {inv'6 result}
      {[%#siter25] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'1 (_1 : MutBorrow.t t_Range'0) =
    resolve'3 _1
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) =
    [%#sslice50] UInt64.t'int self < Seq.length seq
  
  predicate inv'8 (_1 : UInt8.t)
  
  axiom inv_axiom'8 [@rewrite] : forall x : UInt8.t [inv'8 x] . inv'8 x = true
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt8.t) (out : UInt8.t) =
    [%#sslice51] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:UInt8.t))= {[@expl:index 'self' type invariant] inv'3 self}
    {[@expl:index 'index' type invariant] inv'4 index}
    {[@expl:index requires] [%#svec27] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:UInt8.t)-> {inv'8 result}
      {[%#svec28] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec search'0[#"08_haystack.rs" 21 0 21 60] (needle:t_Vec'0) (haystack:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:search requires] [%#s08_haystack12] Seq.length (view'0 needle)
    >= 1
    /\ Seq.length (view'0 needle) <= Seq.length (view'0 haystack)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {haystack} (fun (_ret':UInt64.t) ->  [ &_12 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {needle} (fun (_ret':UInt64.t) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UInt64.sub {_12} {_14} (fun (_ret':UInt64.t) ->  [ &_11 <- _ret' ] s1)
      | s1 = new'0 {[%#s08_haystack0] (0 : UInt64.t)} {_11} (fun (_ret':t_RangeInclusive'0) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 = into_iter'0 {_10} (fun (_ret':t_RangeInclusive'0) ->  [ &iter <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#s08_haystack1] iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#s08_haystack2] Seq.empty : Seq.seq UInt64.t ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:for invariant] [%#s08_haystack4] inv'1 produced}
        {[@expl:for invariant] [%#s08_haystack4] inv'0 iter}
        {[@expl:for invariant] [%#s08_haystack4] produces'0 iter_old produced iter}
        {[@expl:loop invariant] [%#s08_haystack3] forall k : int . 0 <= k /\ k < Seq.length produced
         -> not match_at'0 needle haystack k (Seq.length (view'0 needle))}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = MutBorrow.borrow_mut <t_RangeInclusive'0> {iter}
              (fun (_ret':MutBorrow.t t_RangeInclusive'0) ->  [ &_28 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_RangeInclusive'0> {_28.current} {MutBorrow.get_id _28}
              (fun (_ret':MutBorrow.t t_RangeInclusive'0) ->
                 [ &_27 <- _ret' ] 
                 [ &_28 <- { _28 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_27} (fun (_ret':t_Option'0) ->  [ &_26 <- _ret' ] s3)
          | s3 = bb9 ]
        
        | bb9 = s0
          [ s0 = -{resolve'0 _28}- s1
          | s1 = any [ br0 -> {_26 = C_None'0} (! bb12) | br1 (x0:UInt64.t)-> {_26 = C_Some'0 x0} (! bb11) ]  ]
        
        | bb11 = bb13
        | bb13 = s0
          [ s0 = v_Some'0 {_26} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_31 <- [%#s08_haystack5] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb14 ]
        
        | bb14 = s0
          [ s0 =  [ &produced <- _31 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 {needle} (fun (_ret':UInt64.t) ->  [ &_38 <- _ret' ] s3)
          | s3 = bb15 ]
        
        | bb15 = s0
          [ s0 =  [ &_37 <- { t_Range__start'0 = ([%#s08_haystack6] (0 : UInt64.t)); t_Range__end'0 = _38 } ] s1
          | s1 = into_iter'1 {_37} (fun (_ret':t_Range'0) ->  [ &iter1 <- _ret' ] s2)
          | s2 = bb16 ]
        
        | bb16 = s0 [ s0 =  [ &iter_old1 <- [%#s08_haystack7] iter1 ] s1 | s1 = bb17 ] 
        | bb17 = s0 [ s0 =  [ &produced1 <- [%#s08_haystack8] Seq.empty : Seq.seq UInt64.t ] s1 | s1 = bb18 ] 
        | bb18 = bb19
        | bb19 = bb19
          [ bb19 = {[@expl:for invariant] [%#s08_haystack10] inv'1 produced1}
            {[@expl:for invariant] [%#s08_haystack10] inv'2 iter1}
            {[@expl:for invariant] [%#s08_haystack10] produces'1 iter_old1 produced1 iter1}
            {[@expl:loop invariant] [%#s08_haystack9] match_at'0 needle haystack (UInt64.t'int i) (Seq.length produced1)}
            (! s0) [ s0 = bb20 ] 
            [ bb20 = s0
              [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter1}
                  (fun (_ret':MutBorrow.t t_Range'0) ->  [ &_51 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
              | s1 = MutBorrow.borrow_final <t_Range'0> {_51.current} {MutBorrow.get_id _51}
                  (fun (_ret':MutBorrow.t t_Range'0) ->
                     [ &_50 <- _ret' ] 
                     [ &_51 <- { _51 with current = _ret'.final } ] 
                    s2)
              | s2 = next'1 {_50} (fun (_ret':t_Option'0) ->  [ &_49 <- _ret' ] s3)
              | s3 = bb21 ]
            
            | bb21 = s0
              [ s0 = -{resolve'1 _51}- s1
              | s1 = any [ br0 -> {_49 = C_None'0} (! bb24) | br1 (x0:UInt64.t)-> {_49 = C_Some'0 x0} (! bb23) ]  ]
            
            | bb23 = bb25
            | bb25 = s0
              [ s0 = v_Some'0 {_49} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 =  [ &_54 <- [%#s08_haystack11] Seq.(++) produced1 (Seq.singleton __creusot_proc_iter_elem1) ] s2
              | s2 = bb26 ]
            
            | bb26 = s0
              [ s0 =  [ &produced1 <- _54 ] s1
              | s1 =  [ &j <- __creusot_proc_iter_elem1 ] s2
              | s2 = index'0 {needle} {j} (fun (_ret':UInt8.t) ->  [ &_59 <- _ret' ] s3)
              | s3 = bb27 ]
            
            | bb27 = s0
              [ s0 = UInt64.add {i} {j} (fun (_ret':UInt64.t) ->  [ &_65 <- _ret' ] s1)
              | s1 = index'0 {haystack} {_65} (fun (_ret':UInt8.t) ->  [ &_63 <- _ret' ] s2)
              | s2 = bb28 ]
            
            | bb28 = s0
              [ s0 =  [ &_57 <- _59 <> _63 ] s1 | s1 = any [ br0 -> {_57 = false} (! bb30) | br1 -> {_57} (! bb29) ]  ]
            
            | bb30 = bb19 ]
           ]
        
        | bb29 = bb7 ]
       ]
    
    | bb24 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = bb32 ] 
    | bb12 = s0 [ s0 = len'0 {haystack} (fun (_ret':UInt64.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb31 ] 
    | bb31 = bb32
    | bb32 = return' {_0} ]
    )
    [ & _0 : UInt64.t = Any.any_l ()
    | & needle : t_Vec'0 = needle
    | & haystack : t_Vec'0 = haystack
    | & iter : t_RangeInclusive'0 = Any.any_l ()
    | & _10 : t_RangeInclusive'0 = Any.any_l ()
    | & _11 : UInt64.t = Any.any_l ()
    | & _12 : UInt64.t = Any.any_l ()
    | & _14 : UInt64.t = Any.any_l ()
    | & iter_old : t_RangeInclusive'0 = Any.any_l ()
    | & produced : Seq.seq UInt64.t = Any.any_l ()
    | & _26 : t_Option'0 = Any.any_l ()
    | & _27 : MutBorrow.t t_RangeInclusive'0 = Any.any_l ()
    | & _28 : MutBorrow.t t_RangeInclusive'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : UInt64.t = Any.any_l ()
    | & _31 : Seq.seq UInt64.t = Any.any_l ()
    | & i : UInt64.t = Any.any_l ()
    | & iter1 : t_Range'0 = Any.any_l ()
    | & _37 : t_Range'0 = Any.any_l ()
    | & _38 : UInt64.t = Any.any_l ()
    | & iter_old1 : t_Range'0 = Any.any_l ()
    | & produced1 : Seq.seq UInt64.t = Any.any_l ()
    | & _49 : t_Option'0 = Any.any_l ()
    | & _50 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & _51 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & __creusot_proc_iter_elem1 : UInt64.t = Any.any_l ()
    | & _54 : Seq.seq UInt64.t = Any.any_l ()
    | & j : UInt64.t = Any.any_l ()
    | & _57 : bool = Any.any_l ()
    | & _59 : UInt8.t = Any.any_l ()
    | & _63 : UInt8.t = Any.any_l ()
    | & _65 : UInt64.t = Any.any_l () ]
    
    [ return' (result:UInt64.t)-> {[@expl:search ensures #0] [%#s08_haystack13] UInt64.t'int result
      = Seq.length (view'0 haystack)
      \/ UInt64.t'int result < Seq.length (view'0 haystack) - Seq.length (view'0 needle) + 1}
      {[@expl:search ensures #1] [%#s08_haystack14] UInt64.t'int result < Seq.length (view'0 haystack)
       -> match_at'0 needle haystack (UInt64.t'int result) (Seq.length (view'0 needle))
      /\ (forall i : int . 0 <= i /\ i < UInt64.t'int result
       -> not match_at'0 needle haystack i (Seq.length (view'0 needle)))}
      {[@expl:search ensures #2] [%#s08_haystack15] UInt64.t'int result = Seq.length (view'0 haystack)
       -> (forall i : int . 0 <= i /\ i < Seq.length (view'0 haystack)
       -> not match_at'0 needle haystack i (Seq.length (view'0 needle)))}
      (! return' {result}) ]

end
