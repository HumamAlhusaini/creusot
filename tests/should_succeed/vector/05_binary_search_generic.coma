module M_05_binary_search_generic__binary_search [#"05_binary_search_generic.rs" 27 0 29 29]
  let%span s05_binary_search_generic0 = "05_binary_search_generic.rs" 31 20 31 21
  let%span s05_binary_search_generic1 = "05_binary_search_generic.rs" 32 19 32 20
  let%span s05_binary_search_generic2 = "05_binary_search_generic.rs" 35 26 35 27
  let%span s05_binary_search_generic3 = "05_binary_search_generic.rs" 39 16 39 117
  let%span s05_binary_search_generic4 = "05_binary_search_generic.rs" 38 16 38 88
  let%span s05_binary_search_generic5 = "05_binary_search_generic.rs" 37 16 37 56
  let%span s05_binary_search_generic6 = "05_binary_search_generic.rs" 40 17 40 18
  let%span s05_binary_search_generic7 = "05_binary_search_generic.rs" 41 26 41 27
  let%span s05_binary_search_generic8 = "05_binary_search_generic.rs" 41 19 41 27
  let%span s05_binary_search_generic9 = "05_binary_search_generic.rs" 53 37 53 38
  let%span s05_binary_search_generic10 = "05_binary_search_generic.rs" 27 41 27 44
  let%span s05_binary_search_generic11 = "05_binary_search_generic.rs" 27 55 27 59
  let%span s05_binary_search_generic12 = "05_binary_search_generic.rs" 20 11 20 36
  let%span s05_binary_search_generic13 = "05_binary_search_generic.rs" 21 11 21 35
  let%span s05_binary_search_generic14 = "05_binary_search_generic.rs" 22 10 22 87
  let%span s05_binary_search_generic15 = "05_binary_search_generic.rs" 23 10 24 72
  let%span s05_binary_search_generic16 = "05_binary_search_generic.rs" 25 10 26 90
  let%span svec17 = "../../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span smodel18 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span smodel19 = "../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span svec20 = "../../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span scmp22 = "../../../creusot-contracts/src/std/cmp.rs" 51 26 51 76
  let%span scmp23 = "../../../creusot-contracts/src/std/cmp.rs" 72 26 72 85
  let%span s05_binary_search_generic24 = "05_binary_search_generic.rs" 17 4 17 31
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sord26 = "../../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord27 = "../../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord28 = "../../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord29 = "../../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord30 = "../../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord31 = "../../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord32 = "../../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord33 = "../../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord34 = "../../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord35 = "../../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord36 = "../../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord37 = "../../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord38 = "../../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span svec39 = "../../../creusot-contracts/src/std/vec.rs" 33 14 33 47
  let%span svec40 = "../../../creusot-contracts/src/std/vec.rs" 34 14 35 51
  let%span sord41 = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord42 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord43 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord44 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord45 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord46 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord47 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord48 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord49 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord50 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord51 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord52 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord53 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sslice54 = "../../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span sslice55 = "../../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span s05_binary_search_generic56 = "05_binary_search_generic.rs" 11 8 11 75
  let%span sindex57 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sord58 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  let%span sinvariant59 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span svec60 = "../../../creusot-contracts/src/std/vec.rs" 71 20 71 41
  let%span sseq61 = "../../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed62 = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_T'0
  
  use seq.Seq
  
  use mach.int.Int
  
  use seq.Seq
  
  predicate inv'0 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed62] inv'0 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq61] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_T'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'1 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec25] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec60] inv'5 (view'1 self)
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#sinvariant59] inv'4 self
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  function view'0 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel18] view'1 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'1 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec17] UInt64.t'int result = Seq.length (view'0 self)} (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : t_T'0)
  
  type t_Result'0  =
    | C_Ok'0 UInt64.t
    | C_Err'0 UInt64.t
  
  type t_DeepModelTy'0
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (other : t_DeepModelTy'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord38] (x = y)
  = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord36] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord37] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord34] cmp_log'0 x y = C_Less'0)
   -> ([%#sord35] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : t_Ordering'0 . ([%#sord31] cmp_log'0 x y
  = o)  -> ([%#sord32] cmp_log'0 y z = o)  -> ([%#sord33] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord30] cmp_log'0 x x = C_Equal'0
  
  predicate gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord29] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  predicate ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord28] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  predicate lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord27] lt_log'0 x y
  = (cmp_log'0 x y = C_Less'0)
  
  predicate le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord26] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  function deep_model'0 (self : t_T'0) : t_DeepModelTy'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex57] Seq.get (view'1 self) ix
  
  function deep_model'2 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'2_spec : forall self : t_Vec'0 . ([%#svec39] Seq.length (view'1 self)
  = Seq.length (deep_model'2 self))
  && ([%#svec40] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)
   -> Seq.get (deep_model'2 self) i = deep_model'0 (index_logic'0 self i))
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0 =
    [%#smodel19] deep_model'2 self
  
  use creusot.int.UInt64
  
  function cmp_log'1 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord58] if UInt64.lt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord53] (x = y) = (cmp_log'1 x y = C_Equal'0)
  
  function antisym2'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord51] cmp_log'1 x y = C_Greater'0)
   -> ([%#sord52] cmp_log'1 y x = C_Less'0)
  
  function antisym1'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'1_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord49] cmp_log'1 x y = C_Less'0)
   -> ([%#sord50] cmp_log'1 y x = C_Greater'0)
  
  function trans'1 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'1_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord46] cmp_log'1 x y
  = o)  -> ([%#sord47] cmp_log'1 y z = o)  -> ([%#sord48] cmp_log'1 x z = o)
  
  function refl'1 (x : UInt64.t) : ()
  
  axiom refl'1_spec : forall x : UInt64.t . [%#sord45] cmp_log'1 x x = C_Equal'0
  
  use creusot.int.UInt64
  
  function cmp_gt_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord44] UInt64.gt x y = (cmp_log'1 x y = C_Greater'0)
  
  use creusot.int.UInt64
  
  function cmp_ge_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord43] UInt64.ge x y = (cmp_log'1 x y <> C_Less'0)
  
  function cmp_lt_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord42] UInt64.lt x y = (cmp_log'1 x y = C_Less'0)
  
  use creusot.int.UInt64
  
  function cmp_le_log'1 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'1_spec : forall x : UInt64.t, y : UInt64.t . [%#sord41] UInt64.le x y
  = (cmp_log'1 x y <> C_Greater'0)
  
  predicate inv'2 (_1 : UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : UInt64.t [inv'2 x] . inv'2 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) =
    [%#sslice54] UInt64.t'int self < Seq.length seq
  
  predicate invariant'1 (self : t_T'0) =
    [%#sinvariant59] inv'0 self
  
  predicate inv'3 (_1 : t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_T'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice55] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] inv'1 self}
    {[@expl:index 'index' type invariant] inv'2 index}
    {[@expl:index requires] [%#svec20] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:t_T'0)-> {inv'3 result} {[%#svec21] has_value'0 index (view'0 self) result} (! return' {result}) ]
  
  
  function deep_model'3 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel19] deep_model'0 self
  
  let rec gt'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:gt 'self' type invariant] inv'3 self}
    {[@expl:gt 'other' type invariant] inv'3 other}
    any
    [ return' (result:bool)-> {[%#scmp22] result = gt_log'0 (deep_model'3 self) (deep_model'3 other)}
      (! return' {result}) ]
  
  
  let rec cmp'0 (self:t_T'0) (other:t_T'0) (return'  (ret:t_Ordering'0))= {[@expl:cmp 'self' type invariant] inv'3 self}
    {[@expl:cmp 'other' type invariant] inv'3 other}
    any
    [ return' (result:t_Ordering'0)-> {[%#scmp23] result = cmp_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  predicate sorted_range'0 [#"05_binary_search_generic.rs" 9 0 9 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int) =
    [%#s05_binary_search_generic56] forall i : int, j : int . l <= i /\ i <= j /\ j < u
     -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  predicate sorted'0 [#"05_binary_search_generic.rs" 16 0 16 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#s05_binary_search_generic24] sorted_range'0 s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search'0[#"05_binary_search_generic.rs" 27 0 29 29] (arr:t_Vec'0) (elem:t_T'0) (return'  (ret:t_Result'0))= {[@expl:binary_search 'arr' type invariant] [%#s05_binary_search_generic10] inv'1 arr}
    {[@expl:binary_search 'elem' type invariant] [%#s05_binary_search_generic11] inv'0 elem}
    {[@expl:binary_search requires #0] [%#s05_binary_search_generic12] Seq.length (view'0 arr)
    <= UInt64.t'int (v_MAX'0 : UInt64.t)}
    {[@expl:binary_search requires #1] [%#s05_binary_search_generic13] sorted'0 (deep_model'1 arr)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':UInt64.t) ->  [ &_10 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_9 <- _10 = ([%#s05_binary_search_generic0] (0 : UInt64.t)) ] s1
      | s1 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb5) ]  ]
    
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 elem} s1
      | s1 = -{resolve'0 elem}- s2
      | s2 =  [ &_0 <- C_Err'0 ([%#s05_binary_search_generic1] (0 : UInt64.t)) ] s3
      | s3 = bb29 ]
    
    | bb6 = s0 [ s0 = len'0 {arr} (fun (_ret':UInt64.t) ->  [ &size <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 =  [ &base <- [%#s05_binary_search_generic2] (0 : UInt64.t) ] s1 | s1 = bb8 ] 
    | bb8 = bb8
      [ bb8 = {[@expl:loop invariant #0] [%#s05_binary_search_generic5] 0 < UInt64.t'int size
        /\ UInt64.t'int size + UInt64.t'int base <= Seq.length (view'0 arr)}
        {[@expl:loop invariant #1] [%#s05_binary_search_generic4] forall i : UInt64.t . UInt64.lt i base
         -> le_log'0 (Seq.get (deep_model'1 arr) (UInt64.t'int i)) (deep_model'0 elem)}
        {[@expl:loop invariant #2] [%#s05_binary_search_generic3] forall i : UInt64.t . UInt64.t'int base
        + UInt64.t'int size
        <= UInt64.t'int i
        /\ UInt64.t'int i < Seq.length (view'0 arr)
         -> lt_log'0 (deep_model'0 elem) (Seq.get (deep_model'1 arr) (UInt64.t'int i))}
        (! s0) [ s0 = bb9 ] 
        [ bb9 = bb10
        | bb10 = bb11
        | bb11 = s0
          [ s0 =  [ &_22 <- UInt64.gt size ([%#s05_binary_search_generic6] (1 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_22 = false} (! bb19) | br1 -> {_22} (! bb12) ]  ]
        
        | bb12 = s0
          [ s0 = 
            [ &_26 <- ([%#s05_binary_search_generic7] (2 : UInt64.t))
            = ([%#s05_binary_search_generic8] (0 : UInt64.t)) ]
            
            s1
          | s1 = {[@expl:division by zero] [%#s05_binary_search_generic8] not _26} s2
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 = UInt64.div {size} {[%#s05_binary_search_generic7] (2 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &half <- _ret' ] s1)
          | s1 = UInt64.add {base} {half} (fun (_ret':UInt64.t) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':t_T'0) ->  [ &_33 <- _ret' ] s3)
          | s3 = bb14 ]
        
        | bb14 = s0 [ s0 = gt'0 {_33} {elem} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1) | s1 = bb15 ] 
        | bb15 = any [ br0 -> {_31 = false} (! bb17) | br1 -> {_31} (! bb16) ] 
        | bb16 = s0 [ s0 =  [ &_30 <- base ] s1 | s1 = bb18 ] 
        | bb17 = s0 [ s0 =  [ &_30 <- mid ] s1 | s1 = bb18 ] 
        | bb18 = s0
          [ s0 =  [ &base <- _30 ] s1
          | s1 = UInt64.sub {size} {half} (fun (_ret':UInt64.t) ->  [ &size <- _ret' ] s2)
          | s2 = bb8 ]
         ]
       ]
    
    | bb19 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':t_T'0) ->  [ &_40 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 =  [ &cmp <- _40 ] s1
      | s1 =  [ &_46 <- elem ] s2
      | s2 = cmp'0 {cmp} {_46} (fun (_ret':t_Ordering'0) ->  [ &_43 <- _ret' ] s3)
      | s3 = bb21 ]
    
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'0 elem} s1
      | s1 = -{resolve'0 elem}- s2
      | s2 = any
        [ br0 -> {_43 = C_Less'0} (! bb24) | br1 -> {_43 = C_Equal'0} (! bb23) | br2 -> {_43 = C_Greater'0} (! bb25) ]
       ]
    
    | bb25 = s0 [ s0 =  [ &_0 <- C_Err'0 base ] s1 | s1 = bb28 ] 
    | bb23 = bb27
    | bb27 = s0 [ s0 =  [ &_0 <- C_Ok'0 base ] s1 | s1 = bb28 ] 
    | bb24 = bb26
    | bb26 = s0
      [ s0 = UInt64.add {base} {[%#s05_binary_search_generic9] (1 : UInt64.t)}
          (fun (_ret':UInt64.t) ->  [ &_49 <- _ret' ] s1)
      | s1 =  [ &_0 <- C_Err'0 _49 ] s2
      | s2 = bb28 ]
    
    | bb28 = bb29
    | bb29 = return' {_0} ]
    )
    [ & _0 : t_Result'0 = Any.any_l ()
    | & arr : t_Vec'0 = arr
    | & elem : t_T'0 = elem
    | & _9 : bool = Any.any_l ()
    | & _10 : UInt64.t = Any.any_l ()
    | & size : UInt64.t = Any.any_l ()
    | & base : UInt64.t = Any.any_l ()
    | & _22 : bool = Any.any_l ()
    | & half : UInt64.t = Any.any_l ()
    | & _26 : bool = Any.any_l ()
    | & mid : UInt64.t = Any.any_l ()
    | & _30 : UInt64.t = Any.any_l ()
    | & _31 : bool = Any.any_l ()
    | & _33 : t_T'0 = Any.any_l ()
    | & cmp : t_T'0 = Any.any_l ()
    | & _40 : t_T'0 = Any.any_l ()
    | & _43 : t_Ordering'0 = Any.any_l ()
    | & _46 : t_T'0 = Any.any_l ()
    | & _49 : UInt64.t = Any.any_l () ]
    
    [ return' (result:t_Result'0)-> {[@expl:binary_search ensures #0] [%#s05_binary_search_generic14] forall x : UInt64.t . result
      = C_Ok'0 x  -> Seq.get (deep_model'1 arr) (UInt64.t'int x) = deep_model'0 elem}
      {[@expl:binary_search ensures #1] [%#s05_binary_search_generic15] forall x : UInt64.t . result = C_Err'0 x
       -> (forall i : UInt64.t . UInt64.lt i x
       -> le_log'0 (Seq.get (deep_model'1 arr) (UInt64.t'int i)) (deep_model'0 elem))}
      {[@expl:binary_search ensures #2] [%#s05_binary_search_generic16] forall x : UInt64.t . result = C_Err'0 x
       -> (forall i : UInt64.t . UInt64.le x i /\ UInt64.t'int i < Seq.length (view'0 arr)
       -> lt_log'0 (deep_model'0 elem) (Seq.get (deep_model'1 arr) (UInt64.t'int i)))}
      (! return' {result}) ]

end
