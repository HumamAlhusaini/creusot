module M_06_knights_tour__qyi50474406909270761__clone [#"06_knights_tour.rs" 4 15 4 20] (* <Point as creusot_contracts::Clone> *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 4 15 4 20
  let%span sclone1 = "../../../creusot-contracts/src/std/clone.rs" 15 26 15 41
  
  use creusot.int.Int64
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  let rec clone'1 (self:Int64.t) (return'  (ret:Int64.t))= any
    [ return' (result:Int64.t)-> {[%#sclone1] result = self} (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec clone'0[#"06_knights_tour.rs" 4 15 4 20] (self:t_Point'0) (return'  (ret:t_Point'0))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- self.t_Point__x'0 ] s1
      | s1 = clone'1 {_5} (fun (_ret':Int64.t) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_8 <- self.t_Point__y'0 ] s1
      | s1 = clone'1 {_8} (fun (_ret':Int64.t) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &_0 <- { t_Point__x'0 = _3; t_Point__y'0 = _6 } ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : t_Point'0 = Any.any_l ()
    | & self : t_Point'0 = self
    | & _3 : Int64.t = Any.any_l ()
    | & _5 : Int64.t = Any.any_l ()
    | & _6 : Int64.t = Any.any_l ()
    | & _8 : Int64.t = Any.any_l () ]
     [ return' (result:t_Point'0)-> {[@expl:clone ensures] [%#s06_knights_tour0] result = self} (! return' {result}) ] 
end
module M_06_knights_tour__qyi18370800917002056__mov [#"06_knights_tour.rs" 18 4 18 45] (* Point *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour1 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour2 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour3 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour4 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour5 = "06_knights_tour.rs" 17 14 17 41
  
  use creusot.int.Int64
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  use creusot.prelude.Any
  
  use mach.int.Int
  
  use creusot.int.Int64
  
  meta "compute_max_steps" 1000000
  
  let rec mov'0[#"06_knights_tour.rs" 18 4 18 45] (self:t_Point'0) (p:(Int64.t, Int64.t)) (return'  (ret:t_Point'0))= {[@expl:mov requires #0] [%#s06_knights_tour0] - 10000
    <= Int64.to_int self.t_Point__x'0
    /\ Int64.to_int self.t_Point__x'0 <= 10000}
    {[@expl:mov requires #1] [%#s06_knights_tour1] - 10000 <= Int64.to_int self.t_Point__y'0
    /\ Int64.to_int self.t_Point__y'0 <= 10000}
    {[@expl:mov requires #2] [%#s06_knights_tour2] - 10000 <= Int64.to_int (let (a, _) = p in a)
    /\ Int64.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:mov requires #3] [%#s06_knights_tour3] - 10000 <= Int64.to_int (let (_, a) = p in a)
    /\ Int64.to_int (let (_, a) = p in a) <= 10000}
    (! bb0
    [ bb0 = s0
      [ s0 = Int64.add {self.t_Point__x'0} {let (r'0, _) = p in r'0} (fun (_ret':Int64.t) ->  [ &_9 <- _ret' ] s1)
      | s1 = Int64.add {self.t_Point__y'0} {let (_, r'1) = p in r'1} (fun (_ret':Int64.t) ->  [ &_12 <- _ret' ] s2)
      | s2 =  [ &_0 <- { t_Point__x'0 = _9; t_Point__y'0 = _12 } ] s3
      | s3 = return' {_0} ]
     ]
    )
    [ & _0 : t_Point'0 = Any.any_l ()
    | & self : t_Point'0 = self
    | & p : (Int64.t, Int64.t) = p
    | & _9 : Int64.t = Any.any_l ()
    | & _12 : Int64.t = Any.any_l () ]
    
    [ return' (result:t_Point'0)-> {[@expl:mov ensures #0] [%#s06_knights_tour4] Int64.to_int result.t_Point__x'0
      = Int64.to_int self.t_Point__x'0 + Int64.to_int (let (a, _) = p in a)}
      {[@expl:mov ensures #1] [%#s06_knights_tour5] Int64.to_int result.t_Point__y'0
      = Int64.to_int self.t_Point__y'0 + Int64.to_int (let (_, a) = p in a)}
      (! return' {result}) ]

end
module M_06_knights_tour__qyi4580598960913230815__new [#"06_knights_tour.rs" 40 4 40 31] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 41 20 41 21
  let%span s06_knights_tour1 = "06_knights_tour.rs" 37 15 37 28
  let%span s06_knights_tour2 = "06_knights_tour.rs" 38 14 38 33
  let%span s06_knights_tour3 = "06_knights_tour.rs" 39 14 39 25
  let%span s06_knights_tour4 = "06_knights_tour.rs" 44 28 44 29
  let%span s06_knights_tour5 = "06_knights_tour.rs" 43 26 43 48
  let%span siter6 = "../../../creusot-contracts/src/std/iter.rs" 59 21 59 25
  let%span siter7 = "../../../creusot-contracts/src/std/iter.rs" 59 27 59 31
  let%span siter8 = "../../../creusot-contracts/src/std/iter.rs" 53 15 55 69
  let%span siter9 = "../../../creusot-contracts/src/std/iter.rs" 56 15 56 51
  let%span siter10 = "../../../creusot-contracts/src/std/iter.rs" 57 15 57 70
  let%span siter11 = "../../../creusot-contracts/src/std/iter.rs" 59 4 62 61
  let%span siter12 = "../../../creusot-contracts/src/std/iter.rs" 58 14 58 88
  let%span siter13 = "../../../creusot-contracts/src/std/iter.rs" 192 26 193 120
  let%span s06_knights_tour14 = "06_knights_tour.rs" 32 12 34 93
  let%span svec15 = "../../../creusot-contracts/src/std/vec.rs" 186 22 186 41
  let%span svec16 = "../../../creusot-contracts/src/std/vec.rs" 187 22 187 76
  let%span svec17 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span srange18 = "../../../creusot-contracts/src/std/iter/range.rs" 35 14 35 45
  let%span srange19 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 32
  let%span srange20 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 32
  let%span srange21 = "../../../creusot-contracts/src/std/iter/range.rs" 42 14 42 42
  let%span srange22 = "../../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span smap_inv23 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 153 12 156 47
  let%span smap_inv24 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 140 12 145 71
  let%span smap_inv25 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 15 8 18 9
  let%span smap_inv26 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 37 8 49 9
  let%span svec27 = "../../../creusot-contracts/src/std/vec.rs" 297 20 297 32
  let%span sindex28 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sresolve29 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops30 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops31 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops32 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops33 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops34 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops35 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops36 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  let%span snum37 = "../../../creusot-contracts/src/std/num.rs" 25 28 25 33
  let%span srange38 = "../../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span smap_inv39 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 117 12 119 63
  let%span smap_inv40 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 57 8 57 50
  let%span smap_inv41 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 23 14 23 45
  let%span smap_inv42 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 28 15 28 32
  let%span smap_inv43 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 29 15 29 32
  let%span smap_inv44 = "../../../creusot-contracts/src/std/iter/map_inv.rs" 30 14 30 42
  
  use creusot.int.UInt64
  
  type t_Range'0  =
    { t_Range__start'0: UInt64.t; t_Range__end'0: UInt64.t }
  
  use creusot.prelude.MutBorrow
  
  type closure3'1  =
    { field_0'0: UInt64.t }
  
  predicate resolve'2 (self : MutBorrow.t closure3'1) =
    [%#sresolve29] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t closure3'1) =
    resolve'2 _1
  
  predicate inv'4 (_1 : UInt64.t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : UInt64.t [inv'4 x] . inv'4 x = true
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  predicate inv'5 (_1 : t_Vec'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Vec'1 [inv'5 x] . inv'5 x = true
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use seq.Seq
  
  function view'0 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'1 . [%#svec17] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
    [%#sindex28] Seq.get (view'0 self) ix
  
  let rec from_elem'0 (elem:UInt64.t) (n:UInt64.t) (return'  (ret:t_Vec'1))= {[@expl:from_elem 'elem' type invariant] inv'4 elem}
    any
    [ return' (result:t_Vec'1)-> {inv'5 result}
      {[%#svec15] Seq.length (view'0 result) = UInt64.t'int n}
      {[%#svec16] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'1 result i = elem}
      (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  predicate postcondition_once'0 (self : closure3'1) (args : (UInt64.t, Seq.seq UInt64.t)) (result : t_Vec'1) =
    [%#s06_knights_tour5] let (_2, _3) = args in Seq.length (view'0 result) = UInt64.t'int self.field_0'0
  
  predicate resolve'4 (_1 : closure3'1) =
    true
  
  predicate unnest'0 (self : closure3'1) (_2 : closure3'1) =
    _2.field_0'0 = self.field_0'0
  
  predicate postcondition_mut'0 (self : closure3'1) (args : (UInt64.t, Seq.seq UInt64.t)) (result_state : closure3'1) (result : t_Vec'1)
  
   =
    (let (_2, _3) = args in Seq.length (view'0 result) = UInt64.t'int result_state.field_0'0)
    /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : closure3'1) (args : (UInt64.t, Seq.seq UInt64.t)) (res : t_Vec'1) : ()
  
  axiom fn_mut_once'0_spec : forall self : closure3'1, args : (UInt64.t, Seq.seq UInt64.t), res : t_Vec'1 . [%#sops36] postcondition_once'0 self args res
  = (exists res_state : closure3'1 . postcondition_mut'0 self args res_state res /\ resolve'4 res_state)
  
  function unnest_trans'0 (self : closure3'1) (b : closure3'1) (c : closure3'1) : ()
  
  axiom unnest_trans'0_spec : forall self : closure3'1, b : closure3'1, c : closure3'1 . ([%#sops33] unnest'0 self b)
   -> ([%#sops34] unnest'0 b c)  -> ([%#sops35] unnest'0 self c)
  
  function unnest_refl'0 (self : closure3'1) : ()
  
  axiom unnest_refl'0_spec : forall self : closure3'1 . [%#sops32] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : closure3'1) (args : (UInt64.t, Seq.seq UInt64.t)) (res_state : closure3'1) (res : t_Vec'1) : ()
  
  
  axiom postcondition_mut_unnest'0_spec : forall self : closure3'1, args : (UInt64.t, Seq.seq UInt64.t), res_state : closure3'1, res : t_Vec'1 . ([%#sops30] postcondition_mut'0 self args res_state res)
   -> ([%#sops31] unnest'0 self res_state)
  
  let rec closure3'0[#"06_knights_tour.rs" 43 16 43 50] (_1:MutBorrow.t closure3'1) (_2:UInt64.t) (_3:Seq.seq UInt64.t) (return'  (ret:t_Vec'1))= (! bb0
    [ bb0 = s0
      [ s0 = -{resolve'0 _1}- s1
      | s1 = from_elem'0 {[%#s06_knights_tour4] (0 : UInt64.t)} {(_1.current).field_0'0}
          (fun (_ret':t_Vec'1) ->  [ &res <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = bb2
    | bb2 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : t_Vec'1 = Any.any_l () | & _1 : MutBorrow.t closure3'1 = _1 | & res : t_Vec'1 = Any.any_l () ] 
    [ return' (result:t_Vec'1)-> {[@expl:closure ensures] [%#s06_knights_tour5] Seq.length (view'0 result)
      = UInt64.t'int (_1.final).field_0'0}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
  
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'0 (self : UInt64.t) : int =
    [%#snum37] UInt64.t'int self
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq UInt64.t) (o : t_Range'0) =
    [%#srange22] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'1 (a : t_Range'0) (ab : Seq.seq UInt64.t) (b : t_Range'0) (bc : Seq.seq UInt64.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'1_spec : forall a : t_Range'0, ab : Seq.seq UInt64.t, b : t_Range'0, bc : Seq.seq UInt64.t, c : t_Range'0 . ([%#srange19] produces'0 a ab b)
   -> ([%#srange20] produces'0 b bc c)  -> ([%#srange21] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_Range'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_Range'0 . [%#srange18] produces'0 self (Seq.empty : Seq.seq UInt64.t) self
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq UInt64.t) (b : t_Range'0) (bc : Seq.seq UInt64.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq UInt64.t, b : t_Range'0, bc : Seq.seq UInt64.t, c : t_Range'0 . ([%#srange19] produces'0 a ab b)
   -> ([%#srange20] produces'0 b bc c)  -> ([%#srange21] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange18] produces'0 self (Seq.empty : Seq.seq UInt64.t) self
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : closure3'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : closure3'1 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  predicate precondition'0 (self : closure3'1) (args : (UInt64.t, Seq.seq UInt64.t)) =
    let (_2, _3) = args in true
  
  predicate resolve'5 (self : MutBorrow.t t_Range'0) =
    [%#sresolve29] self.final = self.current
  
  predicate completed'1 (self : MutBorrow.t t_Range'0) =
    [%#srange38] resolve'5 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  predicate next_precondition'0 (iter : t_Range'0) (func : closure3'1) (produced : Seq.seq UInt64.t) =
    [%#smap_inv39] forall e : UInt64.t, i : t_Range'0 . produces'0 iter (Seq.singleton e) i
     -> precondition'0 func (e, produced)
  
  use seq.Seq
  
  predicate preservation'0 (iter : t_Range'0) (func : closure3'1) =
    [%#smap_inv24] forall s : Seq.seq UInt64.t, e1 : UInt64.t, e2 : UInt64.t, f : MutBorrow.t closure3'1, b : t_Vec'1, i : t_Range'0 . unnest'0 func f.current
     -> produces'0 iter (Seq.snoc (Seq.snoc s e1) e2) i
     -> precondition'0 f.current (e1, s)
     -> postcondition_mut'0 f.current (e1, s) f.final b  -> precondition'0 f.final (e2, Seq.snoc s e1)
  
  predicate reinitialize'0  =
    [%#smap_inv23] forall iter : MutBorrow.t t_Range'0, func : closure3'1 . completed'1 iter
     -> next_precondition'0 iter.final func (Seq.empty : Seq.seq UInt64.t) /\ preservation'0 iter.final func
  
  type t_MapInv'0  =
    { t_MapInv__iter'0: t_Range'0; t_MapInv__func'0: closure3'1; t_MapInv__produced'0: Seq.seq UInt64.t }
  
  predicate invariant'0 (self : t_MapInv'0)
  
  predicate inv'2 (_1 : t_MapInv'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_MapInv'0 [inv'2 x] . inv'2 x
  = (invariant'0 x
  /\ match x with
    | {t_MapInv__iter'0 = iter ; t_MapInv__func'0 = func ; t_MapInv__produced'0 = produced} -> true
    end)
  
  let rec map_inv'0 (self:t_Range'0) (func:closure3'1) (return'  (ret:t_MapInv'0))= {[@expl:map_inv 'self' type invariant] [%#siter6] inv'0 self}
    {[@expl:map_inv 'func' type invariant] [%#siter7] inv'1 func}
    {[@expl:map_inv requires #0] [%#siter8] forall e : UInt64.t, i2 : t_Range'0 . produces'0 self (Seq.singleton e) i2
     -> precondition'0 func (e, Seq.empty : Seq.seq UInt64.t)}
    {[@expl:map_inv requires #1] [%#siter9] reinitialize'0}
    {[@expl:map_inv requires #2] [%#siter10] preservation'0 self func}
    any
    [ return' (result:t_MapInv'0)-> {[%#siter11] inv'2 result}
      {[%#siter12] result
      = { t_MapInv__iter'0 = self; t_MapInv__func'0 = func; t_MapInv__produced'0 = Seq.empty : Seq.seq UInt64.t }}
      (! return' {result}) ]
  
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'3 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  predicate resolve'6 (_1 : t_Range'0) =
    true
  
  predicate resolve'3 (self : t_MapInv'0) =
    [%#smap_inv40] resolve'6 self.t_MapInv__iter'0 /\ resolve'4 self.t_MapInv__func'0
  
  predicate resolve'1 (_1 : t_MapInv'0) =
    resolve'3 _1
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'1 [@inline:trivial] (self : t_MapInv'0) (visited : Seq.seq t_Vec'1) (succ : t_MapInv'0) =
    [%#smap_inv26] unnest'0 self.t_MapInv__func'0 succ.t_MapInv__func'0
    /\ (exists fs : Seq.seq (MutBorrow.t closure3'1) . Seq.length fs = Seq.length visited
    /\ (exists s : Seq.seq UInt64.t . Seq.length s = Seq.length visited
    /\ produces'0 self.t_MapInv__iter'0 s succ.t_MapInv__iter'0
    /\ succ.t_MapInv__produced'0 = Seq.(++) self.t_MapInv__produced'0 s
    /\ (forall i : int . 1 <= i /\ i < Seq.length fs  -> (Seq.get fs (i - 1)).final = (Seq.get fs i).current)
    /\ (if Seq.length visited = 0 then
      self.t_MapInv__func'0 = succ.t_MapInv__func'0
    else
      (Seq.get fs 0).current = self.t_MapInv__func'0
      /\ (Seq.get fs (Seq.length visited - 1)).final = succ.t_MapInv__func'0
    )
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> unnest'0 self.t_MapInv__func'0 (Seq.get fs i).current
    /\ precondition'0 (Seq.get fs i).current (Seq.get s i, Seq.(++) self.t_MapInv__produced'0 (Seq.([..]) s 0 i))
    /\ postcondition_mut'0 (Seq.get fs i).current (Seq.get s i, Seq.(++) self.t_MapInv__produced'0 (Seq.([..]) s 0 i)) (Seq.get fs i).final (Seq.get visited i))))
  
  function produces_trans'2 (a : t_MapInv'0) (ab : Seq.seq t_Vec'1) (b : t_MapInv'0) (bc : Seq.seq t_Vec'1) (c : t_MapInv'0) : ()
  
  
  axiom produces_trans'2_spec : forall a : t_MapInv'0, ab : Seq.seq t_Vec'1, b : t_MapInv'0, bc : Seq.seq t_Vec'1, c : t_MapInv'0 . ([%#smap_inv42] produces'1 a ab b)
   -> ([%#smap_inv43] produces'1 b bc c)  -> ([%#smap_inv44] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'2 (self : t_MapInv'0) : ()
  
  axiom produces_refl'2_spec : forall self : t_MapInv'0 . [%#smap_inv41] produces'1 self (Seq.empty : Seq.seq t_Vec'1) self
  
  predicate completed'0 (self : MutBorrow.t t_MapInv'0) =
    [%#smap_inv25] (self.final).t_MapInv__produced'0 = (Seq.empty : Seq.seq UInt64.t)
    /\ completed'1 (MutBorrow.borrow_logic (self.current).t_MapInv__iter'0 (self.final).t_MapInv__iter'0 (MutBorrow.inherit_id (MutBorrow.get_id self) 1))
    /\ (self.current).t_MapInv__func'0 = (self.final).t_MapInv__func'0
  
  function view'1 (self : t_Vec'0) : Seq.seq t_Vec'1
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec17] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate from_iter_post'0 (prod : Seq.seq t_Vec'1) (res : t_Vec'0) =
    [%#svec27] prod = view'1 res
  
  let rec collect'0 (self:t_MapInv'0) (return'  (ret:t_Vec'0))= {[@expl:collect 'self' type invariant] inv'2 self}
    any
    [ return' (result:t_Vec'0)-> {inv'3 result}
      {[%#siter13] exists done' : MutBorrow.t t_MapInv'0, prod : Seq.seq t_Vec'1 . resolve'1 done'.final
      /\ completed'0 done' /\ produces'1 self prod done'.current /\ from_iter_post'0 prod result}
      (! return' {result}) ]
  
  
  type t_Board'0  =
    { t_Board__size'0: UInt64.t; t_Board__field'0: t_Vec'0 }
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_Vec'1 =
    [%#sindex28] Seq.get (view'1 self) ix
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : t_Board'0) =
    [%#s06_knights_tour14] UInt64.t'int self.t_Board__size'0 <= 1000
    /\ Seq.length (view'1 self.t_Board__field'0) = UInt64.t'int self.t_Board__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Board__size'0
     -> Seq.length (view'0 (index_logic'0 self.t_Board__field'0 i)) = UInt64.t'int self.t_Board__size'0)
  
  meta "compute_max_steps" 1000000
  
  let rec new'0[#"06_knights_tour.rs" 40 4 40 31] (size:UInt64.t) (return'  (ret:t_Board'0))= {[@expl:new requires] [%#s06_knights_tour1] UInt64.t'int size
    <= 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_7 <- { t_Range__start'0 = ([%#s06_knights_tour0] (0 : UInt64.t)); t_Range__end'0 = size } ] s1
      | s1 =  [ &_9 <- { field_0'0 = size } ] s2
      | s2 = map_inv'0 {_7} {_9} (fun (_ret':t_MapInv'0) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0 [ s0 = collect'0 {_6} (fun (_ret':t_Vec'0) ->  [ &rows <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- { t_Board__size'0 = size; t_Board__field'0 = rows } ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : t_Board'0 = Any.any_l ()
    | & size : UInt64.t = size
    | & rows : t_Vec'0 = Any.any_l ()
    | & _6 : t_MapInv'0 = Any.any_l ()
    | & _7 : t_Range'0 = Any.any_l ()
    | & _9 : closure3'1 = Any.any_l () ]
    
    [ return' (result:t_Board'0)-> {[@expl:new ensures #0] [%#s06_knights_tour2] result.t_Board__size'0 = size}
      {[@expl:new ensures #1] [%#s06_knights_tour3] wf'0 result}
      (! return' {result}) ]

end
module M_06_knights_tour__qyi4580598960913230815__available [#"06_knights_tour.rs" 52 4 52 41] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 53 8 53 9
  let%span s06_knights_tour1 = "06_knights_tour.rs" 55 15 55 16
  let%span s06_knights_tour2 = "06_knights_tour.rs" 57 57 57 58
  let%span s06_knights_tour3 = "06_knights_tour.rs" 53 8 57 58
  let%span s06_knights_tour4 = "06_knights_tour.rs" 50 15 50 24
  let%span s06_knights_tour5 = "06_knights_tour.rs" 51 14 51 42
  let%span svec6 = "../../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec7 = "../../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span s06_knights_tour8 = "06_knights_tour.rs" 32 12 34 93
  let%span s06_knights_tour9 = "06_knights_tour.rs" 63 12 63 75
  let%span sslice10 = "../../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span smodel11 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice12 = "../../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span svec13 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex14 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  
  use creusot.int.Int64
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  use creusot.int.UInt64
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_Board'0  =
    { t_Board__size'0: UInt64.t; t_Board__field'0: t_Vec'1 }
  
  predicate inv'0 (_1 : t_Vec'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'1 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : UInt64.t [inv'1 x] . inv'1 x = true
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  use seq.Seq
  
  use mach.int.Int
  
  predicate in_bounds'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) =
    [%#sslice10] UInt64.t'int self < Seq.length seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'2 (self : t_Vec'1) : Seq.seq t_Vec'0
  
  axiom view'2_spec : forall self : t_Vec'1 . [%#svec13] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'0 (self : t_Vec'1) : Seq.seq t_Vec'0 =
    [%#smodel11] view'2 self
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) (out : t_Vec'0) =
    [%#sslice12] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'1) (index:UInt64.t) (return'  (ret:t_Vec'0))= {[@expl:index 'self' type invariant] inv'0 self}
    {[@expl:index 'index' type invariant] inv'1 index}
    {[@expl:index requires] [%#svec6] in_bounds'1 index (view'0 self)}
    any
    [ return' (result:t_Vec'0)-> {inv'2 result}
      {[%#svec7] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
  
  
  use seq.Seq
  
  use seq.Seq
  
  predicate in_bounds'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice10] UInt64.t'int self < Seq.length seq
  
  function view'3 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'3_spec : forall self : t_Vec'0 . [%#svec13] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'1 (self : t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel11] view'3 self
  
  predicate inv'3 (_1 : UInt64.t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : UInt64.t [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  predicate has_value'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice12] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'1 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index 'self' type invariant] inv'2 self}
    {[@expl:index 'index' type invariant] inv'1 index}
    {[@expl:index requires] [%#svec6] in_bounds'2 index (view'1 self)}
    any
    [ return' (result:UInt64.t)-> {inv'3 result}
      {[%#svec7] has_value'1 index (view'1 self) result}
      (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : t_Vec'0 =
    [%#sindex14] Seq.get (view'2 self) ix
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : t_Board'0) =
    [%#s06_knights_tour8] UInt64.t'int self.t_Board__size'0 <= 1000
    /\ Seq.length (view'2 self.t_Board__field'0) = UInt64.t'int self.t_Board__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Board__size'0
     -> Seq.length (view'3 (index_logic'0 self.t_Board__field'0 i)) = UInt64.t'int self.t_Board__size'0)
  
  use creusot.int.Int64
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : t_Board'0) (p : t_Point'0) =
    [%#s06_knights_tour9] 0 <= Int64.to_int p.t_Point__x'0
    /\ Int64.to_int p.t_Point__x'0 < UInt64.t'int self.t_Board__size'0
    /\ 0 <= Int64.to_int p.t_Point__y'0 /\ Int64.to_int p.t_Point__y'0 < UInt64.t'int self.t_Board__size'0
  
  meta "compute_max_steps" 1000000
  
  let rec available'0[#"06_knights_tour.rs" 52 4 52 41] (self:t_Board'0) (p:t_Point'0) (return'  (ret:bool))= {[@expl:available requires] [%#s06_knights_tour4] wf'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_5 <- Int64.le ([%#s06_knights_tour0] (0 : Int64.t)) p.t_Point__x'0 ] s1
      | s1 = any [ br0 -> {_5 = false} (! bb8) | br1 -> {_5} (! bb1) ]  ]
    
    | bb1 = s0
      [ s0 = UInt64.of_int {Int64.to_int p.t_Point__x'0} (fun (_ret_from:UInt64.t) ->  [ &_8 <- _ret_from ] s1)
      | s1 =  [ &_7 <- UInt64.lt _8 self.t_Board__size'0 ] s2
      | s2 = any [ br0 -> {_7 = false} (! bb7) | br1 -> {_7} (! bb2) ]  ]
    
    | bb2 = s0
      [ s0 =  [ &_11 <- Int64.le ([%#s06_knights_tour1] (0 : Int64.t)) p.t_Point__y'0 ] s1
      | s1 = any [ br0 -> {_11 = false} (! bb6) | br1 -> {_11} (! bb3) ]  ]
    
    | bb3 = s0
      [ s0 = UInt64.of_int {Int64.to_int p.t_Point__y'0} (fun (_ret_from:UInt64.t) ->  [ &_14 <- _ret_from ] s1)
      | s1 =  [ &_13 <- UInt64.lt _14 self.t_Board__size'0 ] s2
      | s2 = any [ br0 -> {_13 = false} (! bb5) | br1 -> {_13} (! bb4) ]  ]
    
    | bb4 = s0
      [ s0 = UInt64.of_int {Int64.to_int p.t_Point__x'0} (fun (_ret_from:UInt64.t) ->  [ &_22 <- _ret_from ] s1)
      | s1 = index'0 {self.t_Board__field'0} {_22} (fun (_ret':t_Vec'0) ->  [ &_20 <- _ret' ] s2)
      | s2 = bb10 ]
    
    | bb10 = s0
      [ s0 = UInt64.of_int {Int64.to_int p.t_Point__y'0} (fun (_ret_from:UInt64.t) ->  [ &_24 <- _ret_from ] s1)
      | s1 = index'1 {_20} {_24} (fun (_ret':UInt64.t) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb11 ]
    
    | bb11 = s0 [ s0 =  [ &_0 <- _18 = ([%#s06_knights_tour2] (0 : UInt64.t)) ] s1 | s1 = bb12 ] 
    | bb5 = bb9
    | bb6 = bb9
    | bb7 = bb9
    | bb8 = bb9
    | bb9 = s0 [ s0 =  [ &_0 <- [%#s06_knights_tour3] false ] s1 | s1 = bb12 ] 
    | bb12 = return' {_0} ]
    )
    [ & _0 : bool = Any.any_l ()
    | & self : t_Board'0 = self
    | & p : t_Point'0 = p
    | & _5 : bool = Any.any_l ()
    | & _7 : bool = Any.any_l ()
    | & _8 : UInt64.t = Any.any_l ()
    | & _11 : bool = Any.any_l ()
    | & _13 : bool = Any.any_l ()
    | & _14 : UInt64.t = Any.any_l ()
    | & _18 : UInt64.t = Any.any_l ()
    | & _20 : t_Vec'0 = Any.any_l ()
    | & _22 : UInt64.t = Any.any_l ()
    | & _24 : UInt64.t = Any.any_l () ]
    
    [ return' (result:bool)-> {[@expl:available ensures] [%#s06_knights_tour5] result  -> in_bounds'0 self p}
      (! return' {result}) ]

end
module M_06_knights_tour__qyi4580598960913230815__count_degree [#"06_knights_tour.rs" 70 4 70 45] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 71 24 71 25
  let%span s06_knights_tour1 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour2 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour3 = "06_knights_tour.rs" 73 20 73 44
  let%span s06_knights_tour4 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour5 = "06_knights_tour.rs" 74 8 74 11
  let%span s06_knights_tour6 = "06_knights_tour.rs" 77 25 77 26
  let%span s06_knights_tour7 = "06_knights_tour.rs" 68 15 68 24
  let%span s06_knights_tour8 = "06_knights_tour.rs" 69 15 69 32
  let%span s06_knights_tour9 = "06_knights_tour.rs" 93 10 93 28
  let%span s06_knights_tour10 = "06_knights_tour.rs" 94 10 94 128
  let%span siter11 = "../../../creusot-contracts/src/std/iter.rs" 206 27 206 47
  let%span siter12 = "../../../creusot-contracts/src/std/iter.rs" 207 26 207 53
  let%span svec13 = "../../../creusot-contracts/src/std/vec.rs" 276 12 276 41
  let%span siter14 = "../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span s06_knights_tour15 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour16 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour17 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour18 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour19 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour20 = "06_knights_tour.rs" 17 14 17 41
  let%span s06_knights_tour21 = "06_knights_tour.rs" 50 15 50 24
  let%span s06_knights_tour22 = "06_knights_tour.rs" 51 14 51 42
  let%span s06_knights_tour23 = "06_knights_tour.rs" 32 12 34 93
  let%span s06_knights_tour24 = "06_knights_tour.rs" 63 12 63 75
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex26 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span svec27 = "../../../creusot-contracts/src/std/vec.rs" 198 20 198 24
  let%span svec28 = "../../../creusot-contracts/src/std/vec.rs" 204 20 204 33
  let%span svec29 = "../../../creusot-contracts/src/std/vec.rs" 282 14 282 45
  let%span svec30 = "../../../creusot-contracts/src/std/vec.rs" 283 27 283 29
  let%span svec31 = "../../../creusot-contracts/src/std/vec.rs" 287 15 287 32
  let%span svec32 = "../../../creusot-contracts/src/std/vec.rs" 288 15 288 32
  let%span svec33 = "../../../creusot-contracts/src/std/vec.rs" 289 14 289 42
  let%span svec34 = "../../../creusot-contracts/src/std/vec.rs" 290 73 290 75
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 269 20 269 57
  let%span sresolve36 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel37 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  
  use creusot.int.UInt64
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use creusot.prelude.Opaque
  
  type t_NonNull'1  =
    { t_NonNull__pointer'1: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'1; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use creusot.int.Int64
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq (Int64.t, Int64.t)
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec25] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use creusot.int.Int64
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : (Int64.t, Int64.t) =
    [%#sindex26] Seq.get (view'0 self) ix
  
  let rec moves'0 (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {[%#s06_knights_tour9] Seq.length (view'0 result) = 8}
      {[%#s06_knights_tour10] forall i : int . 0 <= i /\ i < 8
       -> - 2 <= Int64.to_int (let (a, _) = index_logic'0 result i in a)
      /\ Int64.to_int (let (a, _) = index_logic'0 result i in a) <= 2
      /\ - 2 <= Int64.to_int (let (_, a) = index_logic'0 result i in a)
      /\ Int64.to_int (let (_, a) = index_logic'0 result i in a) <= 2}
      (! return' {result}) ]
  
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = true
  
  predicate into_iter_pre'0 (self : t_Vec'0) =
    [%#svec27] true
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop'0  =
    { t_ManuallyDrop__value'0: () }
  
  type t_IntoIter'0  =
    { t_IntoIter__buf'0: t_NonNull'0;
      t_IntoIter__phantom'0: ();
      t_IntoIter__cap'0: UInt64.t;
      t_IntoIter__alloc'0: t_ManuallyDrop'0;
      t_IntoIter__ptr'0: t_NonNull'0;
      t_IntoIter__end'0: Opaque.ptr }
  
  predicate inv'0 (_1 : t_IntoIter'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_IntoIter'0 [inv'0 x] . inv'0 x = true
  
  function view'1 (self : t_IntoIter'0) : Seq.seq (Int64.t, Int64.t)
  
  predicate into_iter_post'0 (self : t_Vec'0) (res : t_IntoIter'0) =
    [%#svec28] view'0 self = view'1 res
  
  let rec into_iter'0 (self:t_Vec'0) (return'  (ret:t_IntoIter'0))= {[@expl:into_iter 'self' type invariant] inv'2 self}
    {[@expl:into_iter requires] [%#siter11] into_iter_pre'0 self}
    any
    [ return' (result:t_IntoIter'0)-> {inv'0 result} {[%#siter12] into_iter_post'0 self result} (! return' {result}) ]
  
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_IntoIter'0) (visited : Seq.seq (Int64.t, Int64.t)) (rhs : t_IntoIter'0) =
    [%#svec13] view'1 self = Seq.(++) visited (view'1 rhs)
  
  function produces_trans'0 (a : t_IntoIter'0) (ab : Seq.seq (Int64.t, Int64.t)) (b : t_IntoIter'0) (bc : Seq.seq (Int64.t, Int64.t)) (c : t_IntoIter'0) : ()
  
   =
    [%#svec34] ()
  
  axiom produces_trans'0_spec : forall a : t_IntoIter'0, ab : Seq.seq (Int64.t, Int64.t), b : t_IntoIter'0, bc : Seq.seq (Int64.t, Int64.t), c : t_IntoIter'0 . ([%#svec31] produces'0 a ab b)
   -> ([%#svec32] produces'0 b bc c)  -> ([%#svec33] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_IntoIter'0) : () =
    [%#svec30] ()
  
  axiom produces_refl'0_spec : forall self : t_IntoIter'0 . [%#svec29] produces'0 self (Seq.empty : Seq.seq (Int64.t, Int64.t)) self
  
  predicate inv'1 (_1 : Seq.seq (Int64.t, Int64.t))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (Int64.t, Int64.t) [inv'1 x] . inv'1 x = true
  
  use creusot.prelude.MutBorrow
  
  predicate inv'3 (_1 : MutBorrow.t t_IntoIter'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t t_IntoIter'0 [inv'3 x] . inv'3 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (Int64.t, Int64.t)
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x = true
  
  predicate resolve'1 (self : MutBorrow.t t_IntoIter'0) =
    [%#sresolve36] self.final = self.current
  
  function view'4 (self : MutBorrow.t t_IntoIter'0) : Seq.seq (Int64.t, Int64.t) =
    [%#smodel37] view'1 self.current
  
  predicate completed'0 (self : MutBorrow.t t_IntoIter'0) =
    [%#svec35] resolve'1 self /\ view'4 self = (Seq.empty : Seq.seq (Int64.t, Int64.t))
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_IntoIter'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {inv'4 result}
      {[%#siter14] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t t_IntoIter'0) =
    resolve'1 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:(Int64.t, Int64.t)))= any
    [ good (field_0:(Int64.t, Int64.t))-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : (Int64.t, Int64.t) [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input}
      (! {false}
      any) ]
  
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  let rec mov'0 (self:t_Point'0) (p:(Int64.t, Int64.t)) (return'  (ret:t_Point'0))= {[@expl:mov requires #0] [%#s06_knights_tour15] - 10000
    <= Int64.to_int self.t_Point__x'0
    /\ Int64.to_int self.t_Point__x'0 <= 10000}
    {[@expl:mov requires #1] [%#s06_knights_tour16] - 10000 <= Int64.to_int self.t_Point__y'0
    /\ Int64.to_int self.t_Point__y'0 <= 10000}
    {[@expl:mov requires #2] [%#s06_knights_tour17] - 10000 <= Int64.to_int (let (a, _) = p in a)
    /\ Int64.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:mov requires #3] [%#s06_knights_tour18] - 10000 <= Int64.to_int (let (_, a) = p in a)
    /\ Int64.to_int (let (_, a) = p in a) <= 10000}
    any
    [ return' (result:t_Point'0)-> {[%#s06_knights_tour19] Int64.to_int result.t_Point__x'0
      = Int64.to_int self.t_Point__x'0 + Int64.to_int (let (a, _) = p in a)}
      {[%#s06_knights_tour20] Int64.to_int result.t_Point__y'0
      = Int64.to_int self.t_Point__y'0 + Int64.to_int (let (_, a) = p in a)}
      (! return' {result}) ]
  
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_Board'0  =
    { t_Board__size'0: UInt64.t; t_Board__field'0: t_Vec'1 }
  
  use seq.Seq
  
  type t_RawVec'2  =
    { t_RawVec__inner'2: t_RawVecInner'0; t_RawVec__qy95zmarker'2: () }
  
  type t_Vec'2  =
    { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }
  
  use seq.Seq
  
  function view'2 (self : t_Vec'1) : Seq.seq t_Vec'2
  
  axiom view'2_spec : forall self : t_Vec'1 . [%#svec25] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  use seq.Seq
  
  function view'3 (self : t_Vec'2) : Seq.seq UInt64.t
  
  axiom view'3_spec : forall self : t_Vec'2 . [%#svec25] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'1) (ix : int) : t_Vec'2 =
    [%#sindex26] Seq.get (view'2 self) ix
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : t_Board'0) =
    [%#s06_knights_tour23] UInt64.t'int self.t_Board__size'0 <= 1000
    /\ Seq.length (view'2 self.t_Board__field'0) = UInt64.t'int self.t_Board__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Board__size'0
     -> Seq.length (view'3 (index_logic'1 self.t_Board__field'0 i)) = UInt64.t'int self.t_Board__size'0)
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : t_Board'0) (p : t_Point'0) =
    [%#s06_knights_tour24] 0 <= Int64.to_int p.t_Point__x'0
    /\ Int64.to_int p.t_Point__x'0 < UInt64.t'int self.t_Board__size'0
    /\ 0 <= Int64.to_int p.t_Point__y'0 /\ Int64.to_int p.t_Point__y'0 < UInt64.t'int self.t_Board__size'0
  
  let rec available'0 (self:t_Board'0) (p:t_Point'0) (return'  (ret:bool))= {[@expl:available requires] [%#s06_knights_tour21] wf'0 self}
    any [ return' (result:bool)-> {[%#s06_knights_tour22] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec count_degree'0[#"06_knights_tour.rs" 70 4 70 45] (self:t_Board'0) (p:t_Point'0) (return'  (ret:UInt64.t))= {[@expl:count_degree requires #0] [%#s06_knights_tour7] wf'0 self}
    {[@expl:count_degree requires #1] [%#s06_knights_tour8] in_bounds'0 self p}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &count <- [%#s06_knights_tour0] (0 : UInt64.t) ] s1
      | s1 = moves'0 (fun (_ret':t_Vec'0) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = into_iter'0 {_8} (fun (_ret':t_IntoIter'0) ->  [ &iter <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour1] iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#s06_knights_tour2] Seq.empty : Seq.seq (Int64.t, Int64.t) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] [%#s06_knights_tour4] inv'1 produced}
        {[@expl:for invariant] [%#s06_knights_tour4] inv'0 iter}
        {[@expl:for invariant] [%#s06_knights_tour4] produces'0 iter_old produced iter}
        {[@expl:loop invariant] [%#s06_knights_tour3] UInt64.t'int count <= Seq.length produced}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = bb7
        | bb7 = bb8
        | bb8 = s0
          [ s0 = MutBorrow.borrow_mut <t_IntoIter'0> {iter}
              (fun (_ret':MutBorrow.t t_IntoIter'0) ->  [ &_21 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_IntoIter'0> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret':MutBorrow.t t_IntoIter'0) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':t_Option'0) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb9 ]
        
        | bb9 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any
            [ br0 -> {_19 = C_None'0} (! bb12) | br1 (x0:(Int64.t, Int64.t))-> {_19 = C_Some'0 x0} (! bb11) ]
           ]
        
        | bb11 = bb13
        | bb13 = s0
          [ s0 = v_Some'0 {_19} (fun (r0'0:(Int64.t, Int64.t)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_24 <- [%#s06_knights_tour5] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb14 ]
        
        | bb14 = s0
          [ s0 =  [ &produced <- _24 ] s1
          | s1 =  [ &m <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &_30 <- m ] s3
          | s3 = mov'0 {p} {_30} (fun (_ret':t_Point'0) ->  [ &next <- _ret' ] s4)
          | s4 = bb15 ]
        
        | bb15 = s0 [ s0 = available'0 {self} {next} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1) | s1 = bb16 ] 
        | bb16 = any [ br0 -> {_31 = false} (! bb18) | br1 -> {_31} (! bb17) ] 
        | bb17 = s0
          [ s0 = UInt64.add {count} {[%#s06_knights_tour6] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &count <- _ret' ] s1)
          | s1 = bb19 ]
        
        | bb18 = bb19
        | bb19 = bb5 ]
       ]
    
    | bb12 = bb20
    | bb20 = s0 [ s0 =  [ &_0 <- count ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = Any.any_l ()
    | & self : t_Board'0 = self
    | & p : t_Point'0 = p
    | & count : UInt64.t = Any.any_l ()
    | & iter : t_IntoIter'0 = Any.any_l ()
    | & _8 : t_Vec'0 = Any.any_l ()
    | & iter_old : t_IntoIter'0 = Any.any_l ()
    | & produced : Seq.seq (Int64.t, Int64.t) = Any.any_l ()
    | & _19 : t_Option'0 = Any.any_l ()
    | & _20 : MutBorrow.t t_IntoIter'0 = Any.any_l ()
    | & _21 : MutBorrow.t t_IntoIter'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : (Int64.t, Int64.t) = Any.any_l ()
    | & _24 : Seq.seq (Int64.t, Int64.t) = Any.any_l ()
    | & m : (Int64.t, Int64.t) = Any.any_l ()
    | & next : t_Point'0 = Any.any_l ()
    | & _30 : (Int64.t, Int64.t) = Any.any_l ()
    | & _31 : bool = Any.any_l () ]
     [ return' (result:UInt64.t)-> (! return' {result}) ] 
end
module M_06_knights_tour__qyi4580598960913230815__set [#"06_knights_tour.rs" 87 4 87 41] (* Board *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 83 15 83 24
  let%span s06_knights_tour1 = "06_knights_tour.rs" 84 15 84 32
  let%span s06_knights_tour2 = "06_knights_tour.rs" 85 14 85 26
  let%span s06_knights_tour3 = "06_knights_tour.rs" 86 14 86 42
  let%span svec4 = "../../../creusot-contracts/src/std/vec.rs" 158 27 158 46
  let%span svec5 = "../../../creusot-contracts/src/std/vec.rs" 159 26 159 54
  let%span svec6 = "../../../creusot-contracts/src/std/vec.rs" 160 26 160 57
  let%span svec7 = "../../../creusot-contracts/src/std/vec.rs" 161 26 161 62
  let%span svec8 = "../../../creusot-contracts/src/std/vec.rs" 162 26 162 55
  let%span s06_knights_tour9 = "06_knights_tour.rs" 32 12 34 93
  let%span s06_knights_tour10 = "06_knights_tour.rs" 63 12 63 75
  let%span sslice11 = "../../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span smodel12 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice13 = "../../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sslice15 = "../../../creusot-contracts/src/std/slice.rs" 137 20 137 94
  let%span sresolve16 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sindex17 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  
  use creusot.prelude.MutBorrow
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Board'0  =
    { t_Board__size'0: UInt64.t; t_Board__field'0: t_Vec'0 }
  
  use creusot.int.Int64
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  predicate inv'0 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : UInt64.t [inv'1 x] . inv'1 x = true
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  use seq.Seq
  
  use mach.int.Int
  
  predicate in_bounds'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'1) =
    [%#sslice11] UInt64.t'int self < Seq.length seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'1 (self : t_Vec'0) : Seq.seq t_Vec'1
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec14] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'0 (self : MutBorrow.t t_Vec'0) : Seq.seq t_Vec'1 =
    [%#smodel12] view'1 self.current
  
  predicate inv'2 (_1 : MutBorrow.t t_Vec'1)
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t t_Vec'1 [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'1) (out : t_Vec'1) =
    [%#sslice13] Seq.get seq (UInt64.t'int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq t_Vec'1) (fin : Seq.seq t_Vec'1) =
    [%#sslice15] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:MutBorrow.t t_Vec'0) (index:UInt64.t) (return'  (ret:MutBorrow.t t_Vec'1))= {[@expl:index_mut 'self' type invariant] inv'0 self}
    {[@expl:index_mut 'index' type invariant] inv'1 index}
    {[@expl:index_mut requires] [%#svec4] in_bounds'1 index (view'0 self)}
    any
    [ return' (result:MutBorrow.t t_Vec'1)-> {inv'2 result}
      {[%#svec5] has_value'0 index (view'0 self) result.current}
      {[%#svec6] has_value'0 index (view'1 self.final) result.final}
      {[%#svec7] resolve_elswhere'0 index (view'0 self) (view'1 self.final)}
      {[%#svec8] Seq.length (view'1 self.final) = Seq.length (view'0 self)}
      (! return' {result}) ]
  
  
  use seq.Seq
  
  use seq.Seq
  
  predicate in_bounds'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice11] UInt64.t'int self < Seq.length seq
  
  function view'3 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'3_spec : forall self : t_Vec'1 . [%#svec14] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'2 (self : MutBorrow.t t_Vec'1) : Seq.seq UInt64.t =
    [%#smodel12] view'3 self.current
  
  predicate inv'3 (_1 : MutBorrow.t UInt64.t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t UInt64.t [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  predicate has_value'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice13] Seq.get seq (UInt64.t'int self) = out
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt64.t) (fin : Seq.seq UInt64.t) =
    [%#sslice15] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'1 (self:MutBorrow.t t_Vec'1) (index:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut 'self' type invariant] inv'2 self}
    {[@expl:index_mut 'index' type invariant] inv'1 index}
    {[@expl:index_mut requires] [%#svec4] in_bounds'2 index (view'2 self)}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {inv'3 result}
      {[%#svec5] has_value'1 index (view'2 self) result.current}
      {[%#svec6] has_value'1 index (view'3 self.final) result.final}
      {[%#svec7] resolve_elswhere'1 index (view'2 self) (view'3 self.final)}
      {[%#svec8] Seq.length (view'3 self.final) = Seq.length (view'2 self)}
      (! return' {result}) ]
  
  
  predicate resolve'3 (self : MutBorrow.t UInt64.t) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt64.t) =
    resolve'3 _1
  
  predicate resolve'4 (self : MutBorrow.t t_Vec'1) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Vec'1) =
    resolve'4 _1
  
  predicate resolve'5 (self : MutBorrow.t t_Board'0) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'2 (_1 : MutBorrow.t t_Board'0) =
    resolve'5 _1
  
  use creusot.prelude.Any
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_Vec'1 =
    [%#sindex17] Seq.get (view'1 self) ix
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : t_Board'0) =
    [%#s06_knights_tour9] UInt64.t'int self.t_Board__size'0 <= 1000
    /\ Seq.length (view'1 self.t_Board__field'0) = UInt64.t'int self.t_Board__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Board__size'0
     -> Seq.length (view'3 (index_logic'0 self.t_Board__field'0 i)) = UInt64.t'int self.t_Board__size'0)
  
  use creusot.int.Int64
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : t_Board'0) (p : t_Point'0) =
    [%#s06_knights_tour10] 0 <= Int64.to_int p.t_Point__x'0
    /\ Int64.to_int p.t_Point__x'0 < UInt64.t'int self.t_Board__size'0
    /\ 0 <= Int64.to_int p.t_Point__y'0 /\ Int64.to_int p.t_Point__y'0 < UInt64.t'int self.t_Board__size'0
  
  meta "compute_max_steps" 1000000
  
  let rec set'0[#"06_knights_tour.rs" 87 4 87 41] (self:MutBorrow.t t_Board'0) (p:t_Point'0) (v:UInt64.t) (return'  (ret:()))= {[@expl:set requires #0] [%#s06_knights_tour0] wf'0 self.current}
    {[@expl:set requires #1] [%#s06_knights_tour1] in_bounds'0 self.current p}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final
          <t_Vec'0>
          {(self.current).t_Board__field'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
          (fun (_ret':MutBorrow.t t_Vec'0) ->
             [ &_12 <- _ret' ] 
             [ &self <- { self with current = { self.current with t_Board__field'0 = _ret'.final } } ] 
            s1)
      | s1 = UInt64.of_int {Int64.to_int p.t_Point__x'0} (fun (_ret_from:UInt64.t) ->  [ &_13 <- _ret_from ] s2)
      | s2 = index_mut'0 {_12} {_13} (fun (_ret':MutBorrow.t t_Vec'1) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec'1> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret':MutBorrow.t t_Vec'1) ->  [ &_10 <- _ret' ]  [ &_11 <- { _11 with current = _ret'.final } ] s1)
      | s1 = UInt64.of_int {Int64.to_int p.t_Point__y'0} (fun (_ret_from:UInt64.t) ->  [ &_15 <- _ret_from ] s2)
      | s2 = index_mut'1 {_10} {_15} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_9 <- _ret' ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 =  [ &_9 <- { _9 with current = v } ] s1
      | s1 = -{resolve'0 _9}- s2
      | s2 = -{resolve'1 _11}- s3
      | s3 = -{resolve'2 self}- s4
      | s4 = return' {_0} ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & self : MutBorrow.t t_Board'0 = self
    | & p : t_Point'0 = p
    | & v : UInt64.t = v
    | & _9 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _10 : MutBorrow.t t_Vec'1 = Any.any_l ()
    | & _11 : MutBorrow.t t_Vec'1 = Any.any_l ()
    | & _12 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _13 : UInt64.t = Any.any_l ()
    | & _15 : UInt64.t = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:set ensures #0] [%#s06_knights_tour2] wf'0 self.final}
      {[@expl:set ensures #1] [%#s06_knights_tour3] (self.final).t_Board__size'0 = (self.current).t_Board__size'0}
      (! return' {result}) ]

end
module M_06_knights_tour__min [#"06_knights_tour.rs" 110 0 110 58]
  let%span s06_knights_tour0 = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour1 = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour2 = "06_knights_tour.rs" 112 16 113 72
  let%span s06_knights_tour3 = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour4 = "06_knights_tour.rs" 114 4 114 7
  let%span s06_knights_tour5 = "06_knights_tour.rs" 108 10 109 60
  let%span siter6 = "../../../creusot-contracts/src/std/iter.rs" 206 27 206 47
  let%span siter7 = "../../../creusot-contracts/src/std/iter.rs" 207 26 207 53
  let%span smodel8 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex9 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sslice10 = "../../../creusot-contracts/src/std/slice.rs" 419 12 419 66
  let%span siter11 = "../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span svec12 = "../../../creusot-contracts/src/std/vec.rs" 213 20 213 24
  let%span svec13 = "../../../creusot-contracts/src/std/vec.rs" 219 20 219 34
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sslice15 = "../../../creusot-contracts/src/std/slice.rs" 425 14 425 45
  let%span sslice16 = "../../../creusot-contracts/src/std/slice.rs" 426 27 426 29
  let%span sslice17 = "../../../creusot-contracts/src/std/slice.rs" 430 15 430 32
  let%span sslice18 = "../../../creusot-contracts/src/std/slice.rs" 431 15 431 32
  let%span sslice19 = "../../../creusot-contracts/src/std/slice.rs" 432 14 432 42
  let%span sslice20 = "../../../creusot-contracts/src/std/slice.rs" 433 91 433 93
  let%span sslice21 = "../../../creusot-contracts/src/std/slice.rs" 97 14 97 41
  let%span sslice22 = "../../../creusot-contracts/src/std/slice.rs" 98 14 98 80
  let%span sslice23 = "../../../creusot-contracts/src/std/slice.rs" 412 20 412 61
  let%span sresolve24 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sindex25 = "../../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span sslice26 = "../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice27 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span smodel28 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  
  use creusot.int.UInt64
  
  use creusot.int.Int64
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (UInt64.t, t_Point'0)
  
  use creusot.prelude.Opaque
  
  type t_NonNull'1  =
    { t_NonNull__pointer'1: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'1; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = true
  
  predicate into_iter_pre'0 (self : t_Vec'0) =
    [%#svec12] true
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: Opaque.ptr; t_Iter__qy95zmarker'0: () }
  
  use seq.Seq
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  function view'1 (self : t_Vec'0) : Seq.seq (UInt64.t, t_Point'0)
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec14] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq (UInt64.t, t_Point'0) =
    [%#smodel8] view'1 self
  
  use creusot.slice.Slice64
  
  use creusot.slice.Slice64
  
  function view'4 (self : Slice64.slice (UInt64.t, t_Point'0)) : Seq.seq (UInt64.t, t_Point'0)
  
  axiom view'4_spec : forall self : Slice64.slice (UInt64.t, t_Point'0) . ([%#sslice26] Seq.length (view'4 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice27] view'4 self = Slice64.id self)
  
  function view'3 (self : Slice64.slice (UInt64.t, t_Point'0)) : Seq.seq (UInt64.t, t_Point'0) =
    [%#smodel8] view'4 self
  
  function view'2 (self : t_Iter'0) : Slice64.slice (UInt64.t, t_Point'0)
  
  predicate into_iter_post'0 (self : t_Vec'0) (res : t_Iter'0) =
    [%#svec13] view'0 self = view'3 (view'2 res)
  
  let rec into_iter'0 (self:t_Vec'0) (return'  (ret:t_Iter'0))= {[@expl:into_iter 'self' type invariant] inv'2 self}
    {[@expl:into_iter requires] [%#siter6] into_iter_pre'0 self}
    any [ return' (result:t_Iter'0)-> {[%#siter7] into_iter_post'0 self result} (! return' {result}) ] 
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : (UInt64.t, t_Point'0) =
    [%#sindex9] Seq.get (view'1 self) ix
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : Slice64.slice (UInt64.t, t_Point'0)) (ix : int) : (UInt64.t, t_Point'0)
  
   =
    [%#sindex25] Seq.get (view'4 self) ix
  
  function to_ref_seq'0 (self : Slice64.slice (UInt64.t, t_Point'0)) : Seq.seq (UInt64.t, t_Point'0)
  
  axiom to_ref_seq'0_spec : forall self : Slice64.slice (UInt64.t, t_Point'0) . ([%#sslice21] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'3 self))
  && ([%#sslice22] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'1 self i)
  
  predicate produces'0 (self : t_Iter'0) (visited : Seq.seq (UInt64.t, t_Point'0)) (tl : t_Iter'0) =
    [%#sslice10] to_ref_seq'0 (view'2 self) = Seq.(++) visited (to_ref_seq'0 (view'2 tl))
  
  function produces_trans'0 (a : t_Iter'0) (ab : Seq.seq (UInt64.t, t_Point'0)) (b : t_Iter'0) (bc : Seq.seq (UInt64.t, t_Point'0)) (c : t_Iter'0) : ()
  
   =
    [%#sslice20] ()
  
  axiom produces_trans'0_spec : forall a : t_Iter'0, ab : Seq.seq (UInt64.t, t_Point'0), b : t_Iter'0, bc : Seq.seq (UInt64.t, t_Point'0), c : t_Iter'0 . ([%#sslice17] produces'0 a ab b)
   -> ([%#sslice18] produces'0 b bc c)  -> ([%#sslice19] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Iter'0) : () =
    [%#sslice16] ()
  
  axiom produces_refl'0_spec : forall self : t_Iter'0 . [%#sslice15] produces'0 self (Seq.empty : Seq.seq (UInt64.t, t_Point'0)) self
  
  predicate inv'0 (_1 : t_Iter'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Iter'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : Seq.seq (UInt64.t, t_Point'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq (UInt64.t, t_Point'0) [inv'1 x] . inv'1 x = true
  
  use creusot.prelude.MutBorrow
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  predicate resolve'1 (self : MutBorrow.t t_Iter'0) =
    [%#sresolve24] self.final = self.current
  
  function view'5 (self : MutBorrow.t t_Iter'0) : Slice64.slice (UInt64.t, t_Point'0) =
    [%#smodel28] view'2 self.current
  
  use seq.Seq
  
  predicate completed'0 (self : MutBorrow.t t_Iter'0) =
    [%#sslice23] resolve'1 self /\ view'4 (view'5 self) = (Seq.empty : Seq.seq (UInt64.t, t_Point'0))
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_Iter'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {inv'3 result}
      {[%#siter11] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t t_Iter'0) =
    resolve'1 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:(UInt64.t, t_Point'0)))= any
    [ good (field_0:(UInt64.t, t_Point'0))-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : (UInt64.t, t_Point'0) [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input}
      (! {false}
      any) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec min'0[#"06_knights_tour.rs" 110 0 110 58] (v:t_Vec'0) (return'  (ret:t_Option'0))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &min <- C_None'0 ] s1
      | s1 = into_iter'0 {v} (fun (_ret':t_Iter'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour0] iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#s06_knights_tour1] Seq.empty : Seq.seq (UInt64.t, t_Point'0) ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:for invariant] [%#s06_knights_tour3] inv'1 produced}
        {[@expl:for invariant] [%#s06_knights_tour3] inv'0 iter}
        {[@expl:for invariant] [%#s06_knights_tour3] produces'0 iter_old produced iter}
        {[@expl:loop invariant] [%#s06_knights_tour2] forall r : (UInt64.t, t_Point'0) . min = C_Some'0 r
         -> (exists i : int . 0 <= i /\ i < Seq.length (view'0 v) /\ index_logic'0 v i = r)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Iter'0> {iter}
              (fun (_ret':MutBorrow.t t_Iter'0) ->  [ &_19 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Iter'0> {_19.current} {MutBorrow.get_id _19}
              (fun (_ret':MutBorrow.t t_Iter'0) ->
                 [ &_18 <- _ret' ] 
                 [ &_19 <- { _19 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_18} (fun (_ret':t_Option'0) ->  [ &_17 <- _ret' ] s3)
          | s3 = bb6 ]
        
        | bb6 = s0
          [ s0 = -{resolve'0 _19}- s1
          | s1 = any
            [ br0 -> {_17 = C_None'0} (! bb9) | br1 (x0:(UInt64.t, t_Point'0))-> {_17 = C_Some'0 x0} (! bb8) ]
           ]
        
        | bb8 = bb10
        | bb10 = s0
          [ s0 = v_Some'0 {_17} (fun (r0'0:(UInt64.t, t_Point'0)) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_22 <- [%#s06_knights_tour4] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb11 ]
        
        | bb11 = s0
          [ s0 =  [ &produced <- _22 ] s1
          | s1 =  [ &x <- __creusot_proc_iter_elem ] s2
          | s2 = any
            [ br0 -> {min = C_None'0} (! bb13) | br1 (x0:(UInt64.t, t_Point'0))-> {min = C_Some'0 x0} (! bb14) ]
           ]
        
        | bb14 = s0
          [ s0 = v_Some'0 {min} (fun (r0'0:(UInt64.t, t_Point'0)) ->  [ &m <- r0'0 ] s1)
          | s1 =  [ &_30 <- UInt64.lt (let (r'1, _) = x in r'1) (let (r'0, _) = m in r'0) ] s2
          | s2 = any [ br0 -> {_30 = false} (! bb17) | br1 -> {_30} (! bb16) ]  ]
        
        | bb16 = s0 [ s0 =  [ &_33 <- C_Some'0 x ] s1 | s1 =  [ &min <- _33 ] s2 | s2 = bb18 ] 
        | bb17 = bb18
        | bb18 = bb19
        | bb13 = bb15
        | bb15 = s0 [ s0 =  [ &_27 <- C_Some'0 x ] s1 | s1 =  [ &min <- _27 ] s2 | s2 = bb19 ] 
        | bb19 = bb4 ]
       ]
    
    | bb9 = s0 [ s0 =  [ &_0 <- min ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : t_Option'0 = Any.any_l ()
    | & v : t_Vec'0 = v
    | & min : t_Option'0 = Any.any_l ()
    | & iter : t_Iter'0 = Any.any_l ()
    | & iter_old : t_Iter'0 = Any.any_l ()
    | & produced : Seq.seq (UInt64.t, t_Point'0) = Any.any_l ()
    | & _17 : t_Option'0 = Any.any_l ()
    | & _18 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & _19 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : (UInt64.t, t_Point'0) = Any.any_l ()
    | & _22 : Seq.seq (UInt64.t, t_Point'0) = Any.any_l ()
    | & x : (UInt64.t, t_Point'0) = Any.any_l ()
    | & _27 : t_Option'0 = Any.any_l ()
    | & m : (UInt64.t, t_Point'0) = Any.any_l ()
    | & _30 : bool = Any.any_l ()
    | & _33 : t_Option'0 = Any.any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:min ensures] [%#s06_knights_tour5] forall r : (UInt64.t, t_Point'0) . result
      = C_Some'0 r  -> (exists i : int . 0 <= i /\ i < Seq.length (view'0 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]

end
module M_06_knights_tour__dumb_nonlinear_arith [#"06_knights_tour.rs" 130 0 130 33]
  let%span s06_knights_tour0 = "06_knights_tour.rs" 128 11 128 22
  let%span s06_knights_tour1 = "06_knights_tour.rs" 129 10 129 30
  let%span s06_knights_tour2 = "06_knights_tour.rs" 130 34 130 36
  
  use creusot.int.UInt64
  
  use mach.int.Int
  
  use creusot.int.UInt64
  
  constant a  : UInt64.t
  
  function dumb_nonlinear_arith'0 [#"06_knights_tour.rs" 130 0 130 33] (a : UInt64.t) : ()
  
  goal vc_dumb_nonlinear_arith'0 : ([%#s06_knights_tour0] UInt64.t'int a <= 1000)
   -> ([%#s06_knights_tour1] UInt64.t'int a * UInt64.t'int a <= 1000000)
end
module M_06_knights_tour__knights_tour [#"06_knights_tour.rs" 135 0 135 69]
  let%span s06_knights_tour0 = "06_knights_tour.rs" 138 17 138 18
  let%span s06_knights_tour1 = "06_knights_tour.rs" 140 4 140 44
  let%span s06_knights_tour2 = "06_knights_tour.rs" 144 16 144 17
  let%span s06_knights_tour3 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour4 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour5 = "06_knights_tour.rs" 143 16 143 34
  let%span s06_knights_tour6 = "06_knights_tour.rs" 142 16 142 26
  let%span s06_knights_tour7 = "06_knights_tour.rs" 141 16 141 34
  let%span s06_knights_tour8 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour9 = "06_knights_tour.rs" 144 4 144 7
  let%span s06_knights_tour10 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour11 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour12 = "06_knights_tour.rs" 147 20 148 52
  let%span s06_knights_tour13 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour14 = "06_knights_tour.rs" 149 8 149 11
  let%span s06_knights_tour15 = "06_knights_tour.rs" 150 28 150 128
  let%span s06_knights_tour16 = "06_knights_tour.rs" 132 11 132 37
  let%span s06_knights_tour17 = "06_knights_tour.rs" 133 11 133 19
  let%span s06_knights_tour18 = "06_knights_tour.rs" 134 11 134 19
  let%span s06_knights_tour19 = "06_knights_tour.rs" 37 15 37 28
  let%span s06_knights_tour20 = "06_knights_tour.rs" 38 14 38 33
  let%span s06_knights_tour21 = "06_knights_tour.rs" 39 14 39 25
  let%span s06_knights_tour22 = "06_knights_tour.rs" 83 15 83 24
  let%span s06_knights_tour23 = "06_knights_tour.rs" 84 15 84 32
  let%span s06_knights_tour24 = "06_knights_tour.rs" 85 14 85 26
  let%span s06_knights_tour25 = "06_knights_tour.rs" 86 14 86 42
  let%span s06_knights_tour26 = "06_knights_tour.rs" 128 11 128 22
  let%span s06_knights_tour27 = "06_knights_tour.rs" 129 10 129 30
  let%span s06_knights_tour28 = "06_knights_tour.rs" 130 34 130 36
  let%span siter29 = "../../../creusot-contracts/src/std/iter.rs" 206 27 206 47
  let%span siter30 = "../../../creusot-contracts/src/std/iter.rs" 207 26 207 53
  let%span s06_knights_tour31 = "06_knights_tour.rs" 63 12 63 75
  let%span s06_knights_tour32 = "06_knights_tour.rs" 32 12 34 93
  let%span srange33 = "../../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span siter34 = "../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 80 26 80 44
  let%span s06_knights_tour36 = "06_knights_tour.rs" 93 10 93 28
  let%span s06_knights_tour37 = "06_knights_tour.rs" 94 10 94 128
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex39 = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span svec40 = "../../../creusot-contracts/src/std/vec.rs" 276 12 276 41
  let%span s06_knights_tour41 = "06_knights_tour.rs" 12 15 12 52
  let%span s06_knights_tour42 = "06_knights_tour.rs" 13 15 13 52
  let%span s06_knights_tour43 = "06_knights_tour.rs" 14 15 14 46
  let%span s06_knights_tour44 = "06_knights_tour.rs" 15 15 15 46
  let%span s06_knights_tour45 = "06_knights_tour.rs" 16 14 16 41
  let%span s06_knights_tour46 = "06_knights_tour.rs" 17 14 17 41
  let%span s06_knights_tour47 = "06_knights_tour.rs" 50 15 50 24
  let%span s06_knights_tour48 = "06_knights_tour.rs" 51 14 51 42
  let%span s06_knights_tour49 = "06_knights_tour.rs" 68 15 68 24
  let%span s06_knights_tour50 = "06_knights_tour.rs" 69 15 69 32
  let%span svec51 = "../../../creusot-contracts/src/std/vec.rs" 93 26 93 56
  let%span s06_knights_tour52 = "06_knights_tour.rs" 108 10 109 60
  let%span siter53 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter54 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange55 = "../../../creusot-contracts/src/std/iter/range.rs" 35 14 35 45
  let%span srange56 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 32
  let%span srange57 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 32
  let%span srange58 = "../../../creusot-contracts/src/std/iter/range.rs" 42 14 42 42
  let%span snum59 = "../../../creusot-contracts/src/std/num.rs" 25 28 25 33
  let%span srange60 = "../../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sresolve61 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec62 = "../../../creusot-contracts/src/std/vec.rs" 198 20 198 24
  let%span svec63 = "../../../creusot-contracts/src/std/vec.rs" 204 20 204 33
  let%span svec64 = "../../../creusot-contracts/src/std/vec.rs" 282 14 282 45
  let%span svec65 = "../../../creusot-contracts/src/std/vec.rs" 283 27 283 29
  let%span svec66 = "../../../creusot-contracts/src/std/vec.rs" 287 15 287 32
  let%span svec67 = "../../../creusot-contracts/src/std/vec.rs" 288 15 288 32
  let%span svec68 = "../../../creusot-contracts/src/std/vec.rs" 289 14 289 42
  let%span svec69 = "../../../creusot-contracts/src/std/vec.rs" 290 73 290 75
  let%span svec70 = "../../../creusot-contracts/src/std/vec.rs" 269 20 269 57
  let%span smodel71 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel72 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sord73 = "../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord74 = "../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord75 = "../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord76 = "../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord77 = "../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord78 = "../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord79 = "../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord80 = "../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord81 = "../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord82 = "../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord83 = "../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord84 = "../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord85 = "../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord86 = "../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.UInt64
  
  use mach.int.Int
  
  use creusot.int.UInt64
  
  use creusot.prelude.Opaque
  
  type t_NonNull'1  =
    { t_NonNull__pointer'1: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'1; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'2  =
    { t_RawVec__inner'2: t_RawVecInner'0; t_RawVec__qy95zmarker'2: () }
  
  type t_Vec'2  =
    { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }
  
  type t_Board'0  =
    { t_Board__size'0: UInt64.t; t_Board__field'0: t_Vec'2 }
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  type t_RawVec'3  =
    { t_RawVec__inner'3: t_RawVecInner'0; t_RawVec__qy95zmarker'3: () }
  
  type t_Vec'3  =
    { t_Vec__buf'3: t_RawVec'3; t_Vec__len'3: UInt64.t }
  
  use seq.Seq
  
  function view'1 (self : t_Vec'2) : Seq.seq t_Vec'3
  
  axiom view'1_spec : forall self : t_Vec'2 . [%#svec38] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  use seq.Seq
  
  function view'2 (self : t_Vec'3) : Seq.seq UInt64.t
  
  axiom view'2_spec : forall self : t_Vec'3 . [%#svec38] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'2) (ix : int) : t_Vec'3 =
    [%#sindex39] Seq.get (view'1 self) ix
  
  predicate wf'0 [#"06_knights_tour.rs" 30 4 30 23] (self : t_Board'0) =
    [%#s06_knights_tour32] UInt64.t'int self.t_Board__size'0 <= 1000
    /\ Seq.length (view'1 self.t_Board__field'0) = UInt64.t'int self.t_Board__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Board__size'0
     -> Seq.length (view'2 (index_logic'1 self.t_Board__field'0 i)) = UInt64.t'int self.t_Board__size'0)
  
  let rec new'0 (size:UInt64.t) (return'  (ret:t_Board'0))= {[@expl:new requires] [%#s06_knights_tour19] UInt64.t'int size
    <= 1000}
    any
    [ return' (result:t_Board'0)-> {[%#s06_knights_tour20] result.t_Board__size'0 = size}
      {[%#s06_knights_tour21] wf'0 result}
      (! return' {result}) ]
  
  
  use creusot.int.Int64
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  use creusot.prelude.MutBorrow
  
  use creusot.int.Int64
  
  predicate in_bounds'0 [#"06_knights_tour.rs" 61 4 61 40] (self : t_Board'0) (p : t_Point'0) =
    [%#s06_knights_tour31] 0 <= Int64.to_int p.t_Point__x'0
    /\ Int64.to_int p.t_Point__x'0 < UInt64.t'int self.t_Board__size'0
    /\ 0 <= Int64.to_int p.t_Point__y'0 /\ Int64.to_int p.t_Point__y'0 < UInt64.t'int self.t_Board__size'0
  
  let rec set'0 (self:MutBorrow.t t_Board'0) (p:t_Point'0) (v:UInt64.t) (return'  (ret:()))= {[@expl:set requires #0] [%#s06_knights_tour22] wf'0 self.current}
    {[@expl:set requires #1] [%#s06_knights_tour23] in_bounds'0 self.current p}
    any
    [ return' (result:())-> {[%#s06_knights_tour24] wf'0 self.final}
      {[%#s06_knights_tour25] (self.final).t_Board__size'0 = (self.current).t_Board__size'0}
      (! return' {result}) ]
  
  
  function dumb_nonlinear_arith'0 [#"06_knights_tour.rs" 130 0 130 33] (a : UInt64.t) : () =
    [%#s06_knights_tour28] ()
  
  axiom dumb_nonlinear_arith'0_spec : forall a : UInt64.t . ([%#s06_knights_tour26] UInt64.t'int a <= 1000)
   -> ([%#s06_knights_tour27] UInt64.t'int a * UInt64.t'int a <= 1000000)
  
  type t_Range'0  =
    { t_Range__start'0: UInt64.t; t_Range__end'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter53] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter54] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter29] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'0 result} {[%#siter30] into_iter_post'0 self result} (! return' {result}) ] 
  
  use seq.Seq
  
  use seq.Seq
  
  function deep_model'0 (self : UInt64.t) : int =
    [%#snum59] UInt64.t'int self
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq UInt64.t) (o : t_Range'0) =
    [%#srange33] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq UInt64.t) (b : t_Range'0) (bc : Seq.seq UInt64.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq UInt64.t, b : t_Range'0, bc : Seq.seq UInt64.t, c : t_Range'0 . ([%#srange56] produces'0 a ab b)
   -> ([%#srange57] produces'0 b bc c)  -> ([%#srange58] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange55] produces'0 self (Seq.empty : Seq.seq UInt64.t) self
  
  predicate inv'1 (_1 : Seq.seq UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq UInt64.t [inv'1 x] . inv'1 x = true
  
  predicate inv'4 (_1 : MutBorrow.t t_Range'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t t_Range'0 [inv'4 x] . inv'4 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt64.t
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x = true
  
  predicate resolve'2 (self : MutBorrow.t t_Range'0) =
    [%#sresolve61] self.final = self.current
  
  predicate completed'0 (self : MutBorrow.t t_Range'0) =
    [%#srange60] resolve'2 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_Range'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'4 self}
    any
    [ return' (result:t_Option'0)-> {inv'5 result}
      {[%#siter34] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t t_Range'0) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt64.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'6 (_1 : t_Vec'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'0 [inv'6 x] . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq (UInt64.t, t_Point'0)
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec38] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  let rec new'1 (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {inv'6 result} {[%#svec35] Seq.length (view'0 result) = 0} (! return' {result}) ]
  
  
  use seq.Seq
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  use seq.Seq
  
  function view'3 (self : t_Vec'1) : Seq.seq (Int64.t, Int64.t)
  
  axiom view'3_spec : forall self : t_Vec'1 . [%#svec38] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : t_Vec'1) (ix : int) : (Int64.t, Int64.t) =
    [%#sindex39] Seq.get (view'3 self) ix
  
  let rec moves'0 (return'  (ret:t_Vec'1))= any
    [ return' (result:t_Vec'1)-> {[%#s06_knights_tour36] Seq.length (view'3 result) = 8}
      {[%#s06_knights_tour37] forall i : int . 0 <= i /\ i < 8
       -> - 2 <= Int64.to_int (let (a, _) = index_logic'2 result i in a)
      /\ Int64.to_int (let (a, _) = index_logic'2 result i in a) <= 2
      /\ - 2 <= Int64.to_int (let (_, a) = index_logic'2 result i in a)
      /\ Int64.to_int (let (_, a) = index_logic'2 result i in a) <= 2}
      (! return' {result}) ]
  
  
  predicate inv'7 (_1 : t_Vec'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Vec'1 [inv'7 x] . inv'7 x = true
  
  predicate into_iter_pre'1 (self : t_Vec'1) =
    [%#svec62] true
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop'0  =
    { t_ManuallyDrop__value'0: () }
  
  type t_IntoIter'0  =
    { t_IntoIter__buf'0: t_NonNull'0;
      t_IntoIter__phantom'0: ();
      t_IntoIter__cap'0: UInt64.t;
      t_IntoIter__alloc'0: t_ManuallyDrop'0;
      t_IntoIter__ptr'0: t_NonNull'0;
      t_IntoIter__end'0: Opaque.ptr }
  
  predicate inv'2 (_1 : t_IntoIter'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_IntoIter'0 [inv'2 x] . inv'2 x = true
  
  function view'4 (self : t_IntoIter'0) : Seq.seq (Int64.t, Int64.t)
  
  predicate into_iter_post'1 (self : t_Vec'1) (res : t_IntoIter'0) =
    [%#svec63] view'3 self = view'4 res
  
  let rec into_iter'1 (self:t_Vec'1) (return'  (ret:t_IntoIter'0))= {[@expl:into_iter 'self' type invariant] inv'7 self}
    {[@expl:into_iter requires] [%#siter29] into_iter_pre'1 self}
    any
    [ return' (result:t_IntoIter'0)-> {inv'2 result} {[%#siter30] into_iter_post'1 self result} (! return' {result}) ]
  
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : (UInt64.t, t_Point'0) =
    [%#sindex39] Seq.get (view'0 self) ix
  
  use seq.Seq
  
  predicate produces'1 (self : t_IntoIter'0) (visited : Seq.seq (Int64.t, Int64.t)) (rhs : t_IntoIter'0) =
    [%#svec40] view'4 self = Seq.(++) visited (view'4 rhs)
  
  function produces_trans'1 (a : t_IntoIter'0) (ab : Seq.seq (Int64.t, Int64.t)) (b : t_IntoIter'0) (bc : Seq.seq (Int64.t, Int64.t)) (c : t_IntoIter'0) : ()
  
   =
    [%#svec69] ()
  
  axiom produces_trans'1_spec : forall a : t_IntoIter'0, ab : Seq.seq (Int64.t, Int64.t), b : t_IntoIter'0, bc : Seq.seq (Int64.t, Int64.t), c : t_IntoIter'0 . ([%#svec66] produces'1 a ab b)
   -> ([%#svec67] produces'1 b bc c)  -> ([%#svec68] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_IntoIter'0) : () =
    [%#svec65] ()
  
  axiom produces_refl'1_spec : forall self : t_IntoIter'0 . [%#svec64] produces'1 self (Seq.empty : Seq.seq (Int64.t, Int64.t)) self
  
  predicate inv'3 (_1 : Seq.seq (Int64.t, Int64.t))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq (Int64.t, Int64.t) [inv'3 x] . inv'3 x = true
  
  predicate inv'8 (_1 : MutBorrow.t t_IntoIter'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : MutBorrow.t t_IntoIter'0 [inv'8 x] . inv'8 x = true
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 (Int64.t, Int64.t)
  
  predicate inv'9 (_1 : t_Option'1)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Option'1 [inv'9 x] . inv'9 x = true
  
  predicate resolve'3 (self : MutBorrow.t t_IntoIter'0) =
    [%#sresolve61] self.final = self.current
  
  function view'7 (self : MutBorrow.t t_IntoIter'0) : Seq.seq (Int64.t, Int64.t) =
    [%#smodel71] view'4 self.current
  
  predicate completed'1 (self : MutBorrow.t t_IntoIter'0) =
    [%#svec70] resolve'3 self /\ view'7 self = (Seq.empty : Seq.seq (Int64.t, Int64.t))
  
  use seq.Seq
  
  let rec next'1 (self:MutBorrow.t t_IntoIter'0) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] inv'8 self}
    any
    [ return' (result:t_Option'1)-> {inv'9 result}
      {[%#siter34] match result with
        | C_None'1 -> completed'1 self
        | C_Some'1 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'1 (_1 : MutBorrow.t t_IntoIter'0) =
    resolve'3 _1
  
  let rec v_Some'1 (input:t_Option'1) (ret  (field_0:(Int64.t, Int64.t)))= any
    [ good (field_0:(Int64.t, Int64.t))-> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : (Int64.t, Int64.t) [C_Some'1 field_0 : t_Option'1] . C_Some'1 field_0 <> input}
      (! {false}
      any) ]
  
  
  let rec mov'0 (self:t_Point'0) (p:(Int64.t, Int64.t)) (return'  (ret:t_Point'0))= {[@expl:mov requires #0] [%#s06_knights_tour41] - 10000
    <= Int64.to_int self.t_Point__x'0
    /\ Int64.to_int self.t_Point__x'0 <= 10000}
    {[@expl:mov requires #1] [%#s06_knights_tour42] - 10000 <= Int64.to_int self.t_Point__y'0
    /\ Int64.to_int self.t_Point__y'0 <= 10000}
    {[@expl:mov requires #2] [%#s06_knights_tour43] - 10000 <= Int64.to_int (let (a, _) = p in a)
    /\ Int64.to_int (let (a, _) = p in a) <= 10000}
    {[@expl:mov requires #3] [%#s06_knights_tour44] - 10000 <= Int64.to_int (let (_, a) = p in a)
    /\ Int64.to_int (let (_, a) = p in a) <= 10000}
    any
    [ return' (result:t_Point'0)-> {[%#s06_knights_tour45] Int64.to_int result.t_Point__x'0
      = Int64.to_int self.t_Point__x'0 + Int64.to_int (let (a, _) = p in a)}
      {[%#s06_knights_tour46] Int64.to_int result.t_Point__y'0
      = Int64.to_int self.t_Point__y'0 + Int64.to_int (let (_, a) = p in a)}
      (! return' {result}) ]
  
  
  let rec available'0 (self:t_Board'0) (p:t_Point'0) (return'  (ret:bool))= {[@expl:available requires] [%#s06_knights_tour47] wf'0 self}
    any [ return' (result:bool)-> {[%#s06_knights_tour48] result  -> in_bounds'0 self p} (! return' {result}) ] 
  
  let rec count_degree'0 (self:t_Board'0) (p:t_Point'0) (return'  (ret:UInt64.t))= {[@expl:count_degree requires #0] [%#s06_knights_tour49] wf'0 self}
    {[@expl:count_degree requires #1] [%#s06_knights_tour50] in_bounds'0 self p}
    any [ return' (result:UInt64.t)-> (! return' {result}) ] 
  
  predicate inv'10 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'10 x] . inv'10 x = true
  
  predicate inv'11 (_1 : (UInt64.t, t_Point'0))
  
  axiom inv_axiom'11 [@rewrite] : forall x : (UInt64.t, t_Point'0) [inv'11 x] . inv'11 x = true
  
  use seq.Seq
  
  function view'5 (self : MutBorrow.t t_Vec'0) : Seq.seq (UInt64.t, t_Point'0) =
    [%#smodel71] view'0 self.current
  
  let rec push'0 (self:MutBorrow.t t_Vec'0) (value:(UInt64.t, t_Point'0)) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'10 self}
    {[@expl:push 'value' type invariant] inv'11 value}
    any [ return' (result:())-> {[%#svec51] view'0 self.final = Seq.snoc (view'5 self) value} (! return' {result}) ] 
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 (UInt64.t, t_Point'0)
  
  function view'6 (self : t_Vec'0) : Seq.seq (UInt64.t, t_Point'0) =
    [%#smodel72] view'0 self
  
  let rec min'0 (v:t_Vec'0) (return'  (ret:t_Option'2))= any
    [ return' (result:t_Option'2)-> {[%#s06_knights_tour52] forall r : (UInt64.t, t_Point'0) . result = C_Some'2 r
       -> (exists i : int . 0 <= i /\ i < Seq.length (view'6 v) /\ index_logic'0 v i = r)}
      (! return' {result}) ]
  
  
  let rec v_Some'2 (input:t_Option'2) (ret  (field_0:(UInt64.t, t_Point'0)))= any
    [ good (field_0:(UInt64.t, t_Point'0))-> {C_Some'2 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : (UInt64.t, t_Point'0) [C_Some'2 field_0 : t_Option'2] . C_Some'2 field_0 <> input}
      (! {false}
      any) ]
  
  
  type t_Option'3  =
    | C_None'3
    | C_Some'3 t_Board'0
  
  use creusot.prelude.Any
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use creusot.int.UInt64
  
  function cmp_log'0 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord86] if UInt64.lt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord85] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord83] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord84] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord81] cmp_log'0 x y = C_Less'0)
   -> ([%#sord82] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord78] cmp_log'0 x y
  = o)  -> ([%#sord79] cmp_log'0 y z = o)  -> ([%#sord80] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt64.t) : ()
  
  axiom refl'0_spec : forall x : UInt64.t . [%#sord77] cmp_log'0 x x = C_Equal'0
  
  use creusot.int.UInt64
  
  function cmp_gt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord76] UInt64.gt x y = (cmp_log'0 x y = C_Greater'0)
  
  use creusot.int.UInt64
  
  function cmp_ge_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord75] UInt64.ge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord74] UInt64.lt x y = (cmp_log'0 x y = C_Less'0)
  
  use creusot.int.UInt64
  
  function cmp_le_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord73] UInt64.le x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  meta "compute_max_steps" 1000000
  
  let rec knights_tour'0[#"06_knights_tour.rs" 135 0 135 69] (size:UInt64.t) (x:UInt64.t) (y:UInt64.t) (return'  (ret:t_Option'3))= {[@expl:knights_tour requires #0] [%#s06_knights_tour16] 0
    < UInt64.t'int size
    /\ UInt64.t'int size <= 1000}
    {[@expl:knights_tour requires #1] [%#s06_knights_tour17] UInt64.lt x size}
    {[@expl:knights_tour requires #2] [%#s06_knights_tour18] UInt64.lt y size}
    (! bb0
    [ bb0 = s0 [ s0 = new'0 {size} (fun (_ret':t_Board'0) ->  [ &board <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = Int64.of_int {UInt64.t'int x} (fun (_ret_from:Int64.t) ->  [ &_10 <- _ret_from ] s1)
      | s1 = Int64.of_int {UInt64.t'int y} (fun (_ret_from:Int64.t) ->  [ &_12 <- _ret_from ] s2)
      | s2 =  [ &p <- { t_Point__x'0 = _10; t_Point__y'0 = _12 } ] s3
      | s3 = MutBorrow.borrow_mut <t_Board'0> {board}
          (fun (_ret':MutBorrow.t t_Board'0) ->  [ &_15 <- _ret' ]  [ &board <- _ret'.final ] s4)
      | s4 = set'0 {_15} {p} {[%#s06_knights_tour0] (1 : UInt64.t)} (fun (_ret':()) ->  [ &_14 <- _ret' ] s5)
      | s5 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &_17 <- [%#s06_knights_tour1] dumb_nonlinear_arith'0 size ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = UInt64.mul {size} {size} (fun (_ret':UInt64.t) ->  [ &_22 <- _ret' ] s1)
      | s1 =  [ &_21 <- { t_Range__start'0 = ([%#s06_knights_tour2] (2 : UInt64.t)); t_Range__end'0 = _22 } ] s2
      | s2 = into_iter'0 {_21} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s3)
      | s3 = bb4 ]
    
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#s06_knights_tour3] iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#s06_knights_tour4] Seq.empty : Seq.seq UInt64.t ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:for invariant] [%#s06_knights_tour8] inv'1 produced}
        {[@expl:for invariant] [%#s06_knights_tour8] inv'0 iter}
        {[@expl:for invariant] [%#s06_knights_tour8] produces'0 iter_old produced iter}
        {[@expl:loop invariant #0] [%#s06_knights_tour7] board.t_Board__size'0 = size}
        {[@expl:loop invariant #1] [%#s06_knights_tour6] wf'0 board}
        {[@expl:loop invariant #2] [%#s06_knights_tour5] in_bounds'0 board p}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = bb9
        | bb9 = bb10
        | bb10 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':MutBorrow.t t_Range'0) ->  [ &_39 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range'0> {_39.current} {MutBorrow.get_id _39}
              (fun (_ret':MutBorrow.t t_Range'0) ->
                 [ &_38 <- _ret' ] 
                 [ &_39 <- { _39 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_38} (fun (_ret':t_Option'0) ->  [ &_37 <- _ret' ] s3)
          | s3 = bb11 ]
        
        | bb11 = s0
          [ s0 = -{resolve'0 _39}- s1
          | s1 = any [ br0 -> {_37 = C_None'0} (! bb14) | br1 (x0:UInt64.t)-> {_37 = C_Some'0 x0} (! bb13) ]  ]
        
        | bb13 = bb15
        | bb15 = s0
          [ s0 = v_Some'0 {_37} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_42 <- [%#s06_knights_tour9] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb16 ]
        
        | bb16 = s0
          [ s0 =  [ &produced <- _42 ] s1
          | s1 =  [ &step <- __creusot_proc_iter_elem ] s2
          | s2 = new'1 (fun (_ret':t_Vec'0) ->  [ &candidates <- _ret' ] s3)
          | s3 = bb17 ]
        
        | bb17 = s0 [ s0 = moves'0 (fun (_ret':t_Vec'1) ->  [ &_48 <- _ret' ] s1) | s1 = bb18 ] 
        | bb18 = s0 [ s0 = into_iter'1 {_48} (fun (_ret':t_IntoIter'0) ->  [ &iter1 <- _ret' ] s1) | s1 = bb19 ] 
        | bb19 = s0 [ s0 =  [ &iter_old1 <- [%#s06_knights_tour10] iter1 ] s1 | s1 = bb20 ] 
        | bb20 = s0
          [ s0 =  [ &produced1 <- [%#s06_knights_tour11] Seq.empty : Seq.seq (Int64.t, Int64.t) ] s1 | s1 = bb21 ]
        
        | bb21 = bb22
        | bb22 = bb22
          [ bb22 = {[@expl:for invariant] [%#s06_knights_tour13] inv'3 produced1}
            {[@expl:for invariant] [%#s06_knights_tour13] inv'2 iter1}
            {[@expl:for invariant] [%#s06_knights_tour13] produces'1 iter_old1 produced1 iter1}
            {[@expl:loop invariant] [%#s06_knights_tour12] forall i : int . 0 <= i /\ i < Seq.length (view'0 candidates)
             -> in_bounds'0 board (let (_, a) = index_logic'0 candidates i in a)}
            (! s0) [ s0 = bb23 ] 
            [ bb23 = bb24
            | bb24 = bb25
            | bb25 = bb26
            | bb26 = s0
              [ s0 = MutBorrow.borrow_mut <t_IntoIter'0> {iter1}
                  (fun (_ret':MutBorrow.t t_IntoIter'0) ->  [ &_60 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
              | s1 = MutBorrow.borrow_final <t_IntoIter'0> {_60.current} {MutBorrow.get_id _60}
                  (fun (_ret':MutBorrow.t t_IntoIter'0) ->
                     [ &_59 <- _ret' ] 
                     [ &_60 <- { _60 with current = _ret'.final } ] 
                    s2)
              | s2 = next'1 {_59} (fun (_ret':t_Option'1) ->  [ &_58 <- _ret' ] s3)
              | s3 = bb27 ]
            
            | bb27 = s0
              [ s0 = -{resolve'1 _60}- s1
              | s1 = any
                [ br0 -> {_58 = C_None'1} (! bb30) | br1 (x0:(Int64.t, Int64.t))-> {_58 = C_Some'1 x0} (! bb29) ]
               ]
            
            | bb29 = bb31
            | bb31 = s0
              [ s0 = v_Some'1 {_58} (fun (r0'0:(Int64.t, Int64.t)) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 =  [ &_63 <- [%#s06_knights_tour14] Seq.(++) produced1 (Seq.singleton __creusot_proc_iter_elem1) ] s2
              | s2 = bb32 ]
            
            | bb32 = s0
              [ s0 =  [ &produced1 <- _63 ] s1
              | s1 =  [ &m <- __creusot_proc_iter_elem1 ] s2
              | s2 = {[@expl:assertion] [%#s06_knights_tour15] forall r : Seq.seq (Int64.t, Int64.t), a : Seq.seq (Int64.t, Int64.t), b : Seq.seq (Int64.t, Int64.t) . r
                = Seq.(++) a (Seq.(++) (Seq.singleton m) b)  -> m = Seq.get r (Seq.length a)}
                s3
              | s3 =  [ &_71 <- m ] s4
              | s4 = mov'0 {p} {_71} (fun (_ret':t_Point'0) ->  [ &adj <- _ret' ] s5)
              | s5 = bb33 ]
            
            | bb33 = s0 [ s0 = available'0 {board} {adj} (fun (_ret':bool) ->  [ &_72 <- _ret' ] s1) | s1 = bb34 ] 
            | bb34 = any [ br0 -> {_72 = false} (! bb38) | br1 -> {_72} (! bb35) ] 
            | bb35 = s0
              [ s0 = count_degree'0 {board} {adj} (fun (_ret':UInt64.t) ->  [ &degree <- _ret' ] s1) | s1 = bb36 ]
            
            | bb36 = s0
              [ s0 = MutBorrow.borrow_mut <t_Vec'0> {candidates}
                  (fun (_ret':MutBorrow.t t_Vec'0) ->  [ &_79 <- _ret' ]  [ &candidates <- _ret'.final ] s1)
              | s1 =  [ &_80 <- (degree, adj) ] s2
              | s2 = push'0 {_79} {_80} (fun (_ret':()) ->  [ &_78 <- _ret' ] s3)
              | s3 = bb37 ]
            
            | bb37 = bb39
            | bb38 = bb39
            | bb39 = bb22 ]
           ]
        
        | bb30 = bb40
        | bb40 = s0
          [ s0 =  [ &_87 <- candidates ] s1
          | s1 = min'0 {_87} (fun (_ret':t_Option'2) ->  [ &_85 <- _ret' ] s2)
          | s2 = bb41 ]
        
        | bb41 = any
          [ br0 -> {_85 = C_None'2} (! bb44) | br1 (x0:(UInt64.t, t_Point'0))-> {_85 = C_Some'2 x0} (! bb43) ]
        
        | bb43 = bb45
        | bb45 = s0
          [ s0 = v_Some'2 {_85} (fun (r0'0:(UInt64.t, t_Point'0)) ->  [ &adj1 <- let (_, r'0) = r0'0 in r'0 ] s1)
          | s1 =  [ &p <- adj1 ] s2
          | s2 = MutBorrow.borrow_mut <t_Board'0> {board}
              (fun (_ret':MutBorrow.t t_Board'0) ->  [ &_93 <- _ret' ]  [ &board <- _ret'.final ] s3)
          | s3 = set'0 {_93} {p} {step} (fun (_ret':()) ->  [ &_92 <- _ret' ] s4)
          | s4 = bb46 ]
        
        | bb46 = bb47
        | bb47 = bb7 ]
       ]
    
    | bb44 = s0 [ s0 =  [ &_0 <- C_None'3 ] s1 | s1 = bb50 ] 
    | bb50 = bb51
    | bb51 = bb52
    | bb14 = s0 [ s0 =  [ &_0 <- C_Some'3 board ] s1 | s1 = bb48 ] 
    | bb48 = bb49
    | bb49 = bb52
    | bb52 = return' {_0} ]
    )
    [ & _0 : t_Option'3 = Any.any_l ()
    | & size : UInt64.t = size
    | & x : UInt64.t = x
    | & y : UInt64.t = y
    | & board : t_Board'0 = Any.any_l ()
    | & p : t_Point'0 = Any.any_l ()
    | & _10 : Int64.t = Any.any_l ()
    | & _12 : Int64.t = Any.any_l ()
    | & _14 : () = Any.any_l ()
    | & _15 : MutBorrow.t t_Board'0 = Any.any_l ()
    | & _17 : () = Any.any_l ()
    | & iter : t_Range'0 = Any.any_l ()
    | & _21 : t_Range'0 = Any.any_l ()
    | & _22 : UInt64.t = Any.any_l ()
    | & iter_old : t_Range'0 = Any.any_l ()
    | & produced : Seq.seq UInt64.t = Any.any_l ()
    | & _37 : t_Option'0 = Any.any_l ()
    | & _38 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & _39 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : UInt64.t = Any.any_l ()
    | & _42 : Seq.seq UInt64.t = Any.any_l ()
    | & step : UInt64.t = Any.any_l ()
    | & candidates : t_Vec'0 = Any.any_l ()
    | & iter1 : t_IntoIter'0 = Any.any_l ()
    | & _48 : t_Vec'1 = Any.any_l ()
    | & iter_old1 : t_IntoIter'0 = Any.any_l ()
    | & produced1 : Seq.seq (Int64.t, Int64.t) = Any.any_l ()
    | & _58 : t_Option'1 = Any.any_l ()
    | & _59 : MutBorrow.t t_IntoIter'0 = Any.any_l ()
    | & _60 : MutBorrow.t t_IntoIter'0 = Any.any_l ()
    | & __creusot_proc_iter_elem1 : (Int64.t, Int64.t) = Any.any_l ()
    | & _63 : Seq.seq (Int64.t, Int64.t) = Any.any_l ()
    | & m : (Int64.t, Int64.t) = Any.any_l ()
    | & adj : t_Point'0 = Any.any_l ()
    | & _71 : (Int64.t, Int64.t) = Any.any_l ()
    | & _72 : bool = Any.any_l ()
    | & degree : UInt64.t = Any.any_l ()
    | & _78 : () = Any.any_l ()
    | & _79 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _80 : (UInt64.t, t_Point'0) = Any.any_l ()
    | & _85 : t_Option'2 = Any.any_l ()
    | & _87 : t_Vec'0 = Any.any_l ()
    | & adj1 : t_Point'0 = Any.any_l ()
    | & _92 : () = Any.any_l ()
    | & _93 : MutBorrow.t t_Board'0 = Any.any_l () ]
     [ return' (result:t_Option'3)-> (! return' {result}) ] 
end
module M_06_knights_tour__qyi50474406909270761__clone__refines [#"06_knights_tour.rs" 4 15 4 20] (* <Point as creusot_contracts::Clone> *)
  let%span s06_knights_tour0 = "06_knights_tour.rs" 4 15 4 20
  
  use creusot.int.Int64
  
  type t_Point'0  =
    { t_Point__x'0: Int64.t; t_Point__y'0: Int64.t }
  
  predicate inv'0 (_1 : t_Point'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Point'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_Point'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Point'0 [inv'1 x] . inv'1 x = true
  
  goal refines : [%#s06_knights_tour0] forall self : t_Point'0 . inv'0 self
   -> (forall result : t_Point'0 . result = self  -> result = self /\ inv'1 result)
end
