module M_trusted__victim_of_lie [#"trusted.rs" 17 0 17 29]
  let%span strusted0 = "trusted.rs" 16 10 16 25
  let%span strusted1 = "trusted.rs" 11 10 11 25
  
  use creusot.int.UInt32
  
  let rec lie'0 (return'  (ret:UInt32.t))= any
    [ return' (result:UInt32.t)-> {[%#strusted1] result = (10 : UInt32.t)} (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec victim_of_lie'0[#"trusted.rs" 17 0 17 29] (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = s0 [ s0 = lie'0 (fun (_ret':UInt32.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : UInt32.t = Any.any_l () ] 
    [ return' (result:UInt32.t)-> {[@expl:victim_of_lie ensures] [%#strusted0] result = (10 : UInt32.t)}
      (! return' {result}) ]

end
module M_trusted__innocent_victim [#"trusted.rs" 29 0 29 31]
  let%span strusted0 = "trusted.rs" 28 10 28 25
  let%span strusted1 = "trusted.rs" 37 14 37 19
  let%span strusted2 = "trusted.rs" 44 18 44 23
  
  use creusot.int.UInt32
  
  let rec my_unverified_code'0 (return'  (ret:UInt32.t))= any
    [ return' (result:UInt32.t)-> {[%#strusted1] false} (! return' {result}) ]
  
  
  let rec im_out_of_control'0 (return'  (ret:UInt32.t))= any
    [ return' (result:UInt32.t)-> {[%#strusted2] false} (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec innocent_victim'0[#"trusted.rs" 29 0 29 31] (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = s0 [ s0 = my_unverified_code'0 (fun (_ret':UInt32.t) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = im_out_of_control'0 (fun (_ret':UInt32.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : UInt32.t = Any.any_l () | & _2 : UInt32.t = Any.any_l () ] 
    [ return' (result:UInt32.t)-> {[@expl:innocent_victim ensures] [%#strusted0] result = (10 : UInt32.t)}
      (! return' {result}) ]

end
