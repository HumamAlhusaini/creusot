module M_selection_sort_generic__selection_sort [#"selection_sort_generic.rs" 29 0 31 29]
  let%span sselection_sort_generic0 = "selection_sort_generic.rs" 33 16 33 31
  let%span sselection_sort_generic1 = "selection_sort_generic.rs" 38 13 38 14
  let%span sselection_sort_generic2 = "selection_sort_generic.rs" 38 4 38 7
  let%span sselection_sort_generic3 = "selection_sort_generic.rs" 38 4 38 7
  let%span sselection_sort_generic4 = "selection_sort_generic.rs" 37 16 37 57
  let%span sselection_sort_generic5 = "selection_sort_generic.rs" 36 16 36 63
  let%span sselection_sort_generic6 = "selection_sort_generic.rs" 35 16 35 41
  let%span sselection_sort_generic7 = "selection_sort_generic.rs" 38 4 38 7
  let%span sselection_sort_generic8 = "selection_sort_generic.rs" 38 4 38 7
  let%span sselection_sort_generic9 = "selection_sort_generic.rs" 43 22 43 23
  let%span sselection_sort_generic10 = "selection_sort_generic.rs" 43 8 43 11
  let%span sselection_sort_generic11 = "selection_sort_generic.rs" 43 8 43 11
  let%span sselection_sort_generic12 = "selection_sort_generic.rs" 42 20 42 64
  let%span sselection_sort_generic13 = "selection_sort_generic.rs" 41 20 41 119
  let%span sselection_sort_generic14 = "selection_sort_generic.rs" 43 8 43 11
  let%span sselection_sort_generic15 = "selection_sort_generic.rs" 43 8 43 11
  let%span sselection_sort_generic16 = "selection_sort_generic.rs" 49 8 50 63
  let%span sselection_sort_generic17 = "selection_sort_generic.rs" 29 42 29 43
  let%span sselection_sort_generic18 = "selection_sort_generic.rs" 27 10 27 35
  let%span sselection_sort_generic19 = "selection_sort_generic.rs" 28 10 28 34
  let%span svec20 = "../../creusot-contracts/src/std/vec.rs" 88 26 88 48
  let%span siter21 = "../../creusot-contracts/src/std/iter.rs" 116 0 245 1
  let%span smodel22 = "../../creusot-contracts/src/model.rs" 63 8 63 28
  let%span sselection_sort_generic23 = "selection_sort_generic.rs" 24 16 24 105
  let%span sselection_sort_generic24 = "selection_sort_generic.rs" 11 8 11 72
  let%span smodel25 = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span ssnapshot26 = "../../creusot-contracts/src/snapshot.rs" 55 20 55 39
  let%span sseq27 = "../../creusot-contracts/src/logic/seq.rs" 316 8 316 41
  let%span srange28 = "../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span siter29 = "../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span svec30 = "../../creusot-contracts/src/std/vec.rs" 167 27 167 46
  let%span svec31 = "../../creusot-contracts/src/std/vec.rs" 168 26 168 54
  let%span scmp32 = "../../creusot-contracts/src/std/cmp.rs" 35 26 35 76
  let%span svec33 = "../../creusot-contracts/src/std/vec.rs" 180 26 180 42
  let%span svec34 = "../../creusot-contracts/src/std/vec.rs" 181 26 181 48
  let%span sslice35 = "../../creusot-contracts/src/std/slice.rs" 258 19 258 35
  let%span sslice36 = "../../creusot-contracts/src/std/slice.rs" 259 19 259 35
  let%span sslice37 = "../../creusot-contracts/src/std/slice.rs" 260 18 260 50
  let%span svec38 = "../../creusot-contracts/src/std/vec.rs" 32 14 32 47
  let%span svec39 = "../../creusot-contracts/src/std/vec.rs" 33 14 34 51
  let%span sselection_sort_generic40 = "selection_sort_generic.rs" 18 8 18 35
  let%span svec41 = "../../creusot-contracts/src/std/vec.rs" 20 14 20 41
  let%span smodel42 = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span siter43 = "../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter44 = "../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange45 = "../../creusot-contracts/src/std/iter/range.rs" 35 14 35 45
  let%span srange46 = "../../creusot-contracts/src/std/iter/range.rs" 40 15 40 32
  let%span srange47 = "../../creusot-contracts/src/std/iter/range.rs" 41 15 41 32
  let%span srange48 = "../../creusot-contracts/src/std/iter/range.rs" 42 14 42 42
  let%span snum49 = "../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span srange50 = "../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sresolve51 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sord52 = "../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord53 = "../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord54 = "../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord55 = "../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord56 = "../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord57 = "../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord58 = "../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord59 = "../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord60 = "../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord61 = "../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord62 = "../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord63 = "../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord64 = "../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span sslice65 = "../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span sslice66 = "../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span smodel67 = "../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sslice68 = "../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice69 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span sindex70 = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span svec71 = "../../creusot-contracts/src/std/vec.rs" 70 20 70 41
  let%span sslice72 = "../../creusot-contracts/src/std/slice.rs" 17 20 17 30
  let%span sinvariant73 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sinvariant74 = "../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sseq75 = "../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed76 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use creusot.int.UInt64
  
  use mach.int.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec41] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  predicate inv'12 (_1 : t_T'0)
  
  predicate invariant'7 (self : t_T'0) =
    [%#sboxed76] inv'12 self
  
  predicate inv'13 (_1 : t_T'0)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_T'0 [inv'13 x] . inv'13 x = invariant'7 x
  
  predicate invariant'6 (self : Seq.seq t_T'0) =
    [%#sseq75] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'13 (Seq.get self i)
  
  predicate inv'11 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'11 [@rewrite] : forall x : Seq.seq t_T'0 [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec71] inv'11 (view'2 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant74] inv'2 self
  
  predicate inv'6 (_1 : t_Vec'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  function view'3 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel42] view'2 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'6 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec20] UInt64.t'int result = Seq.length (view'3 self)} (! return' {result}) ]
  
  
  type t_Range'0  =
    { t_Range__start'0: UInt64.t; t_Range__end'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter43] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter44] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter21] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'0 result} {[%#siter21] into_iter_post'0 self result} (! return' {result}) ] 
  
  use creusot.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.MutBorrow
  
  type t_DeepModelTy'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex70] Seq.get (view'2 self) ix
  
  function deep_model'4 (self : t_T'0) : t_DeepModelTy'0
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : t_Vec'0 . ([%#svec38] Seq.length (view'2 self)
  = Seq.length (deep_model'1 self))
  && ([%#svec39] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)
   -> Seq.get (deep_model'1 self) i = deep_model'4 (index_logic'0 self i))
  
  function deep_model'0 (self : MutBorrow.t (t_Vec'0)) : Seq.seq t_DeepModelTy'0 =
    [%#smodel22] deep_model'1 self.current
  
  use creusot.prelude.Snapshot
  
  use seq.Seq
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (other : t_DeepModelTy'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord64] (x = y)
  = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord62] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord63] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord60] cmp_log'0 x y = C_Less'0)
   -> ([%#sord61] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : t_Ordering'0 . ([%#sord57] cmp_log'0 x y
  = o)  -> ([%#sord58] cmp_log'0 y z = o)  -> ([%#sord59] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord56] cmp_log'0 x x = C_Equal'0
  
  predicate gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord55] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  predicate ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord54] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  predicate lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord53] lt_log'0 x y
  = (cmp_log'0 x y = C_Less'0)
  
  predicate le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord52] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  predicate partition'0 [#"selection_sort_generic.rs" 23 0 23 52] (v : Seq.seq t_DeepModelTy'0) (i : int) =
    [%#sselection_sort_generic23] forall k1 : int, k2 : int . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v
     -> le_log'0 (Seq.get v k1) (Seq.get v k2)
  
  predicate sorted_range'0 [#"selection_sort_generic.rs" 9 0 9 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int) =
    [%#sselection_sort_generic24] forall i : int, j : int . l <= i /\ i < j /\ j < u
     -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  function view'0 (self : MutBorrow.t (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel25] view'2 self.current
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.Snapshot
  
  function view'4 (self : MutBorrow.t (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel42] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (MutBorrow.t (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot26] view'4 (Snapshot.inner self)
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t_T'0) (other : Seq.seq t_T'0) =
    [%#sseq27] Permut.permut self other 0 (Seq.length self)
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.Snapshot
  
  use seq.Seq
  
  function deep_model'2 (self : UInt64.t) : int =
    [%#snum49] UInt64.t'int self
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq UInt64.t) (o : t_Range'0) =
    [%#srange28] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'2 self.t_Range__start'0 <= deep_model'2 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'2 o.t_Range__start'0 <= deep_model'2 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'2 o.t_Range__start'0 - deep_model'2 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'2 (Seq.get visited i) = deep_model'2 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq UInt64.t) (b : t_Range'0) (bc : Seq.seq UInt64.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq UInt64.t, b : t_Range'0, bc : Seq.seq UInt64.t, c : t_Range'0 . ([%#srange46] produces'0 a ab b)
   -> ([%#srange47] produces'0 b bc c)  -> ([%#srange48] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange45] produces'0 self (Seq.empty : Seq.seq UInt64.t) self
  
  predicate inv'1 (_1 : Seq.seq UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq UInt64.t [inv'1 x] . inv'1 x = true
  
  predicate inv'7 (_1 : MutBorrow.t (t_Range'0))
  
  axiom inv_axiom'7 [@rewrite] : forall x : MutBorrow.t (t_Range'0) [inv'7 x] . inv'7 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt64.t
  
  predicate inv'8 (_1 : t_Option'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Option'0 [inv'8 x] . inv'8 x = true
  
  predicate resolve'3 (self : MutBorrow.t (t_Range'0)) =
    [%#sresolve51] self.final = self.current
  
  predicate completed'0 (self : MutBorrow.t (t_Range'0)) =
    [%#srange50] resolve'3 self
    /\ deep_model'2 (self.current).t_Range__start'0 >= deep_model'2 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'7 self}
    any
    [ return' (result:t_Option'0)-> {inv'8 result}
      {[%#siter29] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t (t_Range'0)) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt64.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  predicate inv'9 (_1 : UInt64.t)
  
  axiom inv_axiom'9 [@rewrite] : forall x : UInt64.t [inv'9 x] . inv'9 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) =
    [%#sslice65] UInt64.t'int self < Seq.length seq
  
  predicate invariant'5 (self : t_T'0) =
    [%#sinvariant74] inv'12 self
  
  predicate inv'10 (_1 : t_T'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_T'0 [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice66] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] inv'6 self}
    {[@expl:index 'index' type invariant] inv'9 index}
    {[@expl:index requires] [%#svec30] in_bounds'0 index (view'3 self)}
    any
    [ return' (result:t_T'0)-> {inv'10 result}
      {[%#svec31] has_value'0 index (view'3 self) result}
      (! return' {result}) ]
  
  
  function deep_model'3 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel67] deep_model'4 self
  
  let rec lt'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:lt 'self' type invariant] inv'10 self}
    {[@expl:lt 'other' type invariant] inv'10 other}
    any
    [ return' (result:bool)-> {[%#scmp32] result = lt_log'0 (deep_model'3 self) (deep_model'3 other)}
      (! return' {result}) ]
  
  
  predicate invariant'3 (self : MutBorrow.t (t_Vec'0)) =
    [%#sinvariant73] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'5 (_1 : MutBorrow.t (t_Vec'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t (t_Vec'0) [inv'5 x] . inv'5 x = invariant'3 x
  
  use creusot.slice.Slice64
  
  use creusot.slice.Slice64
  
  function view'6 (self : Slice64.slice t_T'0) : Seq.seq t_T'0
  
  axiom view'6_spec : forall self : Slice64.slice t_T'0 . ([%#sslice68] Seq.length (view'6 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice69] view'6 self = Slice64.id self)
  
  predicate invariant'1 (self : Slice64.slice t_T'0) =
    [%#sslice72] inv'11 (view'6 self)
  
  predicate inv'3 (_1 : Slice64.slice t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Slice64.slice t_T'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'2 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sinvariant73] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : MutBorrow.t (Slice64.slice t_T'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t (Slice64.slice t_T'0) [inv'4 x] . inv'4 x = invariant'2 x
  
  function view'5 (self : MutBorrow.t (Slice64.slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel25] view'6 self.current
  
  let rec deref_mut'0 (self:MutBorrow.t (t_Vec'0)) (return'  (ret:MutBorrow.t (Slice64.slice t_T'0)))= {[@expl:deref_mut 'self' type invariant] inv'5 self}
    any
    [ return' (result:MutBorrow.t (Slice64.slice t_T'0))-> {inv'4 result}
      {[%#svec33] view'5 result = view'0 self}
      {[%#svec34] view'6 result.final = view'2 self.final}
      (! return' {result}) ]
  
  
  use seq.Permut
  
  let rec swap'0 (self:MutBorrow.t (Slice64.slice t_T'0)) (a:UInt64.t) (b:UInt64.t) (return'  (ret:()))= {[@expl:swap 'self' type invariant] inv'4 self}
    {[@expl:swap requires #0] [%#sslice35] UInt64.t'int a < Seq.length (view'5 self)}
    {[@expl:swap requires #1] [%#sslice36] UInt64.t'int b < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice37] Permut.exchange (view'6 self.final) (view'5 self) (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]
  
  
  predicate resolve'4 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sresolve51] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t (Slice64.slice t_T'0)) =
    resolve'4 _1
  
  predicate resolve'5 (self : MutBorrow.t (t_Vec'0)) =
    [%#sresolve51] self.final = self.current
  
  predicate resolve'2 (_1 : MutBorrow.t (t_Vec'0)) =
    resolve'5 _1
  
  use creusot.prelude.Intrinsic
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.Snapshot
  
  predicate sorted'0 [#"selection_sort_generic.rs" 16 0 16 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#sselection_sort_generic40] sorted_range'0 s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec selection_sort'0[#"selection_sort_generic.rs" 29 0 31 29] (v:MutBorrow.t (t_Vec'0)) (return'  (ret:()))= {[@expl:selection_sort 'v' type invariant] [%#sselection_sort_generic17] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sselection_sort_generic0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {v.current} (fun (_ret':UInt64.t) ->  [ &_8 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_7 <- { t_Range__start'0 = ([%#sselection_sort_generic1] (0 : UInt64.t)); t_Range__end'0 = _8 } ] s1
      | s1 = into_iter'0 {_7} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#sselection_sort_generic2] Snapshot.new iter ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#sselection_sort_generic3] Snapshot.new (Seq.empty : Seq.seq UInt64.t) ] s1 | s1 = bb5 ]
    
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new v ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:mut invariant] (Snapshot.inner old_6_0).final = v.final}
        {[@expl:for invariant] [%#sselection_sort_generic7] inv'1 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#sselection_sort_generic7] inv'0 iter}
        {[@expl:for invariant] [%#sselection_sort_generic7] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant #0] [%#sselection_sort_generic6] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant #1] [%#sselection_sort_generic5] sorted_range'0 (deep_model'0 v) 0 (Seq.length (Snapshot.inner produced))}
        {[@expl:loop invariant #2] [%#sselection_sort_generic4] partition'0 (deep_model'0 v) (Seq.length (Snapshot.inner produced))}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':MutBorrow.t (t_Range'0)) ->  [ &_24 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range'0> {_24.current} {MutBorrow.get_id _24}
              (fun (_ret':MutBorrow.t (t_Range'0)) ->
                 [ &_23 <- _ret' ] 
                 [ &_24 <- { _24 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_23} (fun (_ret':t_Option'0) ->  [ &_22 <- _ret' ] s3)
          | s3 = bb8 ]
        
        | bb8 = s0
          [ s0 = -{resolve'0 _24}- s1
          | s1 = any [ br0 -> {_22 = C_None'0 } (! bb11) | br1 (x0:UInt64.t)-> {_22 = C_Some'0 x0} (! bb10) ]  ]
        
        | bb10 = bb12
        | bb12 = s0
          [ s0 = v_Some'0 {_22} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_27 <- [%#sselection_sort_generic8] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 =  [ &produced <- _27 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &min <- i ] s3
          | s3 = UInt64.add {i} {[%#sselection_sort_generic9] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &_34 <- _ret' ] s4)
          | s4 = len'0 {v.current} (fun (_ret':UInt64.t) ->  [ &_36 <- _ret' ] s5)
          | s5 = bb14 ]
        
        | bb14 = s0
          [ s0 =  [ &_33 <- { t_Range__start'0 = _34; t_Range__end'0 = _36 } ] s1
          | s1 = into_iter'0 {_33} (fun (_ret':t_Range'0) ->  [ &iter1 <- _ret' ] s2)
          | s2 = bb15 ]
        
        | bb15 = s0 [ s0 =  [ &iter_old1 <- [%#sselection_sort_generic10] Snapshot.new iter1 ] s1 | s1 = bb16 ] 
        | bb16 = s0
          [ s0 =  [ &produced1 <- [%#sselection_sort_generic11] Snapshot.new (Seq.empty : Seq.seq UInt64.t) ] s1
          | s1 = bb17 ]
        
        | bb17 = bb18
        | bb18 = bb18
          [ bb18 = {[@expl:for invariant] [%#sselection_sort_generic14] inv'1 (Snapshot.inner produced1)}
            {[@expl:for invariant] [%#sselection_sort_generic14] inv'0 iter1}
            {[@expl:for invariant] [%#sselection_sort_generic14] produces'0 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant #0] [%#sselection_sort_generic13] forall k : int . UInt64.t'int i <= k
            /\ k < Seq.length (Snapshot.inner produced1) + UInt64.t'int i + 1
             -> le_log'0 (Seq.get (deep_model'0 v) (UInt64.t'int min)) (Seq.get (deep_model'0 v) k)}
            {[@expl:loop invariant #1] [%#sselection_sort_generic12] UInt64.t'int i <= UInt64.t'int min
            /\ UInt64.t'int min < Seq.length (Snapshot.inner produced1) + UInt64.t'int i + 1}
            (! s0) [ s0 = bb19 ] 
            [ bb19 = s0
              [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter1}
                  (fun (_ret':MutBorrow.t (t_Range'0)) ->  [ &_50 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
              | s1 = MutBorrow.borrow_final <t_Range'0> {_50.current} {MutBorrow.get_id _50}
                  (fun (_ret':MutBorrow.t (t_Range'0)) ->
                     [ &_49 <- _ret' ] 
                     [ &_50 <- { _50 with current = _ret'.final } ] 
                    s2)
              | s2 = next'0 {_49} (fun (_ret':t_Option'0) ->  [ &_48 <- _ret' ] s3)
              | s3 = bb20 ]
            
            | bb20 = s0
              [ s0 = -{resolve'0 _50}- s1
              | s1 = any [ br0 -> {_48 = C_None'0 } (! bb23) | br1 (x0:UInt64.t)-> {_48 = C_Some'0 x0} (! bb22) ]  ]
            
            | bb22 = bb24
            | bb24 = s0
              [ s0 = v_Some'0 {_48} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_53 <- [%#sselection_sort_generic15] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb25 ]
            
            | bb25 = s0
              [ s0 =  [ &produced1 <- _53 ] s1
              | s1 =  [ &j <- __creusot_proc_iter_elem1 ] s2
              | s2 = index'0 {v.current} {j} (fun (_ret':t_T'0) ->  [ &_58 <- _ret' ] s3)
              | s3 = bb26 ]
            
            | bb26 = s0 [ s0 = index'0 {v.current} {min} (fun (_ret':t_T'0) ->  [ &_62 <- _ret' ] s1) | s1 = bb27 ] 
            | bb27 = s0 [ s0 = lt'0 {_58} {_62} (fun (_ret':bool) ->  [ &_56 <- _ret' ] s1) | s1 = bb28 ] 
            | bb28 = any [ br0 -> {_56 = false} (! bb30) | br1 -> {_56} (! bb29) ] 
            | bb29 = s0 [ s0 =  [ &min <- j ] s1 | s1 = bb31 ] 
            | bb30 = bb31
            | bb31 = bb18 ]
           ]
        
        | bb23 = s0
          [ s0 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':MutBorrow.t (t_Vec'0)) ->
                 [ &_70 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s1)
          | s1 = deref_mut'0 {_70} (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->  [ &_69 <- _ret' ] s2)
          | s2 = bb32 ]
        
        | bb32 = s0
          [ s0 = {inv'3 _69.current}
            MutBorrow.borrow_final <Slice64.slice t_T'0> {_69.current} {MutBorrow.get_id _69}
              (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->
                 [ &_68 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_69 <- { _69 with current = _ret'.final } ] 
                s1)
          | s1 = swap'0 {_68} {i} {min} (fun (_ret':()) ->  [ &_67 <- _ret' ] s2)
          | s2 = bb33 ]
        
        | bb33 = s0
          [ s0 = {[@expl:type invariant] inv'4 _69} s1
          | s1 = -{resolve'1 _69}- s2
          | s2 = {[@expl:assertion] [%#sselection_sort_generic16] let i = Seq.length (Snapshot.inner produced) in forall k1 : int, k2 : int . 0
            <= k1
            /\ k1 < i /\ i <= k2 /\ k2 < Seq.length (deep_model'0 v)
             -> le_log'0 (Seq.get (deep_model'0 v) k1) (Seq.get (deep_model'0 v) k2)}
            s3
          | s3 = bb6 ]
         ]
       ]
    
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'5 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & v : MutBorrow.t (t_Vec'0) = v
    | & old_v : Snapshot.snap_ty (MutBorrow.t (t_Vec'0)) = Intrinsic.any_l ()
    | & iter : t_Range'0 = Intrinsic.any_l ()
    | & _7 : t_Range'0 = Intrinsic.any_l ()
    | & _8 : UInt64.t = Intrinsic.any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = Intrinsic.any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq UInt64.t) = Intrinsic.any_l ()
    | & _22 : t_Option'0 = Intrinsic.any_l ()
    | & _23 : MutBorrow.t (t_Range'0) = Intrinsic.any_l ()
    | & _24 : MutBorrow.t (t_Range'0) = Intrinsic.any_l ()
    | & __creusot_proc_iter_elem : UInt64.t = Intrinsic.any_l ()
    | & _27 : Snapshot.snap_ty (Seq.seq UInt64.t) = Intrinsic.any_l ()
    | & i : UInt64.t = Intrinsic.any_l ()
    | & min : UInt64.t = Intrinsic.any_l ()
    | & iter1 : t_Range'0 = Intrinsic.any_l ()
    | & _33 : t_Range'0 = Intrinsic.any_l ()
    | & _34 : UInt64.t = Intrinsic.any_l ()
    | & _36 : UInt64.t = Intrinsic.any_l ()
    | & iter_old1 : Snapshot.snap_ty (t_Range'0) = Intrinsic.any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq UInt64.t) = Intrinsic.any_l ()
    | & _48 : t_Option'0 = Intrinsic.any_l ()
    | & _49 : MutBorrow.t (t_Range'0) = Intrinsic.any_l ()
    | & _50 : MutBorrow.t (t_Range'0) = Intrinsic.any_l ()
    | & __creusot_proc_iter_elem1 : UInt64.t = Intrinsic.any_l ()
    | & _53 : Snapshot.snap_ty (Seq.seq UInt64.t) = Intrinsic.any_l ()
    | & j : UInt64.t = Intrinsic.any_l ()
    | & _56 : bool = Intrinsic.any_l ()
    | & _58 : t_T'0 = Intrinsic.any_l ()
    | & _62 : t_T'0 = Intrinsic.any_l ()
    | & _67 : () = Intrinsic.any_l ()
    | & _68 : MutBorrow.t (Slice64.slice t_T'0) = Intrinsic.any_l ()
    | & _69 : MutBorrow.t (Slice64.slice t_T'0) = Intrinsic.any_l ()
    | & _70 : MutBorrow.t (t_Vec'0) = Intrinsic.any_l ()
    | & old_6_0 : Snapshot.snap_ty (MutBorrow.t (t_Vec'0)) = Intrinsic.any_l () ]
    
    [ return' (result:())-> {[@expl:selection_sort ensures #0] [%#sselection_sort_generic18] sorted'0 (deep_model'1 v.final)}
      {[@expl:selection_sort ensures #1] [%#sselection_sort_generic19] permutation_of'0 (view'2 v.final) (view'0 v)}
      (! return' {result}) ]

end
