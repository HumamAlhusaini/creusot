module M_heapsort_generic__heap_frag_max [#"heapsort_generic.rs" 25 0 25 58]
  let%span sheapsort_generic0 = "heapsort_generic.rs" 21 11 21 31
  let%span sheapsort_generic1 = "heapsort_generic.rs" 22 11 22 28
  let%span sheapsort_generic2 = "heapsort_generic.rs" 23 10 23 22
  let%span sheapsort_generic3 = "heapsort_generic.rs" 24 10 24 11
  let%span sheapsort_generic4 = "heapsort_generic.rs" 26 4 28 5
  let%span sheapsort_generic5 = "heapsort_generic.rs" 16 16 17 24
  let%span sheapsort_generic6 = "heapsort_generic.rs" 11 4 11 19
  let%span sord7 = "../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord8 = "../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord9 = "../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord10 = "../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord11 = "../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord12 = "../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord13 = "../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord14 = "../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord15 = "../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord16 = "../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord17 = "../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord18 = "../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord19 = "../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  
  use seq.Seq
  use mach.int.Int
  
  type t_T'0
  
  function parent'0 [#"heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#sheapsort_generic6] Int.div (i + 1) 2 - 1
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_T'0) (other : t_T'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord19] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom antisym2'0_spec : forall x : t_T'0, y : t_T'0 . ([%#sord17] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord18] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom antisym1'0_spec : forall x : t_T'0, y : t_T'0 . ([%#sord15] cmp_log'0 x y = C_Less'0)
   -> ([%#sord16] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_T'0) (y : t_T'0) (z : t_T'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_T'0, y : t_T'0, z : t_T'0, o : t_Ordering'0 . ([%#sord12] cmp_log'0 x y = o)
   -> ([%#sord13] cmp_log'0 y z = o)  -> ([%#sord14] cmp_log'0 x z = o)
  
  function refl'0 (x : t_T'0) : ()
  
  axiom refl'0_spec : forall x : t_T'0 . [%#sord11] cmp_log'0 x x = C_Equal'0
  
  predicate gt_log'0 (self : t_T'0) (o : t_T'0)
  
  function cmp_gt_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord10] gt_log'0 x y = (cmp_log'0 x y = C_Greater'0)
  
  predicate ge_log'0 (self : t_T'0) (o : t_T'0)
  
  function cmp_ge_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord9] ge_log'0 x y = (cmp_log'0 x y <> C_Less'0)
  
  predicate lt_log'0 (self : t_T'0) (o : t_T'0)
  
  function cmp_lt_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord8] lt_log'0 x y = (cmp_log'0 x y = C_Less'0)
  
  predicate le_log'0 (self : t_T'0) (o : t_T'0)
  
  function cmp_le_log'0 (x : t_T'0) (y : t_T'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_T'0, y : t_T'0 . [%#sord7] le_log'0 x y = (cmp_log'0 x y <> C_Greater'0)
  
  predicate heap_frag'0 [#"heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t_T'0) (start : int) (end' : int) =
    [%#sheapsort_generic5] forall i : int . start <= parent'0 i /\ i < end'
     -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  constant s  : Seq.seq t_T'0
  
  constant i  : int
  
  constant end'  : int
  
  function heap_frag_max'0 [#"heapsort_generic.rs" 25 0 25 58] (s : Seq.seq t_T'0) (i : int) (end' : int) : ()
  
  goal vc_heap_frag_max'0 : ([%#sheapsort_generic0] heap_frag'0 s 0 end')
   -> ([%#sheapsort_generic1] 0 <= i /\ i < end')
   -> (if i > 0 then
    ((([@expl:heap_frag_max requires #0] [%#sheapsort_generic0] heap_frag'0 s 0 end')
    && ([@expl:heap_frag_max requires #1] [%#sheapsort_generic1] 0 <= parent'0 i /\ parent'0 i < end'))
    /\ 0 <= ([%#sheapsort_generic3] i) /\ ([%#sheapsort_generic3] parent'0 i) < ([%#sheapsort_generic3] i))
    /\ (([%#sheapsort_generic2] le_log'0 (Seq.get s (parent'0 i)) (Seq.get s 0))
     -> ([%#sheapsort_generic2] le_log'0 (Seq.get s i) (Seq.get s 0)))
  else
    [%#sheapsort_generic2] le_log'0 (Seq.get s i) (Seq.get s 0)
  )
end
module M_heapsort_generic__sift_down [#"heapsort_generic.rs" 41 0 43 29]
  let%span sheapsort_generic0 = "heapsort_generic.rs" 45 16 45 31
  let%span sheapsort_generic1 = "heapsort_generic.rs" 59 17 59 32
  let%span sheapsort_generic2 = "heapsort_generic.rs" 58 17 58 32
  let%span sheapsort_generic3 = "heapsort_generic.rs" 56 16 57 58
  let%span sheapsort_generic4 = "heapsort_generic.rs" 53 16 55 75
  let%span sheapsort_generic5 = "heapsort_generic.rs" 51 16 52 43
  let%span sheapsort_generic6 = "heapsort_generic.rs" 50 16 50 41
  let%span sheapsort_generic7 = "heapsort_generic.rs" 49 16 49 41
  let%span sheapsort_generic8 = "heapsort_generic.rs" 48 16 48 22
  let%span sheapsort_generic9 = "heapsort_generic.rs" 61 22 61 23
  let%span sheapsort_generic10 = "heapsort_generic.rs" 61 16 61 23
  let%span sheapsort_generic11 = "heapsort_generic.rs" 65 24 65 25
  let%span sheapsort_generic12 = "heapsort_generic.rs" 65 32 65 33
  let%span sheapsort_generic13 = "heapsort_generic.rs" 66 19 66 20
  let%span sheapsort_generic14 = "heapsort_generic.rs" 66 51 66 52
  let%span sheapsort_generic15 = "heapsort_generic.rs" 67 21 67 22
  let%span sheapsort_generic16 = "heapsort_generic.rs" 41 33 41 34
  let%span sheapsort_generic17 = "heapsort_generic.rs" 31 11 31 54
  let%span sheapsort_generic18 = "heapsort_generic.rs" 32 11 32 24
  let%span sheapsort_generic19 = "heapsort_generic.rs" 33 11 33 27
  let%span sheapsort_generic20 = "heapsort_generic.rs" 34 10 34 52
  let%span sheapsort_generic21 = "heapsort_generic.rs" 35 10 35 34
  let%span sheapsort_generic22 = "heapsort_generic.rs" 36 10 37 41
  let%span sheapsort_generic23 = "heapsort_generic.rs" 38 10 40 78
  let%span sheapsort_generic24 = "heapsort_generic.rs" 11 4 11 19
  let%span smodel25 = "../../creusot-contracts/src/model.rs" 63 8 63 28
  let%span smodel26 = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sindex27 = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sseq28 = "../../creusot-contracts/src/logic/seq.rs" 312 8 312 41
  let%span ssnapshot29 = "../../creusot-contracts/src/snapshot.rs" 50 20 50 39
  let%span svec30 = "../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec31 = "../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span scmp32 = "../../creusot-contracts/src/std/cmp.rs" 35 26 35 76
  let%span scmp33 = "../../creusot-contracts/src/std/cmp.rs" 43 26 43 77
  let%span svec34 = "../../creusot-contracts/src/std/vec.rs" 181 26 181 42
  let%span svec35 = "../../creusot-contracts/src/std/vec.rs" 182 26 182 48
  let%span sslice36 = "../../creusot-contracts/src/std/slice.rs" 258 19 258 35
  let%span sslice37 = "../../creusot-contracts/src/std/slice.rs" 259 19 259 35
  let%span sslice38 = "../../creusot-contracts/src/std/slice.rs" 260 18 260 50
  let%span sheapsort_generic39 = "heapsort_generic.rs" 16 16 17 24
  let%span svec40 = "../../creusot-contracts/src/std/vec.rs" 33 14 33 47
  let%span svec41 = "../../creusot-contracts/src/std/vec.rs" 34 14 35 51
  let%span svec42 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sord43 = "../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord44 = "../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord45 = "../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord46 = "../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord47 = "../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord48 = "../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord49 = "../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord50 = "../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord51 = "../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord52 = "../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord53 = "../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord54 = "../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord55 = "../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span smodel56 = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice57 = "../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span sslice58 = "../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span smodel59 = "../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sslice60 = "../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice61 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span sresolve62 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant63 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span svec64 = "../../creusot-contracts/src/std/vec.rs" 71 20 71 41
  let%span sslice65 = "../../creusot-contracts/src/std/slice.rs" 17 20 17 30
  let%span sinvariant66 = "../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sseq67 = "../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed68 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.UInt64
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use seq.Permut
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  function parent'0 [#"heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#sheapsort_generic24] Int.div (i + 1) 2 - 1
  
  type t_DeepModelTy'0
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (other : t_DeepModelTy'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord55] (x = y)
  = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord53] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord54] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord51] cmp_log'0 x y = C_Less'0)
   -> ([%#sord52] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : t_Ordering'0 . ([%#sord48] cmp_log'0 x y
  = o)  -> ([%#sord49] cmp_log'0 y z = o)  -> ([%#sord50] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord47] cmp_log'0 x x = C_Equal'0
  
  predicate gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord46] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  predicate ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord45] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  predicate lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord44] lt_log'0 x y
  = (cmp_log'0 x y = C_Less'0)
  
  predicate le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord43] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_T'0
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec42] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function deep_model'3 (self : t_T'0) : t_DeepModelTy'0
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex27] Seq.get (view'2 self) ix
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : t_Vec'0 . ([%#svec40] Seq.length (view'2 self)
  = Seq.length (deep_model'1 self))
  && ([%#svec41] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)
   -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  
  function deep_model'0 (self : MutBorrow.t t_Vec'0) : Seq.seq t_DeepModelTy'0 =
    [%#smodel25] deep_model'1 self.current
  
  function view'0 (self : MutBorrow.t t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel26] view'2 self.current
  
  predicate permutation_of'0 (self : Seq.seq t_T'0) (other : Seq.seq t_T'0) =
    [%#sseq28] Permut.permut self other 0 (Seq.length self)
  
  function view'3 (self : MutBorrow.t t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel56] view'0 self
  
  function view'1 (self : MutBorrow.t t_Vec'0) : Seq.seq t_T'0 =
    [%#ssnapshot29] view'3 self
  
  predicate inv'7 (_1 : t_T'0)
  
  predicate invariant'7 (self : t_T'0) =
    [%#sboxed68] inv'7 self
  
  predicate inv'8 (_1 : t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_T'0 [inv'8 x] . inv'8 x = invariant'7 x
  
  predicate invariant'6 (self : Seq.seq t_T'0) =
    [%#sseq67] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'6 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq t_T'0 [inv'6 x] . inv'6 x = invariant'6 x
  
  predicate invariant'1 (self : t_Vec'0) =
    [%#svec64] inv'6 (view'2 self)
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : MutBorrow.t t_Vec'0) =
    [%#sinvariant63] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'0 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant66] inv'1 self
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) =
    [%#sslice57] UInt64.t'int self < Seq.length seq
  
  function view'4 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel56] view'2 self
  
  predicate invariant'5 (self : t_T'0) =
    [%#sinvariant66] inv'7 self
  
  predicate inv'5 (_1 : t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_T'0 [inv'5 x] . inv'5 x = invariant'5 x
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice58] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] inv'4 self}
    {[@expl:index requires] [%#svec30] in_bounds'0 index (view'4 self)}
    any
    [ return' (result:t_T'0)-> {inv'5 result} {[%#svec31] has_value'0 index (view'4 self) result} (! return' {result}) ]
  
  
  function deep_model'2 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel59] deep_model'3 self
  
  let rec lt'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:lt 'self' type invariant] inv'5 self}
    {[@expl:lt 'other' type invariant] inv'5 other}
    any
    [ return' (result:bool)-> {[%#scmp32] result = lt_log'0 (deep_model'2 self) (deep_model'2 other)}
      (! return' {result}) ]
  
  
  let rec le'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:le 'self' type invariant] inv'5 self}
    {[@expl:le 'other' type invariant] inv'5 other}
    any
    [ return' (result:bool)-> {[%#scmp33] result = le_log'0 (deep_model'2 self) (deep_model'2 other)}
      (! return' {result}) ]
  
  
  function view'6 (self : Slice64.slice t_T'0) : Seq.seq t_T'0
  
  axiom view'6_spec : forall self : Slice64.slice t_T'0 . ([%#sslice60] Seq.length (view'6 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice61] view'6 self = Slice64.id self)
  
  predicate invariant'2 (self : Slice64.slice t_T'0) =
    [%#sslice65] inv'6 (view'6 self)
  
  predicate inv'2 (_1 : Slice64.slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Slice64.slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'3 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sinvariant63] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_1 : MutBorrow.t (Slice64.slice t_T'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t (Slice64.slice t_T'0) [inv'3 x] . inv'3 x = invariant'3 x
  
  function view'5 (self : MutBorrow.t (Slice64.slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel26] view'6 self.current
  
  let rec deref_mut'0 (self:MutBorrow.t t_Vec'0) (return'  (ret:MutBorrow.t (Slice64.slice t_T'0)))= {[@expl:deref_mut 'self' type invariant] inv'0 self}
    any
    [ return' (result:MutBorrow.t (Slice64.slice t_T'0))-> {inv'3 result}
      {[%#svec34] view'5 result = view'0 self}
      {[%#svec35] view'6 result.final = view'2 self.final}
      (! return' {result}) ]
  
  
  let rec swap'0 (self:MutBorrow.t (Slice64.slice t_T'0)) (a:UInt64.t) (b:UInt64.t) (return'  (ret:()))= {[@expl:swap 'self' type invariant] inv'3 self}
    {[@expl:swap requires #0] [%#sslice36] UInt64.t'int a < Seq.length (view'5 self)}
    {[@expl:swap requires #1] [%#sslice37] UInt64.t'int b < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice38] Permut.exchange (view'6 self.final) (view'5 self) (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sresolve62] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t (Slice64.slice t_T'0)) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_Vec'0) =
    [%#sresolve62] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Vec'0) =
    resolve'3 _1
  
  predicate heap_frag'0 [#"heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t_DeepModelTy'0) (start : int) (end' : int) =
    [%#sheapsort_generic39] forall i : int . start <= parent'0 i /\ i < end'
     -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  meta "compute_max_steps" 1000000
  
  let rec sift_down'0[#"heapsort_generic.rs" 41 0 43 29] (v:MutBorrow.t t_Vec'0) (start:UInt64.t) (end':UInt64.t) (return'  (ret:()))= {[@expl:sift_down 'v' type invariant] [%#sheapsort_generic16] inv'0 v}
    {[@expl:sift_down requires #0] [%#sheapsort_generic17] heap_frag'0 (deep_model'0 v) (UInt64.t'int start
    + 1) (UInt64.t'int end')}
    {[@expl:sift_down requires #1] [%#sheapsort_generic18] UInt64.t'int start < UInt64.t'int end'}
    {[@expl:sift_down requires #2] [%#sheapsort_generic19] UInt64.t'int end' <= Seq.length (view'0 v)}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sheapsort_generic0] v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &i <- start ] s1 | s1 =  [ &old_2_0 <- v ] s2 | s2 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = v.final}
        {[@expl:loop invariant #0] [%#sheapsort_generic8] inv'0 v}
        {[@expl:loop invariant #1] [%#sheapsort_generic7] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant #2] [%#sheapsort_generic6] UInt64.t'int start <= UInt64.t'int i
        /\ UInt64.t'int i < UInt64.t'int end'}
        {[@expl:loop invariant #3] [%#sheapsort_generic5] forall j : int . 0 <= j /\ j < UInt64.t'int start
        \/ UInt64.t'int end' <= j /\ j < Seq.length (view'0 v)
         -> index_logic'0 old_v.current j = index_logic'0 v.current j}
        {[@expl:loop invariant #4] [%#sheapsort_generic4] forall m : t_DeepModelTy'0 . (forall j : int . UInt64.t'int start
        <= j
        /\ j < UInt64.t'int end'  -> le_log'0 (Seq.get (deep_model'0 old_v) j) m)
         -> (forall j : int . UInt64.t'int start <= j /\ j < UInt64.t'int end'
         -> le_log'0 (Seq.get (deep_model'0 v) j) m)}
        {[@expl:loop invariant #5] [%#sheapsort_generic3] forall j : int . UInt64.t'int start <= parent'0 j
        /\ j < UInt64.t'int end' /\ UInt64.t'int i <> parent'0 j
         -> le_log'0 (Seq.get (deep_model'0 v) j) (Seq.get (deep_model'0 v) (parent'0 j))}
        {[@expl:loop invariant #6] [%#sheapsort_generic2] let c = 2 * UInt64.t'int i + 1 in c < UInt64.t'int end'
        /\ UInt64.t'int start <= parent'0 (UInt64.t'int i)
         -> le_log'0 (Seq.get (deep_model'0 v) c) (Seq.get (deep_model'0 v) (parent'0 (parent'0 c)))}
        {[@expl:loop invariant #7] [%#sheapsort_generic1] let c = 2 * UInt64.t'int i + 2 in c < UInt64.t'int end'
        /\ UInt64.t'int start <= parent'0 (UInt64.t'int i)
         -> le_log'0 (Seq.get (deep_model'0 v) c) (Seq.get (deep_model'0 v) (parent'0 (parent'0 c)))}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 =  [ &_30 <- ([%#sheapsort_generic9] (2 : UInt64.t)) = ([%#sheapsort_generic10] (0 : UInt64.t)) ] s1
          | s1 = {[@expl:division by zero] [%#sheapsort_generic10] not _30} s2
          | s2 = bb4 ]
        
        | bb4 = s0
          [ s0 = UInt64.div {end'} {[%#sheapsort_generic9] (2 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &_28 <- _ret' ] s1)
          | s1 =  [ &_26 <- UInt64.ge i _28 ] s2
          | s2 = any [ br0 -> {_26 = false} (! bb6) | br1 -> {_26} (! bb5) ]  ]
        
        | bb6 = s0
          [ s0 = UInt64.mul {[%#sheapsort_generic11] (2 : UInt64.t)} {i} (fun (_ret':UInt64.t) ->  [ &_33 <- _ret' ] s1)
          | s1 = UInt64.add {_33} {[%#sheapsort_generic12] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &child <- _ret' ] s2)
          | s2 = UInt64.add {child} {[%#sheapsort_generic13] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &_37 <- _ret' ] s3)
          | s3 =  [ &_36 <- UInt64.lt _37 end' ] s4
          | s4 = any [ br0 -> {_36 = false} (! bb8) | br1 -> {_36} (! bb7) ]  ]
        
        | bb7 = s0 [ s0 = index'0 {v.current} {child} (fun (_ret':t_T'0) ->  [ &_42 <- _ret' ] s1) | s1 = bb9 ] 
        | bb9 = s0
          [ s0 = UInt64.add {child} {[%#sheapsort_generic14] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &_48 <- _ret' ] s1)
          | s1 = index'0 {v.current} {_48} (fun (_ret':t_T'0) ->  [ &_46 <- _ret' ] s2)
          | s2 = bb10 ]
        
        | bb10 = s0 [ s0 = lt'0 {_42} {_46} (fun (_ret':bool) ->  [ &_40 <- _ret' ] s1) | s1 = bb11 ] 
        | bb11 = any [ br0 -> {_40 = false} (! bb13) | br1 -> {_40} (! bb12) ] 
        | bb12 = s0
          [ s0 = UInt64.add {child} {[%#sheapsort_generic15] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &child <- _ret' ] s1)
          | s1 = bb15 ]
        
        | bb13 = bb14
        | bb8 = bb14
        | bb14 = bb15
        | bb15 = s0 [ s0 = index'0 {v.current} {child} (fun (_ret':t_T'0) ->  [ &_53 <- _ret' ] s1) | s1 = bb16 ] 
        | bb16 = s0 [ s0 = index'0 {v.current} {i} (fun (_ret':t_T'0) ->  [ &_57 <- _ret' ] s1) | s1 = bb17 ] 
        | bb17 = s0 [ s0 = le'0 {_53} {_57} (fun (_ret':bool) ->  [ &_51 <- _ret' ] s1) | s1 = bb18 ] 
        | bb18 = any [ br0 -> {_51 = false} (! bb20) | br1 -> {_51} (! bb19) ] 
        | bb20 = s0
          [ s0 = {inv'1 v.current}
            MutBorrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':MutBorrow.t t_Vec'0) ->
                 [ &_64 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s1)
          | s1 = deref_mut'0 {_64} (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->  [ &_63 <- _ret' ] s2)
          | s2 = bb21 ]
        
        | bb21 = s0
          [ s0 = {inv'2 _63.current}
            MutBorrow.borrow_final <Slice64.slice t_T'0> {_63.current} {MutBorrow.get_id _63}
              (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->
                 [ &_62 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &_63 <- { _63 with current = _ret'.final } ] 
                s1)
          | s1 = swap'0 {_62} {i} {child} (fun (_ret':()) ->  [ &_61 <- _ret' ] s2)
          | s2 = bb22 ]
        
        | bb22 = s0
          [ s0 = {[@expl:type invariant] inv'3 _63} s1
          | s1 = -{resolve'0 _63}- s2
          | s2 =  [ &i <- child ] s3
          | s3 = bb2 ]
         ]
       ]
    
    | bb5 = s0 [ s0 = {[@expl:type invariant] inv'0 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = bb23 ] 
    | bb19 = s0 [ s0 = {[@expl:type invariant] inv'0 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = bb23 ] 
    | bb23 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & v : MutBorrow.t t_Vec'0 = v
    | & start : UInt64.t = start
    | & end' : UInt64.t = end'
    | & old_v : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & i : UInt64.t = Any.any_l ()
    | & _26 : bool = Any.any_l ()
    | & _28 : UInt64.t = Any.any_l ()
    | & _30 : bool = Any.any_l ()
    | & child : UInt64.t = Any.any_l ()
    | & _33 : UInt64.t = Any.any_l ()
    | & _36 : bool = Any.any_l ()
    | & _37 : UInt64.t = Any.any_l ()
    | & _40 : bool = Any.any_l ()
    | & _42 : t_T'0 = Any.any_l ()
    | & _46 : t_T'0 = Any.any_l ()
    | & _48 : UInt64.t = Any.any_l ()
    | & _51 : bool = Any.any_l ()
    | & _53 : t_T'0 = Any.any_l ()
    | & _57 : t_T'0 = Any.any_l ()
    | & _61 : () = Any.any_l ()
    | & _62 : MutBorrow.t (Slice64.slice t_T'0) = Any.any_l ()
    | & _63 : MutBorrow.t (Slice64.slice t_T'0) = Any.any_l ()
    | & _64 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & old_2_0 : MutBorrow.t t_Vec'0 = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:sift_down ensures #0] [%#sheapsort_generic20] heap_frag'0 (deep_model'1 v.final) (UInt64.t'int start) (UInt64.t'int end')}
      {[@expl:sift_down ensures #1] [%#sheapsort_generic21] permutation_of'0 (view'2 v.final) (view'0 v)}
      {[@expl:sift_down ensures #2] [%#sheapsort_generic22] forall i : int . 0 <= i /\ i < UInt64.t'int start
      \/ UInt64.t'int end' <= i /\ i < Seq.length (view'0 v)  -> index_logic'0 v.current i = index_logic'0 v.final i}
      {[@expl:sift_down ensures #3] [%#sheapsort_generic23] forall m : t_DeepModelTy'0 . (forall j : int . UInt64.t'int start
      <= j
      /\ j < UInt64.t'int end'  -> le_log'0 (Seq.get (deep_model'0 v) j) m)
       -> (forall j : int . UInt64.t'int start <= j /\ j < UInt64.t'int end'
       -> le_log'0 (Seq.get (deep_model'1 v.final) j) m)}
      (! return' {result}) ]

end
module M_heapsort_generic__heap_sort [#"heapsort_generic.rs" 93 0 95 29]
  let%span sheapsort_generic0 = "heapsort_generic.rs" 97 16 97 31
  let%span sheapsort_generic1 = "heapsort_generic.rs" 99 30 99 31
  let%span sheapsort_generic2 = "heapsort_generic.rs" 99 20 99 31
  let%span sheapsort_generic3 = "heapsort_generic.rs" 103 16 103 36
  let%span sheapsort_generic4 = "heapsort_generic.rs" 102 16 102 59
  let%span sheapsort_generic5 = "heapsort_generic.rs" 101 16 101 41
  let%span sheapsort_generic6 = "heapsort_generic.rs" 104 18 104 19
  let%span sheapsort_generic7 = "heapsort_generic.rs" 105 17 105 18
  let%span sheapsort_generic8 = "heapsort_generic.rs" 114 16 115 60
  let%span sheapsort_generic9 = "heapsort_generic.rs" 113 16 113 60
  let%span sheapsort_generic10 = "heapsort_generic.rs" 112 16 112 50
  let%span sheapsort_generic11 = "heapsort_generic.rs" 111 16 111 41
  let%span sheapsort_generic12 = "heapsort_generic.rs" 110 16 110 32
  let%span sheapsort_generic13 = "heapsort_generic.rs" 116 16 116 17
  let%span sheapsort_generic14 = "heapsort_generic.rs" 117 15 117 16
  let%span sheapsort_generic15 = "heapsort_generic.rs" 118 15 118 16
  let%span sheapsort_generic16 = "heapsort_generic.rs" 120 12 120 59
  let%span sheapsort_generic17 = "heapsort_generic.rs" 124 21 124 22
  let%span sheapsort_generic18 = "heapsort_generic.rs" 93 37 93 38
  let%span sheapsort_generic19 = "heapsort_generic.rs" 91 10 91 35
  let%span sheapsort_generic20 = "heapsort_generic.rs" 92 10 92 34
  let%span svec21 = "../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span smodel22 = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sheapsort_generic23 = "heapsort_generic.rs" 16 16 17 24
  let%span smodel24 = "../../creusot-contracts/src/model.rs" 63 8 63 28
  let%span sseq25 = "../../creusot-contracts/src/logic/seq.rs" 312 8 312 41
  let%span ssnapshot26 = "../../creusot-contracts/src/snapshot.rs" 50 20 50 39
  let%span sheapsort_generic27 = "heapsort_generic.rs" 41 33 41 34
  let%span sheapsort_generic28 = "heapsort_generic.rs" 31 11 31 54
  let%span sheapsort_generic29 = "heapsort_generic.rs" 32 11 32 24
  let%span sheapsort_generic30 = "heapsort_generic.rs" 33 11 33 27
  let%span sheapsort_generic31 = "heapsort_generic.rs" 34 10 34 52
  let%span sheapsort_generic32 = "heapsort_generic.rs" 35 10 35 34
  let%span sheapsort_generic33 = "heapsort_generic.rs" 36 10 37 41
  let%span sheapsort_generic34 = "heapsort_generic.rs" 38 10 40 78
  let%span sheapsort_generic35 = "heapsort_generic.rs" 80 8 80 72
  let%span svec36 = "../../creusot-contracts/src/std/vec.rs" 181 26 181 42
  let%span svec37 = "../../creusot-contracts/src/std/vec.rs" 182 26 182 48
  let%span sslice38 = "../../creusot-contracts/src/std/slice.rs" 258 19 258 35
  let%span sslice39 = "../../creusot-contracts/src/std/slice.rs" 259 19 259 35
  let%span sslice40 = "../../creusot-contracts/src/std/slice.rs" 260 18 260 50
  let%span sheapsort_generic41 = "heapsort_generic.rs" 21 11 21 31
  let%span sheapsort_generic42 = "heapsort_generic.rs" 22 11 22 28
  let%span sheapsort_generic43 = "heapsort_generic.rs" 23 10 23 22
  let%span sheapsort_generic44 = "heapsort_generic.rs" 24 10 24 11
  let%span sheapsort_generic45 = "heapsort_generic.rs" 26 4 28 5
  let%span sheapsort_generic46 = "heapsort_generic.rs" 87 8 87 35
  let%span svec47 = "../../creusot-contracts/src/std/vec.rs" 33 14 33 47
  let%span svec48 = "../../creusot-contracts/src/std/vec.rs" 34 14 35 51
  let%span svec49 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span smodel50 = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sheapsort_generic51 = "heapsort_generic.rs" 11 4 11 19
  let%span sindex52 = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sord53 = "../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord54 = "../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord55 = "../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord56 = "../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord57 = "../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord58 = "../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord59 = "../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord60 = "../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord61 = "../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord62 = "../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord63 = "../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord64 = "../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord65 = "../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span sslice66 = "../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice67 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span sresolve68 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec69 = "../../creusot-contracts/src/std/vec.rs" 71 20 71 41
  let%span sslice70 = "../../creusot-contracts/src/std/slice.rs" 17 20 17 30
  let%span sinvariant71 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sinvariant72 = "../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sseq73 = "../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed74 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use seq.Permut
  use creusot.slice.Slice64
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_T'0
  
  predicate inv'7 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed74] inv'7 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'6 x
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq73] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq t_T'0 [inv'5 x] . inv'5 x = invariant'5 x
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec49] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec69] inv'5 (view'2 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant72] inv'0 self
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  function view'3 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel50] view'2 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'4 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec21] UInt64.t'int result = Seq.length (view'3 self)} (! return' {result}) ]
  
  
  function view'0 (self : MutBorrow.t t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel22] view'2 self.current
  
  type t_DeepModelTy'0
  
  function parent'0 [#"heapsort_generic.rs" 10 0 10 24] (i : int) : int =
    [%#sheapsort_generic51] Int.div (i + 1) 2 - 1
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (other : t_DeepModelTy'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord65] (x = y)
  = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord63] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord64] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord61] cmp_log'0 x y = C_Less'0)
   -> ([%#sord62] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : t_Ordering'0 . ([%#sord58] cmp_log'0 x y
  = o)  -> ([%#sord59] cmp_log'0 y z = o)  -> ([%#sord60] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord57] cmp_log'0 x x = C_Equal'0
  
  predicate gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord56] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  predicate ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord55] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  predicate lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord54] lt_log'0 x y
  = (cmp_log'0 x y = C_Less'0)
  
  predicate le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0)
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord53] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  predicate heap_frag'0 [#"heapsort_generic.rs" 15 0 15 66] (s : Seq.seq t_DeepModelTy'0) (start : int) (end' : int) =
    [%#sheapsort_generic23] forall i : int . start <= parent'0 i /\ i < end'
     -> le_log'0 (Seq.get s i) (Seq.get s (parent'0 i))
  
  function deep_model'2 (self : t_T'0) : t_DeepModelTy'0
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex52] Seq.get (view'2 self) ix
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'1_spec : forall self : t_Vec'0 . ([%#svec47] Seq.length (view'2 self)
  = Seq.length (deep_model'1 self))
  && ([%#svec48] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)
   -> Seq.get (deep_model'1 self) i = deep_model'2 (index_logic'0 self i))
  
  function deep_model'0 (self : MutBorrow.t t_Vec'0) : Seq.seq t_DeepModelTy'0 =
    [%#smodel24] deep_model'1 self.current
  
  predicate permutation_of'0 (self : Seq.seq t_T'0) (other : Seq.seq t_T'0) =
    [%#sseq25] Permut.permut self other 0 (Seq.length self)
  
  function view'4 (self : MutBorrow.t t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel50] view'0 self
  
  function view'1 (self : MutBorrow.t t_Vec'0) : Seq.seq t_T'0 =
    [%#ssnapshot26] view'4 self
  
  predicate invariant'3 (self : MutBorrow.t t_Vec'0) =
    [%#sinvariant71] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  let rec sift_down'0 (v:MutBorrow.t t_Vec'0) (start:UInt64.t) (end':UInt64.t) (return'  (ret:()))= {[@expl:sift_down 'v' type invariant] [%#sheapsort_generic27] inv'3 v}
    {[@expl:sift_down requires #0] [%#sheapsort_generic28] heap_frag'0 (deep_model'0 v) (UInt64.t'int start
    + 1) (UInt64.t'int end')}
    {[@expl:sift_down requires #1] [%#sheapsort_generic29] UInt64.t'int start < UInt64.t'int end'}
    {[@expl:sift_down requires #2] [%#sheapsort_generic30] UInt64.t'int end' <= Seq.length (view'0 v)}
    any
    [ return' (result:())-> {[%#sheapsort_generic31] heap_frag'0 (deep_model'1 v.final) (UInt64.t'int start) (UInt64.t'int end')}
      {[%#sheapsort_generic32] permutation_of'0 (view'2 v.final) (view'0 v)}
      {[%#sheapsort_generic33] forall i : int . 0 <= i /\ i < UInt64.t'int start
      \/ UInt64.t'int end' <= i /\ i < Seq.length (view'0 v)  -> index_logic'0 v.current i = index_logic'0 v.final i}
      {[%#sheapsort_generic34] forall m : t_DeepModelTy'0 . (forall j : int . UInt64.t'int start <= j
      /\ j < UInt64.t'int end'  -> le_log'0 (Seq.get (deep_model'0 v) j) m)
       -> (forall j : int . UInt64.t'int start <= j /\ j < UInt64.t'int end'
       -> le_log'0 (Seq.get (deep_model'1 v.final) j) m)}
      (! return' {result}) ]
  
  
  predicate sorted_range'0 [#"heapsort_generic.rs" 78 0 78 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int) =
    [%#sheapsort_generic35] forall i : int, j : int . l <= i /\ i < j /\ j < u  -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  function view'6 (self : Slice64.slice t_T'0) : Seq.seq t_T'0
  
  axiom view'6_spec : forall self : Slice64.slice t_T'0 . ([%#sslice66] Seq.length (view'6 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice67] view'6 self = Slice64.id self)
  
  predicate invariant'1 (self : Slice64.slice t_T'0) =
    [%#sslice70] inv'5 (view'6 self)
  
  predicate inv'1 (_1 : Slice64.slice t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Slice64.slice t_T'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'2 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sinvariant71] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : MutBorrow.t (Slice64.slice t_T'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t (Slice64.slice t_T'0) [inv'2 x] . inv'2 x = invariant'2 x
  
  function view'5 (self : MutBorrow.t (Slice64.slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel22] view'6 self.current
  
  let rec deref_mut'0 (self:MutBorrow.t t_Vec'0) (return'  (ret:MutBorrow.t (Slice64.slice t_T'0)))= {[@expl:deref_mut 'self' type invariant] inv'3 self}
    any
    [ return' (result:MutBorrow.t (Slice64.slice t_T'0))-> {inv'2 result}
      {[%#svec36] view'5 result = view'0 self}
      {[%#svec37] view'6 result.final = view'2 self.final}
      (! return' {result}) ]
  
  
  let rec swap'0 (self:MutBorrow.t (Slice64.slice t_T'0)) (a:UInt64.t) (b:UInt64.t) (return'  (ret:()))= {[@expl:swap 'self' type invariant] inv'2 self}
    {[@expl:swap requires #0] [%#sslice38] UInt64.t'int a < Seq.length (view'5 self)}
    {[@expl:swap requires #1] [%#sslice39] UInt64.t'int b < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice40] Permut.exchange (view'6 self.final) (view'5 self) (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sresolve68] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t (Slice64.slice t_T'0)) =
    resolve'2 _1
  
  function heap_frag_max'0 [#"heapsort_generic.rs" 25 0 25 58] (s : Seq.seq t_DeepModelTy'0) (i : int) (end' : int) : ()
  
  axiom heap_frag_max'0_def : forall s : Seq.seq t_DeepModelTy'0, i : int, end' : int . ([%#sheapsort_generic41] heap_frag'0 s 0 end')
   -> ([%#sheapsort_generic42] 0 <= i /\ i < end')
   -> heap_frag_max'0 s i end' = ([%#sheapsort_generic45] if i > 0 then heap_frag_max'0 s (parent'0 i) end' else ())
  
  axiom heap_frag_max'0_spec : forall s : Seq.seq t_DeepModelTy'0, i : int, end' : int . ([%#sheapsort_generic41] heap_frag'0 s 0 end')
   -> ([%#sheapsort_generic42] 0 <= i /\ i < end')  -> ([%#sheapsort_generic43] le_log'0 (Seq.get s i) (Seq.get s 0))
  
  predicate resolve'3 (self : MutBorrow.t t_Vec'0) =
    [%#sresolve68] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Vec'0) =
    resolve'3 _1
  
  predicate sorted'0 [#"heapsort_generic.rs" 85 0 85 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#sheapsort_generic46] sorted_range'0 s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec heap_sort'0[#"heapsort_generic.rs" 93 0 95 29] (v:MutBorrow.t t_Vec'0) (return'  (ret:()))= {[@expl:heap_sort 'v' type invariant] [%#sheapsort_generic18] inv'3 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#sheapsort_generic0] v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {v.current} (fun (_ret':UInt64.t) ->  [ &_7 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_9 <- ([%#sheapsort_generic1] (2 : UInt64.t)) = ([%#sheapsort_generic2] (0 : UInt64.t)) ] s1
      | s1 = {[@expl:division by zero] [%#sheapsort_generic2] not _9} s2
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = UInt64.div {_7} {[%#sheapsort_generic1] (2 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &start <- _ret' ] s1)
      | s1 =  [ &old_4_0 <- v ] s2
      | s2 = bb4 ]
    
    | bb4 = bb4
      [ bb4 = {[@expl:mut invariant] old_4_0.final = v.final}
        {[@expl:loop invariant #0] [%#sheapsort_generic5] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant #1] [%#sheapsort_generic4] heap_frag'0 (deep_model'0 v) (UInt64.t'int start) (Seq.length (view'0 v))}
        {[@expl:loop invariant #2] [%#sheapsort_generic3] UInt64.t'int start <= Int.div (Seq.length (view'0 v)) 2}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 =  [ &_16 <- UInt64.gt start ([%#sheapsort_generic6] (0 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb6) ]  ]
        
        | bb6 = s0
          [ s0 = UInt64.sub {start} {[%#sheapsort_generic7] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &start <- _ret' ] s1)
          | s1 = {inv'0 v.current}
            MutBorrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':MutBorrow.t t_Vec'0) ->
                 [ &_19 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s2)
          | s2 = len'0 {_19.current} (fun (_ret':UInt64.t) ->  [ &_21 <- _ret' ] s3)
          | s3 = bb7 ]
        
        | bb7 = s0 [ s0 = sift_down'0 {_19} {start} {_21} (fun (_ret':()) ->  [ &_18 <- _ret' ] s1) | s1 = bb8 ] 
        | bb8 = bb4 ]
       ]
    
    | bb9 = s0 [ s0 = len'0 {v.current} (fun (_ret':UInt64.t) ->  [ &end' <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0 [ s0 =  [ &old_11_0 <- v ] s1 | s1 = bb11 ] 
    | bb11 = bb11
      [ bb11 = {[@expl:mut invariant] old_11_0.final = v.final}
        {[@expl:loop invariant #0] [%#sheapsort_generic12] UInt64.t'int end' <= Seq.length (view'0 v)}
        {[@expl:loop invariant #1] [%#sheapsort_generic11] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant #2] [%#sheapsort_generic10] heap_frag'0 (deep_model'0 v) 0 (UInt64.t'int end')}
        {[@expl:loop invariant #3] [%#sheapsort_generic9] sorted_range'0 (deep_model'0 v) (UInt64.t'int end') (Seq.length (view'0 v))}
        {[@expl:loop invariant #4] [%#sheapsort_generic8] forall i : int, j : int . 0 <= i
        /\ i < UInt64.t'int end' /\ UInt64.t'int end' <= j /\ j < Seq.length (view'0 v)
         -> le_log'0 (Seq.get (deep_model'0 v) i) (Seq.get (deep_model'0 v) j)}
        (! s0) [ s0 = bb12 ] 
        [ bb12 = s0
          [ s0 =  [ &_32 <- UInt64.gt end' ([%#sheapsort_generic13] (1 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_32 = false} (! bb17) | br1 -> {_32} (! bb13) ]  ]
        
        | bb13 = s0
          [ s0 = UInt64.sub {end'} {[%#sheapsort_generic14] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &end' <- _ret' ] s1)
          | s1 = {inv'0 v.current}
            MutBorrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':MutBorrow.t t_Vec'0) ->
                 [ &_37 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s2)
          | s2 = deref_mut'0 {_37} (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->  [ &_36 <- _ret' ] s3)
          | s3 = bb14 ]
        
        | bb14 = s0
          [ s0 = {inv'1 _36.current}
            MutBorrow.borrow_final <Slice64.slice t_T'0> {_36.current} {MutBorrow.get_id _36}
              (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->
                 [ &_35 <- _ret' ] 
                -{inv'1 _ret'.final}-
                 [ &_36 <- { _36 with current = _ret'.final } ] 
                s1)
          | s1 = swap'0 {_35} {[%#sheapsort_generic15] (0 : UInt64.t)} {end'} (fun (_ret':()) ->  [ &_34 <- _ret' ] s2)
          | s2 = bb15 ]
        
        | bb15 = s0
          [ s0 = {[@expl:type invariant] inv'2 _36} s1
          | s1 = -{resolve'0 _36}- s2
          | s2 = {[@expl:assertion] [%#sheapsort_generic16] let _ = heap_frag_max'0 (deep_model'0 v) 0 (UInt64.t'int end') in forall i : int, j : int . 0
            <= i
            /\ i < UInt64.t'int end' /\ UInt64.t'int end' <= j /\ j < Seq.length (view'0 v)
             -> le_log'0 (Seq.get (deep_model'0 v) i) (Seq.get (deep_model'0 v) j)}
            s3
          | s3 = {inv'0 v.current}
            MutBorrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':MutBorrow.t t_Vec'0) ->
                 [ &_42 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s4)
          | s4 = sift_down'0 {_42} {[%#sheapsort_generic17] (0 : UInt64.t)} {end'}
              (fun (_ret':()) ->  [ &_41 <- _ret' ] s5)
          | s5 = bb16 ]
        
        | bb16 = bb11 ]
       ]
    
    | bb17 = s0 [ s0 = {[@expl:type invariant] inv'3 v} s1 | s1 = -{resolve'1 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & v : MutBorrow.t t_Vec'0 = v
    | & old_v : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & start : UInt64.t = Any.any_l ()
    | & _7 : UInt64.t = Any.any_l ()
    | & _9 : bool = Any.any_l ()
    | & _16 : bool = Any.any_l ()
    | & _18 : () = Any.any_l ()
    | & _19 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _21 : UInt64.t = Any.any_l ()
    | & end' : UInt64.t = Any.any_l ()
    | & _32 : bool = Any.any_l ()
    | & _34 : () = Any.any_l ()
    | & _35 : MutBorrow.t (Slice64.slice t_T'0) = Any.any_l ()
    | & _36 : MutBorrow.t (Slice64.slice t_T'0) = Any.any_l ()
    | & _37 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _41 : () = Any.any_l ()
    | & _42 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & old_4_0 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & old_11_0 : MutBorrow.t t_Vec'0 = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:heap_sort ensures #0] [%#sheapsort_generic19] sorted'0 (deep_model'1 v.final)}
      {[@expl:heap_sort ensures #1] [%#sheapsort_generic20] permutation_of'0 (view'2 v.final) (view'0 v)}
      (! return' {result}) ]

end
