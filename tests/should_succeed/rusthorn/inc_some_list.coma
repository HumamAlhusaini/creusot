module M_inc_some_list__qyi14489061725823948544__lemma_sum_nonneg [#"inc_some_list.rs" 32 4 32 30] (* List *)
  let%span sinc_some_list0 = "inc_some_list.rs" 31 14 31 29
  let%span sinc_some_list1 = "inc_some_list.rs" 33 8 36 9
  let%span sinc_some_list2 = "inc_some_list.rs" 23 12 26 13
  
  use creusot.int.UInt32
  
  type t_List'0  =
    | C_Cons'0 UInt32.t t_List'0
    | C_Nil'0
  
  use creusot.int.UInt32
  
  use mach.int.Int
  
  function sum'0 [#"inc_some_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_list2] match self with
      | C_Cons'0 a l -> UInt32.t'int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  constant self  : t_List'0
  
  function lemma_sum_nonneg'0 [#"inc_some_list.rs" 32 4 32 30] (self : t_List'0) : ()
  
  goal vc_lemma_sum_nonneg'0 : match self with
    | C_Cons'0 _ l -> ([%#sinc_some_list0] sum'0 l >= 0)  -> ([%#sinc_some_list0] sum'0 self >= 0)
    | C_Nil'0 -> [%#sinc_some_list0] sum'0 self >= 0
    end
end
module M_inc_some_list__qyi14489061725823948544__sum_x [#"inc_some_list.rs" 41 4 41 26] (* List *)
  let%span sinc_some_list0 = "inc_some_list.rs" 44 19 44 20
  let%span sinc_some_list1 = "inc_some_list.rs" 39 15 39 38
  let%span sinc_some_list2 = "inc_some_list.rs" 40 14 40 35
  let%span sinc_some_list3 = "inc_some_list.rs" 23 12 26 13
  
  use creusot.int.UInt32
  
  type t_List'0  =
    | C_Cons'0 UInt32.t t_List'0
    | C_Nil'0
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:UInt32.t) (field_1:t_List'0))= any
    [ good (field_0:UInt32.t) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : UInt32.t, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
  
  
  use creusot.prelude.Any
  
  use creusot.int.UInt32
  
  use mach.int.Int
  
  function sum'0 [#"inc_some_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_list3] match self with
      | C_Cons'0 a l -> UInt32.t'int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  meta "compute_max_steps" 1000000
  
  let rec sum_x'0[#"inc_some_list.rs" 41 4 41 26] (self:t_List'0) (return'  (ret:UInt32.t))= {[@expl:sum_x requires] [%#sinc_some_list1] sum'0 self
    <= 1000000}
    (! bb0
    [ bb0 = any
      [ br0 (x0:UInt32.t) (x1:t_List'0)-> {self = C_Cons'0 x0 x1} (! bb2) | br1 -> {self = C_Nil'0 } (! bb3) ]
    
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sinc_some_list0] (0 : UInt32.t) ] s1 | s1 = bb6 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Cons'0 {self} (fun (r0'0:UInt32.t) (r1'0:t_List'0) ->  [ &a <- r0'0 ] s1)
      | s1 = v_Cons'0 {self} (fun (r0'1:UInt32.t) (r1'1:t_List'0) ->  [ &l <- r1'1 ] s2)
      | s2 = sum_x'0 {l} (fun (_ret':UInt32.t) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0 [ s0 = UInt32.add {a} {_8} (fun (_ret':UInt32.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = return' {_0} ]
    )
    [ & _0 : UInt32.t = Any.any_l ()
    | & self : t_List'0 = self
    | & a : UInt32.t = Any.any_l ()
    | & l : t_List'0 = Any.any_l ()
    | & _8 : UInt32.t = Any.any_l () ]
    
    [ return' (result:UInt32.t)-> {[@expl:sum_x ensures] [%#sinc_some_list2] UInt32.t'int result = sum'0 self}
      (! return' {result}) ]

end
module M_inc_some_list__qyi14489061725823948544__take_some [#"inc_some_list.rs" 50 4 50 39] (* List *)
  let%span sinc_some_list0 = "inc_some_list.rs" 53 16 53 51
  let%span sinc_some_list1 = "inc_some_list.rs" 54 19 54 27
  let%span sinc_some_list2 = "inc_some_list.rs" 48 14 48 64
  let%span sinc_some_list3 = "inc_some_list.rs" 49 14 49 35
  let%span sinc_some_list4 = "inc_some_list.rs" 31 14 31 29
  let%span sinc_some_list5 = "inc_some_list.rs" 33 8 36 9
  let%span sinc_some_list6 = "inc_some_list.rs" 23 12 26 13
  let%span smodel7 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve8 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.int.UInt32
  
  type t_List'0  =
    | C_Cons'0 UInt32.t t_List'0
    | C_Nil'0
  
  use creusot.prelude.MutBorrow
  
  predicate resolve'3 (self : MutBorrow.t t_List'0) =
    [%#sresolve8] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_List'0) =
    resolve'3 _1
  
  let rec v_Cons'0 (input:t_List'0) (ret  (field_0:UInt32.t) (field_1:t_List'0))= any
    [ good (field_0:UInt32.t) (field_1:t_List'0)-> {C_Cons'0 field_0 field_1 = input} (! ret {field_0} {field_1})
    | bad -> {forall field_0 : UInt32.t, field_1 : t_List'0 [C_Cons'0 field_0 field_1 : t_List'0] . C_Cons'0 field_0 field_1
      <> input}
      (! {false}
      any) ]
  
  
  use creusot.int.UInt32
  
  use mach.int.Int
  
  function sum'0 [#"inc_some_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_list6] match self with
      | C_Cons'0 a l -> UInt32.t'int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  function lemma_sum_nonneg'0 [#"inc_some_list.rs" 32 4 32 30] (self : t_List'0) : () =
    [%#sinc_some_list5] match self with
      | C_Cons'0 _ l -> lemma_sum_nonneg'0 l
      | C_Nil'0 -> ()
      end
  
  axiom lemma_sum_nonneg'0_spec : forall self : t_List'0 . [%#sinc_some_list4] sum'0 self >= 0
  
  let rec random'0 (_1:()) (return'  (ret:bool))= any [ return' (result:bool)-> (! return' {result}) ] 
  
  predicate resolve'4 (self : MutBorrow.t t_List'0) =
    [%#sresolve8] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_List'0) =
    resolve'4 _1
  
  predicate resolve'5 (self : MutBorrow.t UInt32.t) =
    [%#sresolve8] self.final = self.current
  
  predicate resolve'2 (_1 : MutBorrow.t UInt32.t) =
    resolve'5 _1
  
  use creusot.prelude.Any
  
  function view'0 (self : MutBorrow.t UInt32.t) : int =
    [%#smodel7] UInt32.t'int self.current
  
  meta "compute_max_steps" 1000000
  
  let rec take_some'0[#"inc_some_list.rs" 50 4 50 39] (self:MutBorrow.t t_List'0) (return'  (ret:MutBorrow.t UInt32.t))= (! bb0
    [ bb0 = any
      [ br0 (x0:UInt32.t) (x1:t_List'0)-> {self.current = C_Cons'0 x0 x1} (! bb2)
      | br1 -> {self.current = C_Nil'0 } (! bb3) ]
    
    | bb3 = s0 [ s0 = -{resolve'0 self}- s1 | s1 = bb11 ] 
    | bb11 = bb11 [ bb11 = (! bb12) [ bb12 = bb11 ]  ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Cons'0 {self.current}
          (fun (r0'0:UInt32.t) (r1'0:t_List'0) ->
            MutBorrow.borrow_final <UInt32.t> {r0'0} {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
              (fun (_ret':MutBorrow.t UInt32.t) ->
                 [ &ma <- _ret' ] 
                 [ &self <- { self with current = C_Cons'0 _ret'.final r1'0 } ] 
                s1))
      | s1 = v_Cons'0 {self.current}
          (fun (r0'1:UInt32.t) (r1'1:t_List'0) ->
            MutBorrow.borrow_final <t_List'0> {r1'1} {MutBorrow.inherit_id (MutBorrow.get_id self) 2}
              (fun (_ret':MutBorrow.t t_List'0) ->
                 [ &ml <- _ret' ] 
                 [ &self <- { self with current = C_Cons'0 r0'1 _ret'.final } ] 
                s2))
      | s2 =  [ &_10 <- [%#sinc_some_list0] lemma_sum_nonneg'0 ml.current ] s3
      | s3 = bb5 ]
    
    | bb5 = s0 [ s0 = random'0 {[%#sinc_some_list1] ()} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = any [ br0 -> {_13 = false} (! bb8) | br1 -> {_13} (! bb7) ] 
    | bb7 = s0
      [ s0 = -{resolve'1 ml}- s1
      | s1 = MutBorrow.borrow_final <UInt32.t> {ma.current} {MutBorrow.get_id ma}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_14 <- _ret' ]  [ &ma <- { ma with current = _ret'.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt32.t> {_14.current} {MutBorrow.get_id _14}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_12 <- _ret' ]  [ &_14 <- { _14 with current = _ret'.final } ] s3)
      | s3 = -{resolve'2 _14}- s4
      | s4 = bb10 ]
    
    | bb8 = s0
      [ s0 = -{resolve'2 ma}- s1
      | s1 = MutBorrow.borrow_final <t_List'0> {ml.current} {MutBorrow.get_id ml}
          (fun (_ret':MutBorrow.t t_List'0) ->  [ &_16 <- _ret' ]  [ &ml <- { ml with current = _ret'.final } ] s2)
      | s2 = take_some'0 {_16} (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb9 ]
    
    | bb9 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_15.current} {MutBorrow.get_id _15}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_12 <- _ret' ]  [ &_15 <- { _15 with current = _ret'.final } ] s1)
      | s1 = -{resolve'2 _15}- s2
      | s2 = bb10 ]
    
    | bb10 = s0
      [ s0 = MutBorrow.borrow_final <UInt32.t> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_9 <- _ret' ]  [ &_12 <- { _12 with current = _ret'.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_5 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final } ] s2)
      | s2 = -{resolve'2 _12}- s3
      | s3 = -{resolve'2 _9}- s4
      | s4 = -{resolve'1 ml}- s5
      | s5 = -{resolve'2 ma}- s6
      | s6 = MutBorrow.borrow_final <UInt32.t> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_2 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final } ] s7)
      | s7 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s8)
      | s8 = -{resolve'2 _5}- s9
      | s9 = -{resolve'2 _2}- s10
      | s10 = -{resolve'0 self}- s11
      | s11 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t UInt32.t = Any.any_l ()
    | & self : MutBorrow.t t_List'0 = self
    | & _2 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _5 : MutBorrow.t UInt32.t = Any.any_l ()
    | & ma : MutBorrow.t UInt32.t = Any.any_l ()
    | & ml : MutBorrow.t t_List'0 = Any.any_l ()
    | & _9 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _10 : () = Any.any_l ()
    | & _12 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _13 : bool = Any.any_l ()
    | & _14 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _15 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _16 : MutBorrow.t t_List'0 = Any.any_l () ]
    
    [ return' (result:MutBorrow.t UInt32.t)-> {[@expl:take_some ensures #0] [%#sinc_some_list2] sum'0 self.final
      - sum'0 self.current
      = UInt32.t'int result.final - view'0 result}
      {[@expl:take_some ensures #1] [%#sinc_some_list3] view'0 result <= sum'0 self.current}
      (! return' {result}) ]

end
module M_inc_some_list__inc_some_list [#"inc_some_list.rs" 62 0 62 41]
  let%span sinc_some_list0 = "inc_some_list.rs" 66 4 66 34
  let%span sinc_some_list1 = "inc_some_list.rs" 61 11 61 36
  let%span sinc_some_list2 = "inc_some_list.rs" 39 15 39 38
  let%span sinc_some_list3 = "inc_some_list.rs" 40 14 40 35
  let%span sinc_some_list4 = "inc_some_list.rs" 48 14 48 64
  let%span sinc_some_list5 = "inc_some_list.rs" 49 14 49 35
  let%span sinc_some_list6 = "inc_some_list.rs" 23 12 26 13
  let%span smodel7 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve8 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.int.UInt32
  
  type t_List'0  =
    | C_Cons'0 UInt32.t t_List'0
    | C_Nil'0
  
  use creusot.int.UInt32
  
  use mach.int.Int
  
  function sum'0 [#"inc_some_list.rs" 21 4 21 23] (self : t_List'0) : int =
    [%#sinc_some_list6] match self with
      | C_Cons'0 a l -> UInt32.t'int a + sum'0 l
      | C_Nil'0 -> 0
      end
  
  let rec sum_x'0 (self:t_List'0) (return'  (ret:UInt32.t))= {[@expl:sum_x requires] [%#sinc_some_list2] sum'0 self
    <= 1000000}
    any [ return' (result:UInt32.t)-> {[%#sinc_some_list3] UInt32.t'int result = sum'0 self} (! return' {result}) ] 
  
  use creusot.prelude.MutBorrow
  
  function view'0 (self : MutBorrow.t UInt32.t) : int =
    [%#smodel7] UInt32.t'int self.current
  
  let rec take_some'0 (self:MutBorrow.t t_List'0) (return'  (ret:MutBorrow.t UInt32.t))= any
    [ return' (result:MutBorrow.t UInt32.t)-> {[%#sinc_some_list4] sum'0 self.final - sum'0 self.current
      = UInt32.t'int result.final - view'0 result}
      {[%#sinc_some_list5] view'0 result <= sum'0 self.current}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t UInt32.t) =
    [%#sresolve8] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt32.t) =
    resolve'1 _1
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec inc_some_list'0[#"inc_some_list.rs" 62 0 62 41] (l:t_List'0) (k:UInt32.t) (return'  (ret:()))= {[@expl:inc_some_list requires] [%#sinc_some_list1] sum'0 l
    + UInt32.t'int k
    <= 1000000}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = sum_x'0 {l} (fun (_ret':UInt32.t) ->  [ &sum0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_List'0> {l}
          (fun (_ret':MutBorrow.t t_List'0) ->  [ &_7 <- _ret' ]  [ &l <- _ret'.final ] s1)
      | s1 = take_some'0 {_7} (fun (_ret':MutBorrow.t UInt32.t) ->  [ &ma <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = UInt32.add {ma.current} {k} (fun (_ret':UInt32.t) ->  [ &ma <- { ma with current = _ret' } ] s1)
      | s1 = -{resolve'0 ma}- s2
      | s2 = sum_x'0 {l} (fun (_ret':UInt32.t) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb4 ]
    
    | bb4 = s0
      [ s0 = UInt32.add {sum0} {k} (fun (_ret':UInt32.t) ->  [ &_13 <- _ret' ] s1)
      | s1 =  [ &_10 <- _11 = _13 ] s2
      | s2 = any [ br0 -> {_10 = false} (! bb6) | br1 -> {_10} (! bb5) ]  ]
    
    | bb5 = bb7
    | bb7 = return' {_0}
    | bb6 = {[%#sinc_some_list0] false} any ]
    )
    [ & _0 : () = Any.any_l ()
    | & l : t_List'0 = l
    | & k : UInt32.t = k
    | & sum0 : UInt32.t = Any.any_l ()
    | & ma : MutBorrow.t UInt32.t = Any.any_l ()
    | & _7 : MutBorrow.t t_List'0 = Any.any_l ()
    | & _10 : bool = Any.any_l ()
    | & _11 : UInt32.t = Any.any_l ()
    | & _13 : UInt32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
