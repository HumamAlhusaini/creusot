module M_prophecy__f [#"prophecy.rs" 3 0 3 10]
  let%span sprophecy0 = "prophecy.rs" 4 16 4 17
  let%span sprophecy1 = "prophecy.rs" 9 9 9 10
  let%span sresolve2 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.int.Int32
  
  use creusot.prelude.MutBorrow
  
  predicate resolve'1 (self : MutBorrow.t Int32.t) =
    [%#sresolve2] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'1 _1
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec f'0[#"prophecy.rs" 3 0 3 10] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sprophecy0] (0 : Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &y <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 =  [ &y <- { y with current = ([%#sprophecy1] (5 : Int32.t)) } ] s3
      | s3 = -{resolve'0 y}- s4
      | s4 = return' {_0} ]
     ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & x : Int32.t = Intrinsic.any_l ()
    | & y : MutBorrow.t Int32.t = Intrinsic.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
