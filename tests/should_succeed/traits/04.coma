module M_04__user [#"04.rs" 14 0 14 39]
  let%span s04 = "04.rs" 15 4 15 42
  let%span s04'0 = "04.rs" 14 18 14 19
  let%span s04'1 = "04.rs" 14 25 14 26
  let%span s04'2 = "04.rs" 13 10 13 25
  let%span s04'3 = "04.rs" 8 14 8 18
  let%span s04'4 = "04.rs" 8 20 8 21
  let%span s04'5 = "04.rs" 9 14 9 18
  let%span s04'6 = "04.rs" 9 20 9 21
  let%span s04'7 = "04.rs" 10 14 10 18
  let%span s04'8 = "04.rs" 10 20 10 21
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 90 8 90 18
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0 : t_T)
  
  predicate invariant' (self : t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0 : t_T)
  
  axiom inv_axiom [@rewrite] : forall x : t_T [inv'0 x] . inv'0 x = invariant' x
  
  let rec func1 (self:t_T) (o:t_T) (return'  (x:bool))= {[@expl:func1 'self' type invariant] [%#s04'3] inv'0 self}
    {[@expl:func1 'o' type invariant] [%#s04'4] inv'0 o}
    any [ return''0 (result:bool)-> (! return' {result}) ] 
  
  let rec func2 (self:t_T) (o:t_T) (return'  (x:bool))= {[@expl:func2 'self' type invariant] [%#s04'5] inv'0 self}
    {[@expl:func2 'o' type invariant] [%#s04'6] inv'0 o}
    any [ return''0 (result:bool)-> (! return' {result}) ] 
  
  let rec func3 (self:t_T) (o:t_T) (return'  (x:bool))= {[@expl:func3 'self' type invariant] [%#s04'7] inv'0 self}
    {[@expl:func3 'o' type invariant] [%#s04'8] inv'0 o}
    any [ return''0 (result:bool)-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec user[#"04.rs" 14 0 14 39] (a:t_T) (b:t_T) (return'  (x:bool))= {[@expl:user 'a' type invariant] [%#s04'0] inv'0 a}
    {[@expl:user 'b' type invariant] [%#s04'1] inv'0 b}
    (! bb0
    [ bb0 = s0 [ s0 = func1 {a'0} {b'0} (fun (_ret:bool) ->  [ &_4 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = any [ br0 -> {_4 = false} (! bb6) | br1 -> {_4} (! bb2) ] 
    | bb2 = s0 [ s0 = func2 {b'0} {a'0} (fun (_ret:bool) ->  [ &_7 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = any [ br0 -> {_7 = false} (! bb5) | br1 -> {_7} (! bb4) ] 
    | bb4 = s0 [ s0 = func3 {a'0} {b'0} (fun (_ret:bool) ->  [ &_0 <- _ret ] s1) | s1 = bb8 ] 
    | bb8 = bb9
    | bb5 = bb7
    | bb6 = bb7
    | bb7 = s0 [ s0 =  [ &_0 <- [%#s04] false ] s1 | s1 = bb9 ] 
    | bb9 = return''0 {_0} ]
    )
    [ & _0 : bool = Any.any_l ()
    | & a'0 : t_T = a
    | & b'0 : t_T = b
    | & _4 : bool = Any.any_l ()
    | & _7 : bool = Any.any_l () ]
     [ return''0 (result:bool)-> {[@expl:user ensures] [%#s04'2] result = false} (! return' {result}) ] 
end
