module M_02__omg [#"02.rs" 11 0 11 30]
  let%span s02 = "02.rs" 11 17 11 18
  let%span s02'0 = "02.rs" 10 10 10 24
  let%span s02'1 = "02.rs" 7 16 7 20
  let%span s02'2 = "02.rs" 6 14 6 28
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0 : t_T)
  
  predicate invariant' (self : t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0 : t_T)
  
  axiom inv_axiom [@rewrite] : forall x : t_T [inv'0 x] . inv'0 x = invariant' x
  
  let rec is_true (self:t_T) (return'  (x:bool))= {[@expl:is_true 'self' type invariant] [%#s02'1] inv'0 self}
    any [ return''0 (result:bool)-> {[%#s02'2] result = true} (! return' {result}) ] 
  
  predicate resolve (_0 : t_T)
  
  meta "compute_max_steps" 1000000
  
  let rec omg[#"02.rs" 11 0 11 30] (a:t_T) (return'  (x:bool))= {[@expl:omg 'a' type invariant] [%#s02] inv a}
    (! bb0
    [ bb0 = s0 [ s0 = is_true {a'0} (fun (_ret:bool) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv a'0} s1 | s1 = -{resolve a'0}- s2 | s2 = bb2 ] 
    | bb2 = return''0 {_0} ]
    ) [ & _0 : bool = Any.any_l () | & a'0 : t_T = a ] 
    [ return''0 (result:bool)-> {[@expl:omg ensures] [%#s02'0] result = true} (! return' {result}) ]

end
