module M_06__test [#"06.rs" 9 0 11 15]
  let%span s06 = "06.rs" 13 9 13 10
  let%span s06'0 = "06.rs" 9 19 9 20
  let%span s06'1 = "06.rs" 9 29 9 35
  let%span s06'2 = "06.rs" 6 11 6 15
  let%span s06'3 = "06.rs" 6 31 6 40
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_Tgt
  
  type t_T
  
  predicate inv (_0 : t_T)
  
  predicate invariant' (self : t_T) =
    [%#sinvariant] inv self
  
  predicate inv'0 (_0 : t_T)
  
  axiom inv_axiom [@rewrite] : forall x : t_T [inv'0 x] . inv'0 x = invariant' x
  
  predicate inv'1 (_0 : t_Tgt)
  
  let rec ix (self:t_T) (ix'0:UInt64.t) (return'  (x:t_Tgt))= {[@expl:ix 'self' type invariant] [%#s06'2] inv'0 self}
    any [ return''0 (result:t_Tgt)-> {[%#s06'3] inv'1 result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec test[#"06.rs" 9 0 11 15] (a:t_T) (return'  (x:t_Tgt))= {[@expl:test 'a' type invariant] [%#s06'0] inv'0 a}
    (! bb0
    [ bb0 = s0 [ s0 = ix {a'0} {[%#s06] (0 : UInt64.t)} (fun (_ret:t_Tgt) ->  [ &_0 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = return''0 {_0} ]
    ) [ & _0 : t_Tgt = Any.any_l () | & a'0 : t_T = a ] 
    [ return''0 (result:t_Tgt)-> {[@expl:test result type invariant] [%#s06'1] inv'1 result} (! return' {result}) ]

end
