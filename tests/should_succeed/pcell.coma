module M_pcell__foo [#"pcell.rs" 5 0 5 19]
  let%span spcell = "pcell.rs" 6 34 6 38
  let%span spcell'0 = "pcell.rs" 8 50 8 51
  let%span spcell'1 = "pcell.rs" 11 42 11 43
  let%span spcell'2 = "pcell.rs" 13 50 13 51
  let%span spcell'3 = "pcell.rs" 15 49 15 50
  let%span spcell'4 = "pcell.rs" 15 57 15 58
  let%span spcell'5 = "pcell.rs" 15 4 15 59
  let%span spcell'6 = "pcell.rs" 13 4 13 52
  let%span spcell'7 = "pcell.rs" 8 4 8 52
  let%span spcell'8 = "pcell.rs" 4 10 4 22
  let%span spcell'9 = "../../creusot-contracts/src/pcell.rs" 115 4 115 54
  let%span spcell'10 = "../../creusot-contracts/src/pcell.rs" 113 14 113 44
  let%span spcell'11 = "../../creusot-contracts/src/pcell.rs" 114 14 114 35
  let%span spcell'12 = "../../creusot-contracts/src/pcell.rs" 185 39 185 43
  let%span spcell'13 = "../../creusot-contracts/src/pcell.rs" 183 15 183 37
  let%span spcell'14 = "../../creusot-contracts/src/pcell.rs" 184 14 184 30
  let%span spcell'15 = "../../creusot-contracts/src/pcell.rs" 207 43 207 47
  let%span spcell'16 = "../../creusot-contracts/src/pcell.rs" 203 15 203 37
  let%span spcell'17 = "../../creusot-contracts/src/pcell.rs" 204 14 204 53
  let%span spcell'18 = "../../creusot-contracts/src/pcell.rs" 205 14 205 47
  let%span spcell'19 = "../../creusot-contracts/src/pcell.rs" 206 14 206 47
  let%span spcell'20 = "../../creusot-contracts/src/pcell.rs" 156 33 156 37
  let%span spcell'21 = "../../creusot-contracts/src/pcell.rs" 152 15 152 37
  let%span spcell'22 = "../../creusot-contracts/src/pcell.rs" 153 14 153 43
  let%span spcell'23 = "../../creusot-contracts/src/pcell.rs" 154 14 154 46
  let%span spcell'24 = "../../creusot-contracts/src/pcell.rs" 155 14 155 53
  let%span spcell'25 = "../../creusot-contracts/src/pcell.rs" 165 28 165 32
  let%span spcell'26 = "../../creusot-contracts/src/pcell.rs" 163 15 163 37
  let%span spcell'27 = "../../creusot-contracts/src/pcell.rs" 164 14 164 29
  let%span spcell'28 = "../../creusot-contracts/src/pcell.rs" 52 8 52 19
  let%span sghost = "../../creusot-contracts/src/ghost.rs" 131 19 131 23
  let%span sghost'0 = "../../creusot-contracts/src/ghost.rs" 131 4 131 37
  let%span sghost'1 = "../../creusot-contracts/src/ghost.rs" 130 14 130 32
  let%span sghost'2 = "../../creusot-contracts/src/ghost.rs" 146 27 146 31
  let%span sghost'3 = "../../creusot-contracts/src/ghost.rs" 146 4 146 49
  let%span sghost'4 = "../../creusot-contracts/src/ghost.rs" 144 14 144 60
  let%span sghost'5 = "../../creusot-contracts/src/ghost.rs" 145 14 145 60
  let%span sghost'6 = "../../creusot-contracts/src/ghost.rs" 234 8 234 14
  let%span sghost'7 = "../../creusot-contracts/src/ghost.rs" 101 8 101 22
  let%span sghost'8 = "../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 90 8 90 18
  let%span sinvariant'0 = "../../creusot-contracts/src/invariant.rs" 100 20 100 44
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_UnsafeCell  =
    { t_UnsafeCell__value: Int32.t }
  
  type t_PCell  =
    { t_PCell__0: t_UnsafeCell }
  
  type t_PCellOwn  =
    { t_PCellOwn__0: () }
  
  type t_Ghost  =
    { t_Ghost__0: t_PCellOwn }
  
  type tuple  =
    { _p0: t_PCell; _p1: t_Ghost }
  
  predicate inv (_0 : t_PCellOwn)
  
  axiom inv_axiom [@rewrite] : forall x : t_PCellOwn [inv x] . inv x = true
  
  function inner_logic (self : t_Ghost) : t_PCellOwn =
    [%#sghost'6] self.t_Ghost__0
  
  predicate invariant' (self : t_Ghost) =
    [%#sghost'8] inv (inner_logic self)
  
  predicate inv'0 (_0 : t_Ghost)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost [inv'0 x] . inv'0 x
  = (invariant' x
  /\ match x with
    | {t_Ghost__0 = a_0} -> true
    end)
  
  predicate inv'1 (_0 : tuple)
  
  axiom inv_axiom'1 [@rewrite] : forall x : tuple [inv'1 x] . inv'1 x = (let {_p0 = x0 ; _p1 = x1} = x in inv'0 x1)
  
  type t_Id
  
  function id (self : t_PCell) : t_Id
  
  function id'0 (self : t_PCellOwn) : t_Id
  
  function val' (self : t_PCellOwn) : Int32.t
  
  function view (self : t_PCellOwn) : Int32.t =
    [%#spcell'28] val' self
  
  let rec new (value:Int32.t) (return'  (x:tuple))= any
    [ return''0 (result:tuple)-> {[%#spcell'9] inv'1 result}
      {[%#spcell'10] id result._p0 = id'0 (inner_logic result._p1)}
      {[%#spcell'11] view (inner_logic result._p1) = value}
      (! return' {result}) ]
  
  
  type t_Ghost'0  =
    { t_Ghost__0'0: t_PCellOwn }
  
  predicate invariant''0 (self : t_Ghost) =
    [%#sinvariant] inv'0 self
  
  predicate inv'2 (_0 : t_Ghost)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Ghost [inv'2 x] . inv'2 x = invariant''0 x
  
  predicate inv'3 (_0 : t_PCellOwn)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_PCellOwn [inv'3 x] . inv'3 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : t_PCellOwn =
    [%#sghost'6] self.t_Ghost__0'0
  
  predicate invariant''1 (self : t_Ghost'0) =
    [%#sghost'8] inv'3 (inner_logic'0 self)
  
  predicate inv'4 (_0 : t_Ghost'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Ghost'0 [inv'4 x] . inv'4 x
  = (invariant''1 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec borrow (self:t_Ghost) (return'  (x:t_Ghost'0))= {[@expl:borrow 'self' type invariant] [%#sghost] inv'2 self}
    any
    [ return''0 (result:t_Ghost'0)-> {[%#sghost'0] inv'4 result}
      {[%#sghost'1] inner_logic'0 result = inner_logic self}
      (! return' {result}) ]
  
  
  function view'0 (self : t_PCellOwn) : Int32.t =
    [%#smodel] view self
  
  function view'1 (self : t_Ghost'0) : Int32.t =
    [%#sghost'7] view'0 (inner_logic'0 self)
  
  let rec borrow'0 (self:t_PCell) (perm:t_Ghost'0) (return'  (x:Int32.t))= {[@expl:borrow 'perm' type invariant] [%#spcell'12] inv'4 perm}
    {[@expl:borrow requires] [%#spcell'13] id self = id'0 (inner_logic'0 perm)}
    any [ return''0 (result:Int32.t)-> {[%#spcell'14] result = view'1 perm} (! return' {result}) ] 
  
  type t_Ghost'1  =
    { t_Ghost__0'1: MutBorrow.t t_PCellOwn }
  
  predicate invariant''2 (self : MutBorrow.t t_Ghost) =
    [%#sinvariant'0] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'5 (_0 : MutBorrow.t t_Ghost)
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t t_Ghost [inv'5 x] . inv'5 x = invariant''2 x
  
  predicate inv'6 (_0 : MutBorrow.t t_PCellOwn)
  
  axiom inv_axiom'6 [@rewrite] : forall x : MutBorrow.t t_PCellOwn [inv'6 x] . inv'6 x = true
  
  function inner_logic'1 (self : t_Ghost'1) : MutBorrow.t t_PCellOwn =
    [%#sghost'6] self.t_Ghost__0'1
  
  predicate invariant''3 (self : t_Ghost'1) =
    [%#sghost'8] inv'6 (inner_logic'1 self)
  
  predicate inv'7 (_0 : t_Ghost'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Ghost'1 [inv'7 x] . inv'7 x
  = (invariant''3 x
  /\ match x with
    | {t_Ghost__0'1 = a_0} -> true
    end)
  
  let rec borrow_mut (self:MutBorrow.t t_Ghost) (return'  (x:t_Ghost'1))= {[@expl:borrow_mut 'self' type invariant] [%#sghost'2] inv'5 self}
    any
    [ return''0 (result:t_Ghost'1)-> {[%#sghost'3] inv'7 result}
      {[%#sghost'4] (inner_logic'1 result).current = inner_logic self.current}
      {[%#sghost'5] (inner_logic'1 result).final = inner_logic self.final}
      (! return' {result}) ]
  
  
  let rec borrow_mut'0 (self:t_PCell) (perm:t_Ghost'1) (return'  (x:MutBorrow.t Int32.t))= {[@expl:borrow_mut 'perm' type invariant] [%#spcell'15] inv'7 perm}
    {[@expl:borrow_mut requires] [%#spcell'16] id self = id'0 (inner_logic'1 perm).current}
    any
    [ return''0 (result:MutBorrow.t Int32.t)-> {[%#spcell'17] id self = id'0 (inner_logic'1 perm).final}
      {[%#spcell'18] result.current = view (inner_logic'1 perm).current}
      {[%#spcell'19] result.final = view (inner_logic'1 perm).final}
      (! return' {result}) ]
  
  
  predicate resolve (self : MutBorrow.t Int32.t) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t Int32.t) =
    resolve _0
  
  let rec replace (self:t_PCell) (perm:t_Ghost'1) (val''0:Int32.t) (return'  (x:Int32.t))= {[@expl:replace 'perm' type invariant] [%#spcell'20] inv'7 perm}
    {[@expl:replace requires] [%#spcell'21] id self = id'0 (inner_logic'1 perm).current}
    any
    [ return''0 (result:Int32.t)-> {[%#spcell'22] val''0 = view (inner_logic'1 perm).final}
      {[%#spcell'23] result = view (inner_logic'1 perm).current}
      {[%#spcell'24] id self = id'0 (inner_logic'1 perm).final}
      (! return' {result}) ]
  
  
  function view'2 (self : t_Ghost) : Int32.t =
    [%#sghost'7] view (inner_logic self)
  
  let rec into_inner (self:t_PCell) (perm:t_Ghost) (return'  (x:Int32.t))= {[@expl:into_inner 'perm' type invariant] [%#spcell'25] inv'0 perm}
    {[@expl:into_inner requires] [%#spcell'26] id self = id'0 (inner_logic perm)}
    any [ return''0 (result:Int32.t)-> {[%#spcell'27] result = view'2 perm} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec foo[#"pcell.rs" 5 0 5 19] (return'  (x:Int32.t))= (! bb0
    [ bb0 = s0 [ s0 = new {[%#spcell] (1 : Int32.t)} (fun (_ret:tuple) ->  [ &_4 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &p <- _4._p0 ] s1
      | s1 =  [ &own <- _4._p1 ] s2
      | s2 = borrow {own} (fun (_ret:t_Ghost'0) ->  [ &_10 <- _ret ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0 [ s0 = borrow'0 {p} {_10} (fun (_ret:Int32.t) ->  [ &_8 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_6 <- _8 = ([%#spcell'0] (1 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb5) | br1 -> {_6} (! bb4) ]  ]
    
    | bb4 = s0
      [ s0 = {inv'0 own}
        MutBorrow.borrow_mut <t_Ghost> {own}
          (fun (_ret:MutBorrow.t t_Ghost) ->  [ &_17 <- _ret ] -{inv'0 _ret.final}-  [ &own <- _ret.final ] s1)
      | s1 = borrow_mut {_17} (fun (_ret:t_Ghost'1) ->  [ &_16 <- _ret ] s2)
      | s2 = bb6 ]
    
    | bb6 = s0 [ s0 = borrow_mut'0 {p} {_16} (fun (_ret:MutBorrow.t Int32.t) ->  [ &_14 <- _ret ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 =  [ &_14 <- { _14 with current = ([%#spcell'1] (2 : Int32.t)) } ] s1
      | s1 = -{resolve'0 _14}- s2
      | s2 = borrow {own} (fun (_ret:t_Ghost'0) ->  [ &_23 <- _ret ] s3)
      | s3 = bb8 ]
    
    | bb8 = s0 [ s0 = borrow'0 {p} {_23} (fun (_ret:Int32.t) ->  [ &_21 <- _ret ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 =  [ &_19 <- _21 = ([%#spcell'2] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_19 = false} (! bb11) | br1 -> {_19} (! bb10) ]  ]
    
    | bb10 = s0
      [ s0 = {inv'0 own}
        MutBorrow.borrow_mut <t_Ghost> {own}
          (fun (_ret:MutBorrow.t t_Ghost) ->  [ &_31 <- _ret ] -{inv'0 _ret.final}-  [ &own <- _ret.final ] s1)
      | s1 = borrow_mut {_31} (fun (_ret:t_Ghost'1) ->  [ &_30 <- _ret ] s2)
      | s2 = bb12 ]
    
    | bb12 = s0
      [ s0 = replace {p} {_30} {[%#spcell'3] (3 : Int32.t)} (fun (_ret:Int32.t) ->  [ &_28 <- _ret ] s1) | s1 = bb13 ]
    
    | bb13 = s0
      [ s0 =  [ &_27 <- _28 = ([%#spcell'4] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_27 = false} (! bb15) | br1 -> {_27} (! bb14) ]  ]
    
    | bb14 = s0 [ s0 = into_inner {p} {own} (fun (_ret:Int32.t) ->  [ &_0 <- _ret ] s1) | s1 = bb16 ] 
    | bb16 = return''0 {_0}
    | bb15 = {[%#spcell'5] false} any
    | bb11 = {[%#spcell'6] false} any
    | bb5 = {[%#spcell'7] false} any ]
    )
    [ & _0 : Int32.t = Any.any_l ()
    | & p : t_PCell = Any.any_l ()
    | & own : t_Ghost = Any.any_l ()
    | & _4 : tuple = Any.any_l ()
    | & _6 : bool = Any.any_l ()
    | & _8 : Int32.t = Any.any_l ()
    | & _10 : t_Ghost'0 = Any.any_l ()
    | & _14 : MutBorrow.t Int32.t = Any.any_l ()
    | & _16 : t_Ghost'1 = Any.any_l ()
    | & _17 : MutBorrow.t t_Ghost = Any.any_l ()
    | & _19 : bool = Any.any_l ()
    | & _21 : Int32.t = Any.any_l ()
    | & _23 : t_Ghost'0 = Any.any_l ()
    | & _27 : bool = Any.any_l ()
    | & _28 : Int32.t = Any.any_l ()
    | & _30 : t_Ghost'1 = Any.any_l ()
    | & _31 : MutBorrow.t t_Ghost = Any.any_l () ]
     [ return''0 (result:Int32.t)-> {[@expl:foo ensures] [%#spcell'8] Int32.to_int result = 3} (! return' {result}) ] 
end
