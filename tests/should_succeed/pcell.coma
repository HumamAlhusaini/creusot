module M_pcell__foo [#"pcell.rs" 5 0 5 19]
  let%span spcell0 = "pcell.rs" 6 34 6 38
  let%span spcell1 = "pcell.rs" 8 50 8 51
  let%span spcell2 = "pcell.rs" 11 42 11 43
  let%span spcell3 = "pcell.rs" 13 50 13 51
  let%span spcell4 = "pcell.rs" 15 49 15 50
  let%span spcell5 = "pcell.rs" 15 57 15 58
  let%span spcell6 = "pcell.rs" 15 4 15 59
  let%span spcell7 = "pcell.rs" 13 4 13 52
  let%span spcell8 = "pcell.rs" 8 4 8 52
  let%span spcell9 = "pcell.rs" 4 10 4 22
  let%span spcell10 = "../../creusot-contracts/src/pcell.rs" 95 4 95 54
  let%span spcell11 = "../../creusot-contracts/src/pcell.rs" 93 14 93 44
  let%span spcell12 = "../../creusot-contracts/src/pcell.rs" 94 14 94 35
  let%span sghost13 = "../../creusot-contracts/src/ghost.rs" 131 19 131 23
  let%span sghost14 = "../../creusot-contracts/src/ghost.rs" 131 4 131 37
  let%span sghost15 = "../../creusot-contracts/src/ghost.rs" 130 14 130 32
  let%span spcell16 = "../../creusot-contracts/src/pcell.rs" 165 39 165 43
  let%span spcell17 = "../../creusot-contracts/src/pcell.rs" 163 15 163 37
  let%span spcell18 = "../../creusot-contracts/src/pcell.rs" 164 14 164 30
  let%span sghost19 = "../../creusot-contracts/src/ghost.rs" 146 27 146 31
  let%span sghost20 = "../../creusot-contracts/src/ghost.rs" 146 4 146 49
  let%span sghost21 = "../../creusot-contracts/src/ghost.rs" 144 14 144 60
  let%span sghost22 = "../../creusot-contracts/src/ghost.rs" 145 14 145 60
  let%span spcell23 = "../../creusot-contracts/src/pcell.rs" 187 43 187 47
  let%span spcell24 = "../../creusot-contracts/src/pcell.rs" 183 15 183 37
  let%span spcell25 = "../../creusot-contracts/src/pcell.rs" 184 14 184 53
  let%span spcell26 = "../../creusot-contracts/src/pcell.rs" 185 14 185 47
  let%span spcell27 = "../../creusot-contracts/src/pcell.rs" 186 14 186 47
  let%span spcell28 = "../../creusot-contracts/src/pcell.rs" 136 33 136 37
  let%span spcell29 = "../../creusot-contracts/src/pcell.rs" 132 15 132 37
  let%span spcell30 = "../../creusot-contracts/src/pcell.rs" 133 14 133 43
  let%span spcell31 = "../../creusot-contracts/src/pcell.rs" 134 14 134 46
  let%span spcell32 = "../../creusot-contracts/src/pcell.rs" 135 14 135 53
  let%span spcell33 = "../../creusot-contracts/src/pcell.rs" 145 28 145 32
  let%span spcell34 = "../../creusot-contracts/src/pcell.rs" 143 15 143 37
  let%span spcell35 = "../../creusot-contracts/src/pcell.rs" 144 14 144 29
  let%span spcell36 = "../../creusot-contracts/src/pcell.rs" 71 8 71 15
  let%span spcell37 = "../../creusot-contracts/src/pcell.rs" 54 4 54 12
  let%span sghost38 = "../../creusot-contracts/src/ghost.rs" 101 8 101 22
  let%span sresolve39 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel40 = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sghost41 = "../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sinvariant42 = "../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sinvariant43 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_UnsafeCell'0  =
    { t_UnsafeCell__value'0: Int32.t }
  
  type t_PCell'0  =
    { t_PCell__0'0: t_UnsafeCell'0 }
  
  type t_Id'0
  
  type t_PCellOwn'0  =
    { t_PCellOwn__qy95zprivate'0: (); t_PCellOwn__id'0: t_Id'0; t_PCellOwn__val'0: Int32.t }
  
  type t_Ghost'1  =
    { t_Ghost__0'1: t_PCellOwn'0 }
  
  type tuple'0  =
    { _0'0: t_PCell'0; _1'0: t_Ghost'1 }
  
  predicate inv'6 (_1 : t_PCellOwn'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_PCellOwn'0 [inv'6 x] . inv'6 x = true
  
  function inner_logic'0 (self : t_Ghost'1) : t_PCellOwn'0
  
  predicate invariant'0 (self : t_Ghost'1) =
    [%#sghost41] inv'6 (inner_logic'0 self)
  
  predicate inv'0 (_1 : t_Ghost'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'1 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'1 = a_0} -> true
    end)
  
  predicate inv'1 (_1 : tuple'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : tuple'0 [inv'1 x] . inv'1 x = (let {_0'0 = x0 ; _1'0 = x1} = x in inv'0 x1)
  
  function id'0 (self : t_PCell'0) : t_Id'0
  
  function id'1 (self : t_PCellOwn'0) : t_Id'0 =
    [%#spcell36] self.t_PCellOwn__id'0
  
  function view'0 (self : t_PCellOwn'0) : Int32.t =
    [%#spcell37] self.t_PCellOwn__val'0
  
  let rec new'0 (value:Int32.t) (return'  (ret:tuple'0))= any
    [ return' (result:tuple'0)-> {[%#spcell10] inv'1 result}
      {[%#spcell11] id'0 result._0'0 = id'1 (inner_logic'0 result._1'0)}
      {[%#spcell12] view'0 (inner_logic'0 result._1'0) = value}
      (! return' {result}) ]
  
  
  type t_Ghost'0  =
    { t_Ghost__0'0: t_PCellOwn'0 }
  
  predicate invariant'1 (self : t_Ghost'1) =
    [%#sinvariant42] inv'0 self
  
  predicate inv'2 (_1 : t_Ghost'1)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Ghost'1 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate inv'7 (_1 : t_PCellOwn'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_PCellOwn'0 [inv'7 x] . inv'7 x = true
  
  function inner_logic'1 (self : t_Ghost'0) : t_PCellOwn'0
  
  predicate invariant'2 (self : t_Ghost'0) =
    [%#sghost41] inv'7 (inner_logic'1 self)
  
  predicate inv'3 (_1 : t_Ghost'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Ghost'0 [inv'3 x] . inv'3 x
  = (invariant'2 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec borrow'0 (self:t_Ghost'1) (return'  (ret:t_Ghost'0))= {[@expl:borrow 'self' type invariant] [%#sghost13] inv'2 self}
    any
    [ return' (result:t_Ghost'0)-> {[%#sghost14] inv'3 result}
      {[%#sghost15] inner_logic'1 result = inner_logic'0 self}
      (! return' {result}) ]
  
  
  function view'3 (self : t_PCellOwn'0) : Int32.t =
    [%#smodel40] view'0 self
  
  function view'1 (self : t_Ghost'0) : Int32.t =
    [%#sghost38] view'3 (inner_logic'1 self)
  
  let rec borrow'1 (self:t_PCell'0) (perm:t_Ghost'0) (return'  (ret:Int32.t))= {[@expl:borrow 'perm' type invariant] [%#spcell16] inv'3 perm}
    {[@expl:borrow requires] [%#spcell17] id'0 self = id'1 (inner_logic'1 perm)}
    any [ return' (result:Int32.t)-> {[%#spcell18] result = view'1 perm} (! return' {result}) ] 
  
  type t_Ghost'2  =
    { t_Ghost__0'2: MutBorrow.t t_PCellOwn'0 }
  
  predicate invariant'3 (self : MutBorrow.t t_Ghost'1) =
    [%#sinvariant43] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : MutBorrow.t t_Ghost'1)
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t t_Ghost'1 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate inv'8 (_1 : MutBorrow.t t_PCellOwn'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : MutBorrow.t t_PCellOwn'0 [inv'8 x] . inv'8 x = true
  
  function inner_logic'2 (self : t_Ghost'2) : MutBorrow.t t_PCellOwn'0
  
  predicate invariant'4 (self : t_Ghost'2) =
    [%#sghost41] inv'8 (inner_logic'2 self)
  
  predicate inv'5 (_1 : t_Ghost'2)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Ghost'2 [inv'5 x] . inv'5 x
  = (invariant'4 x
  /\ match x with
    | {t_Ghost__0'2 = a_0} -> true
    end)
  
  let rec borrow_mut'0 (self:MutBorrow.t t_Ghost'1) (return'  (ret:t_Ghost'2))= {[@expl:borrow_mut 'self' type invariant] [%#sghost19] inv'4 self}
    any
    [ return' (result:t_Ghost'2)-> {[%#sghost20] inv'5 result}
      {[%#sghost21] (inner_logic'2 result).current = inner_logic'0 self.current}
      {[%#sghost22] (inner_logic'2 result).final = inner_logic'0 self.final}
      (! return' {result}) ]
  
  
  let rec borrow_mut'1 (self:t_PCell'0) (perm:t_Ghost'2) (return'  (ret:MutBorrow.t Int32.t))= {[@expl:borrow_mut 'perm' type invariant] [%#spcell23] inv'5 perm}
    {[@expl:borrow_mut requires] [%#spcell24] id'0 self = id'1 (inner_logic'2 perm).current}
    any
    [ return' (result:MutBorrow.t Int32.t)-> {[%#spcell25] id'0 self = id'1 (inner_logic'2 perm).final}
      {[%#spcell26] result.current = view'0 (inner_logic'2 perm).current}
      {[%#spcell27] result.final = view'0 (inner_logic'2 perm).final}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t Int32.t) =
    [%#sresolve39] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'1 _1
  
  let rec replace'0 (self:t_PCell'0) (perm:t_Ghost'2) (val':Int32.t) (return'  (ret:Int32.t))= {[@expl:replace 'perm' type invariant] [%#spcell28] inv'5 perm}
    {[@expl:replace requires] [%#spcell29] id'0 self = id'1 (inner_logic'2 perm).current}
    any
    [ return' (result:Int32.t)-> {[%#spcell30] val' = view'0 (inner_logic'2 perm).final}
      {[%#spcell31] result = view'0 (inner_logic'2 perm).current}
      {[%#spcell32] id'0 self = id'1 (inner_logic'2 perm).final}
      (! return' {result}) ]
  
  
  function view'2 (self : t_Ghost'1) : Int32.t =
    [%#sghost38] view'0 (inner_logic'0 self)
  
  let rec into_inner'0 (self:t_PCell'0) (perm:t_Ghost'1) (return'  (ret:Int32.t))= {[@expl:into_inner 'perm' type invariant] [%#spcell33] inv'0 perm}
    {[@expl:into_inner requires] [%#spcell34] id'0 self = id'1 (inner_logic'0 perm)}
    any [ return' (result:Int32.t)-> {[%#spcell35] result = view'2 perm} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0[#"pcell.rs" 5 0 5 19] (return'  (ret:Int32.t))= (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#spcell0] (1 : Int32.t)} (fun (_ret':tuple'0) ->  [ &_4 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &p <- _4._0'0 ] s1 | s1 =  [ &own <- _4._1'0 ] s2 | s2 = bb2 ] 
    | bb2 = s0 [ s0 = borrow'0 {own} (fun (_ret':t_Ghost'0) ->  [ &_10 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = borrow'1 {p} {_10} (fun (_ret':Int32.t) ->  [ &_8 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_6 <- _8 = ([%#spcell1] (1 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_6 = false} (! bb6) | br1 -> {_6} (! bb5) ]  ]
    
    | bb5 = s0
      [ s0 = {inv'0 own}
        MutBorrow.borrow_mut <t_Ghost'1> {own}
          (fun (_ret':MutBorrow.t t_Ghost'1) ->  [ &_17 <- _ret' ] -{inv'0 _ret'.final}-  [ &own <- _ret'.final ] s1)
      | s1 = borrow_mut'0 {_17} (fun (_ret':t_Ghost'2) ->  [ &_16 <- _ret' ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0 [ s0 = borrow_mut'1 {p} {_16} (fun (_ret':MutBorrow.t Int32.t) ->  [ &_14 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 =  [ &_14 <- { _14 with current = ([%#spcell2] (2 : Int32.t)) } ] s1
      | s1 = -{resolve'0 _14}- s2
      | s2 = borrow'0 {own} (fun (_ret':t_Ghost'0) ->  [ &_23 <- _ret' ] s3)
      | s3 = bb9 ]
    
    | bb9 = s0 [ s0 = borrow'1 {p} {_23} (fun (_ret':Int32.t) ->  [ &_21 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0
      [ s0 =  [ &_19 <- _21 = ([%#spcell3] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_19 = false} (! bb12) | br1 -> {_19} (! bb11) ]  ]
    
    | bb11 = s0
      [ s0 = {inv'0 own}
        MutBorrow.borrow_mut <t_Ghost'1> {own}
          (fun (_ret':MutBorrow.t t_Ghost'1) ->  [ &_31 <- _ret' ] -{inv'0 _ret'.final}-  [ &own <- _ret'.final ] s1)
      | s1 = borrow_mut'0 {_31} (fun (_ret':t_Ghost'2) ->  [ &_30 <- _ret' ] s2)
      | s2 = bb13 ]
    
    | bb13 = s0
      [ s0 = replace'0 {p} {_30} {[%#spcell4] (3 : Int32.t)} (fun (_ret':Int32.t) ->  [ &_28 <- _ret' ] s1)
      | s1 = bb14 ]
    
    | bb14 = s0
      [ s0 =  [ &_27 <- _28 = ([%#spcell5] (2 : Int32.t)) ] s1
      | s1 = any [ br0 -> {_27 = false} (! bb16) | br1 -> {_27} (! bb15) ]  ]
    
    | bb15 = s0 [ s0 = into_inner'0 {p} {own} (fun (_ret':Int32.t) ->  [ &_0 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = bb18
    | bb18 = return' {_0}
    | bb16 = {[%#spcell6] false} any
    | bb12 = {[%#spcell7] false} any
    | bb6 = {[%#spcell8] false} any ]
    )
    [ & _0 : Int32.t = Any.any_l ()
    | & p : t_PCell'0 = Any.any_l ()
    | & own : t_Ghost'1 = Any.any_l ()
    | & _4 : tuple'0 = Any.any_l ()
    | & _6 : bool = Any.any_l ()
    | & _8 : Int32.t = Any.any_l ()
    | & _10 : t_Ghost'0 = Any.any_l ()
    | & _14 : MutBorrow.t Int32.t = Any.any_l ()
    | & _16 : t_Ghost'2 = Any.any_l ()
    | & _17 : MutBorrow.t t_Ghost'1 = Any.any_l ()
    | & _19 : bool = Any.any_l ()
    | & _21 : Int32.t = Any.any_l ()
    | & _23 : t_Ghost'0 = Any.any_l ()
    | & _27 : bool = Any.any_l ()
    | & _28 : Int32.t = Any.any_l ()
    | & _30 : t_Ghost'2 = Any.any_l ()
    | & _31 : MutBorrow.t t_Ghost'1 = Any.any_l () ]
     [ return' (result:Int32.t)-> {[@expl:foo ensures] [%#spcell9] Int32.to_int result = 3} (! return' {result}) ] 
end
