module M_switch__test [#"switch.rs" 9 0 9 35]
  let%span sswitch0 = "switch.rs" 12 16 12 21
  let%span sswitch1 = "switch.rs" 11 23 11 24
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Option'0  =
    | C_Some'0 UInt32.t
    | C_None'0
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec test'0[#"switch.rs" 9 0 9 35] (o:t_Option'0) (return'  (ret:bool))= (! bb0
    [ bb0 = any [ br0 (x0:UInt32.t)-> {o = C_Some'0 x0} (! bb2) | br1 -> {o = C_None'0} (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- [%#sswitch0] false ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some'0 {o} (fun (r0'0:UInt32.t) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &_0 <- UInt32.gt x ([%#sswitch1] (0 : UInt32.t)) ] s2
      | s2 = bb5 ]
    
    | bb5 = return' {_0} ]
    ) [ & _0 : bool = Any.any_l () | & o : t_Option'0 = o | & x : UInt32.t = Any.any_l () ] 
    [ return' (result:bool)-> (! return' {result}) ]

end
module M_switch__test2 [#"switch.rs" 16 0 16 42]
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type t_Option'0  =
    | C_Some'0 UInt32.t
    | C_None'0
  
  type tuple'0  =
    { _0'0: t_Option'0; _1'0: UInt32.t }
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec test2'0[#"switch.rs" 16 0 16 42] (o:tuple'0) (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = any [ br0 (x0:UInt32.t)-> {o._0'0 = C_Some'0 x0} (! bb2) | br1 -> {o._0'0 = C_None'0} (! bb3) ] 
    | bb3 = s0 [ s0 =  [ &_0 <- o._1'0 ] s1 | s1 = bb5 ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some'0 {o._0'0} (fun (r0'0:UInt32.t) ->  [ &x <- r0'0 ] s1) | s1 =  [ &_0 <- x ] s2 | s2 = bb5 ]
    
    | bb5 = return' {_0} ]
    ) [ & _0 : UInt32.t = Any.any_l () | & o : tuple'0 = o | & x : UInt32.t = Any.any_l () ] 
    [ return' (result:UInt32.t)-> (! return' {result}) ]

end
