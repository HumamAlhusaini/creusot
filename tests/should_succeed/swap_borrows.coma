module M_swap_borrows__swap [#"swap_borrows.rs" 5 0 5 31]
  let%span sswap_borrows0 = "swap_borrows.rs" 5 11 5 12
  let%span sswap_borrows1 = "swap_borrows.rs" 5 25 5 31
  let%span sswap_borrows2 = "swap_borrows.rs" 4 10 4 30
  
  use creusot.prelude.Any
  
  type t_T'0
  
  type tuple'0  =
    { _0'0: t_T'0; _1'0: t_T'0 }
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate inv'0 (_1 : tuple'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : tuple'0 [inv'0 x] . inv'0 x
  = (let {_0'0 = x0 ; _1'0 = x1} = x in inv'1 x0 /\ inv'1 x1)
  
  meta "compute_max_steps" 1000000
  
  let rec swap'0[#"swap_borrows.rs" 5 0 5 31] (x:tuple'0) (return'  (ret:tuple'0))= {[@expl:swap 'x' type invariant] [%#sswap_borrows0] inv'0 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 =  [ &_0 <- { _0'0 = x._1'0; _1'0 = x._0'0 } ] s1 | s1 = bb2 ] 
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : tuple'0 = Any.any_l () | & x : tuple'0 = x ] 
    [ return' (result:tuple'0)-> {[@expl:swap result type invariant] [%#sswap_borrows1] inv'0 result}
      {[@expl:swap ensures] [%#sswap_borrows2] result = { _0'0 = x._1'0; _1'0 = x._0'0 }}
      (! return' {result}) ]

end
module M_swap_borrows__f [#"swap_borrows.rs" 10 0 10 10]
  let%span sswap_borrows0 = "swap_borrows.rs" 11 26 11 27
  let%span sswap_borrows1 = "swap_borrows.rs" 11 29 11 30
  let%span sswap_borrows2 = "swap_borrows.rs" 13 11 13 13
  let%span sswap_borrows3 = "swap_borrows.rs" 15 20 15 30
  let%span sswap_borrows4 = "swap_borrows.rs" 16 20 16 29
  let%span sswap_borrows5 = "swap_borrows.rs" 4 10 4 30
  let%span sresolve6 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.int.UInt32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: UInt32.t; _1'0: UInt32.t }
  
  type tuple'1  =
    { _0'1: MutBorrow.t UInt32.t; _1'1: MutBorrow.t UInt32.t }
  
  let rec swap'0 (x:tuple'1) (return'  (ret:tuple'1))= any
    [ return' (result:tuple'1)-> {[%#sswap_borrows5] result = { _0'1 = x._1'1; _1'1 = x._0'1 }} (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t UInt32.t) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt32.t) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f'0[#"swap_borrows.rs" 10 0 10 10] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- { _0'0 = ([%#sswap_borrows0] (0 : UInt32.t)); _1'0 = ([%#sswap_borrows1] (0 : UInt32.t)) } ] s1
      | s1 =  [ &a <- _3._0'0 ] s2
      | s2 =  [ &b <- _3._1'0 ] s3
      | s3 = MutBorrow.borrow_mut <UInt32.t> {a}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_6 <- _ret' ]  [ &a <- _ret'.final ] s4)
      | s4 = MutBorrow.borrow_mut <UInt32.t> {b}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_8 <- _ret' ]  [ &b <- _ret'.final ] s5)
      | s5 = MutBorrow.borrow_final <UInt32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final } ] s6)
      | s6 =  [ &_5 <- { _0'1 = _6; _1'1 = _7 } ] s7
      | s7 = swap'0 {_5} (fun (_ret':tuple'1) ->  [ &p <- _ret' ] s8)
      | s8 = bb1 ]
    
    | bb1 = s0
      [ s0 = -{match p with
          | {_1'1 = x'0} -> resolve'0 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _8}- s2
      | s2 =  [ &p <- { p with _0'1 = { p._0'1 with current = ([%#sswap_borrows2] (10 : UInt32.t)) } } ] s3
      | s3 = -{match p with
          | {_0'1 = x'2} -> resolve'0 x'2
          | _ -> true
          end}-
        s4
      | s4 = {[@expl:assertion] [%#sswap_borrows3] b = (10 : UInt32.t)} s5
      | s5 = {[@expl:assertion] [%#sswap_borrows4] a = (0 : UInt32.t)} s6
      | s6 = return' {_0} ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : UInt32.t = Any.any_l ()
    | & b : UInt32.t = Any.any_l ()
    | & _3 : tuple'0 = Any.any_l ()
    | & p : tuple'1 = Any.any_l ()
    | & _5 : tuple'1 = Any.any_l ()
    | & _6 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _7 : MutBorrow.t UInt32.t = Any.any_l ()
    | & _8 : MutBorrow.t UInt32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
