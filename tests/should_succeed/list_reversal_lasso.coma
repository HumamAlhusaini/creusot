module M_list_reversal_lasso__qyi13715866738248475091__index [#"list_reversal_lasso.rs" 30 4 30 35] (* <Memory as std::ops::Index<usize>> *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 28 15 28 34
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 29 14 29 44
  let%span svec2 = "../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec3 = "../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 21 8 21 31
  let%span sslice6 = "../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span smodel7 = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice8 = "../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span svec9 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex10 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice6] UInt64.t'int self < Seq.length seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'1 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec9] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel7] view'1 self
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice8] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'1 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index requires] [%#svec2] in_bounds'0 index (view'0 self)}
    any [ return' (result:UInt64.t)-> {[%#svec3] has_value'0 index (view'0 self) result} (! return' {result}) ] 
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso4] Seq.length (view'1 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'1 self.t_Memory__0'0)
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex10] Seq.get (view'1 self) (UInt64.t'int ix)
  
  function index_logic'0 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso5] index_logic'1 self.t_Memory__0'0 i
  
  meta "compute_max_steps" 1000000
  
  let rec index'0[#"list_reversal_lasso.rs" 30 4 30 35] (self:t_Memory'0) (i:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index requires] [%#slist_reversal_lasso0] nonnull_ptr'0 self i}
    (! bb0
    [ bb0 = s0 [ s0 = index'1 {self.t_Memory__0'0} {i} (fun (_ret':UInt64.t) ->  [ &_6 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_5 <- _6 ] s1 | s1 =  [ &_0 <- _5 ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = Any.any_l ()
    | & self : t_Memory'0 = self
    | & i : UInt64.t = i
    | & _5 : UInt64.t = Any.any_l ()
    | & _6 : UInt64.t = Any.any_l () ]
    
    [ return' (result:UInt64.t)-> {[@expl:index ensures] [%#slist_reversal_lasso1] result = index_logic'0 self i}
      (! return' {result}) ]

end
module M_list_reversal_lasso__qyi14823043098042356205__index_mut [#"list_reversal_lasso.rs" 41 4 41 47] (* <Memory as std::ops::IndexMut<usize>> *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 36 15 36 34
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 37 14 37 47
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 38 14 38 47
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 39 14 39 47
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 40 14 40 111
  let%span svec5 = "../../creusot-contracts/src/std/vec.rs" 158 27 158 46
  let%span svec6 = "../../creusot-contracts/src/std/vec.rs" 159 26 159 54
  let%span svec7 = "../../creusot-contracts/src/std/vec.rs" 160 26 160 57
  let%span svec8 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 62
  let%span svec9 = "../../creusot-contracts/src/std/vec.rs" 162 26 162 55
  let%span slist_reversal_lasso10 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso11 = "list_reversal_lasso.rs" 21 8 21 31
  let%span svec12 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sslice13 = "../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span smodel14 = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice15 = "../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span sslice16 = "../../creusot-contracts/src/std/slice.rs" 137 20 137 94
  let%span sresolve17 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sindex18 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice13] UInt64.t'int self < Seq.length seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec12] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'1 (self : MutBorrow.t t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel14] view'0 self.current
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice15] Seq.get seq (UInt64.t'int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt64.t) (fin : Seq.seq UInt64.t) =
    [%#sslice16] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'1 (self:MutBorrow.t t_Vec'0) (index:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut requires] [%#svec5] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {[%#svec6] has_value'0 index (view'1 self) result.current}
      {[%#svec7] has_value'0 index (view'0 self.final) result.final}
      {[%#svec8] resolve_elswhere'0 index (view'1 self) (view'0 self.final)}
      {[%#svec9] Seq.length (view'0 self.final) = Seq.length (view'1 self)}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t UInt64.t) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt64.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_Memory'0) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Memory'0) =
    resolve'3 _1
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso10] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'0 self.t_Memory__0'0)
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex18] Seq.get (view'0 self) (UInt64.t'int ix)
  
  function index_logic'0 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso11] index_logic'1 self.t_Memory__0'0 i
  
  meta "compute_max_steps" 1000000
  
  let rec index_mut'0[#"list_reversal_lasso.rs" 41 4 41 47] (self:MutBorrow.t t_Memory'0) (i:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut requires] [%#slist_reversal_lasso0] nonnull_ptr'0 self.current i}
    (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final
          <t_Vec'0>
          {(self.current).t_Memory__0'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret':MutBorrow.t t_Vec'0) ->
             [ &_11 <- _ret' ] 
             [ &self <- { self with current = { t_Memory__0'0 = _ret'.final } } ] 
            s1)
      | s1 = index_mut'1 {_11} {i} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = MutBorrow.borrow_final <UInt64.t> {_10.current} {MutBorrow.get_id _10}
          (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_9 <- _ret' ]  [ &_10 <- { _10 with current = _ret'.final } ] s1)
      | s1 = MutBorrow.borrow_final <UInt64.t> {_9.current} {MutBorrow.get_id _9}
          (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_3 <- _ret' ]  [ &_9 <- { _9 with current = _ret'.final } ] s2)
      | s2 = MutBorrow.borrow_final <UInt64.t> {_3.current} {MutBorrow.get_id _3}
          (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_0 <- _ret' ]  [ &_3 <- { _3 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _10}- s4
      | s4 = -{resolve'0 _9}- s5
      | s5 = -{resolve'0 _3}- s6
      | s6 = -{resolve'1 self}- s7
      | s7 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t UInt64.t = Any.any_l ()
    | & self : MutBorrow.t t_Memory'0 = self
    | & i : UInt64.t = i
    | & _3 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _9 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _10 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _11 : MutBorrow.t t_Vec'0 = Any.any_l () ]
    
    [ return' (result:MutBorrow.t UInt64.t)-> {[@expl:index_mut ensures #0] [%#slist_reversal_lasso1] result.current
      = index_logic'0 self.current i}
      {[@expl:index_mut ensures #1] [%#slist_reversal_lasso2] result.final = index_logic'0 self.final i}
      {[@expl:index_mut ensures #2] [%#slist_reversal_lasso3] Seq.length (view'0 (self.current).t_Memory__0'0)
      = Seq.length (view'0 (self.final).t_Memory__0'0)}
      {[@expl:index_mut ensures #3] [%#slist_reversal_lasso4] forall j : UInt64.t . nonnull_ptr'0 self.current j
      /\ i <> j  -> index_logic'0 self.final j = index_logic'0 self.current j}
      (! return' {result}) ]

end
module M_list_reversal_lasso__qyi2644757663130641572__list_reversal_safe [#"list_reversal_lasso.rs" 65 4 65 59] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 66 20 66 24
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 70 20 70 45
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 69 20 69 52
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 68 20 68 52
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 71 19 71 23
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 63 15 63 40
  let%span slist_reversal_lasso6 = "list_reversal_lasso.rs" 64 15 64 47
  let%span slist_reversal_lasso7 = "list_reversal_lasso.rs" 57 12 57 95
  let%span slist_reversal_lasso8 = "list_reversal_lasso.rs" 13 0 13 15
  let%span slist_reversal_lasso9 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso10 = "list_reversal_lasso.rs" 28 15 28 34
  let%span slist_reversal_lasso11 = "list_reversal_lasso.rs" 29 14 29 44
  let%span slist_reversal_lasso12 = "list_reversal_lasso.rs" 36 15 36 34
  let%span slist_reversal_lasso13 = "list_reversal_lasso.rs" 37 14 37 47
  let%span slist_reversal_lasso14 = "list_reversal_lasso.rs" 38 14 38 47
  let%span slist_reversal_lasso15 = "list_reversal_lasso.rs" 39 14 39 47
  let%span slist_reversal_lasso16 = "list_reversal_lasso.rs" 40 14 40 111
  let%span slist_reversal_lasso17 = "list_reversal_lasso.rs" 21 8 21 31
  let%span svec18 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sresolve19 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sindex20 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec18] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso9] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'0 self.t_Memory__0'0)
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex20] Seq.get (view'0 self) (UInt64.t'int ix)
  
  function index_logic'0 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso17] index_logic'1 self.t_Memory__0'0 i
  
  constant v_NULL'0 : UInt64.t = [%#slist_reversal_lasso8] (18446744073709551615 : UInt64.t)
  
  predicate mem_is_well_formed'0 [#"list_reversal_lasso.rs" 55 4 55 43] (self : t_Memory'0) =
    [%#slist_reversal_lasso7] forall i : UInt64.t . nonnull_ptr'0 self i
     -> index_logic'0 self i = v_NULL'0 \/ nonnull_ptr'0 self (index_logic'0 self i)
  
  let rec index'0 (self:t_Memory'0) (i:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index requires] [%#slist_reversal_lasso10] nonnull_ptr'0 self i}
    any [ return' (result:UInt64.t)-> {[%#slist_reversal_lasso11] result = index_logic'0 self i} (! return' {result}) ] 
  
  let rec index_mut'0 (self:MutBorrow.t t_Memory'0) (i:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut requires] [%#slist_reversal_lasso12] nonnull_ptr'0 self.current i}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {[%#slist_reversal_lasso13] result.current = index_logic'0 self.current i}
      {[%#slist_reversal_lasso14] result.final = index_logic'0 self.final i}
      {[%#slist_reversal_lasso15] Seq.length (view'0 (self.current).t_Memory__0'0)
      = Seq.length (view'0 (self.final).t_Memory__0'0)}
      {[%#slist_reversal_lasso16] forall j : UInt64.t . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'0 self.final j = index_logic'0 self.current j}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t UInt64.t) =
    [%#sresolve19] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt64.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_Memory'0) =
    [%#sresolve19] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Memory'0) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec list_reversal_safe'0[#"list_reversal_lasso.rs" 65 4 65 59] (self:MutBorrow.t t_Memory'0) (l:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:list_reversal_safe requires #0] [%#slist_reversal_lasso5] mem_is_well_formed'0 self.current}
    {[@expl:list_reversal_safe requires #1] [%#slist_reversal_lasso6] l = v_NULL'0 \/ nonnull_ptr'0 self.current l}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : UInt64.t) ] s1
      | s1 =  [ &old_1_0 <- self ] s2
      | s2 = bb1 ]
    
    | bb1 = bb1
      [ bb1 = {[@expl:mut invariant] old_1_0.final = self.final}
        {[@expl:loop invariant #0] [%#slist_reversal_lasso3] r = v_NULL'0 \/ nonnull_ptr'0 self.current r}
        {[@expl:loop invariant #1] [%#slist_reversal_lasso2] l = v_NULL'0 \/ nonnull_ptr'0 self.current l}
        {[@expl:loop invariant #2] [%#slist_reversal_lasso1] mem_is_well_formed'0 self.current}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = s0
          [ s0 =  [ &_13 <- l <> ([%#slist_reversal_lasso4] (18446744073709551615 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_13 = false} (! bb6) | br1 -> {_13} (! bb3) ]  ]
        
        | bb3 = s0
          [ s0 =  [ &tmp <- l ] s1
          | s1 = index'0 {self.current} {l} (fun (_ret':UInt64.t) ->  [ &_17 <- _ret' ] s2)
          | s2 = bb4 ]
        
        | bb4 = s0
          [ s0 =  [ &l <- _17 ] s1
          | s1 = MutBorrow.borrow_mut <t_Memory'0> {self.current}
              (fun (_ret':MutBorrow.t t_Memory'0) ->
                 [ &_22 <- _ret' ] 
                 [ &self <- { self with current = _ret'.final } ] 
                s2)
          | s2 = index_mut'0 {_22} {tmp} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_21 <- _ret' ] s3)
          | s3 = bb5 ]
        
        | bb5 = s0
          [ s0 =  [ &_21 <- { _21 with current = r } ] s1
          | s1 = -{resolve'0 _21}- s2
          | s2 =  [ &r <- tmp ] s3
          | s3 = bb1 ]
         ]
       ]
    
    | bb6 = s0 [ s0 = -{resolve'1 self}- s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = Any.any_l ()
    | & self : MutBorrow.t t_Memory'0 = self
    | & l : UInt64.t = l
    | & r : UInt64.t = Any.any_l ()
    | & _13 : bool = Any.any_l ()
    | & tmp : UInt64.t = Any.any_l ()
    | & _17 : UInt64.t = Any.any_l ()
    | & _21 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _22 : MutBorrow.t t_Memory'0 = Any.any_l ()
    | & old_1_0 : MutBorrow.t t_Memory'0 = Any.any_l () ]
     [ return' (result:UInt64.t)-> (! return' {result}) ] 
end
module M_list_reversal_lasso__qyi2644757663130641572__list_reversal_list [#"list_reversal_lasso.rs" 99 4 99 82] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 100 20 100 24
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 101 20 101 35
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 105 20 105 76
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 104 20 104 59
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 103 20 103 44
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 107 19 107 23
  let%span slist_reversal_lasso6 = "list_reversal_lasso.rs" 109 16 109 36
  let%span slist_reversal_lasso7 = "list_reversal_lasso.rs" 97 15 97 31
  let%span slist_reversal_lasso8 = "list_reversal_lasso.rs" 98 14 98 47
  let%span slist_reversal_lasso9 = "list_reversal_lasso.rs" 83 12 85 98
  let%span slist_reversal_lasso10 = "list_reversal_lasso.rs" 13 0 13 15
  let%span slist_reversal_lasso11 = "list_reversal_lasso.rs" 36 15 36 34
  let%span slist_reversal_lasso12 = "list_reversal_lasso.rs" 37 14 37 47
  let%span slist_reversal_lasso13 = "list_reversal_lasso.rs" 38 14 38 47
  let%span slist_reversal_lasso14 = "list_reversal_lasso.rs" 39 14 39 47
  let%span slist_reversal_lasso15 = "list_reversal_lasso.rs" 40 14 40 111
  let%span smem16 = "../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem17 = "../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  let%span slist_reversal_lasso18 = "list_reversal_lasso.rs" 93 12 93 53
  let%span slist_reversal_lasso19 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso20 = "list_reversal_lasso.rs" 21 8 21 31
  let%span svec21 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sresolve22 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sindex23 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  
  use creusot.int.UInt64
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use seq.Reverse
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec21] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso19] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'0 self.t_Memory__0'0)
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex23] Seq.get (view'0 self) (UInt64.t'int ix)
  
  function index_logic'0 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso20] index_logic'1 self.t_Memory__0'0 i
  
  predicate list_seg'0 [#"list_reversal_lasso.rs" 81 4 81 81] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t) (last : UInt64.t) (l : int) (h : int)
  
   =
    [%#slist_reversal_lasso9] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'0 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall i : int, j : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  constant v_NULL'0 : UInt64.t = [%#slist_reversal_lasso10] (18446744073709551615 : UInt64.t)
  
  let rec index_mut'0 (self:MutBorrow.t t_Memory'0) (i:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut requires] [%#slist_reversal_lasso11] nonnull_ptr'0 self.current i}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {[%#slist_reversal_lasso12] result.current = index_logic'0 self.current i}
      {[%#slist_reversal_lasso13] result.final = index_logic'0 self.final i}
      {[%#slist_reversal_lasso14] Seq.length (view'0 (self.current).t_Memory__0'0)
      = Seq.length (view'0 (self.final).t_Memory__0'0)}
      {[%#slist_reversal_lasso15] forall j : UInt64.t . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'0 self.final j = index_logic'0 self.current j}
      (! return' {result}) ]
  
  
  let rec replace'0 (dest:MutBorrow.t UInt64.t) (src:UInt64.t) (return'  (ret:UInt64.t))= any
    [ return' (result:UInt64.t)-> {[%#smem16] dest.final = src}
      {[%#smem17] result = dest.current}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t UInt64.t) =
    [%#sresolve22] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt64.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_Memory'0) =
    [%#sresolve22] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Memory'0) =
    resolve'3 _1
  
  predicate list'0 [#"list_reversal_lasso.rs" 91 4 91 54] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t)
   =
    [%#slist_reversal_lasso18] list_seg'0 self first s v_NULL'0 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec list_reversal_list'0[#"list_reversal_lasso.rs" 99 4 99 82] (self:MutBorrow.t t_Memory'0) (l:UInt64.t) (s:Seq.seq UInt64.t) (return'  (ret:UInt64.t))= {[@expl:list_reversal_list requires] [%#slist_reversal_lasso7] list'0 self.current l s}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : UInt64.t) ] s1
      | s1 =  [ &n <- [%#slist_reversal_lasso1] 0 ] s2
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 =  [ &old_2_0 <- self ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = self.final}
        {[@expl:loop invariant #0] [%#slist_reversal_lasso4] 0 <= n /\ n <= Seq.length s}
        {[@expl:loop invariant #1] [%#slist_reversal_lasso3] list_seg'0 self.current l s v_NULL'0 n (Seq.length s)}
        {[@expl:loop invariant #2] [%#slist_reversal_lasso2] list_seg'0 self.current r (Reverse.reverse s) v_NULL'0 (Seq.length s
        - n) (Seq.length s)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 =  [ &_16 <- l <> ([%#slist_reversal_lasso5] (18446744073709551615 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_16 = false} (! bb9) | br1 -> {_16} (! bb4) ]  ]
        
        | bb4 = s0
          [ s0 = MutBorrow.borrow_mut <t_Memory'0> {self.current}
              (fun (_ret':MutBorrow.t t_Memory'0) ->
                 [ &_22 <- _ret' ] 
                 [ &self <- { self with current = _ret'.final } ] 
                s1)
          | s1 = index_mut'0 {_22} {l} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_21 <- _ret' ] s2)
          | s2 = bb5 ]
        
        | bb5 = s0
          [ s0 = MutBorrow.borrow_final <UInt64.t> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = _ret'.final } ] 
                s1)
          | s1 = MutBorrow.borrow_final <UInt64.t> {_20.current} {MutBorrow.get_id _20}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = _ret'.final } ] 
                s2)
          | s2 = MutBorrow.borrow_mut <UInt64.t> {r}
              (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_26 <- _ret' ]  [ &r <- _ret'.final ] s3)
          | s3 = MutBorrow.borrow_final <UInt64.t> {_26.current} {MutBorrow.get_id _26}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_25 <- _ret' ] 
                 [ &_26 <- { _26 with current = _ret'.final } ] 
                s4)
          | s4 = replace'0 {_25} {l} (fun (_ret':UInt64.t) ->  [ &_24 <- _ret' ] s5)
          | s5 = bb6 ]
        
        | bb6 = s0
          [ s0 = -{resolve'0 _26}- s1
          | s1 = replace'0 {_19} {_24} (fun (_ret':UInt64.t) ->  [ &_18 <- _ret' ] s2)
          | s2 = bb7 ]
        
        | bb7 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = -{resolve'0 _20}- s2
          | s2 =  [ &l <- _18 ] s3
          | s3 =  [ &_28 <- [%#slist_reversal_lasso6] n + 1 ] s4
          | s4 = bb8 ]
        
        | bb8 = s0 [ s0 =  [ &n <- _28 ] s1 | s1 = bb2 ]  ]
       ]
    
    | bb9 = s0 [ s0 = -{resolve'1 self}- s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = Any.any_l ()
    | & self : MutBorrow.t t_Memory'0 = self
    | & l : UInt64.t = l
    | & s : Seq.seq UInt64.t = s
    | & r : UInt64.t = Any.any_l ()
    | & n : int = Any.any_l ()
    | & _16 : bool = Any.any_l ()
    | & _18 : UInt64.t = Any.any_l ()
    | & _19 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _20 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _21 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _22 : MutBorrow.t t_Memory'0 = Any.any_l ()
    | & _24 : UInt64.t = Any.any_l ()
    | & _25 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _26 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _28 : int = Any.any_l ()
    | & old_2_0 : MutBorrow.t t_Memory'0 = Any.any_l () ]
    
    [ return' (result:UInt64.t)-> {[@expl:list_reversal_list ensures] [%#slist_reversal_lasso8] list'0 self.final result (Reverse.reverse s)}
      (! return' {result}) ]

end
module M_list_reversal_lasso__qyi2644757663130641572__list_reversal_loop [#"list_reversal_lasso.rs" 125 4 125 82] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 126 20 126 24
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 127 20 127 35
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 135 20 135 94
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 134 20 134 77
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 130 20 133 72
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 129 20 129 48
  let%span slist_reversal_lasso6 = "list_reversal_lasso.rs" 137 19 137 23
  let%span slist_reversal_lasso7 = "list_reversal_lasso.rs" 138 28 138 75
  let%span slist_reversal_lasso8 = "list_reversal_lasso.rs" 140 16 140 36
  let%span slist_reversal_lasso9 = "list_reversal_lasso.rs" 143 24 145 52
  let%span slist_reversal_lasso10 = "list_reversal_lasso.rs" 122 15 122 26
  let%span slist_reversal_lasso11 = "list_reversal_lasso.rs" 123 15 123 32
  let%span slist_reversal_lasso12 = "list_reversal_lasso.rs" 124 14 124 89
  let%span slist_reversal_lasso13 = "list_reversal_lasso.rs" 83 12 85 98
  let%span slist_reversal_lasso14 = "list_reversal_lasso.rs" 13 0 13 15
  let%span sindex15 = "../../creusot-contracts/src/logic/ops/index.rs" 96 8 96 33
  let%span slist_reversal_lasso16 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso17 = "list_reversal_lasso.rs" 21 8 21 31
  let%span slist_reversal_lasso18 = "list_reversal_lasso.rs" 36 15 36 34
  let%span slist_reversal_lasso19 = "list_reversal_lasso.rs" 37 14 37 47
  let%span slist_reversal_lasso20 = "list_reversal_lasso.rs" 38 14 38 47
  let%span slist_reversal_lasso21 = "list_reversal_lasso.rs" 39 14 39 47
  let%span slist_reversal_lasso22 = "list_reversal_lasso.rs" 40 14 40 111
  let%span smem23 = "../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem24 = "../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  let%span sseq25 = "../../creusot-contracts/src/logic/seq.rs" 247 8 247 27
  let%span slist_reversal_lasso26 = "list_reversal_lasso.rs" 118 12 118 53
  let%span svec27 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex28 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  let%span sresolve29 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use seq.Reverse
  use creusot.prelude.Any
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec27] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso16] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'0 self.t_Memory__0'0)
  
  function index_logic'2 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex28] Seq.get (view'0 self) (UInt64.t'int ix)
  
  function index_logic'1 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso17] index_logic'2 self.t_Memory__0'0 i
  
  predicate list_seg'0 [#"list_reversal_lasso.rs" 81 4 81 81] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t) (last : UInt64.t) (l : int) (h : int)
  
   =
    [%#slist_reversal_lasso13] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'1 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall i : int, j : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  constant v_NULL'0 : UInt64.t = [%#slist_reversal_lasso14] (18446744073709551615 : UInt64.t)
  
  function index_logic'0 [@inline:trivial] (self : Seq.seq UInt64.t) (ix : int) : UInt64.t =
    [%#sindex15] Seq.get self ix
  
  let rec index_mut'0 (self:MutBorrow.t t_Memory'0) (i:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut requires] [%#slist_reversal_lasso18] nonnull_ptr'0 self.current i}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {[%#slist_reversal_lasso19] result.current = index_logic'1 self.current i}
      {[%#slist_reversal_lasso20] result.final = index_logic'1 self.final i}
      {[%#slist_reversal_lasso21] Seq.length (view'0 (self.current).t_Memory__0'0)
      = Seq.length (view'0 (self.final).t_Memory__0'0)}
      {[%#slist_reversal_lasso22] forall j : UInt64.t . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'1 self.final j = index_logic'1 self.current j}
      (! return' {result}) ]
  
  
  let rec replace'0 (dest:MutBorrow.t UInt64.t) (src:UInt64.t) (return'  (ret:UInt64.t))= any
    [ return' (result:UInt64.t)-> {[%#smem23] dest.final = src}
      {[%#smem24] result = dest.current}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t UInt64.t) =
    [%#sresolve29] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt64.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_Memory'0) =
    [%#sresolve29] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Memory'0) =
    resolve'3 _1
  
  function push_front'0 [@inline:trivial] (self : Seq.seq UInt64.t) (x : UInt64.t) : Seq.seq UInt64.t =
    [%#sseq25] Seq.cons x self
  
  predicate loopqy95z'0 [#"list_reversal_lasso.rs" 116 4 116 55] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t)
  
   =
    [%#slist_reversal_lasso26] list_seg'0 self first s (Seq.get s 0) 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec list_reversal_loop'0[#"list_reversal_lasso.rs" 125 4 125 82] (self:MutBorrow.t t_Memory'0) (l:UInt64.t) (s:Seq.seq UInt64.t) (return'  (ret:UInt64.t))= {[@expl:list_reversal_loop requires #0] [%#slist_reversal_lasso10] Seq.length s
    > 0}
    {[@expl:list_reversal_loop requires #1] [%#slist_reversal_lasso11] loopqy95z'0 self.current l s}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : UInt64.t) ] s1
      | s1 =  [ &n <- [%#slist_reversal_lasso1] 0 ] s2
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 =  [ &old_2_0 <- self ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = self.final}
        {[@expl:loop invariant #0] [%#slist_reversal_lasso5] 0 <= n /\ n <= Seq.length s + 1}
        {[@expl:loop invariant #1] [%#slist_reversal_lasso4] n = Seq.length s + 1
         -> l = v_NULL'0
        /\ r = index_logic'0 s 0
        /\ nonnull_ptr'0 self.current r
        /\ index_logic'1 self.current r = index_logic'0 s (Seq.length s - 1)
        /\ list_seg'0 self.current (index_logic'0 s (Seq.length s
        - 1)) (Reverse.reverse s) (index_logic'0 s 0) 0 (Seq.length s - 1)}
        {[@expl:loop invariant #2] [%#slist_reversal_lasso3] n <= Seq.length s
         -> list_seg'0 self.current l s (index_logic'0 s 0) n (Seq.length s)}
        {[@expl:loop invariant #3] [%#slist_reversal_lasso2] n <= Seq.length s
         -> list_seg'0 self.current r (Reverse.reverse s) v_NULL'0 (Seq.length s - n) (Seq.length s)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 =  [ &_18 <- l <> ([%#slist_reversal_lasso6] (18446744073709551615 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_18 = false} (! bb9) | br1 -> {_18} (! bb4) ]  ]
        
        | bb4 = s0
          [ s0 = {[@expl:assertion] [%#slist_reversal_lasso7] n = Seq.length s
             -> l = Seq.get (Reverse.reverse s) (Seq.length s - 1)}
            s1
          | s1 = MutBorrow.borrow_mut <t_Memory'0> {self.current}
              (fun (_ret':MutBorrow.t t_Memory'0) ->
                 [ &_26 <- _ret' ] 
                 [ &self <- { self with current = _ret'.final } ] 
                s2)
          | s2 = index_mut'0 {_26} {l} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_25 <- _ret' ] s3)
          | s3 = bb5 ]
        
        | bb5 = s0
          [ s0 = MutBorrow.borrow_final <UInt64.t> {_25.current} {MutBorrow.get_id _25}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_24 <- _ret' ] 
                 [ &_25 <- { _25 with current = _ret'.final } ] 
                s1)
          | s1 = MutBorrow.borrow_final <UInt64.t> {_24.current} {MutBorrow.get_id _24}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_23 <- _ret' ] 
                 [ &_24 <- { _24 with current = _ret'.final } ] 
                s2)
          | s2 = MutBorrow.borrow_mut <UInt64.t> {r}
              (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_30 <- _ret' ]  [ &r <- _ret'.final ] s3)
          | s3 = MutBorrow.borrow_final <UInt64.t> {_30.current} {MutBorrow.get_id _30}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_29 <- _ret' ] 
                 [ &_30 <- { _30 with current = _ret'.final } ] 
                s4)
          | s4 = replace'0 {_29} {l} (fun (_ret':UInt64.t) ->  [ &_28 <- _ret' ] s5)
          | s5 = bb6 ]
        
        | bb6 = s0
          [ s0 = -{resolve'0 _30}- s1
          | s1 = replace'0 {_23} {_28} (fun (_ret':UInt64.t) ->  [ &_22 <- _ret' ] s2)
          | s2 = bb7 ]
        
        | bb7 = s0
          [ s0 = -{resolve'0 _25}- s1
          | s1 = -{resolve'0 _24}- s2
          | s2 =  [ &l <- _22 ] s3
          | s3 =  [ &_32 <- [%#slist_reversal_lasso8] n + 1 ] s4
          | s4 = bb8 ]
        
        | bb8 = s0 [ s0 =  [ &n <- _32 ] s1 | s1 = bb2 ]  ]
       ]
    
    | bb9 = s0
      [ s0 = -{resolve'1 self}- s1
      | s1 = {[@expl:assertion] [%#slist_reversal_lasso9] forall i : int . 0 <= i /\ i < Seq.length s
         -> Seq.get (push_front'0 (Reverse.reverse (Seq.([..]) s 1 (Seq.length s))) (index_logic'0 s 0)) i
        = (if i = 0 then index_logic'0 s 0 else Seq.get (Reverse.reverse s) (i - 1))}
        s2
      | s2 =  [ &_0 <- r ] s3
      | s3 = return' {_0} ]
     ]
    )
    [ & _0 : UInt64.t = Any.any_l ()
    | & self : MutBorrow.t t_Memory'0 = self
    | & l : UInt64.t = l
    | & s : Seq.seq UInt64.t = s
    | & r : UInt64.t = Any.any_l ()
    | & n : int = Any.any_l ()
    | & _18 : bool = Any.any_l ()
    | & _22 : UInt64.t = Any.any_l ()
    | & _23 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _24 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _25 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _26 : MutBorrow.t t_Memory'0 = Any.any_l ()
    | & _28 : UInt64.t = Any.any_l ()
    | & _29 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _30 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _32 : int = Any.any_l ()
    | & old_2_0 : MutBorrow.t t_Memory'0 = Any.any_l () ]
    
    [ return' (result:UInt64.t)-> {[@expl:list_reversal_loop ensures] [%#slist_reversal_lasso12] loopqy95z'0 self.final result (push_front'0 (Reverse.reverse (Seq.([..]) s 1 (Seq.length s))) (index_logic'0 s 0))}
      (! return' {result}) ]

end
module M_list_reversal_lasso__qyi2644757663130641572__list_reversal_lasso [#"list_reversal_lasso.rs" 163 4 168 12] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 169 20 169 24
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 170 20 170 35
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 184 12 184 82
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 179 20 182 74
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 174 12 174 73
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 172 20 172 58
  let%span slist_reversal_lasso6 = "list_reversal_lasso.rs" 190 19 190 23
  let%span slist_reversal_lasso7 = "list_reversal_lasso.rs" 192 16 192 36
  let%span slist_reversal_lasso8 = "list_reversal_lasso.rs" 161 15 161 38
  let%span slist_reversal_lasso9 = "list_reversal_lasso.rs" 162 14 162 54
  let%span sindex10 = "../../creusot-contracts/src/logic/ops/index.rs" 96 8 96 33
  let%span slist_reversal_lasso11 = "list_reversal_lasso.rs" 83 12 85 98
  let%span slist_reversal_lasso12 = "list_reversal_lasso.rs" 13 0 13 15
  let%span slist_reversal_lasso13 = "list_reversal_lasso.rs" 36 15 36 34
  let%span slist_reversal_lasso14 = "list_reversal_lasso.rs" 37 14 37 47
  let%span slist_reversal_lasso15 = "list_reversal_lasso.rs" 38 14 38 47
  let%span slist_reversal_lasso16 = "list_reversal_lasso.rs" 39 14 39 47
  let%span slist_reversal_lasso17 = "list_reversal_lasso.rs" 40 14 40 111
  let%span smem18 = "../../creusot-contracts/src/std/mem.rs" 8 22 8 34
  let%span smem19 = "../../creusot-contracts/src/std/mem.rs" 9 22 9 37
  let%span slist_reversal_lasso20 = "list_reversal_lasso.rs" 153 12 153 73
  let%span slist_reversal_lasso21 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso22 = "list_reversal_lasso.rs" 21 8 21 31
  let%span svec23 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sresolve24 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sindex25 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Opaque
  use creusot.prelude.MutBorrow
  use seq.Reverse
  use creusot.prelude.Any
  
  function index_logic'0 [@inline:trivial] (self : Seq.seq UInt64.t) (ix : int) : UInt64.t =
    [%#sindex10] Seq.get self ix
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec23] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso21] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'0 self.t_Memory__0'0)
  
  function index_logic'2 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex25] Seq.get (view'0 self) (UInt64.t'int ix)
  
  function index_logic'1 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso22] index_logic'2 self.t_Memory__0'0 i
  
  predicate list_seg'0 [#"list_reversal_lasso.rs" 81 4 81 81] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t) (last : UInt64.t) (l : int) (h : int)
  
   =
    [%#slist_reversal_lasso11] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'1 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall i : int, j : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  constant v_NULL'0 : UInt64.t = [%#slist_reversal_lasso12] (18446744073709551615 : UInt64.t)
  
  let rec index_mut'0 (self:MutBorrow.t t_Memory'0) (i:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut requires] [%#slist_reversal_lasso13] nonnull_ptr'0 self.current i}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {[%#slist_reversal_lasso14] result.current = index_logic'1 self.current i}
      {[%#slist_reversal_lasso15] result.final = index_logic'1 self.final i}
      {[%#slist_reversal_lasso16] Seq.length (view'0 (self.current).t_Memory__0'0)
      = Seq.length (view'0 (self.final).t_Memory__0'0)}
      {[%#slist_reversal_lasso17] forall j : UInt64.t . nonnull_ptr'0 self.current j /\ i <> j
       -> index_logic'1 self.final j = index_logic'1 self.current j}
      (! return' {result}) ]
  
  
  let rec replace'0 (dest:MutBorrow.t UInt64.t) (src:UInt64.t) (return'  (ret:UInt64.t))= any
    [ return' (result:UInt64.t)-> {[%#smem18] dest.final = src}
      {[%#smem19] result = dest.current}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t UInt64.t) =
    [%#sresolve24] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt64.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_Memory'0) =
    [%#sresolve24] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Memory'0) =
    resolve'3 _1
  
  predicate lasso'0 [#"list_reversal_lasso.rs" 151 4 151 70] (self : t_Memory'0) (first : UInt64.t) (s1 : Seq.seq UInt64.t) (s2 : Seq.seq UInt64.t)
  
   =
    [%#slist_reversal_lasso20] let mid = if Seq.length s2 = 0 then
      Seq.get s1 (Seq.length s1 - 1)
    else
      Seq.get s2 0
     in Seq.length s1 > 0
    /\ (forall i : int, j : int . 0 <= i /\ i < Seq.length s1 /\ 0 <= j /\ j < Seq.length s2
     -> Seq.get s1 i <> Seq.get s2 j)
    /\ list_seg'0 self first s1 mid 0 (Seq.length s1)
    /\ list_seg'0 self mid s2 (Seq.get s1 (Seq.length s1 - 1)) 0 (Seq.length s2)
  
  meta "compute_max_steps" 1000000
  
  let rec list_reversal_lasso'0[#"list_reversal_lasso.rs" 163 4 168 12] (self:MutBorrow.t t_Memory'0) (l:UInt64.t) (s1:Seq.seq UInt64.t) (s2:Seq.seq UInt64.t) (return'  (ret:UInt64.t))= {[@expl:list_reversal_lasso requires] [%#slist_reversal_lasso8] lasso'0 self.current l s1 s2}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#slist_reversal_lasso0] (18446744073709551615 : UInt64.t) ] s1
      | s1 =  [ &n <- [%#slist_reversal_lasso1] 0 ] s2
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 =  [ &old_2_0 <- self ] s1 | s1 = bb2 ] 
    | bb2 = bb2
      [ bb2 = {[@expl:mut invariant] old_2_0.final = self.final}
        {[@expl:loop invariant #0] [%#slist_reversal_lasso5] 0 <= n /\ n <= 2 * Seq.length s1 + Seq.length s2}
        {[@expl:loop invariant #1] [%#slist_reversal_lasso4] let mid = if Seq.length s2 = 0 then
          index_logic'0 s1 (Seq.length s1 - 1)
        else
          index_logic'0 s2 0
         in n <= Seq.length s1
         -> list_seg'0 self.current l s1 mid n (Seq.length s1)
        /\ list_seg'0 self.current mid s2 (index_logic'0 s1 (Seq.length s1 - 1)) 0 (Seq.length s2)
        /\ list_seg'0 self.current r (Reverse.reverse s1) v_NULL'0 (Seq.length s1 - n) (Seq.length s1)}
        {[@expl:loop invariant #2] [%#slist_reversal_lasso3] Seq.length s1 < n /\ n <= Seq.length s1 + Seq.length s2
         -> list_seg'0 self.current l s2 (index_logic'0 s1 (Seq.length s1 - 1)) (n - Seq.length s1) (Seq.length s2)
        /\ list_seg'0 self.current r (Reverse.reverse s2) (index_logic'0 s1 (Seq.length s1 - 1)) (Seq.length s1
        + Seq.length s2
        - n) (Seq.length s2)
        /\ list_seg'0 self.current (index_logic'0 s1 (Seq.length s1
        - 1)) (Reverse.reverse s1) v_NULL'0 0 (Seq.length s1)}
        {[@expl:loop invariant #3] [%#slist_reversal_lasso2] let mid = if Seq.length s2 = 0 then
          index_logic'0 s1 (Seq.length s1 - 1)
        else
          index_logic'0 s2 (Seq.length s2 - 1)
         in Seq.length s1 + Seq.length s2 < n
         -> list_seg'0 self.current l (Reverse.reverse s1) v_NULL'0 (n - Seq.length s1 - Seq.length s2) (Seq.length s1)
        /\ list_seg'0 self.current r s1 mid (2 * Seq.length s1 + Seq.length s2 - n) (Seq.length s1)
        /\ list_seg'0 self.current mid (Reverse.reverse s2) (index_logic'0 s1 (Seq.length s1 - 1)) 0 (Seq.length s2)}
        (! s0) [ s0 = bb3 ] 
        [ bb3 = s0
          [ s0 =  [ &_18 <- l <> ([%#slist_reversal_lasso6] (18446744073709551615 : UInt64.t)) ] s1
          | s1 = any [ br0 -> {_18 = false} (! bb9) | br1 -> {_18} (! bb4) ]  ]
        
        | bb4 = s0
          [ s0 = MutBorrow.borrow_mut <t_Memory'0> {self.current}
              (fun (_ret':MutBorrow.t t_Memory'0) ->
                 [ &_24 <- _ret' ] 
                 [ &self <- { self with current = _ret'.final } ] 
                s1)
          | s1 = index_mut'0 {_24} {l} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_23 <- _ret' ] s2)
          | s2 = bb5 ]
        
        | bb5 = s0
          [ s0 = MutBorrow.borrow_final <UInt64.t> {_23.current} {MutBorrow.get_id _23}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_22 <- _ret' ] 
                 [ &_23 <- { _23 with current = _ret'.final } ] 
                s1)
          | s1 = MutBorrow.borrow_final <UInt64.t> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_21 <- _ret' ] 
                 [ &_22 <- { _22 with current = _ret'.final } ] 
                s2)
          | s2 = MutBorrow.borrow_mut <UInt64.t> {r}
              (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_28 <- _ret' ]  [ &r <- _ret'.final ] s3)
          | s3 = MutBorrow.borrow_final <UInt64.t> {_28.current} {MutBorrow.get_id _28}
              (fun (_ret':MutBorrow.t UInt64.t) ->
                 [ &_27 <- _ret' ] 
                 [ &_28 <- { _28 with current = _ret'.final } ] 
                s4)
          | s4 = replace'0 {_27} {l} (fun (_ret':UInt64.t) ->  [ &_26 <- _ret' ] s5)
          | s5 = bb6 ]
        
        | bb6 = s0
          [ s0 = -{resolve'0 _28}- s1
          | s1 = replace'0 {_21} {_26} (fun (_ret':UInt64.t) ->  [ &_20 <- _ret' ] s2)
          | s2 = bb7 ]
        
        | bb7 = s0
          [ s0 = -{resolve'0 _23}- s1
          | s1 = -{resolve'0 _22}- s2
          | s2 =  [ &l <- _20 ] s3
          | s3 =  [ &_30 <- [%#slist_reversal_lasso7] n + 1 ] s4
          | s4 = bb8 ]
        
        | bb8 = s0 [ s0 =  [ &n <- _30 ] s1 | s1 = bb2 ]  ]
       ]
    
    | bb9 = s0 [ s0 = -{resolve'1 self}- s1 | s1 =  [ &_0 <- r ] s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : UInt64.t = Any.any_l ()
    | & self : MutBorrow.t t_Memory'0 = self
    | & l : UInt64.t = l
    | & s1 : Seq.seq UInt64.t = s1
    | & s2 : Seq.seq UInt64.t = s2
    | & r : UInt64.t = Any.any_l ()
    | & n : int = Any.any_l ()
    | & _18 : bool = Any.any_l ()
    | & _20 : UInt64.t = Any.any_l ()
    | & _21 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _22 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _23 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _24 : MutBorrow.t t_Memory'0 = Any.any_l ()
    | & _26 : UInt64.t = Any.any_l ()
    | & _27 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _28 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _30 : int = Any.any_l ()
    | & old_2_0 : MutBorrow.t t_Memory'0 = Any.any_l () ]
    
    [ return' (result:UInt64.t)-> {[@expl:list_reversal_lasso ensures] [%#slist_reversal_lasso9] lasso'0 self.final result s1 (Reverse.reverse s2)}
      (! return' {result}) ]

end
module M_list_reversal_lasso__qyi2644757663130641572__find_ptr_in_seq [#"list_reversal_lasso.rs" 204 4 204 66] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 198 15 198 37
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 199 14 202 5
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 203 14 203 25
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 206 12 208 53
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int
  
  constant s  : Seq.seq UInt64.t
  
  constant i  : int
  
  constant p  : int
  
  function find_ptr_in_seq'0 [#"list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq UInt64.t) (i : int) (p : int) : t_Option'0
  
  
  goal vc_find_ptr_in_seq'0 : ([%#slist_reversal_lasso0] 0 <= i /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    [%#slist_reversal_lasso1] match C_None'0 with
      | C_None'0 -> forall j : int . i <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> p
      | C_Some'0 j -> i <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = p
      end
  else
    if UInt64.t'int (Seq.get s i) = p then
      [%#slist_reversal_lasso1] match C_Some'0 i with
        | C_None'0 -> forall j : int . i <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> p
        | C_Some'0 j -> i <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = p
        end
    else
      (([@expl:find_ptr_in_seq requires] [%#slist_reversal_lasso0] 0 <= i + 1 /\ i + 1 <= Seq.length s)
      /\ 0 <= ([%#slist_reversal_lasso2] Seq.length s - i)
      /\ ([%#slist_reversal_lasso2] Seq.length s - (i + 1)) < ([%#slist_reversal_lasso2] Seq.length s - i))
      /\ (([%#slist_reversal_lasso1] match find_ptr_in_seq'0 s (i + 1) p with
        | C_None'0 -> forall j : int . i + 1 <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> p
        | C_Some'0 j -> i + 1 <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = p
        end)
       -> ([%#slist_reversal_lasso1] match find_ptr_in_seq'0 s (i + 1) p with
        | C_None'0 -> forall j : int . i <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> p
        | C_Some'0 j -> i <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = p
        end))
  
  )
end
module M_list_reversal_lasso__qyi2644757663130641572__pigeon [#"list_reversal_lasso.rs" 219 4 219 42] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 213 15 213 21
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 214 15 214 65
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 215 15 215 111
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 216 14 216 26
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 217 14 217 20
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 218 14 218 15
  let%span slist_reversal_lasso6 = "list_reversal_lasso.rs" 198 15 198 37
  let%span slist_reversal_lasso7 = "list_reversal_lasso.rs" 199 14 202 5
  let%span slist_reversal_lasso8 = "list_reversal_lasso.rs" 203 14 203 25
  let%span slist_reversal_lasso9 = "list_reversal_lasso.rs" 221 12 231 13
  let%span slist_reversal_lasso10 = "list_reversal_lasso.rs" 206 12 208 53
  
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 int
  
  function find_ptr_in_seq'0 [#"list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq UInt64.t) (i : int) (p : int) : t_Option'0
  
  
  axiom find_ptr_in_seq'0_def : forall s : Seq.seq UInt64.t, i : int, p : int . ([%#slist_reversal_lasso6] 0 <= i
  /\ i <= Seq.length s)
   -> find_ptr_in_seq'0 s i p
  = ([%#slist_reversal_lasso10] if i = Seq.length s then
    C_None'0
  else
    if UInt64.t'int (Seq.get s i) = p then C_Some'0 i else find_ptr_in_seq'0 s (i + 1) p
  )
  
  axiom find_ptr_in_seq'0_spec : forall s : Seq.seq UInt64.t, i : int, p : int . ([%#slist_reversal_lasso6] 0 <= i
  /\ i <= Seq.length s)
   -> ([%#slist_reversal_lasso7] match find_ptr_in_seq'0 s i p with
    | C_None'0 -> forall j : int . i <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> p
    | C_Some'0 j -> i <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = p
    end)
  
  constant s  : Seq.seq UInt64.t
  
  constant n  : int
  
  function pigeon'0 [#"list_reversal_lasso.rs" 219 4 219 42] (s : Seq.seq UInt64.t) (n : int) : bool
  
  goal vc_pigeon'0 : ([%#slist_reversal_lasso0] 0 <= n)
   -> ([%#slist_reversal_lasso1] forall i : int . 0 <= i /\ i < Seq.length s  -> UInt64.t'int (Seq.get s i) < n)
   -> ([%#slist_reversal_lasso2] forall i : int, j : int . 0 <= i
  /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
   -> (if n = 0 then
    ([%#slist_reversal_lasso3] Seq.length s <= n) && ([%#slist_reversal_lasso4] true)
  else
    ([@expl:find_ptr_in_seq requires] [%#slist_reversal_lasso6] 0 <= 0 /\ 0 <= Seq.length s)
    /\ (([%#slist_reversal_lasso7] match find_ptr_in_seq'0 s 0 (n - 1) with
      | C_None'0 -> forall j : int . 0 <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> n - 1
      | C_Some'0 j -> 0 <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = n - 1
      end)
     -> match find_ptr_in_seq'0 s 0 (n - 1) with
      | C_None'0 -> ((([@expl:pigeon requires #0] [%#slist_reversal_lasso0] 0 <= n - 1)
      && ([@expl:pigeon requires #1] [%#slist_reversal_lasso1] forall i : int . 0 <= i /\ i < Seq.length s
       -> UInt64.t'int (Seq.get s i) < n - 1)
      && ([@expl:pigeon requires #2] [%#slist_reversal_lasso2] forall i : int, j : int . 0 <= i
      /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j))
      /\ 0 <= ([%#slist_reversal_lasso5] n) /\ ([%#slist_reversal_lasso5] n - 1) < ([%#slist_reversal_lasso5] n))
      /\ (([%#slist_reversal_lasso3] Seq.length s <= n - 1) && ([%#slist_reversal_lasso4] pigeon'0 s (n - 1))
       -> ([%#slist_reversal_lasso3] Seq.length s <= n) && ([%#slist_reversal_lasso4] pigeon'0 s (n - 1)))
      | C_Some'0 i -> ([@expl:find_ptr_in_seq requires] [%#slist_reversal_lasso6] 0 <= i + 1 /\ i + 1 <= Seq.length s)
      /\ (([%#slist_reversal_lasso7] match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | C_None'0 -> forall j : int . i + 1 <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> n - 1
        | C_Some'0 j -> i + 1 <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = n - 1
        end)
       -> match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | C_None'0 -> ((([@expl:pigeon requires #0] [%#slist_reversal_lasso0] 0 <= n - 1)
        && ([@expl:pigeon requires #1] [%#slist_reversal_lasso1] forall i' : int . 0 <= i'
        /\ i' < Seq.length (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s)))
         -> UInt64.t'int (Seq.get (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) i') < n - 1)
        && ([@expl:pigeon requires #2] [%#slist_reversal_lasso2] forall i' : int, j : int . 0 <= i'
        /\ i' < Seq.length (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s)))
        /\ 0 <= j /\ j < Seq.length (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) /\ i' <> j
         -> Seq.get (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) i'
        <> Seq.get (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) j))
        /\ 0 <= ([%#slist_reversal_lasso5] n) /\ ([%#slist_reversal_lasso5] n - 1) < ([%#slist_reversal_lasso5] n))
        /\ (([%#slist_reversal_lasso3] Seq.length (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s)))
        <= n - 1)
        && ([%#slist_reversal_lasso4] pigeon'0 (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) (n
        - 1))
         -> ([%#slist_reversal_lasso3] Seq.length s <= n)
        && ([%#slist_reversal_lasso4] pigeon'0 (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) (n
        - 1)))
        | C_Some'0 _ -> ([%#slist_reversal_lasso3] Seq.length s <= n) && ([%#slist_reversal_lasso4] true)
        end)
      end)
  )
end
module M_list_reversal_lasso__qyi2644757663130641572__find_lasso_aux [#"list_reversal_lasso.rs" 244 4 244 95] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 236 15 236 40
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 237 15 237 53
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 238 15 238 56
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 239 14 242 5
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 243 14 243 37
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 198 15 198 37
  let%span slist_reversal_lasso6 = "list_reversal_lasso.rs" 199 14 202 5
  let%span slist_reversal_lasso7 = "list_reversal_lasso.rs" 203 14 203 25
  let%span svec8 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span slist_reversal_lasso9 = "list_reversal_lasso.rs" 213 15 213 21
  let%span slist_reversal_lasso10 = "list_reversal_lasso.rs" 214 15 214 65
  let%span slist_reversal_lasso11 = "list_reversal_lasso.rs" 215 15 215 111
  let%span slist_reversal_lasso12 = "list_reversal_lasso.rs" 216 14 216 26
  let%span slist_reversal_lasso13 = "list_reversal_lasso.rs" 217 14 217 20
  let%span slist_reversal_lasso14 = "list_reversal_lasso.rs" 218 14 218 15
  let%span slist_reversal_lasso15 = "list_reversal_lasso.rs" 246 12 258 13
  let%span slist_reversal_lasso16 = "list_reversal_lasso.rs" 57 12 57 95
  let%span slist_reversal_lasso17 = "list_reversal_lasso.rs" 13 0 13 15
  let%span slist_reversal_lasso18 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso19 = "list_reversal_lasso.rs" 83 12 85 98
  let%span slist_reversal_lasso20 = "list_reversal_lasso.rs" 93 12 93 53
  let%span slist_reversal_lasso21 = "list_reversal_lasso.rs" 153 12 153 73
  let%span slist_reversal_lasso22 = "list_reversal_lasso.rs" 206 12 208 53
  let%span slist_reversal_lasso23 = "list_reversal_lasso.rs" 221 12 231 13
  let%span slist_reversal_lasso24 = "list_reversal_lasso.rs" 21 8 21 31
  let%span sindex25 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 (Seq.seq UInt64.t)
  
  type tuple'0  =
    { _0'0: Seq.seq UInt64.t; _1'0: t_Option'1 }
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec8] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso18] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'0 self.t_Memory__0'0)
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex25] Seq.get (view'0 self) (UInt64.t'int ix)
  
  function index_logic'0 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso24] index_logic'1 self.t_Memory__0'0 i
  
  constant v_NULL'0 : UInt64.t = [%#slist_reversal_lasso17] (18446744073709551615 : UInt64.t)
  
  predicate mem_is_well_formed'0 [#"list_reversal_lasso.rs" 55 4 55 43] (self : t_Memory'0) =
    [%#slist_reversal_lasso16] forall i : UInt64.t . nonnull_ptr'0 self i
     -> index_logic'0 self i = v_NULL'0 \/ nonnull_ptr'0 self (index_logic'0 self i)
  
  predicate list_seg'0 [#"list_reversal_lasso.rs" 81 4 81 81] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t) (last : UInt64.t) (l : int) (h : int)
  
   =
    [%#slist_reversal_lasso19] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'0 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall i : int, j : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  predicate list'0 [#"list_reversal_lasso.rs" 91 4 91 54] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t)
   =
    [%#slist_reversal_lasso20] list_seg'0 self first s v_NULL'0 0 (Seq.length s)
  
  predicate lasso'0 [#"list_reversal_lasso.rs" 151 4 151 70] (self : t_Memory'0) (first : UInt64.t) (s1 : Seq.seq UInt64.t) (s2 : Seq.seq UInt64.t)
  
   =
    [%#slist_reversal_lasso21] let mid = if Seq.length s2 = 0 then
      Seq.get s1 (Seq.length s1 - 1)
    else
      Seq.get s2 0
     in Seq.length s1 > 0
    /\ (forall i : int, j : int . 0 <= i /\ i < Seq.length s1 /\ 0 <= j /\ j < Seq.length s2
     -> Seq.get s1 i <> Seq.get s2 j)
    /\ list_seg'0 self first s1 mid 0 (Seq.length s1)
    /\ list_seg'0 self mid s2 (Seq.get s1 (Seq.length s1 - 1)) 0 (Seq.length s2)
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 int
  
  function find_ptr_in_seq'0 [#"list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq UInt64.t) (i : int) (p : int) : t_Option'0
  
  
  axiom find_ptr_in_seq'0_def : forall s : Seq.seq UInt64.t, i : int, p : int . ([%#slist_reversal_lasso5] 0 <= i
  /\ i <= Seq.length s)
   -> find_ptr_in_seq'0 s i p
  = ([%#slist_reversal_lasso22] if i = Seq.length s then
    C_None'1
  else
    if UInt64.t'int (Seq.get s i) = p then C_Some'1 i else find_ptr_in_seq'0 s (i + 1) p
  )
  
  axiom find_ptr_in_seq'0_spec : forall s : Seq.seq UInt64.t, i : int, p : int . ([%#slist_reversal_lasso5] 0 <= i
  /\ i <= Seq.length s)
   -> ([%#slist_reversal_lasso6] match find_ptr_in_seq'0 s i p with
    | C_None'1 -> forall j : int . i <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> p
    | C_Some'1 j -> i <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = p
    end)
  
  function pigeon'0 [#"list_reversal_lasso.rs" 219 4 219 42] (s : Seq.seq UInt64.t) (n : int) : bool
  
  axiom pigeon'0_def : forall s : Seq.seq UInt64.t, n : int . ([%#slist_reversal_lasso9] 0 <= n)
   -> ([%#slist_reversal_lasso10] forall i : int . 0 <= i /\ i < Seq.length s  -> UInt64.t'int (Seq.get s i) < n)
   -> ([%#slist_reversal_lasso11] forall i : int, j : int . 0 <= i
  /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
   -> pigeon'0 s n
  = ([%#slist_reversal_lasso23] if n = 0 then
    true
  else
    match find_ptr_in_seq'0 s 0 (n - 1) with
      | C_None'1 -> pigeon'0 s (n - 1)
      | C_Some'1 i -> match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | C_None'1 -> pigeon'0 (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) (n - 1)
        | C_Some'1 _ -> true
        end
      end
  )
  
  axiom pigeon'0_spec : forall s : Seq.seq UInt64.t, n : int . ([%#slist_reversal_lasso9] 0 <= n)
   -> ([%#slist_reversal_lasso10] forall i : int . 0 <= i /\ i < Seq.length s  -> UInt64.t'int (Seq.get s i) < n)
   -> ([%#slist_reversal_lasso11] forall i : int, j : int . 0 <= i
  /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
   -> ([%#slist_reversal_lasso12] Seq.length s <= n) && ([%#slist_reversal_lasso13] pigeon'0 s n)
  
  constant self  : t_Memory'0
  
  constant first  : UInt64.t
  
  constant last  : UInt64.t
  
  constant s  : Seq.seq UInt64.t
  
  function find_lasso_aux'0 [#"list_reversal_lasso.rs" 244 4 244 95] (self : t_Memory'0) (first : UInt64.t) (last : UInt64.t) (s : Seq.seq UInt64.t) : tuple'0
  
  
  goal vc_find_lasso_aux'0 : ([%#slist_reversal_lasso0] mem_is_well_formed'0 self)
   -> ([%#slist_reversal_lasso1] last = v_NULL'0 \/ nonnull_ptr'0 self last)
   -> ([%#slist_reversal_lasso2] list_seg'0 self first s last 0 (Seq.length s))
   -> (if last = v_NULL'0 then
    [%#slist_reversal_lasso3] match { _0'0 = s; _1'0 = C_None'0 } with
      | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
      | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
      end
  else
    ([@expl:find_ptr_in_seq requires] [%#slist_reversal_lasso5] 0 <= 0 /\ 0 <= Seq.length s)
    /\ (([%#slist_reversal_lasso6] match find_ptr_in_seq'0 s 0 (UInt64.t'int last) with
      | C_None'1 -> forall j : int . 0 <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> UInt64.t'int last
      | C_Some'1 j -> 0 <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = UInt64.t'int last
      end)
     -> match find_ptr_in_seq'0 s 0 (UInt64.t'int last) with
      | C_None'1 -> ([%#svec8] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t))
       -> (([@expl:pigeon requires #0] [%#slist_reversal_lasso9] 0 <= Seq.length (view'0 self.t_Memory__0'0))
      && ([@expl:pigeon requires #1] [%#slist_reversal_lasso10] forall i : int . 0 <= i /\ i < Seq.length s
       -> UInt64.t'int (Seq.get s i) < Seq.length (view'0 self.t_Memory__0'0))
      && ([@expl:pigeon requires #2] [%#slist_reversal_lasso11] forall i : int, j : int . 0 <= i
      /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j))
      /\ (([%#slist_reversal_lasso12] Seq.length s <= Seq.length (view'0 self.t_Memory__0'0))
      && ([%#slist_reversal_lasso13] pigeon'0 s (Seq.length (view'0 self.t_Memory__0'0)))
       -> (if pigeon'0 s (Seq.length (view'0 self.t_Memory__0'0)) then
        ((([@expl:find_lasso_aux requires #0] [%#slist_reversal_lasso0] mem_is_well_formed'0 self)
        && ([@expl:find_lasso_aux requires #1] [%#slist_reversal_lasso1] index_logic'0 self last = v_NULL'0
        \/ nonnull_ptr'0 self (index_logic'0 self last))
        && ([@expl:find_lasso_aux requires #2] [%#slist_reversal_lasso2] list_seg'0 self first (Seq.snoc s last) (index_logic'0 self last) 0 (Seq.length (Seq.snoc s last))))
        /\ 0 <= ([%#slist_reversal_lasso4] Seq.length (view'0 self.t_Memory__0'0) - Seq.length s)
        /\ ([%#slist_reversal_lasso4] Seq.length (view'0 self.t_Memory__0'0) - Seq.length (Seq.snoc s last))
        < ([%#slist_reversal_lasso4] Seq.length (view'0 self.t_Memory__0'0) - Seq.length s))
        /\ (([%#slist_reversal_lasso3] match find_lasso_aux'0 self first (index_logic'0 self last) (Seq.snoc s last) with
          | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
          | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
          end)
         -> ([%#slist_reversal_lasso3] match find_lasso_aux'0 self first (index_logic'0 self last) (Seq.snoc s last) with
          | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
          | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
          end))
      else
        [%#slist_reversal_lasso3] match { _0'0 = s; _1'0 = C_None'0 } with
          | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
          | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
          end
      ))
      | C_Some'1 i -> [%#slist_reversal_lasso3] match { _0'0 = Seq.([..]) s 0 (i + 1);
                                                        _1'0 = C_Some'0 (Seq.([..]) s (i + 1) (Seq.length s)) } with
        | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
        | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
        end
      end)
  )
end
module M_list_reversal_lasso__qyi2644757663130641572__find_lasso [#"list_reversal_lasso.rs" 270 4 270 71] (* Memory *)
  let%span slist_reversal_lasso0 = "list_reversal_lasso.rs" 264 15 264 40
  let%span slist_reversal_lasso1 = "list_reversal_lasso.rs" 265 15 265 55
  let%span slist_reversal_lasso2 = "list_reversal_lasso.rs" 266 14 269 5
  let%span slist_reversal_lasso3 = "list_reversal_lasso.rs" 236 15 236 40
  let%span slist_reversal_lasso4 = "list_reversal_lasso.rs" 237 15 237 53
  let%span slist_reversal_lasso5 = "list_reversal_lasso.rs" 238 15 238 56
  let%span slist_reversal_lasso6 = "list_reversal_lasso.rs" 239 14 242 5
  let%span slist_reversal_lasso7 = "list_reversal_lasso.rs" 243 14 243 37
  let%span slist_reversal_lasso8 = "list_reversal_lasso.rs" 272 13 272 65
  let%span slist_reversal_lasso9 = "list_reversal_lasso.rs" 57 12 57 95
  let%span slist_reversal_lasso10 = "list_reversal_lasso.rs" 13 0 13 15
  let%span slist_reversal_lasso11 = "list_reversal_lasso.rs" 50 20 50 70
  let%span slist_reversal_lasso12 = "list_reversal_lasso.rs" 93 12 93 53
  let%span slist_reversal_lasso13 = "list_reversal_lasso.rs" 153 12 153 73
  let%span slist_reversal_lasso14 = "list_reversal_lasso.rs" 83 12 85 98
  let%span svec15 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span slist_reversal_lasso16 = "list_reversal_lasso.rs" 246 12 258 13
  let%span slist_reversal_lasso17 = "list_reversal_lasso.rs" 21 8 21 31
  let%span slist_reversal_lasso18 = "list_reversal_lasso.rs" 198 15 198 37
  let%span slist_reversal_lasso19 = "list_reversal_lasso.rs" 199 14 202 5
  let%span slist_reversal_lasso20 = "list_reversal_lasso.rs" 203 14 203 25
  let%span slist_reversal_lasso21 = "list_reversal_lasso.rs" 206 12 208 53
  let%span slist_reversal_lasso22 = "list_reversal_lasso.rs" 213 15 213 21
  let%span slist_reversal_lasso23 = "list_reversal_lasso.rs" 214 15 214 65
  let%span slist_reversal_lasso24 = "list_reversal_lasso.rs" 215 15 215 111
  let%span slist_reversal_lasso25 = "list_reversal_lasso.rs" 216 14 216 26
  let%span slist_reversal_lasso26 = "list_reversal_lasso.rs" 217 14 217 20
  let%span slist_reversal_lasso27 = "list_reversal_lasso.rs" 218 14 218 15
  let%span slist_reversal_lasso28 = "list_reversal_lasso.rs" 221 12 231 13
  let%span sindex29 = "../../creusot-contracts/src/logic/ops/index.rs" 41 8 41 32
  
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Memory'0  =
    { t_Memory__0'0: t_Vec'0 }
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (Seq.seq UInt64.t)
  
  type tuple'0  =
    { _0'0: Seq.seq UInt64.t; _1'0: t_Option'0 }
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec15] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate nonnull_ptr'0 [#"list_reversal_lasso.rs" 49 4 49 44] (self : t_Memory'0) (i : UInt64.t) =
    [%#slist_reversal_lasso11] Seq.length (view'0 self.t_Memory__0'0) <= UInt64.t'int (v_MAX'0 : UInt64.t)
    /\ UInt64.t'int i < Seq.length (view'0 self.t_Memory__0'0)
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : UInt64.t) : UInt64.t =
    [%#sindex29] Seq.get (view'0 self) (UInt64.t'int ix)
  
  function index_logic'0 [#"list_reversal_lasso.rs" 20 4 20 39] (self : t_Memory'0) (i : UInt64.t) : UInt64.t =
    [%#slist_reversal_lasso17] index_logic'1 self.t_Memory__0'0 i
  
  constant v_NULL'0 : UInt64.t = [%#slist_reversal_lasso10] (18446744073709551615 : UInt64.t)
  
  predicate mem_is_well_formed'0 [#"list_reversal_lasso.rs" 55 4 55 43] (self : t_Memory'0) =
    [%#slist_reversal_lasso9] forall i : UInt64.t . nonnull_ptr'0 self i
     -> index_logic'0 self i = v_NULL'0 \/ nonnull_ptr'0 self (index_logic'0 self i)
  
  predicate list_seg'0 [#"list_reversal_lasso.rs" 81 4 81 81] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t) (last : UInt64.t) (l : int) (h : int)
  
   =
    [%#slist_reversal_lasso14] first = (if h = l then last else Seq.get s l)
    /\ (forall i : int . l <= i /\ i < h
     -> nonnull_ptr'0 self (Seq.get s i)
    /\ index_logic'0 self (Seq.get s i) = (if i = h - 1 then last else Seq.get s (i + 1)))
    /\ (forall i : int, j : int . l <= i /\ i < h /\ l <= j /\ j < h /\ i <> j  -> Seq.get s i <> Seq.get s j)
  
  predicate list'0 [#"list_reversal_lasso.rs" 91 4 91 54] (self : t_Memory'0) (first : UInt64.t) (s : Seq.seq UInt64.t)
   =
    [%#slist_reversal_lasso12] list_seg'0 self first s v_NULL'0 0 (Seq.length s)
  
  predicate lasso'0 [#"list_reversal_lasso.rs" 151 4 151 70] (self : t_Memory'0) (first : UInt64.t) (s1 : Seq.seq UInt64.t) (s2 : Seq.seq UInt64.t)
  
   =
    [%#slist_reversal_lasso13] let mid = if Seq.length s2 = 0 then
      Seq.get s1 (Seq.length s1 - 1)
    else
      Seq.get s2 0
     in Seq.length s1 > 0
    /\ (forall i : int, j : int . 0 <= i /\ i < Seq.length s1 /\ 0 <= j /\ j < Seq.length s2
     -> Seq.get s1 i <> Seq.get s2 j)
    /\ list_seg'0 self first s1 mid 0 (Seq.length s1)
    /\ list_seg'0 self mid s2 (Seq.get s1 (Seq.length s1 - 1)) 0 (Seq.length s2)
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  function find_ptr_in_seq'0 [#"list_reversal_lasso.rs" 204 4 204 66] (s : Seq.seq UInt64.t) (i : int) (p : int) : t_Option'1
  
  
  axiom find_ptr_in_seq'0_def : forall s : Seq.seq UInt64.t, i : int, p : int . ([%#slist_reversal_lasso18] 0 <= i
  /\ i <= Seq.length s)
   -> find_ptr_in_seq'0 s i p
  = ([%#slist_reversal_lasso21] if i = Seq.length s then
    C_None'1
  else
    if UInt64.t'int (Seq.get s i) = p then C_Some'1 i else find_ptr_in_seq'0 s (i + 1) p
  )
  
  axiom find_ptr_in_seq'0_spec : forall s : Seq.seq UInt64.t, i : int, p : int . ([%#slist_reversal_lasso18] 0 <= i
  /\ i <= Seq.length s)
   -> ([%#slist_reversal_lasso19] match find_ptr_in_seq'0 s i p with
    | C_None'1 -> forall j : int . i <= j /\ j < Seq.length s  -> UInt64.t'int (Seq.get s j) <> p
    | C_Some'1 j -> i <= j /\ j < Seq.length s /\ UInt64.t'int (Seq.get s j) = p
    end)
  
  function pigeon'0 [#"list_reversal_lasso.rs" 219 4 219 42] (s : Seq.seq UInt64.t) (n : int) : bool
  
  axiom pigeon'0_def : forall s : Seq.seq UInt64.t, n : int . ([%#slist_reversal_lasso22] 0 <= n)
   -> ([%#slist_reversal_lasso23] forall i : int . 0 <= i /\ i < Seq.length s  -> UInt64.t'int (Seq.get s i) < n)
   -> ([%#slist_reversal_lasso24] forall i : int, j : int . 0 <= i
  /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
   -> pigeon'0 s n
  = ([%#slist_reversal_lasso28] if n = 0 then
    true
  else
    match find_ptr_in_seq'0 s 0 (n - 1) with
      | C_None'1 -> pigeon'0 s (n - 1)
      | C_Some'1 i -> match find_ptr_in_seq'0 s (i + 1) (n - 1) with
        | C_None'1 -> pigeon'0 (Seq.(++) (Seq.([..]) s 0 i) (Seq.([..]) s (i + 1) (Seq.length s))) (n - 1)
        | C_Some'1 _ -> true
        end
      end
  )
  
  axiom pigeon'0_spec : forall s : Seq.seq UInt64.t, n : int . ([%#slist_reversal_lasso22] 0 <= n)
   -> ([%#slist_reversal_lasso23] forall i : int . 0 <= i /\ i < Seq.length s  -> UInt64.t'int (Seq.get s i) < n)
   -> ([%#slist_reversal_lasso24] forall i : int, j : int . 0 <= i
  /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s /\ i <> j  -> Seq.get s i <> Seq.get s j)
   -> ([%#slist_reversal_lasso25] Seq.length s <= n) && ([%#slist_reversal_lasso26] pigeon'0 s n)
  
  function find_lasso_aux'0 [#"list_reversal_lasso.rs" 244 4 244 95] (self : t_Memory'0) (first : UInt64.t) (last : UInt64.t) (s : Seq.seq UInt64.t) : tuple'0
  
  
  axiom find_lasso_aux'0_def : forall self : t_Memory'0, first : UInt64.t, last : UInt64.t, s : Seq.seq UInt64.t . ([%#slist_reversal_lasso3] mem_is_well_formed'0 self)
   -> ([%#slist_reversal_lasso4] last = v_NULL'0 \/ nonnull_ptr'0 self last)
   -> ([%#slist_reversal_lasso5] list_seg'0 self first s last 0 (Seq.length s))
   -> find_lasso_aux'0 self first last s
  = ([%#slist_reversal_lasso16] if last = v_NULL'0 then
    { _0'0 = s; _1'0 = C_None'0 }
  else
    match find_ptr_in_seq'0 s 0 (UInt64.t'int last) with
      | C_None'1 -> if pigeon'0 s (Seq.length (view'0 self.t_Memory__0'0)) then
        find_lasso_aux'0 self first (index_logic'0 self last) (Seq.snoc s last)
      else
        { _0'0 = s; _1'0 = C_None'0 }
      
      | C_Some'1 i -> { _0'0 = Seq.([..]) s 0 (i + 1); _1'0 = C_Some'0 (Seq.([..]) s (i + 1) (Seq.length s)) }
      end
  )
  
  axiom find_lasso_aux'0_spec : forall self : t_Memory'0, first : UInt64.t, last : UInt64.t, s : Seq.seq UInt64.t . ([%#slist_reversal_lasso3] mem_is_well_formed'0 self)
   -> ([%#slist_reversal_lasso4] last = v_NULL'0 \/ nonnull_ptr'0 self last)
   -> ([%#slist_reversal_lasso5] list_seg'0 self first s last 0 (Seq.length s))
   -> ([%#slist_reversal_lasso6] match find_lasso_aux'0 self first last s with
    | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
    | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
    end)
  
  constant self  : t_Memory'0
  
  constant first  : UInt64.t
  
  function find_lasso'0 [#"list_reversal_lasso.rs" 270 4 270 71] (self : t_Memory'0) (first : UInt64.t) : tuple'0
  
  goal vc_find_lasso'0 : ([%#slist_reversal_lasso0] mem_is_well_formed'0 self)
   -> ([%#slist_reversal_lasso1] first = v_NULL'0 \/ nonnull_ptr'0 self first)
   -> (([@expl:find_lasso_aux requires #0] [%#slist_reversal_lasso3] mem_is_well_formed'0 self)
  && ([@expl:find_lasso_aux requires #1] [%#slist_reversal_lasso4] first = v_NULL'0 \/ nonnull_ptr'0 self first)
  && ([@expl:find_lasso_aux requires #2] [%#slist_reversal_lasso5] list_seg'0 self first (Seq.empty : Seq.seq UInt64.t) first 0 (Seq.length (Seq.empty : Seq.seq UInt64.t))))
  /\ (([%#slist_reversal_lasso6] match find_lasso_aux'0 self first first (Seq.empty : Seq.seq UInt64.t) with
    | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
    | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
    end)
   -> ([%#slist_reversal_lasso2] match find_lasso_aux'0 self first first (Seq.empty : Seq.seq UInt64.t) with
    | {_0'0 = s ; _1'0 = C_None'0} -> list'0 self first s
    | {_0'0 = s1 ; _1'0 = C_Some'0 s2} -> lasso'0 self first s1 s2
    end))
end
