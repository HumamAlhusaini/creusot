module M_knapsack_full__max [#"knapsack_full.rs" 15 0 15 35]
  let%span sknapsack_full0 = "knapsack_full.rs" 14 10 14 31
  
  use creusot.int.UInt64
  
  use creusot.prelude.Any
  
  use creusot.int.UInt64
  
  use int.MinMax
  
  meta "compute_max_steps" 1000000
  
  let rec max'0[#"knapsack_full.rs" 15 0 15 35] (a:UInt64.t) (b:UInt64.t) (return'  (ret:UInt64.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_4 <- UInt64.lt a b ] s1 | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ] 
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : UInt64.t = Any.any_l () | & a : UInt64.t = a | & b : UInt64.t = b | & _4 : bool = Any.any_l () ] 
    [ return' (result:UInt64.t)-> {[@expl:max ensures] [%#sknapsack_full0] UInt64.t'int result
      = MinMax.max (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]

end
module M_knapsack_full__sum_weights [#"knapsack_full.rs" 23 0 23 56]
  let%span sknapsack_full0 = "knapsack_full.rs" 21 11 21 33
  let%span sknapsack_full1 = "knapsack_full.rs" 22 10 22 21
  let%span sknapsack_full2 = "knapsack_full.rs" 20 10 20 19
  let%span sknapsack_full3 = "knapsack_full.rs" 25 8 26 51
  
  use mach.int.Int
  
  use seq.Seq
  
  type t_Name'0
  
  use creusot.int.UInt64
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: UInt64.t; t_Item__value'0: UInt64.t }
  
  use seq.Seq
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant s  : Seq.seq t_Item'0
  
  constant i  : int
  
  function sum_weights'0 [#"knapsack_full.rs" 23 0 23 56] (s : Seq.seq t_Item'0) (i : int) : int
  
  goal vc_sum_weights'0 : ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    [%#sknapsack_full1] 0 >= 0
  else
    (([@expl:sum_weights requires] [%#sknapsack_full0] 0 <= i + 1 /\ i + 1 <= Seq.length s)
    /\ 0 <= ([%#sknapsack_full2] Seq.length s - i)
    /\ ([%#sknapsack_full2] Seq.length s - (i + 1)) < ([%#sknapsack_full2] Seq.length s - i))
    /\ (([%#sknapsack_full1] sum_weights'0 s (i + 1) >= 0)
     -> ([%#sknapsack_full1] UInt64.t'int (Seq.get s i).t_Item__weight'0 + sum_weights'0 s (i + 1) >= 0))
  )
end
module M_knapsack_full__sum_values [#"knapsack_full.rs" 33 0 33 55]
  let%span sknapsack_full0 = "knapsack_full.rs" 32 11 32 33
  let%span sknapsack_full1 = "knapsack_full.rs" 31 10 31 19
  let%span sknapsack_full2 = "knapsack_full.rs" 35 8 36 49
  
  use mach.int.Int
  
  use seq.Seq
  
  type t_Name'0
  
  use creusot.int.UInt64
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: UInt64.t; t_Item__value'0: UInt64.t }
  
  use seq.Seq
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant s  : Seq.seq t_Item'0
  
  constant i  : int
  
  function sum_values'0 [#"knapsack_full.rs" 33 0 33 55] (s : Seq.seq t_Item'0) (i : int) : int
  
  goal vc_sum_values'0 : ([%#sknapsack_full0] i >= 0 /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    true
  else
    ([@expl:sum_values requires] [%#sknapsack_full0] i + 1 >= 0 /\ i + 1 <= Seq.length s)
    /\ 0 <= ([%#sknapsack_full1] Seq.length s - i)
    /\ ([%#sknapsack_full1] Seq.length s - (i + 1)) < ([%#sknapsack_full1] Seq.length s - i)
  )
end
module M_knapsack_full__subseq_rev [#"knapsack_full.rs" 44 0 44 67]
  let%span sknapsack_full0 = "knapsack_full.rs" 42 11 42 36
  let%span sknapsack_full1 = "knapsack_full.rs" 43 11 43 36
  let%span sknapsack_full2 = "knapsack_full.rs" 41 10 41 12
  let%span sknapsack_full3 = "knapsack_full.rs" 46 8 50 9
  
  use mach.int.Int
  
  use seq.Seq
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  constant s1  : Seq.seq t_T'0
  
  constant i1  : int
  
  constant s2  : Seq.seq t_T'0
  
  constant i2  : int
  
  predicate subseq_rev'0 [#"knapsack_full.rs" 44 0 44 67] (s1 : Seq.seq t_T'0) (i1 : int) (s2 : Seq.seq t_T'0) (i2 : int)
  
  
  goal vc_subseq_rev'0 : ([%#sknapsack_full1] 0 <= i2 /\ i2 <= Seq.length s2)
   -> ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1)
   -> (if i2 = 0 then
    true
  else
    if i1 < Seq.length s1 then
      if Seq.get s1 i1 = Seq.get s2 (i2 - 1) then
        ((([@expl:subseq_rev requires #0] [%#sknapsack_full0] 0 <= i1 + 1 /\ i1 + 1 <= Seq.length s1)
        && ([@expl:subseq_rev requires #1] [%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2))
        /\ (if subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1) then
          true
        else
          (([@expl:subseq_rev requires #0] [%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1)
          && ([@expl:subseq_rev requires #1] [%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2))
          /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
        )
      else
        (([@expl:subseq_rev requires #0] [%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1)
        && ([@expl:subseq_rev requires #1] [%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
    
    else
      (([@expl:subseq_rev requires #0] [%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1)
      && ([@expl:subseq_rev requires #1] [%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2))
      /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
  
  )
end
module M_knapsack_full__m [#"knapsack_full.rs" 62 0 62 57]
  let%span sknapsack_full0 = "knapsack_full.rs" 56 11 56 37
  let%span sknapsack_full1 = "knapsack_full.rs" 57 11 57 17
  let%span sknapsack_full2 = "knapsack_full.rs" 58 10 58 21
  let%span sknapsack_full3 = "knapsack_full.rs" 59 10 60 30
  let%span sknapsack_full4 = "knapsack_full.rs" 55 10 55 11
  let%span sknapsack_full5 = "knapsack_full.rs" 64 8 69 9
  let%span sknapsack_full6 = "knapsack_full.rs" 42 11 42 36
  let%span sknapsack_full7 = "knapsack_full.rs" 43 11 43 36
  let%span sknapsack_full8 = "knapsack_full.rs" 41 10 41 12
  let%span sknapsack_full9 = "knapsack_full.rs" 46 8 50 9
  let%span sknapsack_full10 = "knapsack_full.rs" 21 11 21 33
  let%span sknapsack_full11 = "knapsack_full.rs" 22 10 22 21
  let%span sknapsack_full12 = "knapsack_full.rs" 20 10 20 19
  let%span sknapsack_full13 = "knapsack_full.rs" 25 8 26 51
  let%span sknapsack_full14 = "knapsack_full.rs" 32 11 32 33
  let%span sknapsack_full15 = "knapsack_full.rs" 31 10 31 19
  let%span sknapsack_full16 = "knapsack_full.rs" 35 8 36 49
  
  use mach.int.Int
  
  use seq.Seq
  
  type t_Name'0
  
  use creusot.int.UInt64
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: UInt64.t; t_Item__value'0: UInt64.t }
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"knapsack_full.rs" 44 0 44 67] (s1 : Seq.seq t_Item'0) (i1 : int) (s2 : Seq.seq t_Item'0) (i2 : int)
  
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq t_Item'0, i1 : int, s2 : Seq.seq t_Item'0, i2 : int . ([%#sknapsack_full6] 0
  <= i1
  /\ i1 <= Seq.length s1)
   -> ([%#sknapsack_full7] 0 <= i2 /\ i2 <= Seq.length s2)
   -> subseq_rev'0 s1 i1 s2 i2
  = ([%#sknapsack_full9] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  use creusot.int.UInt64
  
  function sum_weights'0 [#"knapsack_full.rs" 23 0 23 56] (s : Seq.seq t_Item'0) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq t_Item'0, i : int . ([%#sknapsack_full10] 0 <= i /\ i <= Seq.length s)
   -> sum_weights'0 s i
  = ([%#sknapsack_full13] if i = Seq.length s then
    0
  else
    UInt64.t'int (Seq.get s i).t_Item__weight'0 + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq t_Item'0, i : int . ([%#sknapsack_full10] 0 <= i /\ i <= Seq.length s)
   -> ([%#sknapsack_full11] sum_weights'0 s i >= 0)
  
  function sum_values'0 [#"knapsack_full.rs" 33 0 33 55] (s : Seq.seq t_Item'0) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq t_Item'0, i : int . ([%#sknapsack_full14] i >= 0 /\ i <= Seq.length s)
   -> sum_values'0 s i
  = ([%#sknapsack_full16] if i = Seq.length s then
    0
  else
    UInt64.t'int (Seq.get s i).t_Item__value'0 + sum_values'0 s (i + 1)
  )
  
  use int.MinMax
  
  constant items  : Seq.seq t_Item'0
  
  constant i  : int
  
  constant w  : int
  
  function m'0 [#"knapsack_full.rs" 62 0 62 57] (items : Seq.seq t_Item'0) (i : int) (w : int) : int
  
  goal vc_m'0 : ([%#sknapsack_full1] 0 <= w)
   -> ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length items)
   -> (if i = 0 then
    let result = 0 in ([%#sknapsack_full2] result >= 0)
    && ([%#sknapsack_full3] forall s : Seq.seq t_Item'0, j : int . 0 <= j
    /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)
  else
    if UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0 > w then
      ((([@expl:m requires #0] [%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items)
      && ([@expl:m requires #1] [%#sknapsack_full1] 0 <= w))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full2] m'0 items (i - 1) w >= 0)
      && ([%#sknapsack_full3] forall s : Seq.seq t_Item'0, j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m'0 items (i - 1) w)
       -> (let result = m'0 items (i - 1) w in ([%#sknapsack_full2] result >= 0)
      && ([%#sknapsack_full3] forall s : Seq.seq t_Item'0, j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)))
    else
      ((([@expl:m requires #0] [%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items)
      && ([@expl:m requires #1] [%#sknapsack_full1] 0 <= w))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full2] m'0 items (i - 1) w >= 0)
      && ([%#sknapsack_full3] forall s : Seq.seq t_Item'0, j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m'0 items (i - 1) w)
       -> ((([@expl:m requires #0] [%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items)
      && ([@expl:m requires #1] [%#sknapsack_full1] 0 <= w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full2] m'0 items (i - 1) (w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0) >= 0)
      && ([%#sknapsack_full3] forall s : Seq.seq t_Item'0, j : int . 0 <= j
      /\ j <= Seq.length s
      /\ subseq_rev'0 s j items (i - 1)
      /\ sum_weights'0 s j <= w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0
       -> sum_values'0 s j <= m'0 items (i - 1) (w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0))
       -> (let result = MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w
      - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0)
      + UInt64.t'int (Seq.get items (i - 1)).t_Item__value'0) in ([%#sknapsack_full2] result >= 0)
      && ([%#sknapsack_full3] forall s : Seq.seq t_Item'0, j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result))))
  
  )
end
module M_knapsack_full__knapsack01_dyn [#"knapsack_full.rs" 81 0 81 91]
  let%span sknapsack_full0 = "knapsack_full.rs" 82 51 82 52
  let%span sknapsack_full1 = "knapsack_full.rs" 82 35 82 36
  let%span sknapsack_full2 = "knapsack_full.rs" 82 69 82 70
  let%span sknapsack_full3 = "knapsack_full.rs" 91 13 91 14
  let%span sknapsack_full4 = "knapsack_full.rs" 91 4 91 7
  let%span sknapsack_full5 = "knapsack_full.rs" 91 4 91 7
  let%span sknapsack_full6 = "knapsack_full.rs" 89 16 90 57
  let%span sknapsack_full7 = "knapsack_full.rs" 87 16 88 61
  let%span sknapsack_full8 = "knapsack_full.rs" 85 16 86 59
  let%span sknapsack_full9 = "knapsack_full.rs" 84 16 84 53
  let%span sknapsack_full10 = "knapsack_full.rs" 91 4 91 7
  let%span sknapsack_full11 = "knapsack_full.rs" 91 4 91 7
  let%span sknapsack_full12 = "knapsack_full.rs" 106 17 106 18
  let%span sknapsack_full13 = "knapsack_full.rs" 106 8 106 11
  let%span sknapsack_full14 = "knapsack_full.rs" 106 8 106 11
  let%span sknapsack_full15 = "knapsack_full.rs" 102 20 103 57
  let%span sknapsack_full16 = "knapsack_full.rs" 100 20 101 69
  let%span sknapsack_full17 = "knapsack_full.rs" 97 20 99 65
  let%span sknapsack_full18 = "knapsack_full.rs" 95 20 96 63
  let%span sknapsack_full19 = "knapsack_full.rs" 94 20 94 57
  let%span sknapsack_full20 = "knapsack_full.rs" 106 8 106 11
  let%span sknapsack_full21 = "knapsack_full.rs" 106 8 106 11
  let%span sknapsack_full22 = "knapsack_full.rs" 107 27 107 28
  let%span sknapsack_full23 = "knapsack_full.rs" 132 16 136 58
  let%span sknapsack_full24 = "knapsack_full.rs" 127 16 131 52
  let%span sknapsack_full25 = "knapsack_full.rs" 122 16 126 76
  let%span sknapsack_full26 = "knapsack_full.rs" 121 16 121 43
  let%span sknapsack_full27 = "knapsack_full.rs" 120 16 120 34
  let%span sknapsack_full28 = "knapsack_full.rs" 119 16 119 27
  let%span sknapsack_full29 = "knapsack_full.rs" 137 10 137 11
  let%span sknapsack_full30 = "knapsack_full.rs" 138 13 138 14
  let%span sknapsack_full31 = "knapsack_full.rs" 140 26 140 27
  let%span sknapsack_full32 = "knapsack_full.rs" 81 28 81 33
  let%span sknapsack_full33 = "knapsack_full.rs" 73 11 73 34
  let%span sknapsack_full34 = "knapsack_full.rs" 74 11 74 33
  let%span sknapsack_full35 = "knapsack_full.rs" 75 11 75 84
  let%span sknapsack_full36 = "knapsack_full.rs" 81 75 81 91
  let%span sknapsack_full37 = "knapsack_full.rs" 76 10 76 60
  let%span sknapsack_full38 = "knapsack_full.rs" 77 10 77 54
  let%span sknapsack_full39 = "knapsack_full.rs" 78 10 79 64
  let%span svec40 = "../../creusot-contracts/src/std/vec.rs" 186 22 186 41
  let%span svec41 = "../../creusot-contracts/src/std/vec.rs" 187 22 187 76
  let%span svec42 = "../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span siter43 = "../../creusot-contracts/src/std/iter.rs" 206 27 206 47
  let%span siter44 = "../../creusot-contracts/src/std/iter.rs" 207 26 207 53
  let%span smodel45 = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span svec46 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex47 = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sknapsack_full48 = "knapsack_full.rs" 56 11 56 37
  let%span sknapsack_full49 = "knapsack_full.rs" 57 11 57 17
  let%span sknapsack_full50 = "knapsack_full.rs" 58 10 58 21
  let%span sknapsack_full51 = "knapsack_full.rs" 59 10 60 30
  let%span sknapsack_full52 = "knapsack_full.rs" 55 10 55 11
  let%span sknapsack_full53 = "knapsack_full.rs" 64 8 69 9
  let%span srange54 = "../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span siter55 = "../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span svec56 = "../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec57 = "../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span sops58 = "../../creusot-contracts/src/std/ops.rs" 226 26 226 53
  let%span sops59 = "../../creusot-contracts/src/std/ops.rs" 227 26 227 49
  let%span sops60 = "../../creusot-contracts/src/std/ops.rs" 228 26 228 91
  let%span srange61 = "../../creusot-contracts/src/std/iter/range.rs" 97 12 101 76
  let%span sknapsack_full62 = "knapsack_full.rs" 14 10 14 31
  let%span svec63 = "../../creusot-contracts/src/std/vec.rs" 158 27 158 46
  let%span svec64 = "../../creusot-contracts/src/std/vec.rs" 159 26 159 54
  let%span svec65 = "../../creusot-contracts/src/std/vec.rs" 160 26 160 57
  let%span svec66 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 62
  let%span svec67 = "../../creusot-contracts/src/std/vec.rs" 162 26 162 55
  let%span svec68 = "../../creusot-contracts/src/std/vec.rs" 84 26 84 44
  let%span sknapsack_full69 = "knapsack_full.rs" 42 11 42 36
  let%span sknapsack_full70 = "knapsack_full.rs" 43 11 43 36
  let%span sknapsack_full71 = "knapsack_full.rs" 41 10 41 12
  let%span sknapsack_full72 = "knapsack_full.rs" 46 8 50 9
  let%span sknapsack_full73 = "knapsack_full.rs" 21 11 21 33
  let%span sknapsack_full74 = "knapsack_full.rs" 22 10 22 21
  let%span sknapsack_full75 = "knapsack_full.rs" 20 10 20 19
  let%span sknapsack_full76 = "knapsack_full.rs" 25 8 26 51
  let%span sknapsack_full77 = "knapsack_full.rs" 32 11 32 33
  let%span sknapsack_full78 = "knapsack_full.rs" 31 10 31 19
  let%span sknapsack_full79 = "knapsack_full.rs" 35 8 36 49
  let%span svec80 = "../../creusot-contracts/src/std/vec.rs" 93 26 93 56
  let%span siter81 = "../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter82 = "../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange83 = "../../creusot-contracts/src/std/iter/range.rs" 35 14 35 45
  let%span srange84 = "../../creusot-contracts/src/std/iter/range.rs" 40 15 40 32
  let%span srange85 = "../../creusot-contracts/src/std/iter/range.rs" 41 15 41 32
  let%span srange86 = "../../creusot-contracts/src/std/iter/range.rs" 42 14 42 42
  let%span snum87 = "../../creusot-contracts/src/std/num.rs" 25 28 25 33
  let%span srange88 = "../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sresolve89 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sslice90 = "../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span sslice91 = "../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span sops92 = "../../creusot-contracts/src/std/ops.rs" 212 14 212 86
  let%span srange93 = "../../creusot-contracts/src/std/iter/range.rs" 107 14 107 45
  let%span srange94 = "../../creusot-contracts/src/std/iter/range.rs" 108 27 108 29
  let%span srange95 = "../../creusot-contracts/src/std/iter/range.rs" 112 15 112 32
  let%span srange96 = "../../creusot-contracts/src/std/iter/range.rs" 113 15 113 32
  let%span srange97 = "../../creusot-contracts/src/std/iter/range.rs" 114 14 114 42
  let%span srange98 = "../../creusot-contracts/src/std/iter/range.rs" 115 91 115 93
  let%span srange99 = "../../creusot-contracts/src/std/iter/range.rs" 75 10 75 43
  let%span srange100 = "../../creusot-contracts/src/std/iter/range.rs" 78 8 79 74
  let%span srange101 = "../../creusot-contracts/src/std/iter/range.rs" 89 12 89 57
  let%span smodel102 = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice103 = "../../creusot-contracts/src/std/slice.rs" 137 20 137 94
  let%span svec104 = "../../creusot-contracts/src/std/vec.rs" 71 20 71 41
  let%span sinvariant105 = "../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sinvariant106 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sseq107 = "../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed108 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.UInt64
  
  predicate inv'5 (_1 : UInt64.t)
  
  axiom inv_axiom'5 [@rewrite] : forall x : UInt64.t [inv'5 x] . inv'5 x = true
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'6 (_1 : t_Vec'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'0 [inv'6 x] . inv'6 x = true
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec46] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'3 [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt64.t =
    [%#sindex47] Seq.get (view'1 self) ix
  
  let rec from_elem'0 (elem:UInt64.t) (n:UInt64.t) (return'  (ret:t_Vec'0))= {[@expl:from_elem 'elem' type invariant] inv'5 elem}
    any
    [ return' (result:t_Vec'0)-> {inv'6 result}
      {[%#svec40] Seq.length (view'1 result) = UInt64.t'int n}
      {[%#svec41] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'3 result i = elem}
      (! return' {result}) ]
  
  
  type t_RawVec'3  =
    { t_RawVec__inner'3: t_RawVecInner'0; t_RawVec__qy95zmarker'3: () }
  
  type t_Vec'3  =
    { t_Vec__buf'3: t_RawVec'3; t_Vec__len'3: UInt64.t }
  
  type t_Name'0
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: UInt64.t; t_Item__value'0: UInt64.t }
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'22 (_1 : t_Name'0)
  
  predicate inv'21 (_1 : t_Item'0)
  
  axiom inv_axiom'21 [@rewrite] : forall x : t_Item'0 [inv'21 x] . inv'21 x
  = match x with
    | {t_Item__name'0 = name ; t_Item__weight'0 = weight ; t_Item__value'0 = value} -> inv'22 name
    end
  
  predicate invariant'8 (self : t_Item'0) =
    [%#sboxed108] inv'21 self
  
  predicate inv'25 (_1 : t_Item'0)
  
  axiom inv_axiom'24 [@rewrite] : forall x : t_Item'0 [inv'25 x] . inv'25 x = invariant'8 x
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq t_Item'0) =
    [%#sseq107] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'25 (Seq.get self i)
  
  predicate inv'24 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'23 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'24 x] . inv'24 x = invariant'7 x
  
  function view'4 (self : t_Vec'3) : Seq.seq t_Item'0
  
  axiom view'4_spec : forall self : t_Vec'3 . [%#svec46] Seq.length (view'4 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'5 (self : t_Vec'3) =
    [%#svec104] inv'24 (view'4 self)
  
  predicate inv'20 (_1 : t_Vec'3)
  
  axiom inv_axiom'20 [@rewrite] : forall x : t_Vec'3 [inv'20 x] . inv'20 x = invariant'5 x
  
  predicate invariant'1 (self : t_Vec'3) =
    [%#sinvariant105] inv'20 self
  
  predicate inv'4 (_1 : t_Vec'3)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'3 [inv'4 x] . inv'4 x = invariant'1 x
  
  function view'0 (self : t_Vec'3) : Seq.seq t_Item'0 =
    [%#smodel45] view'4 self
  
  let rec len'0 (self:t_Vec'3) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'4 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec42] UInt64.t'int result = Seq.length (view'0 self)} (! return' {result}) ]
  
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  predicate inv'7 (_1 : t_Vec'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Vec'1 [inv'7 x] . inv'7 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'2 (self : t_Vec'1) : Seq.seq t_Vec'0
  
  axiom view'2_spec : forall self : t_Vec'1 . [%#svec46] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : t_Vec'0 =
    [%#sindex47] Seq.get (view'2 self) ix
  
  let rec from_elem'1 (elem:t_Vec'0) (n:UInt64.t) (return'  (ret:t_Vec'1))= {[@expl:from_elem 'elem' type invariant] inv'6 elem}
    any
    [ return' (result:t_Vec'1)-> {inv'7 result}
      {[%#svec40] Seq.length (view'2 result) = UInt64.t'int n}
      {[%#svec41] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'0 result i = elem}
      (! return' {result}) ]
  
  
  type t_Range'0  =
    { t_Range__start'0: UInt64.t; t_Range__end'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter81] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter82] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter43] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'0 result} {[%#siter44] into_iter_post'0 self result} (! return' {result}) ] 
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"knapsack_full.rs" 44 0 44 67] (s1 : Seq.seq t_Item'0) (i1 : int) (s2 : Seq.seq t_Item'0) (i2 : int)
  
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq t_Item'0, i1 : int, s2 : Seq.seq t_Item'0, i2 : int . ([%#sknapsack_full69] 0
  <= i1
  /\ i1 <= Seq.length s1)
   -> ([%#sknapsack_full70] 0 <= i2 /\ i2 <= Seq.length s2)
   -> subseq_rev'0 s1 i1 s2 i2
  = ([%#sknapsack_full72] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  function sum_weights'0 [#"knapsack_full.rs" 23 0 23 56] (s : Seq.seq t_Item'0) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq t_Item'0, i : int . ([%#sknapsack_full73] 0 <= i /\ i <= Seq.length s)
   -> sum_weights'0 s i
  = ([%#sknapsack_full76] if i = Seq.length s then
    0
  else
    UInt64.t'int (Seq.get s i).t_Item__weight'0 + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq t_Item'0, i : int . ([%#sknapsack_full73] 0 <= i /\ i <= Seq.length s)
   -> ([%#sknapsack_full74] sum_weights'0 s i >= 0)
  
  function sum_values'0 [#"knapsack_full.rs" 33 0 33 55] (s : Seq.seq t_Item'0) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq t_Item'0, i : int . ([%#sknapsack_full77] i >= 0 /\ i <= Seq.length s)
   -> sum_values'0 s i
  = ([%#sknapsack_full79] if i = Seq.length s then
    0
  else
    UInt64.t'int (Seq.get s i).t_Item__value'0 + sum_values'0 s (i + 1)
  )
  
  use int.MinMax
  
  function m'0 [#"knapsack_full.rs" 62 0 62 57] (items : Seq.seq t_Item'0) (i : int) (w : int) : int
  
  axiom m'0_def : forall items : Seq.seq t_Item'0, i : int, w : int . ([%#sknapsack_full48] 0 <= i
  /\ i <= Seq.length items)
   -> ([%#sknapsack_full49] 0 <= w)
   -> m'0 items i w
  = ([%#sknapsack_full53] if i = 0 then
    0
  else
    if UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0 > w then
      m'0 items (i - 1) w
    else
      MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0)
      + UInt64.t'int (Seq.get items (i - 1)).t_Item__value'0)
  
  )
  
  axiom m'0_spec : forall items : Seq.seq t_Item'0, i : int, w : int . ([%#sknapsack_full48] 0 <= i
  /\ i <= Seq.length items)
   -> ([%#sknapsack_full49] 0 <= w)
   -> ([%#sknapsack_full50] m'0 items i w >= 0)
  && ([%#sknapsack_full51] forall s : Seq.seq t_Item'0, j : int . 0 <= j
  /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= m'0 items i w)
  
  use seq.Seq
  
  function deep_model'0 (self : UInt64.t) : int =
    [%#snum87] UInt64.t'int self
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq UInt64.t) (o : t_Range'0) =
    [%#srange54] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq UInt64.t) (b : t_Range'0) (bc : Seq.seq UInt64.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq UInt64.t, b : t_Range'0, bc : Seq.seq UInt64.t, c : t_Range'0 . ([%#srange84] produces'0 a ab b)
   -> ([%#srange85] produces'0 b bc c)  -> ([%#srange86] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange83] produces'0 self (Seq.empty : Seq.seq UInt64.t) self
  
  predicate inv'1 (_1 : Seq.seq UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq UInt64.t [inv'1 x] . inv'1 x = true
  
  use creusot.prelude.MutBorrow
  
  predicate inv'8 (_1 : MutBorrow.t t_Range'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : MutBorrow.t t_Range'0 [inv'8 x] . inv'8 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt64.t
  
  predicate inv'9 (_1 : t_Option'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Option'0 [inv'9 x] . inv'9 x = true
  
  predicate resolve'4 (self : MutBorrow.t t_Range'0) =
    [%#sresolve89] self.final = self.current
  
  predicate completed'0 (self : MutBorrow.t t_Range'0) =
    [%#srange88] resolve'4 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_Range'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'8 self}
    any
    [ return' (result:t_Option'0)-> {inv'9 result}
      {[%#siter55] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t t_Range'0) =
    resolve'4 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt64.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Item'0) =
    [%#sslice90] UInt64.t'int self < Seq.length seq
  
  predicate invariant'2 (self : t_Item'0) =
    [%#sinvariant105] inv'21 self
  
  predicate inv'10 (_1 : t_Item'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_Item'0 [inv'10 x] . inv'10 x = invariant'2 x
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Item'0) (out : t_Item'0) =
    [%#sslice91] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'3) (index:UInt64.t) (return'  (ret:t_Item'0))= {[@expl:index 'self' type invariant] inv'4 self}
    {[@expl:index 'index' type invariant] inv'5 index}
    {[@expl:index requires] [%#svec56] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:t_Item'0)-> {inv'10 result}
      {[%#svec57] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
  
  
  type t_RangeInclusive'0  =
    { t_RangeInclusive__start'0: UInt64.t; t_RangeInclusive__end'0: UInt64.t; t_RangeInclusive__exhausted'0: bool }
  
  predicate inv'2 (_1 : t_RangeInclusive'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_RangeInclusive'0 [inv'2 x] . inv'2 x = true
  
  function start_log'0 (self : t_RangeInclusive'0) : UInt64.t
  
  function end_log'0 (self : t_RangeInclusive'0) : UInt64.t
  
  function is_empty_log'0 (self : t_RangeInclusive'0) : bool
  
  axiom is_empty_log'0_spec : forall self : t_RangeInclusive'0 . [%#sops92] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  let rec new'0 (start:UInt64.t) (end':UInt64.t) (return'  (ret:t_RangeInclusive'0))= {[@expl:new 'start' type invariant] inv'5 start}
    {[@expl:new 'end' type invariant] inv'5 end'}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'2 result}
      {[%#sops58] start_log'0 result = start}
      {[%#sops59] end_log'0 result = end'}
      {[%#sops60] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      (! return' {result}) ]
  
  
  predicate into_iter_pre'1 (self : t_RangeInclusive'0) =
    [%#siter81] true
  
  predicate into_iter_post'1 (self : t_RangeInclusive'0) (res : t_RangeInclusive'0) =
    [%#siter82] self = res
  
  let rec into_iter'1 (self:t_RangeInclusive'0) (return'  (ret:t_RangeInclusive'0))= {[@expl:into_iter 'self' type invariant] inv'2 self}
    {[@expl:into_iter requires] [%#siter43] into_iter_pre'1 self}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'2 result}
      {[%#siter44] into_iter_post'1 self result}
      (! return' {result}) ]
  
  
  function range_inclusive_len'0 (r : t_RangeInclusive'0) : int =
    [%#srange100] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : t_RangeInclusive'0 . [%#srange99] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  predicate produces'1 (self : t_RangeInclusive'0) (visited : Seq.seq UInt64.t) (o : t_RangeInclusive'0) =
    [%#srange61] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'1 (a : t_RangeInclusive'0) (ab : Seq.seq UInt64.t) (b : t_RangeInclusive'0) (bc : Seq.seq UInt64.t) (c : t_RangeInclusive'0) : ()
  
   =
    [%#srange98] ()
  
  axiom produces_trans'1_spec : forall a : t_RangeInclusive'0, ab : Seq.seq UInt64.t, b : t_RangeInclusive'0, bc : Seq.seq UInt64.t, c : t_RangeInclusive'0 . ([%#srange95] produces'1 a ab b)
   -> ([%#srange96] produces'1 b bc c)  -> ([%#srange97] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_RangeInclusive'0) : () =
    [%#srange94] ()
  
  axiom produces_refl'1_spec : forall self : t_RangeInclusive'0 . [%#srange93] produces'1 self (Seq.empty : Seq.seq UInt64.t) self
  
  predicate inv'11 (_1 : MutBorrow.t t_RangeInclusive'0)
  
  axiom inv_axiom'11 [@rewrite] : forall x : MutBorrow.t t_RangeInclusive'0 [inv'11 x] . inv'11 x = true
  
  predicate completed'1 (self : MutBorrow.t t_RangeInclusive'0) =
    [%#srange101] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  let rec next'1 (self:MutBorrow.t t_RangeInclusive'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'11 self}
    any
    [ return' (result:t_Option'0)-> {inv'9 result}
      {[%#siter55] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'5 (self : MutBorrow.t t_RangeInclusive'0) =
    [%#sresolve89] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_RangeInclusive'0) =
    resolve'5 _1
  
  predicate inv'12 (_1 : t_Vec'1)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_Vec'1 [inv'12 x] . inv'12 x = true
  
  predicate in_bounds'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) =
    [%#sslice90] UInt64.t'int self < Seq.length seq
  
  function view'5 (self : t_Vec'1) : Seq.seq t_Vec'0 =
    [%#smodel45] view'2 self
  
  predicate inv'13 (_1 : t_Vec'0)
  
  axiom inv_axiom'13 [@rewrite] : forall x : t_Vec'0 [inv'13 x] . inv'13 x = true
  
  predicate has_value'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) (out : t_Vec'0) =
    [%#sslice91] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'1 (self:t_Vec'1) (index:UInt64.t) (return'  (ret:t_Vec'0))= {[@expl:index 'self' type invariant] inv'12 self}
    {[@expl:index 'index' type invariant] inv'5 index}
    {[@expl:index requires] [%#svec56] in_bounds'1 index (view'5 self)}
    any
    [ return' (result:t_Vec'0)-> {inv'13 result}
      {[%#svec57] has_value'1 index (view'5 self) result}
      (! return' {result}) ]
  
  
  predicate in_bounds'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice90] UInt64.t'int self < Seq.length seq
  
  function view'6 (self : t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel45] view'1 self
  
  predicate inv'14 (_1 : UInt64.t)
  
  axiom inv_axiom'14 [@rewrite] : forall x : UInt64.t [inv'14 x] . inv'14 x = true
  
  predicate has_value'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice91] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'2 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index 'self' type invariant] inv'13 self}
    {[@expl:index 'index' type invariant] inv'5 index}
    {[@expl:index requires] [%#svec56] in_bounds'2 index (view'6 self)}
    any
    [ return' (result:UInt64.t)-> {inv'14 result}
      {[%#svec57] has_value'2 index (view'6 self) result}
      (! return' {result}) ]
  
  
  let rec max'0 (a:UInt64.t) (b:UInt64.t) (return'  (ret:UInt64.t))= any
    [ return' (result:UInt64.t)-> {[%#sknapsack_full62] UInt64.t'int result
      = MinMax.max (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]
  
  
  predicate inv'15 (_1 : MutBorrow.t t_Vec'1)
  
  axiom inv_axiom'15 [@rewrite] : forall x : MutBorrow.t t_Vec'1 [inv'15 x] . inv'15 x = true
  
  function view'7 (self : MutBorrow.t t_Vec'1) : Seq.seq t_Vec'0 =
    [%#smodel102] view'2 self.current
  
  predicate inv'16 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'16 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'16 x] . inv'16 x = true
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq t_Vec'0) (fin : Seq.seq t_Vec'0) =
    [%#sslice103] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:MutBorrow.t t_Vec'1) (index:UInt64.t) (return'  (ret:MutBorrow.t t_Vec'0))= {[@expl:index_mut 'self' type invariant] inv'15 self}
    {[@expl:index_mut 'index' type invariant] inv'5 index}
    {[@expl:index_mut requires] [%#svec63] in_bounds'1 index (view'7 self)}
    any
    [ return' (result:MutBorrow.t t_Vec'0)-> {inv'16 result}
      {[%#svec64] has_value'1 index (view'7 self) result.current}
      {[%#svec65] has_value'1 index (view'2 self.final) result.final}
      {[%#svec66] resolve_elswhere'0 index (view'7 self) (view'2 self.final)}
      {[%#svec67] Seq.length (view'2 self.final) = Seq.length (view'7 self)}
      (! return' {result}) ]
  
  
  function view'8 (self : MutBorrow.t t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel102] view'1 self.current
  
  predicate inv'17 (_1 : MutBorrow.t UInt64.t)
  
  axiom inv_axiom'17 [@rewrite] : forall x : MutBorrow.t UInt64.t [inv'17 x] . inv'17 x = true
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt64.t) (fin : Seq.seq UInt64.t) =
    [%#sslice103] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'1 (self:MutBorrow.t t_Vec'0) (index:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut 'self' type invariant] inv'16 self}
    {[@expl:index_mut 'index' type invariant] inv'5 index}
    {[@expl:index_mut requires] [%#svec63] in_bounds'2 index (view'8 self)}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {inv'17 result}
      {[%#svec64] has_value'2 index (view'8 self) result.current}
      {[%#svec65] has_value'2 index (view'1 self.final) result.final}
      {[%#svec66] resolve_elswhere'1 index (view'8 self) (view'1 self.final)}
      {[%#svec67] Seq.length (view'1 self.final) = Seq.length (view'8 self)}
      (! return' {result}) ]
  
  
  predicate resolve'6 (self : MutBorrow.t UInt64.t) =
    [%#sresolve89] self.final = self.current
  
  predicate resolve'2 (_1 : MutBorrow.t UInt64.t) =
    resolve'6 _1
  
  predicate resolve'7 (self : MutBorrow.t t_Vec'0) =
    [%#sresolve89] self.final = self.current
  
  predicate resolve'3 (_1 : MutBorrow.t t_Vec'0) =
    resolve'7 _1
  
  type t_RawVec'2  =
    { t_RawVec__inner'2: t_RawVecInner'0; t_RawVec__qy95zmarker'2: () }
  
  type t_Vec'2  =
    { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed108] inv'10 self
  
  predicate inv'23 (_1 : t_Item'0)
  
  axiom inv_axiom'22 [@rewrite] : forall x : t_Item'0 [inv'23 x] . inv'23 x = invariant'6 x
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t_Item'0) =
    [%#sseq107] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'23 (Seq.get self i)
  
  predicate inv'19 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'19 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'19 x] . inv'19 x = invariant'4 x
  
  function view'3 (self : t_Vec'2) : Seq.seq t_Item'0
  
  axiom view'3_spec : forall self : t_Vec'2 . [%#svec46] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'0 (self : t_Vec'2) =
    [%#svec104] inv'19 (view'3 self)
  
  predicate inv'3 (_1 : t_Vec'2)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'2 [inv'3 x] . inv'3 x = invariant'0 x
  
  let rec with_capacity'0 (capacity:UInt64.t) (return'  (ret:t_Vec'2))= any
    [ return' (result:t_Vec'2)-> {inv'3 result} {[%#svec68] Seq.length (view'3 result) = 0} (! return' {result}) ]
  
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'2) (ix : int) : t_Item'0 =
    [%#sindex47] Seq.get (view'3 self) ix
  
  predicate invariant'3 (self : MutBorrow.t t_Vec'2) =
    [%#sinvariant106] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'18 (_1 : MutBorrow.t t_Vec'2)
  
  axiom inv_axiom'18 [@rewrite] : forall x : MutBorrow.t t_Vec'2 [inv'18 x] . inv'18 x = invariant'3 x
  
  use seq.Seq
  
  function view'9 (self : MutBorrow.t t_Vec'2) : Seq.seq t_Item'0 =
    [%#smodel102] view'3 self.current
  
  let rec push'0 (self:MutBorrow.t t_Vec'2) (value:t_Item'0) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'18 self}
    {[@expl:push 'value' type invariant] inv'10 value}
    any [ return' (result:())-> {[%#svec80] view'3 self.final = Seq.snoc (view'9 self) value} (! return' {result}) ] 
  
  use creusot.prelude.Any
  
  function index_logic'2 [@inline:trivial] (self : t_Vec'3) (ix : int) : t_Item'0 =
    [%#sindex47] Seq.get (view'4 self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec knapsack01_dyn'0[#"knapsack_full.rs" 81 0 81 91] (items:t_Vec'3) (max_weight:UInt64.t) (return'  (ret:t_Vec'2))= {[@expl:knapsack01_dyn 'items' type invariant] [%#sknapsack_full32] inv'4 items}
    {[@expl:knapsack01_dyn requires #0] [%#sknapsack_full33] Seq.length (view'0 items) < 10000000}
    {[@expl:knapsack01_dyn requires #1] [%#sknapsack_full34] UInt64.t'int max_weight < 10000000}
    {[@expl:knapsack01_dyn requires #2] [%#sknapsack_full35] forall i : int . 0 <= i /\ i < Seq.length (view'0 items)
     -> UInt64.t'int (index_logic'2 items i).t_Item__value'0 <= 10000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt64.add {max_weight} {[%#sknapsack_full0] (1 : UInt64.t)}
          (fun (_ret':UInt64.t) ->  [ &_11 <- _ret' ] s1)
      | s1 = from_elem'0 {[%#sknapsack_full1] (0 : UInt64.t)} {_11} (fun (_ret':t_Vec'0) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UInt64.add {_14} {[%#sknapsack_full2] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_13 <- _ret' ] s1)
      | s1 = from_elem'1 {_10} {_13} (fun (_ret':t_Vec'1) ->  [ &best_value <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &_19 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_18 <- { t_Range__start'0 = ([%#sknapsack_full3] (0 : UInt64.t)); t_Range__end'0 = _19 } ] s1
      | s1 = into_iter'0 {_18} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb5 ]
    
    | bb5 = s0 [ s0 =  [ &iter_old <- [%#sknapsack_full4] iter ] s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 =  [ &produced <- [%#sknapsack_full5] Seq.empty : Seq.seq UInt64.t ] s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb8
      [ bb8 = {[@expl:for invariant] [%#sknapsack_full10] inv'1 produced}
        {[@expl:for invariant] [%#sknapsack_full10] inv'0 iter}
        {[@expl:for invariant] [%#sknapsack_full10] produces'0 iter_old produced iter}
        {[@expl:loop invariant #0] [%#sknapsack_full9] Seq.length (view'0 items) + 1 = Seq.length (view'2 best_value)}
        {[@expl:loop invariant #1] [%#sknapsack_full8] forall i : int . 0 <= i /\ i < Seq.length (view'2 best_value)
         -> UInt64.t'int max_weight + 1 = Seq.length (view'1 (index_logic'0 best_value i))}
        {[@expl:loop invariant #2] [%#sknapsack_full7] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length produced /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
         -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
        {[@expl:loop invariant #3] [%#sknapsack_full6] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
         -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
        (! s0) [ s0 = bb9 ] 
        [ bb9 = bb10
        | bb10 = bb11
        | bb11 = bb12
        | bb12 = bb13
        | bb13 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':MutBorrow.t t_Range'0) ->  [ &_36 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range'0> {_36.current} {MutBorrow.get_id _36}
              (fun (_ret':MutBorrow.t t_Range'0) ->
                 [ &_35 <- _ret' ] 
                 [ &_36 <- { _36 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_35} (fun (_ret':t_Option'0) ->  [ &_34 <- _ret' ] s3)
          | s3 = bb14 ]
        
        | bb14 = s0
          [ s0 = -{resolve'0 _36}- s1
          | s1 = any [ br0 -> {_34 = C_None'0} (! bb17) | br1 (x0:UInt64.t)-> {_34 = C_Some'0 x0} (! bb16) ]  ]
        
        | bb16 = bb18
        | bb18 = s0
          [ s0 = v_Some'0 {_34} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_39 <- [%#sknapsack_full11] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb19 ]
        
        | bb19 = s0
          [ s0 =  [ &produced <- _39 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = index'0 {items} {i} (fun (_ret':t_Item'0) ->  [ &_43 <- _ret' ] s3)
          | s3 = bb20 ]
        
        | bb20 = s0
          [ s0 =  [ &it <- _43 ] s1
          | s1 = new'0 {[%#sknapsack_full12] (0 : UInt64.t)} {max_weight}
              (fun (_ret':t_RangeInclusive'0) ->  [ &_47 <- _ret' ] s2)
          | s2 = bb21 ]
        
        | bb21 = s0 [ s0 = into_iter'1 {_47} (fun (_ret':t_RangeInclusive'0) ->  [ &iter1 <- _ret' ] s1) | s1 = bb22 ] 
        | bb22 = s0 [ s0 =  [ &iter_old1 <- [%#sknapsack_full13] iter1 ] s1 | s1 = bb23 ] 
        | bb23 = s0 [ s0 =  [ &produced1 <- [%#sknapsack_full14] Seq.empty : Seq.seq UInt64.t ] s1 | s1 = bb24 ] 
        | bb24 = bb25
        | bb25 = bb25
          [ bb25 = {[@expl:for invariant] [%#sknapsack_full20] inv'1 produced1}
            {[@expl:for invariant] [%#sknapsack_full20] inv'2 iter1}
            {[@expl:for invariant] [%#sknapsack_full20] produces'1 iter_old1 produced1 iter1}
            {[@expl:loop invariant #0] [%#sknapsack_full19] Seq.length (view'0 items) + 1
            = Seq.length (view'2 best_value)}
            {[@expl:loop invariant #1] [%#sknapsack_full18] forall i : int . 0 <= i
            /\ i < Seq.length (view'2 best_value)
             -> UInt64.t'int max_weight + 1 = Seq.length (view'1 (index_logic'0 best_value i))}
            {[@expl:loop invariant #2] [%#sknapsack_full17] forall ii : int, ww : int . 0 <= ii
            /\ ii <= UInt64.t'int i /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
             -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
            {[@expl:loop invariant #3] [%#sknapsack_full16] forall ww : int . 0 <= ww /\ ww <= Seq.length produced1 - 1
             -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value (UInt64.t'int i + 1))) ww)
            = m'0 (view'0 items) (UInt64.t'int i + 1) ww}
            {[@expl:loop invariant #4] [%#sknapsack_full15] forall ii : int, ww : int . 0 <= ii
            /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
             -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
            (! s0) [ s0 = bb26 ] 
            [ bb26 = bb27
            | bb27 = bb28
            | bb28 = bb29
            | bb29 = bb30
            | bb30 = bb31
            | bb31 = s0
              [ s0 = MutBorrow.borrow_mut <t_RangeInclusive'0> {iter1}
                  (fun (_ret':MutBorrow.t t_RangeInclusive'0) ->  [ &_64 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
              | s1 = MutBorrow.borrow_final <t_RangeInclusive'0> {_64.current} {MutBorrow.get_id _64}
                  (fun (_ret':MutBorrow.t t_RangeInclusive'0) ->
                     [ &_63 <- _ret' ] 
                     [ &_64 <- { _64 with current = _ret'.final } ] 
                    s2)
              | s2 = next'1 {_63} (fun (_ret':t_Option'0) ->  [ &_62 <- _ret' ] s3)
              | s3 = bb32 ]
            
            | bb32 = s0
              [ s0 = -{resolve'1 _64}- s1
              | s1 = any [ br0 -> {_62 = C_None'0} (! bb35) | br1 (x0:UInt64.t)-> {_62 = C_Some'0 x0} (! bb34) ]  ]
            
            | bb34 = bb36
            | bb36 = s0
              [ s0 = v_Some'0 {_62} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 =  [ &_67 <- [%#sknapsack_full21] Seq.(++) produced1 (Seq.singleton __creusot_proc_iter_elem1) ] s2
              | s2 = bb37 ]
            
            | bb37 = s0
              [ s0 =  [ &produced1 <- _67 ] s1
              | s1 =  [ &w <- __creusot_proc_iter_elem1 ] s2
              | s2 =  [ &_71 <- UInt64.gt it.t_Item__weight'0 w ] s3
              | s3 = any [ br0 -> {_71 = false} (! bb41) | br1 -> {_71} (! bb38) ]  ]
            
            | bb38 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_76 <- _ret' ] s1) | s1 = bb39 ] 
            | bb39 = s0 [ s0 = index'2 {_76} {w} (fun (_ret':UInt64.t) ->  [ &_74 <- _ret' ] s1) | s1 = bb40 ] 
            | bb40 = s0 [ s0 =  [ &_70 <- _74 ] s1 | s1 = bb47 ] 
            | bb41 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_83 <- _ret' ] s1) | s1 = bb42 ] 
            | bb42 = s0 [ s0 = index'2 {_83} {w} (fun (_ret':UInt64.t) ->  [ &_81 <- _ret' ] s1) | s1 = bb43 ] 
            | bb43 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_91 <- _ret' ] s1) | s1 = bb44 ] 
            | bb44 = s0
              [ s0 = UInt64.sub {w} {it.t_Item__weight'0} (fun (_ret':UInt64.t) ->  [ &_94 <- _ret' ] s1)
              | s1 = index'2 {_91} {_94} (fun (_ret':UInt64.t) ->  [ &_89 <- _ret' ] s2)
              | s2 = bb45 ]
            
            | bb45 = s0
              [ s0 = UInt64.add {_89} {it.t_Item__value'0} (fun (_ret':UInt64.t) ->  [ &_87 <- _ret' ] s1)
              | s1 = max'0 {_81} {_87} (fun (_ret':UInt64.t) ->  [ &_70 <- _ret' ] s2)
              | s2 = bb46 ]
            
            | bb46 = bb47
            | bb47 = s0
              [ s0 = MutBorrow.borrow_mut <t_Vec'1> {best_value}
                  (fun (_ret':MutBorrow.t t_Vec'1) ->  [ &_101 <- _ret' ]  [ &best_value <- _ret'.final ] s1)
              | s1 = UInt64.add {i} {[%#sknapsack_full22] (1 : UInt64.t)}
                  (fun (_ret':UInt64.t) ->  [ &_102 <- _ret' ] s2)
              | s2 = index_mut'0 {_101} {_102} (fun (_ret':MutBorrow.t t_Vec'0) ->  [ &_100 <- _ret' ] s3)
              | s3 = bb48 ]
            
            | bb48 = s0
              [ s0 = MutBorrow.borrow_final <t_Vec'0> {_100.current} {MutBorrow.get_id _100}
                  (fun (_ret':MutBorrow.t t_Vec'0) ->
                     [ &_99 <- _ret' ] 
                     [ &_100 <- { _100 with current = _ret'.final } ] 
                    s1)
              | s1 = index_mut'1 {_99} {w} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_98 <- _ret' ] s2)
              | s2 = bb49 ]
            
            | bb49 = s0
              [ s0 =  [ &_98 <- { _98 with current = _70 } ] s1
              | s1 = -{resolve'2 _98}- s2
              | s2 = -{resolve'3 _100}- s3
              | s3 = bb25 ]
             ]
           ]
        
        | bb35 = bb8 ]
       ]
    
    | bb17 = s0 [ s0 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &_108 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = s0 [ s0 = with_capacity'0 {_108} (fun (_ret':t_Vec'2) ->  [ &result <- _ret' ] s1) | s1 = bb51 ] 
    | bb51 = s0
      [ s0 =  [ &left_weight <- max_weight ] s1
      | s1 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &j <- _ret' ] s2)
      | s2 = bb52 ]
    
    | bb52 = bb53
    | bb53 = bb53
      [ bb53 = {[@expl:loop invariant #0] [%#sknapsack_full28] inv'3 result}
        {[@expl:loop invariant #1] [%#sknapsack_full27] UInt64.t'int j <= Seq.length (view'0 items)}
        {[@expl:loop invariant #2] [%#sknapsack_full26] UInt64.t'int left_weight <= UInt64.t'int max_weight}
        {[@expl:loop invariant #3] [%#sknapsack_full25] forall r : Seq.seq t_Item'0 . Seq.length (view'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_values'0 r (Seq.length (view'3 result)) = m'0 (view'0 items) (UInt64.t'int j) (UInt64.t'int left_weight)
         -> sum_values'0 r 0 = m'0 (view'0 items) (Seq.length (view'0 items)) (UInt64.t'int max_weight)}
        {[@expl:loop invariant #4] [%#sknapsack_full24] forall r : Seq.seq t_Item'0 . Seq.length (view'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_weights'0 r (Seq.length (view'3 result)) <= UInt64.t'int left_weight
         -> sum_weights'0 r 0 <= UInt64.t'int max_weight}
        {[@expl:loop invariant #5] [%#sknapsack_full23] forall r : Seq.seq t_Item'0 . Seq.length (view'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ subseq_rev'0 r (Seq.length (view'3 result)) (view'0 items) (UInt64.t'int j)
         -> subseq_rev'0 r 0 (view'0 items) (Seq.length (view'0 items))}
        (! s0) [ s0 = bb54 ] 
        [ bb54 = bb55
        | bb55 = bb56
        | bb56 = bb57
        | bb57 = bb58
        | bb58 = s0
          [ s0 =  [ &_121 <- UInt64.lt ([%#sknapsack_full29] (0 : UInt64.t)) j ] s1
          | s1 = any [ br0 -> {_121 = false} (! bb69) | br1 -> {_121} (! bb59) ]  ]
        
        | bb59 = s0
          [ s0 = UInt64.sub {j} {[%#sknapsack_full30] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &j <- _ret' ] s1)
          | s1 = index'0 {items} {j} (fun (_ret':t_Item'0) ->  [ &_124 <- _ret' ] s2)
          | s2 = bb60 ]
        
        | bb60 = s0
          [ s0 =  [ &it1 <- _124 ] s1
          | s1 = UInt64.add {j} {[%#sknapsack_full31] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_133 <- _ret' ] s2)
          | s2 = index'1 {best_value} {_133} (fun (_ret':t_Vec'0) ->  [ &_131 <- _ret' ] s3)
          | s3 = bb61 ]
        
        | bb61 = s0 [ s0 = index'2 {_131} {left_weight} (fun (_ret':UInt64.t) ->  [ &_129 <- _ret' ] s1) | s1 = bb62 ] 
        | bb62 = s0 [ s0 = index'1 {best_value} {j} (fun (_ret':t_Vec'0) ->  [ &_139 <- _ret' ] s1) | s1 = bb63 ] 
        | bb63 = s0 [ s0 = index'2 {_139} {left_weight} (fun (_ret':UInt64.t) ->  [ &_137 <- _ret' ] s1) | s1 = bb64 ] 
        | bb64 = s0
          [ s0 =  [ &_127 <- _129 <> _137 ] s1 | s1 = any [ br0 -> {_127 = false} (! bb67) | br1 -> {_127} (! bb65) ]  ]
        
        | bb65 = s0
          [ s0 = {inv'3 result}
            MutBorrow.borrow_mut <t_Vec'2> {result}
              (fun (_ret':MutBorrow.t t_Vec'2) ->
                 [ &_144 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &result <- _ret'.final ] 
                s1)
          | s1 = push'0 {_144} {it1} (fun (_ret':()) ->  [ &_143 <- _ret' ] s2)
          | s2 = bb66 ]
        
        | bb66 = s0
          [ s0 = UInt64.sub {left_weight} {it1.t_Item__weight'0} (fun (_ret':UInt64.t) ->  [ &left_weight <- _ret' ] s1)
          | s1 = bb68 ]
        
        | bb67 = bb68
        | bb68 = bb53 ]
       ]
    
    | bb69 = s0 [ s0 =  [ &_0 <- result ] s1 | s1 = bb70 ] 
    | bb70 = bb71
    | bb71 = return' {_0} ]
    )
    [ & _0 : t_Vec'2 = Any.any_l ()
    | & items : t_Vec'3 = items
    | & max_weight : UInt64.t = max_weight
    | & best_value : t_Vec'1 = Any.any_l ()
    | & _10 : t_Vec'0 = Any.any_l ()
    | & _11 : UInt64.t = Any.any_l ()
    | & _13 : UInt64.t = Any.any_l ()
    | & _14 : UInt64.t = Any.any_l ()
    | & iter : t_Range'0 = Any.any_l ()
    | & _18 : t_Range'0 = Any.any_l ()
    | & _19 : UInt64.t = Any.any_l ()
    | & iter_old : t_Range'0 = Any.any_l ()
    | & produced : Seq.seq UInt64.t = Any.any_l ()
    | & _34 : t_Option'0 = Any.any_l ()
    | & _35 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & _36 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : UInt64.t = Any.any_l ()
    | & _39 : Seq.seq UInt64.t = Any.any_l ()
    | & i : UInt64.t = Any.any_l ()
    | & it : t_Item'0 = Any.any_l ()
    | & _43 : t_Item'0 = Any.any_l ()
    | & iter1 : t_RangeInclusive'0 = Any.any_l ()
    | & _47 : t_RangeInclusive'0 = Any.any_l ()
    | & iter_old1 : t_RangeInclusive'0 = Any.any_l ()
    | & produced1 : Seq.seq UInt64.t = Any.any_l ()
    | & _62 : t_Option'0 = Any.any_l ()
    | & _63 : MutBorrow.t t_RangeInclusive'0 = Any.any_l ()
    | & _64 : MutBorrow.t t_RangeInclusive'0 = Any.any_l ()
    | & __creusot_proc_iter_elem1 : UInt64.t = Any.any_l ()
    | & _67 : Seq.seq UInt64.t = Any.any_l ()
    | & w : UInt64.t = Any.any_l ()
    | & _70 : UInt64.t = Any.any_l ()
    | & _71 : bool = Any.any_l ()
    | & _74 : UInt64.t = Any.any_l ()
    | & _76 : t_Vec'0 = Any.any_l ()
    | & _81 : UInt64.t = Any.any_l ()
    | & _83 : t_Vec'0 = Any.any_l ()
    | & _87 : UInt64.t = Any.any_l ()
    | & _89 : UInt64.t = Any.any_l ()
    | & _91 : t_Vec'0 = Any.any_l ()
    | & _94 : UInt64.t = Any.any_l ()
    | & _98 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _99 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _100 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _101 : MutBorrow.t t_Vec'1 = Any.any_l ()
    | & _102 : UInt64.t = Any.any_l ()
    | & result : t_Vec'2 = Any.any_l ()
    | & _108 : UInt64.t = Any.any_l ()
    | & left_weight : UInt64.t = Any.any_l ()
    | & j : UInt64.t = Any.any_l ()
    | & _121 : bool = Any.any_l ()
    | & it1 : t_Item'0 = Any.any_l ()
    | & _124 : t_Item'0 = Any.any_l ()
    | & _127 : bool = Any.any_l ()
    | & _129 : UInt64.t = Any.any_l ()
    | & _131 : t_Vec'0 = Any.any_l ()
    | & _133 : UInt64.t = Any.any_l ()
    | & _137 : UInt64.t = Any.any_l ()
    | & _139 : t_Vec'0 = Any.any_l ()
    | & _143 : () = Any.any_l ()
    | & _144 : MutBorrow.t t_Vec'2 = Any.any_l () ]
    
    [ return' (result:t_Vec'2)-> {[@expl:knapsack01_dyn result type invariant] [%#sknapsack_full36] inv'3 result}
      {[@expl:knapsack01_dyn ensures #0] [%#sknapsack_full37] sum_weights'0 (view'3 result) (Seq.length (view'3 result))
      <= UInt64.t'int max_weight}
      {[@expl:knapsack01_dyn ensures #1] [%#sknapsack_full38] subseq_rev'0 (view'3 result) 0 (view'0 items) (Seq.length (view'0 items))}
      {[@expl:knapsack01_dyn ensures #2] [%#sknapsack_full39] forall s : Seq.seq t_Item'0 . subseq_rev'0 s 0 (view'0 items) (Seq.length (view'0 items))
      /\ sum_weights'0 s (Seq.length s) <= UInt64.t'int max_weight
       -> sum_values'0 s (Seq.length s) <= sum_values'0 (view'3 result) (Seq.length (view'3 result))}
      (! return' {result}) ]

end
