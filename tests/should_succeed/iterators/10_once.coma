module M_10_once__qyi13268780623672429765__resolve_coherence [#"10_once.rs" 9 9 9 16] (* <Once<T> as creusot_contracts::Resolve> *)
  let%span s10_once0 = "10_once.rs" 9 9 9 16
  let%span s10_once1 = "10_once.rs" 10 19 10 28
  let%span sresolve2 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate resolve'3 (_1 : t_T'0)
  
  predicate resolve'2 (self : t_Option'0) =
    [%#sresolve2] match self with
      | C_Some'0 x -> resolve'3 x
      | C_None'0 -> true
      end
  
  predicate resolve'1 (_1 : t_Option'0) =
    resolve'2 _1
  
  predicate structural_resolve'0 (_1 : t_Once'0) =
    match _1 with
      | {t_Once__0'0 = x0} -> resolve'1 x0
      end
  
  predicate resolve'0 [#"10_once.rs" 9 9 9 16] (self : t_Once'0) =
    [%#s10_once1] resolve'1 self.t_Once__0'0
  
  constant self  : t_Once'0
  
  function resolve_coherence'0 [#"10_once.rs" 9 9 9 16] (self : t_Once'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#s10_once0] structural_resolve'0 self)  -> ([%#s10_once0] resolve'0 self)
end
module M_10_once__qyi13094531909677028354__produces_refl [#"10_once.rs" 33 4 33 26] (* <Once<T> as common::Iterator> *)
  let%span s10_once0 = "10_once.rs" 32 14 32 45
  let%span s10_once1 = "10_once.rs" 33 27 33 29
  let%span s10_once2 = "10_once.rs" 25 12 26 106
  
  use seq.Seq
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate produces'0 [#"10_once.rs" 23 4 23 64] (self : t_Once'0) (visited : Seq.seq t_T'0) (o : t_Once'0) =
    [%#s10_once2] visited = (Seq.empty : Seq.seq t_T'0) /\ self = o
    \/ (exists e : t_T'0 . self = { t_Once__0'0 = C_Some'0 e }
    /\ visited = Seq.singleton e /\ o = { t_Once__0'0 = C_None'0 })
  
  constant self  : t_Once'0
  
  function produces_refl'0 [#"10_once.rs" 33 4 33 26] (self : t_Once'0) : ()
  
  goal vc_produces_refl'0 : [%#s10_once0] produces'0 self (Seq.empty : Seq.seq t_T'0) self
end
module M_10_once__qyi13094531909677028354__produces_trans [#"10_once.rs" 40 4 40 90] (* <Once<T> as common::Iterator> *)
  let%span s10_once0 = "10_once.rs" 37 15 37 32
  let%span s10_once1 = "10_once.rs" 38 15 38 32
  let%span s10_once2 = "10_once.rs" 39 14 39 42
  let%span s10_once3 = "10_once.rs" 40 91 40 93
  let%span s10_once4 = "10_once.rs" 25 12 26 106
  
  use seq.Seq
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate produces'0 [#"10_once.rs" 23 4 23 64] (self : t_Once'0) (visited : Seq.seq t_T'0) (o : t_Once'0) =
    [%#s10_once4] visited = (Seq.empty : Seq.seq t_T'0) /\ self = o
    \/ (exists e : t_T'0 . self = { t_Once__0'0 = C_Some'0 e }
    /\ visited = Seq.singleton e /\ o = { t_Once__0'0 = C_None'0 })
  
  constant a  : t_Once'0
  
  constant ab  : Seq.seq t_T'0
  
  constant b  : t_Once'0
  
  constant bc  : Seq.seq t_T'0
  
  constant c  : t_Once'0
  
  function produces_trans'0 [#"10_once.rs" 40 4 40 90] (a : t_Once'0) (ab : Seq.seq t_T'0) (b : t_Once'0) (bc : Seq.seq t_T'0) (c : t_Once'0) : ()
  
  
  goal vc_produces_trans'0 : ([%#s10_once0] produces'0 a ab b)
   -> ([%#s10_once1] produces'0 b bc c)  -> ([%#s10_once2] produces'0 a (Seq.(++) ab bc) c)
end
module M_10_once__qyi13094531909677028354__next [#"10_once.rs" 46 4 46 35] (* <Once<T> as common::Iterator> *)
  let%span s10_once0 = "10_once.rs" 46 17 46 21
  let%span s10_once1 = "10_once.rs" 46 26 46 35
  let%span s10_once2 = "10_once.rs" 42 14 45 5
  let%span soption3 = "../../../creusot-contracts/src/std/option.rs" 321 26 321 58
  let%span s10_once4 = "10_once.rs" 18 20 18 57
  let%span s10_once5 = "10_once.rs" 25 12 26 106
  let%span sresolve6 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant7 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use seq.Seq
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'0 (_1 : t_Option'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Option'0 [inv'0 x] . inv'0 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate invariant'1 (self : MutBorrow.t t_Option'0) =
    [%#sinvariant7] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : MutBorrow.t t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t t_Option'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  let rec take'0 (self:MutBorrow.t t_Option'0) (return'  (ret:t_Option'0))= {[@expl:take 'self' type invariant] inv'2 self}
    any
    [ return' (result:t_Option'0)-> {inv'0 result}
      {[%#soption3] result = self.current /\ self.final = C_None'0}
      (! return' {result}) ]
  
  
  predicate inv'4 (_1 : t_Once'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Once'0 [inv'4 x] . inv'4 x
  = match x with
    | {t_Once__0'0 = a_0} -> inv'0 a_0
    end
  
  predicate invariant'0 (self : MutBorrow.t t_Once'0) =
    [%#sinvariant7] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_Once'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Once'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  predicate resolve'1 (self : MutBorrow.t t_Once'0) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_Once'0) =
    resolve'1 _1
  
  predicate completed'0 [#"10_once.rs" 17 4 17 35] (self : MutBorrow.t t_Once'0) =
    [%#s10_once4] self.current = { t_Once__0'0 = C_None'0 } /\ resolve'1 self
  
  predicate produces'0 [#"10_once.rs" 23 4 23 64] (self : t_Once'0) (visited : Seq.seq t_T'0) (o : t_Once'0) =
    [%#s10_once5] visited = (Seq.empty : Seq.seq t_T'0) /\ self = o
    \/ (exists e : t_T'0 . self = { t_Once__0'0 = C_Some'0 e }
    /\ visited = Seq.singleton e /\ o = { t_Once__0'0 = C_None'0 })
  
  meta "compute_max_steps" 1000000
  
  let rec next'0[#"10_once.rs" 46 4 46 35] (self:MutBorrow.t t_Once'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#s10_once0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 (self.current).t_Once__0'0}
        MutBorrow.borrow_final
          <t_Option'0>
          {(self.current).t_Once__0'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 1}
          (fun (_ret':MutBorrow.t t_Option'0) ->
             [ &_3 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { t_Once__0'0 = _ret'.final } } ] 
            s1)
      | s1 = take'0 {_3} (fun (_ret':t_Option'0) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : t_Option'0 = Any.any_l ()
    | & self : MutBorrow.t t_Once'0 = self
    | & _3 : MutBorrow.t t_Option'0 = Any.any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:next result type invariant] [%#s10_once1] inv'0 result}
      {[@expl:next ensures] [%#s10_once2] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]

end
module M_10_once__qyi13268780623672429765__resolve_coherence__refines [#"10_once.rs" 9 9 9 16] (* <Once<T> as creusot_contracts::Resolve> *)
  let%span s10_once0 = "10_once.rs" 9 9 9 16
  let%span s10_once1 = "10_once.rs" 10 19 10 28
  let%span sresolve2 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span sinvariant3 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate resolve'3 (_1 : t_T'0)
  
  predicate resolve'2 (self : t_Option'0) =
    [%#sresolve2] match self with
      | C_Some'0 x -> resolve'3 x
      | C_None'0 -> true
      end
  
  predicate resolve'1 (_1 : t_Option'0) =
    resolve'2 _1
  
  predicate structural_resolve'0 (_1 : t_Once'0) =
    match _1 with
      | {t_Once__0'0 = x0} -> resolve'1 x0
      end
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'3 a_0
    end
  
  predicate inv'1 (_1 : t_Once'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Once'0 [inv'1 x] . inv'1 x
  = match x with
    | {t_Once__0'0 = a_0} -> inv'2 a_0
    end
  
  predicate invariant'0 (self : t_Once'0) =
    [%#sinvariant3] inv'1 self
  
  predicate inv'0 (_1 : t_Once'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Once'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 [#"10_once.rs" 9 9 9 16] (self : t_Once'0) =
    [%#s10_once1] resolve'1 self.t_Once__0'0
  
  goal refines : [%#s10_once0] forall self : t_Once'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
module M_10_once__qyi13094531909677028354__next__refines [#"10_once.rs" 46 4 46 35] (* <Once<T> as common::Iterator> *)
  let%span s10_once0 = "10_once.rs" 46 4 46 35
  let%span s10_once1 = "10_once.rs" 18 20 18 57
  let%span s10_once2 = "10_once.rs" 25 12 26 106
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant4 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  use creusot.prelude.MutBorrow
  use seq.Seq
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate inv'2 (_1 : t_T'0)
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'2 a_0
    end
  
  predicate inv'3 (_1 : t_Once'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Once'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_Once__0'0 = a_0} -> inv'1 a_0
    end
  
  predicate invariant'0 (self : MutBorrow.t t_Once'0) =
    [%#sinvariant4] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : MutBorrow.t t_Once'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MutBorrow.t t_Once'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'0 (self : MutBorrow.t t_Once'0) =
    [%#sresolve3] self.final = self.current
  
  predicate completed'0 [#"10_once.rs" 17 4 17 35] (self : MutBorrow.t t_Once'0) =
    [%#s10_once1] self.current = { t_Once__0'0 = C_None'0 } /\ resolve'0 self
  
  predicate produces'0 [#"10_once.rs" 23 4 23 64] (self : t_Once'0) (visited : Seq.seq t_T'0) (o : t_Once'0) =
    [%#s10_once2] visited = (Seq.empty : Seq.seq t_T'0) /\ self = o
    \/ (exists e : t_T'0 . self = { t_Once__0'0 = C_Some'0 e }
    /\ visited = Seq.singleton e /\ o = { t_Once__0'0 = C_None'0 })
  
  goal refines : [%#s10_once0] forall self : MutBorrow.t t_Once'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : t_Option'0 . match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result
   -> match result with
    | C_None'0 -> completed'0 self
    | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
    end
  /\ inv'1 result)
end
module M_10_once__qyi13094531909677028354__produces_refl__refines [#"10_once.rs" 33 4 33 26] (* <Once<T> as common::Iterator> *)
  let%span s10_once0 = "10_once.rs" 33 4 33 26
  let%span s10_once1 = "10_once.rs" 25 12 26 106
  
  use seq.Seq
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate produces'0 [#"10_once.rs" 23 4 23 64] (self : t_Once'0) (visited : Seq.seq t_T'0) (o : t_Once'0) =
    [%#s10_once1] visited = (Seq.empty : Seq.seq t_T'0) /\ self = o
    \/ (exists e : t_T'0 . self = { t_Once__0'0 = C_Some'0 e }
    /\ visited = Seq.singleton e /\ o = { t_Once__0'0 = C_None'0 })
  
  goal refines : [%#s10_once0] forall self : t_Once'0 . forall result : () . produces'0 self (Seq.empty : Seq.seq t_T'0) self
   -> produces'0 self (Seq.empty : Seq.seq t_T'0) self
end
module M_10_once__qyi13094531909677028354__produces_trans__refines [#"10_once.rs" 40 4 40 90] (* <Once<T> as common::Iterator> *)
  let%span s10_once0 = "10_once.rs" 40 4 40 90
  let%span s10_once1 = "10_once.rs" 25 12 26 106
  
  use seq.Seq
  
  type t_T'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  type t_Once'0  =
    { t_Once__0'0: t_Option'0 }
  
  predicate produces'0 [#"10_once.rs" 23 4 23 64] (self : t_Once'0) (visited : Seq.seq t_T'0) (o : t_Once'0) =
    [%#s10_once1] visited = (Seq.empty : Seq.seq t_T'0) /\ self = o
    \/ (exists e : t_T'0 . self = { t_Once__0'0 = C_Some'0 e }
    /\ visited = Seq.singleton e /\ o = { t_Once__0'0 = C_None'0 })
  
  goal refines : [%#s10_once0] forall a : t_Once'0 . forall ab : Seq.seq t_T'0 . forall b : t_Once'0 . forall bc : Seq.seq t_T'0 . forall c : t_Once'0 . produces'0 b bc c
  /\ produces'0 a ab b
   -> produces'0 b bc c
  /\ produces'0 a ab b /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
