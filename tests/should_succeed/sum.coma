module M_sum__sum_first_n [#"sum.rs" 6 0 6 33]
  let%span ssum0 = "sum.rs" 7 18 7 19
  let%span ssum1 = "sum.rs" 9 13 9 14
  let%span ssum2 = "sum.rs" 9 4 9 7
  let%span ssum3 = "sum.rs" 9 4 9 7
  let%span ssum4 = "sum.rs" 8 16 8 65
  let%span ssum5 = "sum.rs" 9 4 9 7
  let%span ssum6 = "sum.rs" 9 4 9 7
  let%span ssum7 = "sum.rs" 4 11 4 20
  let%span ssum8 = "sum.rs" 5 10 5 38
  let%span sops9 = "../../creusot-contracts/src/std/ops.rs" 226 26 226 53
  let%span sops10 = "../../creusot-contracts/src/std/ops.rs" 227 26 227 49
  let%span sops11 = "../../creusot-contracts/src/std/ops.rs" 228 26 228 91
  let%span siter12 = "../../creusot-contracts/src/std/iter.rs" 206 27 206 47
  let%span siter13 = "../../creusot-contracts/src/std/iter.rs" 207 26 207 53
  let%span srange14 = "../../creusot-contracts/src/std/iter/range.rs" 97 12 101 76
  let%span siter15 = "../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span snum16 = "../../creusot-contracts/src/std/num.rs" 25 28 25 33
  let%span sops17 = "../../creusot-contracts/src/std/ops.rs" 212 14 212 86
  let%span siter18 = "../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter19 = "../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange20 = "../../creusot-contracts/src/std/iter/range.rs" 107 14 107 45
  let%span srange21 = "../../creusot-contracts/src/std/iter/range.rs" 108 27 108 29
  let%span srange22 = "../../creusot-contracts/src/std/iter/range.rs" 112 15 112 32
  let%span srange23 = "../../creusot-contracts/src/std/iter/range.rs" 113 15 113 32
  let%span srange24 = "../../creusot-contracts/src/std/iter/range.rs" 114 14 114 42
  let%span srange25 = "../../creusot-contracts/src/std/iter/range.rs" 115 91 115 93
  let%span srange26 = "../../creusot-contracts/src/std/iter/range.rs" 75 10 75 43
  let%span srange27 = "../../creusot-contracts/src/std/iter/range.rs" 78 8 79 74
  let%span srange28 = "../../creusot-contracts/src/std/iter/range.rs" 89 12 89 57
  let%span sresolve29 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.int.UInt32
  use mach.int.Int
  use seq.Seq
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_RangeInclusive'0  =
    { t_RangeInclusive__start'0: UInt32.t; t_RangeInclusive__end'0: UInt32.t; t_RangeInclusive__exhausted'0: bool }
  
  function start_log'0 (self : t_RangeInclusive'0) : UInt32.t
  
  function end_log'0 (self : t_RangeInclusive'0) : UInt32.t
  
  function deep_model'0 (self : UInt32.t) : int =
    [%#snum16] UInt32.t'int self
  
  function is_empty_log'0 (self : t_RangeInclusive'0) : bool
  
  axiom is_empty_log'0_spec : forall self : t_RangeInclusive'0 . [%#sops17] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  let rec new'0 (start:UInt32.t) (end':UInt32.t) (return'  (ret:t_RangeInclusive'0))= any
    [ return' (result:t_RangeInclusive'0)-> {[%#sops9] start_log'0 result = start}
      {[%#sops10] end_log'0 result = end'}
      {[%#sops11] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      (! return' {result}) ]
  
  
  predicate into_iter_pre'0 (self : t_RangeInclusive'0) =
    [%#siter18] true
  
  predicate into_iter_post'0 (self : t_RangeInclusive'0) (res : t_RangeInclusive'0) =
    [%#siter19] self = res
  
  let rec into_iter'0 (self:t_RangeInclusive'0) (return'  (ret:t_RangeInclusive'0))= {[@expl:into_iter requires] [%#siter12] into_iter_pre'0 self}
    any [ return' (result:t_RangeInclusive'0)-> {[%#siter13] into_iter_post'0 self result} (! return' {result}) ] 
  
  function range_inclusive_len'0 (r : t_RangeInclusive'0) : int =
    [%#srange27] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : t_RangeInclusive'0 . [%#srange26] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  predicate produces'0 (self : t_RangeInclusive'0) (visited : Seq.seq UInt32.t) (o : t_RangeInclusive'0) =
    [%#srange14] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  function produces_trans'0 (a : t_RangeInclusive'0) (ab : Seq.seq UInt32.t) (b : t_RangeInclusive'0) (bc : Seq.seq UInt32.t) (c : t_RangeInclusive'0) : ()
  
   =
    [%#srange25] ()
  
  axiom produces_trans'0_spec : forall a : t_RangeInclusive'0, ab : Seq.seq UInt32.t, b : t_RangeInclusive'0, bc : Seq.seq UInt32.t, c : t_RangeInclusive'0 . ([%#srange22] produces'0 a ab b)
   -> ([%#srange23] produces'0 b bc c)  -> ([%#srange24] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_RangeInclusive'0) : () =
    [%#srange21] ()
  
  axiom produces_refl'0_spec : forall self : t_RangeInclusive'0 . [%#srange20] produces'0 self (Seq.empty : Seq.seq UInt32.t) self
  
  predicate inv'0 (_1 : t_RangeInclusive'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_RangeInclusive'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : Seq.seq UInt32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq UInt32.t [inv'1 x] . inv'1 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt32.t
  
  predicate completed'0 (self : MutBorrow.t t_RangeInclusive'0) =
    [%#srange28] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  let rec next'0 (self:MutBorrow.t t_RangeInclusive'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#siter15] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t t_RangeInclusive'0) =
    [%#sresolve29] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_RangeInclusive'0) =
    resolve'1 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec sum_first_n'0[#"sum.rs" 6 0 6 33] (n:UInt32.t) (return'  (ret:UInt32.t))= {[@expl:sum_first_n requires] [%#ssum7] UInt32.t'int n
    < 1000}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &sum <- [%#ssum0] (0 : UInt32.t) ] s1
      | s1 = new'0 {[%#ssum1] (1 : UInt32.t)} {n} (fun (_ret':t_RangeInclusive'0) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = into_iter'0 {_7} (fun (_ret':t_RangeInclusive'0) ->  [ &iter <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#ssum2] iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#ssum3] Seq.empty : Seq.seq UInt32.t ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] [%#ssum5] inv'1 produced}
        {[@expl:for invariant] [%#ssum5] inv'0 iter}
        {[@expl:for invariant] [%#ssum5] produces'0 iter_old produced iter}
        {[@expl:loop invariant] [%#ssum4] UInt32.t'int sum * 2 = Seq.length produced * (Seq.length produced + 1)}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = MutBorrow.borrow_mut <t_RangeInclusive'0> {iter}
              (fun (_ret':MutBorrow.t t_RangeInclusive'0) ->  [ &_21 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_RangeInclusive'0> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret':MutBorrow.t t_RangeInclusive'0) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':t_Option'0) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb7 ]
        
        | bb7 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = C_None'0} (! bb10) | br1 (x0:UInt32.t)-> {_19 = C_Some'0 x0} (! bb9) ]  ]
        
        | bb9 = bb11
        | bb11 = s0
          [ s0 = v_Some'0 {_19} (fun (r0'0:UInt32.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_24 <- [%#ssum6] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb12 ]
        
        | bb12 = s0
          [ s0 =  [ &produced <- _24 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = UInt32.add {sum} {i} (fun (_ret':UInt32.t) ->  [ &sum <- _ret' ] s3)
          | s3 = bb5 ]
         ]
       ]
    
    | bb10 = s0 [ s0 =  [ &_0 <- sum ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : UInt32.t = Any.any_l ()
    | & n : UInt32.t = n
    | & sum : UInt32.t = Any.any_l ()
    | & iter : t_RangeInclusive'0 = Any.any_l ()
    | & _7 : t_RangeInclusive'0 = Any.any_l ()
    | & iter_old : t_RangeInclusive'0 = Any.any_l ()
    | & produced : Seq.seq UInt32.t = Any.any_l ()
    | & _19 : t_Option'0 = Any.any_l ()
    | & _20 : MutBorrow.t t_RangeInclusive'0 = Any.any_l ()
    | & _21 : MutBorrow.t t_RangeInclusive'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : UInt32.t = Any.any_l ()
    | & _24 : Seq.seq UInt32.t = Any.any_l ()
    | & i : UInt32.t = Any.any_l () ]
    
    [ return' (result:UInt32.t)-> {[@expl:sum_first_n ensures] [%#ssum8] UInt32.t'int result
      = Int.div (UInt32.t'int n * (UInt32.t'int n + 1)) 2}
      (! return' {result}) ]

end
