module M_simple_trigger__id [#"simple_trigger.rs" 10 0 10 20]
  let%span ssimple_trigger0 = "simple_trigger.rs" 7 11 7 17
  let%span ssimple_trigger1 = "simple_trigger.rs" 9 10 9 32
  let%span ssimple_trigger2 = "simple_trigger.rs" 8 10 8 11
  let%span ssimple_trigger3 = "simple_trigger.rs" 11 4 11 42
  
  use mach.int.Int
  
  constant i  : int
  
  function id'0 [#"simple_trigger.rs" 10 0 10 20] (i : int) : int
  
  goal vc_id'0 : ([%#ssimple_trigger0] i >= 0)
   -> (if i = 0 then
    [%#ssimple_trigger1] i = 0  -> 0 = 0
  else
    (([@expl:id requires] [%#ssimple_trigger0] i - 1 >= 0)
    /\ 0 <= ([%#ssimple_trigger2] i) /\ ([%#ssimple_trigger2] i - 1) < ([%#ssimple_trigger2] i))
    /\ (([%#ssimple_trigger1] i - 1 = 0  -> id'0 (i - 1) = 0)  -> ([%#ssimple_trigger1] i = 0  -> id'0 (i - 1) + 1 = 0))
  )
end
module M_simple_trigger__test [#"simple_trigger.rs" 15 0 15 13]
  let%span ssimple_trigger0 = "simple_trigger.rs" 14 10 14 20
  let%span ssimple_trigger1 = "simple_trigger.rs" 7 11 7 17
  let%span ssimple_trigger2 = "simple_trigger.rs" 9 10 9 32
  let%span ssimple_trigger3 = "simple_trigger.rs" 8 10 8 11
  let%span ssimple_trigger4 = "simple_trigger.rs" 11 4 11 42
  
  use creusot.prelude.Any
  
  use mach.int.Int
  
  function id'0 [#"simple_trigger.rs" 10 0 10 20] (i : int) : int
  
  function id'0_lim (i : int) : int
  
  axiom id'0_def : forall i : int [id'0 i] . ([%#ssimple_trigger1] i >= 0)
   -> id'0 i = ([%#ssimple_trigger4] if i = 0 then 0 else id'0_lim (i - 1) + 1)
  
  axiom id'0_def_lim : forall i : int [id'0 i] . ([%#ssimple_trigger1] i >= 0)  -> id'0 i = id'0_lim i
  
  axiom id'0_lim_spec : forall i : int [id'0_lim i] . ([%#ssimple_trigger1] i >= 0)
   -> ([%#ssimple_trigger2] i = 0  -> id'0_lim i = 0)
  
  meta "compute_max_steps" 1000000
  
  let rec test'0[#"simple_trigger.rs" 15 0 15 13] (_1:()) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = Any.any_l () ]
     [ return' (result:())-> {[@expl:test ensures] [%#ssimple_trigger0] id'0 1 = 1} (! return' {result}) ] 
end
