module M_array__test_array [#"array.rs" 3 0 3 19]
  let%span sarray0 = "array.rs" 9 54 9 55
  let%span sarray1 = "array.rs" 4 17 4 18
  let%span sarray2 = "array.rs" 4 20 4 21
  let%span sslice3 = "../../../creusot-contracts/src/std/slice.rs" 246 0 355 1
  let%span siter4 = "../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span sarray5 = "array.rs" 5 31 5 32
  let%span soption6 = "../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span sarray7 = "array.rs" 6 31 6 32
  let%span siter8 = "../../../creusot-contracts/src/std/iter.rs" 116 0 245 1
  let%span sarray9 = "array.rs" 10 30 10 31
  let%span sslice10 = "../../../creusot-contracts/src/std/slice.rs" 399 20 399 61
  let%span sslice11 = "../../../creusot-contracts/src/std/slice.rs" 406 12 406 66
  let%span smodel12 = "../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sarray13 = "../../../creusot-contracts/src/std/array.rs" 89 20 89 24
  let%span sarray14 = "../../../creusot-contracts/src/std/array.rs" 95 20 95 33
  let%span sarray15 = "../../../creusot-contracts/src/std/array.rs" 69 20 69 57
  let%span sarray16 = "../../../creusot-contracts/src/std/array.rs" 63 20 63 47
  let%span sslice17 = "../../../creusot-contracts/src/std/slice.rs" 412 14 412 45
  let%span sslice18 = "../../../creusot-contracts/src/std/slice.rs" 410 4 410 10
  let%span sslice19 = "../../../creusot-contracts/src/std/slice.rs" 417 15 417 32
  let%span sslice20 = "../../../creusot-contracts/src/std/slice.rs" 418 15 418 32
  let%span sslice21 = "../../../creusot-contracts/src/std/slice.rs" 419 14 419 42
  let%span sslice22 = "../../../creusot-contracts/src/std/slice.rs" 415 4 415 10
  let%span sresolve23 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel24 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice25 = "../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice26 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span sslice27 = "../../../creusot-contracts/src/std/slice.rs" 97 14 97 41
  let%span sslice28 = "../../../creusot-contracts/src/std/slice.rs" 98 14 98 80
  let%span soption29 = "../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span sarray30 = "../../../creusot-contracts/src/std/array.rs" 74 14 74 45
  let%span sarray31 = "../../../creusot-contracts/src/std/array.rs" 72 4 72 10
  let%span sarray32 = "../../../creusot-contracts/src/std/array.rs" 79 15 79 32
  let%span sarray33 = "../../../creusot-contracts/src/std/array.rs" 80 15 80 32
  let%span sarray34 = "../../../creusot-contracts/src/std/array.rs" 81 14 81 42
  let%span sarray35 = "../../../creusot-contracts/src/std/array.rs" 77 4 77 10
  let%span smodel36 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex37 = "../../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span snum38 = "../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  
  use creusot.slice.Slice64
  
  use creusot.int.Int32
  
  use creusot.prelude.Intrinsic
  
  let rec promoted5__test_array'0 (return'  (ret:Slice64.array Int32.t))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.elts 0 = ([%#sarray1] (1 : Int32.t))
          /\ Seq.get __arr_temp.elts 1 = ([%#sarray2] (2 : Int32.t)) /\ Seq.length __arr_temp.elts = 2}-
           [ &_1 <- __arr_temp ] 
          s1) ]
      
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
     ]
     [ & _0 : Slice64.array Int32.t = Intrinsic.any_l () | & _1 : Slice64.array Int32.t = Intrinsic.any_l () ] 
    [ return' (result:Slice64.array Int32.t)-> return' {result} ]
  
  
  predicate inv'0 (_1 : Slice64.slice Int32.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Slice64.slice Int32.t [inv'0 x] . inv'0 x = true
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: Opaque.ptr; t_Iter__qy95zmarker'0: () }
  
  function view'0 (self : t_Iter'0) : Slice64.slice Int32.t
  
  let rec iter'0 (self:Slice64.slice Int32.t) (return'  (ret:t_Iter'0))= {[@expl:iter 'self' type invariant] inv'0 self}
    any [ return' (result:t_Iter'0)-> {[%#sslice3] view'0 result = self} (! return' {result}) ] 
  
  use creusot.prelude.MutBorrow
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 Int32.t
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use creusot.int.UInt64
  
  use mach.int.Int
  
  use creusot.slice.Slice64
  
  function view'2 (self : Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view'2_spec : forall self : Slice64.slice Int32.t . ([%#sslice25] Seq.length (view'2 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice26] view'2 self = Slice64.id self)
  
  function view'5 (self : Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel36] view'2 self
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Slice64.slice Int32.t) (ix : int) : Int32.t =
    [%#sindex37] Seq.get (view'2 self) ix
  
  function to_ref_seq'0 (self : Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom to_ref_seq'0_spec : forall self : Slice64.slice Int32.t . ([%#sslice27] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'5 self))
  && ([%#sslice28] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_Iter'0) (visited : Seq.seq Int32.t) (tl : t_Iter'0) =
    [%#sslice11] to_ref_seq'0 (view'0 self) = Seq.(++) visited (to_ref_seq'0 (view'0 tl))
  
  function produces_trans'0 (a : t_Iter'0) (ab : Seq.seq Int32.t) (b : t_Iter'0) (bc : Seq.seq Int32.t) (c : t_Iter'0) : ()
  
   =
    [%#sslice22] ()
  
  axiom produces_trans'0_spec : forall a : t_Iter'0, ab : Seq.seq Int32.t, b : t_Iter'0, bc : Seq.seq Int32.t, c : t_Iter'0 . ([%#sslice19] produces'0 a ab b)
   -> ([%#sslice20] produces'0 b bc c)  -> ([%#sslice21] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Iter'0) : () =
    [%#sslice18] ()
  
  axiom produces_refl'0_spec : forall self : t_Iter'0 . [%#sslice17] produces'0 self (Seq.empty : Seq.seq Int32.t) self
  
  predicate resolve'0 (self : MutBorrow.t (t_Iter'0)) =
    [%#sresolve23] self.final = self.current
  
  function view'1 (self : MutBorrow.t (t_Iter'0)) : Slice64.slice Int32.t =
    [%#smodel24] view'0 self.current
  
  use seq.Seq
  
  predicate completed'0 (self : MutBorrow.t (t_Iter'0)) =
    [%#sslice10] resolve'0 self /\ view'2 (view'1 self) = (Seq.empty : Seq.seq Int32.t)
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t (t_Iter'0)) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {inv'1 result}
      {[%#siter4] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  let rec promoted4__test_array'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#sarray5] (1 : Int32.t)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
     ]
     [ & _0 : t_Option'0 = Intrinsic.any_l () | & _1 : t_Option'0 = Intrinsic.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 (int)
  
  use creusot.int.Int32
  
  function deep_model'5 (self : Int32.t) : int =
    [%#snum38] Int32.to_int self
  
  function deep_model'4 (self : Int32.t) : int =
    [%#smodel12] deep_model'5 self
  
  function deep_model'2 (self : t_Option'0) : t_Option'2 =
    [%#soption29] match self with
      | C_Some'0 t -> C_Some'2 (deep_model'4 t)
      | C_None'0 -> C_None'2
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'2 =
    [%#smodel12] deep_model'2 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any
    [ return' (result:bool)-> {[%#soption6] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
  
  
  let rec promoted3__test_array'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#sarray7] (2 : Int32.t)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
     ]
     [ & _0 : t_Option'0 = Intrinsic.any_l () | & _1 : t_Option'0 = Intrinsic.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  let rec promoted2__test_array'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Intrinsic.any_l () | & _1 : t_Option'0 = Intrinsic.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  predicate inv'3 (_1 : Slice64.array Int32.t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Slice64.array Int32.t [inv'3 x] . inv'3 x = true
  
  predicate into_iter_pre'0 (self : Slice64.array Int32.t) =
    [%#sarray13] true
  
  type t_ManuallyDrop'0  =
    { t_ManuallyDrop__value'0: Int32.t }
  
  type t_MaybeUninit'0  =
    { t_MaybeUninit__uninit'0: (); t_MaybeUninit__value'0: t_ManuallyDrop'0 }
  
  type t_IndexRange'0  =
    { t_IndexRange__start'0: UInt64.t; t_IndexRange__end'0: UInt64.t }
  
  type t_IntoIter'0  =
    { t_IntoIter__data'0: Slice64.array (t_MaybeUninit'0); t_IntoIter__alive'0: t_IndexRange'0 }
  
  predicate inv'4 (_1 : t_IntoIter'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_IntoIter'0 [inv'4 x] . inv'4 x = true
  
  use creusot.slice.Slice64
  
  function view'3 (self : t_IntoIter'0) : Seq.seq Int32.t
  
  predicate into_iter_post'0 (self : Slice64.array Int32.t) (res : t_IntoIter'0) =
    [%#sarray14] Slice64.id self = view'3 res
  
  let rec into_iter'0 (self:Slice64.array Int32.t) (return'  (ret:t_IntoIter'0))= {[@expl:into_iter 'self' type invariant] inv'3 self}
    {[@expl:into_iter requires] [%#siter8] into_iter_pre'0 self}
    any
    [ return' (result:t_IntoIter'0)-> {inv'4 result} {[%#siter8] into_iter_post'0 self result} (! return' {result}) ]
  
  
  predicate inv'5 (_1 : MutBorrow.t (t_IntoIter'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t (t_IntoIter'0) [inv'5 x] . inv'5 x = true
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 Int32.t
  
  predicate inv'6 (_1 : t_Option'1)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'1 [inv'6 x] . inv'6 x = true
  
  use seq.Seq
  
  predicate produces'1 (self : t_IntoIter'0) (visited : Seq.seq Int32.t) (o : t_IntoIter'0) =
    [%#sarray16] view'3 self = Seq.(++) visited (view'3 o)
  
  function produces_trans'1 (a : t_IntoIter'0) (ab : Seq.seq Int32.t) (b : t_IntoIter'0) (bc : Seq.seq Int32.t) (c : t_IntoIter'0) : ()
  
   =
    [%#sarray35] ()
  
  axiom produces_trans'1_spec : forall a : t_IntoIter'0, ab : Seq.seq Int32.t, b : t_IntoIter'0, bc : Seq.seq Int32.t, c : t_IntoIter'0 . ([%#sarray32] produces'1 a ab b)
   -> ([%#sarray33] produces'1 b bc c)  -> ([%#sarray34] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_IntoIter'0) : () =
    [%#sarray31] ()
  
  axiom produces_refl'1_spec : forall self : t_IntoIter'0 . [%#sarray30] produces'1 self (Seq.empty : Seq.seq Int32.t) self
  
  predicate resolve'1 (self : MutBorrow.t (t_IntoIter'0)) =
    [%#sresolve23] self.final = self.current
  
  function view'4 (self : MutBorrow.t (t_IntoIter'0)) : Seq.seq Int32.t =
    [%#smodel24] view'3 self.current
  
  predicate completed'1 (self : MutBorrow.t (t_IntoIter'0)) =
    [%#sarray15] resolve'1 self /\ view'4 self = (Seq.empty : Seq.seq Int32.t)
  
  use seq.Seq
  
  let rec next'1 (self:MutBorrow.t (t_IntoIter'0)) (return'  (ret:t_Option'1))= {[@expl:next 'self' type invariant] inv'5 self}
    any
    [ return' (result:t_Option'1)-> {inv'6 result}
      {[%#siter4] match result with
        | C_None'1 -> completed'1 self
        | C_Some'1 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  let rec promoted1__test_array'0 (return'  (ret:t_Option'1))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'1 ([%#sarray9] (1 : Int32.t)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
     ]
     [ & _0 : t_Option'1 = Intrinsic.any_l () | & _1 : t_Option'1 = Intrinsic.any_l () ] 
    [ return' (result:t_Option'1)-> return' {result} ]
  
  
  predicate inv'7 (_1 : t_Option'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Option'1 [inv'7 x] . inv'7 x = true
  
  function deep_model'3 (self : t_Option'1) : t_Option'2 =
    [%#soption29] match self with
      | C_Some'1 t -> C_Some'2 (deep_model'5 t)
      | C_None'1 -> C_None'2
      end
  
  function deep_model'1 (self : t_Option'1) : t_Option'2 =
    [%#smodel12] deep_model'3 self
  
  let rec eq'1 (self:t_Option'1) (other:t_Option'1) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'7 self}
    {[@expl:eq 'other' type invariant] inv'7 other}
    any
    [ return' (result:bool)-> {[%#soption6] result = (deep_model'1 self = deep_model'1 other)} (! return' {result}) ]
  
  
  let rec promoted0__test_array'0 (return'  (ret:t_Option'1))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'1 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'1 = Intrinsic.any_l () | & _1 : t_Option'1 = Intrinsic.any_l () ] 
    [ return' (result:t_Option'1)-> return' {result} ]
  
  
  type t_AssertKind'0  =
    | C_Eq'0
    | C_Ne'0
    | C_Match'0
  
  meta "compute_max_steps" 1000000
  
  let rec test_array'0[#"array.rs" 3 0 3 19] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted5__test_array'0 (fun (pr5:Slice64.array Int32.t) ->  [ &_121 <- pr5 ] s1)
      | s1 = iter'0 {_121} (fun (_ret':t_Iter'0) ->  [ &a <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':MutBorrow.t (t_Iter'0)) ->  [ &_9 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = next'0 {_9} (fun (_ret':t_Option'0) ->  [ &_8 <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = promoted4__test_array'0 (fun (pr4:t_Option'0) ->  [ &_120 <- pr4 ] s1)
      | s1 =  [ &_6 <- (_8, _120) ] s2
      | s2 =  [ &left_val <- let (r'0, _) = _6 in r'0 ] s3
      | s3 =  [ &right_val <- let (_, r'1) = _6 in r'1 ] s4
      | s4 = eq'0 {left_val} {right_val} (fun (_ret':bool) ->  [ &_16 <- _ret' ] s5)
      | s5 = bb3 ]
    
    | bb3 = any [ br0 -> {_16 = false} (! bb5) | br1 -> {_16} (! bb4) ] 
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':MutBorrow.t (t_Iter'0)) ->  [ &_32 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = next'0 {_32} (fun (_ret':t_Option'0) ->  [ &_31 <- _ret' ] s2)
      | s2 = bb6 ]
    
    | bb6 = s0
      [ s0 = promoted3__test_array'0 (fun (pr3:t_Option'0) ->  [ &_119 <- pr3 ] s1)
      | s1 =  [ &_29 <- (_31, _119) ] s2
      | s2 =  [ &left_val1 <- let (r'0, _) = _29 in r'0 ] s3
      | s3 =  [ &right_val1 <- let (_, r'1) = _29 in r'1 ] s4
      | s4 = eq'0 {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s5)
      | s5 = bb7 ]
    
    | bb7 = any [ br0 -> {_39 = false} (! bb9) | br1 -> {_39} (! bb8) ] 
    | bb8 = s0
      [ s0 = MutBorrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':MutBorrow.t (t_Iter'0)) ->  [ &_55 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = next'0 {_55} (fun (_ret':t_Option'0) ->  [ &_54 <- _ret' ] s2)
      | s2 = bb10 ]
    
    | bb10 = s0
      [ s0 = promoted2__test_array'0 (fun (pr2:t_Option'0) ->  [ &_118 <- pr2 ] s1)
      | s1 =  [ &_52 <- (_54, _118) ] s2
      | s2 =  [ &left_val2 <- let (r'0, _) = _52 in r'0 ] s3
      | s3 =  [ &right_val2 <- let (_, r'1) = _52 in r'1 ] s4
      | s4 = eq'0 {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_60 <- _ret' ] s5)
      | s5 = bb11 ]
    
    | bb11 = any [ br0 -> {_60 = false} (! bb13) | br1 -> {_60} (! bb12) ] 
    | bb12 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.elts 0 = ([%#sarray0] (1 : Int32.t))
          /\ Seq.length __arr_temp.elts = 1}-
           [ &_73 <- __arr_temp ] 
          s1) ]
      
      | s1 = into_iter'0 {_73} (fun (_ret':t_IntoIter'0) ->  [ &b <- _ret' ] s2)
      | s2 = bb14 ]
    
    | bb14 = s0
      [ s0 = MutBorrow.borrow_mut <t_IntoIter'0> {b}
          (fun (_ret':MutBorrow.t (t_IntoIter'0)) ->  [ &_78 <- _ret' ]  [ &b <- _ret'.final ] s1)
      | s1 = next'1 {_78} (fun (_ret':t_Option'1) ->  [ &_77 <- _ret' ] s2)
      | s2 = bb15 ]
    
    | bb15 = s0
      [ s0 = promoted1__test_array'0 (fun (pr1:t_Option'1) ->  [ &_117 <- pr1 ] s1)
      | s1 =  [ &_75 <- (_77, _117) ] s2
      | s2 =  [ &left_val3 <- let (r'0, _) = _75 in r'0 ] s3
      | s3 =  [ &right_val3 <- let (_, r'1) = _75 in r'1 ] s4
      | s4 = eq'1 {left_val3} {right_val3} (fun (_ret':bool) ->  [ &_83 <- _ret' ] s5)
      | s5 = bb16 ]
    
    | bb16 = any [ br0 -> {_83 = false} (! bb18) | br1 -> {_83} (! bb17) ] 
    | bb17 = s0
      [ s0 = MutBorrow.borrow_mut <t_IntoIter'0> {b}
          (fun (_ret':MutBorrow.t (t_IntoIter'0)) ->  [ &_99 <- _ret' ]  [ &b <- _ret'.final ] s1)
      | s1 = next'1 {_99} (fun (_ret':t_Option'1) ->  [ &_98 <- _ret' ] s2)
      | s2 = bb19 ]
    
    | bb19 = s0
      [ s0 = promoted0__test_array'0 (fun (pr0:t_Option'1) ->  [ &_116 <- pr0 ] s1)
      | s1 =  [ &_96 <- (_98, _116) ] s2
      | s2 =  [ &left_val4 <- let (r'0, _) = _96 in r'0 ] s3
      | s3 =  [ &right_val4 <- let (_, r'1) = _96 in r'1 ] s4
      | s4 = eq'1 {left_val4} {right_val4} (fun (_ret':bool) ->  [ &_104 <- _ret' ] s5)
      | s5 = bb20 ]
    
    | bb20 = any [ br0 -> {_104 = false} (! bb22) | br1 -> {_104} (! bb21) ] 
    | bb21 = bb23
    | bb23 = return' {_0}
    | bb22 = s0
      [ s0 =  [ &kind4 <- C_Eq'0 ] s1
      | s1 =  [ &_112 <- left_val4 ] s2
      | s2 =  [ &_114 <- right_val4 ] s3
      | s3 = {false} any ]
    
    | bb18 = s0
      [ s0 =  [ &kind3 <- C_Eq'0 ] s1
      | s1 =  [ &_91 <- left_val3 ] s2
      | s2 =  [ &_93 <- right_val3 ] s3
      | s3 = {false} any ]
    
    | bb13 = s0
      [ s0 =  [ &kind2 <- C_Eq'0 ] s1
      | s1 =  [ &_68 <- left_val2 ] s2
      | s2 =  [ &_70 <- right_val2 ] s3
      | s3 = {false} any ]
    
    | bb9 = s0
      [ s0 =  [ &kind1 <- C_Eq'0 ] s1
      | s1 =  [ &_47 <- left_val1 ] s2
      | s2 =  [ &_49 <- right_val1 ] s3
      | s3 = {false} any ]
    
    | bb5 = s0
      [ s0 =  [ &kind <- C_Eq'0 ] s1
      | s1 =  [ &_24 <- left_val ] s2
      | s2 =  [ &_26 <- right_val ] s3
      | s3 = {false} any ]
     ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & a : t_Iter'0 = Intrinsic.any_l ()
    | & _6 : (t_Option'0, t_Option'0) = Intrinsic.any_l ()
    | & _8 : t_Option'0 = Intrinsic.any_l ()
    | & _9 : MutBorrow.t (t_Iter'0) = Intrinsic.any_l ()
    | & left_val : t_Option'0 = Intrinsic.any_l ()
    | & right_val : t_Option'0 = Intrinsic.any_l ()
    | & _16 : bool = Intrinsic.any_l ()
    | & kind : t_AssertKind'0 = Intrinsic.any_l ()
    | & _24 : t_Option'0 = Intrinsic.any_l ()
    | & _26 : t_Option'0 = Intrinsic.any_l ()
    | & _29 : (t_Option'0, t_Option'0) = Intrinsic.any_l ()
    | & _31 : t_Option'0 = Intrinsic.any_l ()
    | & _32 : MutBorrow.t (t_Iter'0) = Intrinsic.any_l ()
    | & left_val1 : t_Option'0 = Intrinsic.any_l ()
    | & right_val1 : t_Option'0 = Intrinsic.any_l ()
    | & _39 : bool = Intrinsic.any_l ()
    | & kind1 : t_AssertKind'0 = Intrinsic.any_l ()
    | & _47 : t_Option'0 = Intrinsic.any_l ()
    | & _49 : t_Option'0 = Intrinsic.any_l ()
    | & _52 : (t_Option'0, t_Option'0) = Intrinsic.any_l ()
    | & _54 : t_Option'0 = Intrinsic.any_l ()
    | & _55 : MutBorrow.t (t_Iter'0) = Intrinsic.any_l ()
    | & left_val2 : t_Option'0 = Intrinsic.any_l ()
    | & right_val2 : t_Option'0 = Intrinsic.any_l ()
    | & _60 : bool = Intrinsic.any_l ()
    | & kind2 : t_AssertKind'0 = Intrinsic.any_l ()
    | & _68 : t_Option'0 = Intrinsic.any_l ()
    | & _70 : t_Option'0 = Intrinsic.any_l ()
    | & b : t_IntoIter'0 = Intrinsic.any_l ()
    | & _73 : Slice64.array Int32.t = Intrinsic.any_l ()
    | & _75 : (t_Option'1, t_Option'1) = Intrinsic.any_l ()
    | & _77 : t_Option'1 = Intrinsic.any_l ()
    | & _78 : MutBorrow.t (t_IntoIter'0) = Intrinsic.any_l ()
    | & left_val3 : t_Option'1 = Intrinsic.any_l ()
    | & right_val3 : t_Option'1 = Intrinsic.any_l ()
    | & _83 : bool = Intrinsic.any_l ()
    | & kind3 : t_AssertKind'0 = Intrinsic.any_l ()
    | & _91 : t_Option'1 = Intrinsic.any_l ()
    | & _93 : t_Option'1 = Intrinsic.any_l ()
    | & _96 : (t_Option'1, t_Option'1) = Intrinsic.any_l ()
    | & _98 : t_Option'1 = Intrinsic.any_l ()
    | & _99 : MutBorrow.t (t_IntoIter'0) = Intrinsic.any_l ()
    | & left_val4 : t_Option'1 = Intrinsic.any_l ()
    | & right_val4 : t_Option'1 = Intrinsic.any_l ()
    | & _104 : bool = Intrinsic.any_l ()
    | & kind4 : t_AssertKind'0 = Intrinsic.any_l ()
    | & _112 : t_Option'1 = Intrinsic.any_l ()
    | & _114 : t_Option'1 = Intrinsic.any_l ()
    | & _116 : t_Option'1 = Intrinsic.any_l ()
    | & _117 : t_Option'1 = Intrinsic.any_l ()
    | & _118 : t_Option'0 = Intrinsic.any_l ()
    | & _119 : t_Option'0 = Intrinsic.any_l ()
    | & _120 : t_Option'0 = Intrinsic.any_l ()
    | & _121 : Slice64.array Int32.t = Intrinsic.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
