module M_fset__map_spec [#"fset.rs" 8 0 8 23]
  let%span sfset0 = "fset.rs" 7 10 7 123
  let%span sfset1 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  let%span sfset2 = "../../../creusot-contracts/src/logic/fset.rs" 243 8 243 27
  
  use creusot.prelude.Any
  use set.Fset
  use map.Map
  
  type t_T'0
  
  type t_U'0
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset t_U'0) (e : t_U'0) =
    [%#sfset1] Fset.mem e self
  
  function map'0 (self : Fset.fset t_T'0) (f : Map.map t_T'0 t_U'0) : Fset.fset t_U'0 =
    [%#sfset2] Fset.map f self
  
  predicate contains'1 [@inline:trivial] (self : Fset.fset t_T'0) (e : t_T'0) =
    [%#sfset1] Fset.mem e self
  
  meta "compute_max_steps" 1000000
  
  let rec map_spec'0[#"fset.rs" 8 0 8 23] (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:map_spec ensures] [%#sfset0] forall xs : Fset.fset t_T'0, f : Map.map t_T'0 t_U'0, y : t_U'0 . contains'0 (map'0 xs f) y
      = (exists x : t_T'0 . contains'1 xs x /\ Map.get f x = y)}
      (! return' {result}) ]

end
module M_fset__filter_spec [#"fset.rs" 11 0 11 23]
  let%span sfset0 = "fset.rs" 10 10 10 113
  let%span sfset1 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  
  use creusot.prelude.Any
  use set.Fset
  use map.Map
  
  type t_T'0
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset t_T'0) (e : t_T'0) =
    [%#sfset1] Fset.mem e self
  
  meta "compute_max_steps" 1000000
  
  let rec filter_spec'0[#"fset.rs" 11 0 11 23] (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:filter_spec ensures] [%#sfset0] forall xs : Fset.fset t_T'0, f : Map.map t_T'0 bool, x : t_T'0 . contains'0 (Fset.filter xs f) x
      = (contains'0 xs x /\ Map.get f x)}
      (! return' {result}) ]

end
module M_fset__interval_spec [#"fset.rs" 14 0 14 22]
  let%span sfset0 = "fset.rs" 13 10 13 94
  let%span sfset1 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  
  use creusot.prelude.Any
  use set.Fset
  use set.FsetInt
  use mach.int.Int
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset int) (e : int) =
    [%#sfset1] Fset.mem e self
  
  meta "compute_max_steps" 1000000
  
  let rec interval_spec'0[#"fset.rs" 14 0 14 22] (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:interval_spec ensures] [%#sfset0] forall i : int, j : int, k : int . contains'0 (FsetInt.interval i j) k
      = (i <= k /\ k < j)}
      (! return' {result}) ]

end
