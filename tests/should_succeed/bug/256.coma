module M_256__u8_safe [#"256.rs" 3 0 3 21]
  let%span s2560 = "256.rs" 4 16 4 17
  
  use creusot.int.UInt8
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec u8_safe'0[#"256.rs" 3 0 3 21] (u:UInt8.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.add {u} {[%#s2560] (0 : UInt8.t)} (fun (_ret':UInt8.t) ->  [ &_2 <- _ret' ] s1) | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Any.any_l () | & u : UInt8.t = u | & _2 : UInt8.t = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_256__bug_256 [#"256.rs" 8 0 8 26]
  use creusot.prelude.Any
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_String'0  =
    { t_String__vec'0: t_Vec'0 }
  
  meta "compute_max_steps" 1000000
  
  let rec bug_256'0[#"256.rs" 8 0 8 26] (_x:t_String'0) (return'  (ret:()))= (! bb0 [ bb0 = bb1 | bb1 = return' {_0} ] )
    [ & _0 : () = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
