module M_874__can_extend [#"874.rs" 4 0 4 19]
  let%span s874 = "874.rs" 5 21 5 22
  let%span s874'0 = "874.rs" 5 24 5 25
  let%span s874'1 = "874.rs" 5 27 5 28
  let%span s874'2 = "874.rs" 6 17 6 18
  let%span s874'3 = "874.rs" 6 20 6 21
  let%span s874'4 = "874.rs" 6 23 6 24
  let%span s874'5 = "874.rs" 9 17 9 18
  let%span s874'6 = "874.rs" 9 20 9 21
  let%span s874'7 = "874.rs" 9 23 9 24
  let%span s874'8 = "874.rs" 9 26 9 27
  let%span s874'9 = "874.rs" 9 29 9 30
  let%span s874'10 = "874.rs" 9 32 9 33
  let%span s874'11 = "874.rs" 10 18 10 31
  let%span sslice = "../../../creusot-contracts/src/std/slice.rs" 333 18 333 35
  let%span sslice'0 = "../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice'1 = "../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 145 27 145 47
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 146 26 149 102
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span svec'2 = "../../../creusot-contracts/src/std/vec.rs" 198 20 198 24
  let%span svec'3 = "../../../creusot-contracts/src/std/vec.rs" 204 20 204 33
  let%span svec'4 = "../../../creusot-contracts/src/std/vec.rs" 269 20 269 57
  let%span svec'5 = "../../../creusot-contracts/src/std/vec.rs" 276 12 276 41
  let%span svec'6 = "../../../creusot-contracts/src/std/vec.rs" 282 14 282 45
  let%span svec'7 = "../../../creusot-contracts/src/std/vec.rs" 283 27 283 29
  let%span svec'8 = "../../../creusot-contracts/src/std/vec.rs" 287 15 287 32
  let%span svec'9 = "../../../creusot-contracts/src/std/vec.rs" 288 15 288 32
  let%span svec'10 = "../../../creusot-contracts/src/std/vec.rs" 289 14 289 42
  let%span svec'11 = "../../../creusot-contracts/src/std/vec.rs" 290 73 290 75
  let%span sboxed = "../../../creusot-contracts/src/std/boxed.rs" 22 8 22 22
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.slice.Slice64
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq Int32.t
  
  axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  function view'0 (self : Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view_spec'0 : forall self : Slice64.slice Int32.t . ([%#sslice'0] Seq.length (view'0 self)
  <= UInt64.t'int (v_MAX : UInt64.t))
  && ([%#sslice'1] view'0 self = Slice64.id self)
  
  function view'1 (self : Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#sboxed] view'0 self
  
  let rec into_vec (self_:Slice64.slice Int32.t) (return'  (x:t_Vec))= any
    [ return''0 (result:t_Vec)-> {[%#sslice] view result = view'1 self_} (! return' {result}) ]
  
  
  predicate into_iter_pre (self : t_Vec) =
    [%#svec'2] true
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop  =
    { t_ManuallyDrop__value: () }
  
  type t_IntoIter  =
    { t_IntoIter__buf: t_NonNull'0;
      t_IntoIter__phantom: ();
      t_IntoIter__cap: UInt64.t;
      t_IntoIter__alloc: t_ManuallyDrop;
      t_IntoIter__ptr: t_NonNull'0;
      t_IntoIter__end: Opaque.ptr }
  
  predicate inv (_0 : t_IntoIter)
  
  axiom inv_axiom [@rewrite] : forall x : t_IntoIter [inv x] . inv x = true
  
  predicate inv'0 (_0 : MutBorrow.t t_IntoIter)
  
  axiom inv_axiom'0 [@rewrite] : forall x : MutBorrow.t t_IntoIter [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_0 : Seq.seq Int32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq Int32.t [inv'1 x] . inv'1 x = true
  
  function view'2 (self : t_IntoIter) : Seq.seq Int32.t
  
  predicate into_iter_post (self : t_Vec) (res : t_IntoIter) =
    [%#svec'3] view self = view'2 res
  
  predicate produces (self : t_IntoIter) (visited : Seq.seq Int32.t) (rhs : t_IntoIter) =
    [%#svec'5] view'2 self = Seq.(++) visited (view'2 rhs)
  
  function produces_trans (a : t_IntoIter) (ab : Seq.seq Int32.t) (b : t_IntoIter) (bc : Seq.seq Int32.t) (c : t_IntoIter) : ()
  
   =
    [%#svec'11] ()
  
  axiom produces_trans_spec : forall a : t_IntoIter, ab : Seq.seq Int32.t, b : t_IntoIter, bc : Seq.seq Int32.t, c : t_IntoIter . ([%#svec'8] produces a ab b)
   -> ([%#svec'9] produces b bc c)  -> ([%#svec'10] produces a (Seq.(++) ab bc) c)
  
  function produces_refl (self : t_IntoIter) : () =
    [%#svec'7] ()
  
  axiom produces_refl_spec : forall self : t_IntoIter . [%#svec'6] produces self (Seq.empty : Seq.seq Int32.t) self
  
  predicate resolve (self : MutBorrow.t t_IntoIter) =
    [%#sresolve] self.final = self.current
  
  function view'3 (self : MutBorrow.t t_IntoIter) : Seq.seq Int32.t =
    [%#smodel] view'2 self.current
  
  predicate completed (self : MutBorrow.t t_IntoIter) =
    [%#svec'4] resolve self /\ view'3 self = (Seq.empty : Seq.seq Int32.t)
  
  function view'4 (self : MutBorrow.t t_Vec) : Seq.seq Int32.t =
    [%#smodel] view self.current
  
  let rec extend (self_:MutBorrow.t t_Vec) (iter:t_Vec) (return'  (x:()))= {[@expl:extend requires] [%#svec] into_iter_pre iter}
    any
    [ return''0 (result:())-> {[%#svec'0] exists start_ : t_IntoIter, done' : MutBorrow.t t_IntoIter, prod : Seq.seq Int32.t . inv start_
      /\ inv'0 done'
      /\ inv'1 prod
      /\ into_iter_post iter start_
      /\ completed done' /\ produces start_ prod done'.current /\ view self_.final = Seq.(++) (view'4 self_) prod}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec can_extend[#"874.rs" 4 0 4 19] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.Slice64.elts 0 = ([%#s874] (1 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 1 = ([%#s874'0] (2 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 2 = ([%#s874'1] (3 : Int32.t)) /\ Seq.length __arr_temp.Slice64.elts = 3}-
           [ &_4 <- __arr_temp ] 
          s1) ]
      
      | s1 = bb1 ]
    
    | bb1 = bb2
    | bb2 = s0 [ s0 = into_vec {_4} (fun (_ret:t_Vec) ->  [ &v <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.Slice64.elts 0 = ([%#s874'2] (4 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 1 = ([%#s874'3] (5 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 2 = ([%#s874'4] (6 : Int32.t)) /\ Seq.length __arr_temp.Slice64.elts = 3}-
           [ &_8 <- __arr_temp ] 
          s1) ]
      
      | s1 = bb4 ]
    
    | bb4 = bb5
    | bb5 = s0 [ s0 = into_vec {_8} (fun (_ret:t_Vec) ->  [ &w <- _ret ] s1) | s1 = bb6 ] 
    | bb6 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec> {v}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_10 <- _ret ]  [ &v <- _ret.final ] s1)
      | s1 = extend {_10} {w} (fun (_ret:()) ->  [ &_9 <- _ret ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.Slice64.elts 0 = ([%#s874'5] (1 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 1 = ([%#s874'6] (2 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 2 = ([%#s874'7] (3 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 3 = ([%#s874'8] (4 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 4 = ([%#s874'9] (5 : Int32.t))
          /\ Seq.get __arr_temp.Slice64.elts 5 = ([%#s874'10] (6 : Int32.t)) /\ Seq.length __arr_temp.Slice64.elts = 6}-
           [ &_15 <- __arr_temp ] 
          s1) ]
      
      | s1 = bb8 ]
    
    | bb8 = bb9
    | bb9 = s0 [ s0 = into_vec {_15} (fun (_ret:t_Vec) ->  [ &z <- _ret ] s1) | s1 = bb10 ] 
    | bb10 = s0 [ s0 = {[@expl:assertion] [%#s874'11] Seq.(==) (view z) (view v)} s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb14
    | bb14 = return''0 {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & v : t_Vec = Any.any_l ()
    | & _4 : Slice64.array Int32.t = Any.any_l ()
    | & w : t_Vec = Any.any_l ()
    | & _8 : Slice64.array Int32.t = Any.any_l ()
    | & _9 : () = Any.any_l ()
    | & _10 : MutBorrow.t t_Vec = Any.any_l ()
    | & z : t_Vec = Any.any_l ()
    | & _15 : Slice64.array Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
