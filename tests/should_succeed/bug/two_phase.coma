module M_two_phase__test [#"two_phase.rs" 6 0 6 31]
  let%span stwo_phase = "two_phase.rs" 5 10 5 37
  let%span svec = "../../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span svec'0 = "../../../creusot-contracts/src/std/vec.rs" 93 26 93 56
  let%span svec'1 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex = "../../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span smodel = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel'0 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : t_Vec) : Seq.seq UInt64.t
  
  axiom view_spec : forall self : t_Vec . [%#svec'1] Seq.length (view self) <= UInt64.t'int (v_MAX : UInt64.t)
  
  function view'0 (self : t_Vec) : Seq.seq UInt64.t =
    [%#smodel'0] view self
  
  let rec len (self_:t_Vec) (return'  (x:UInt64.t))= any
    [ return''0 (result:UInt64.t)-> {[%#svec] UInt64.t'int result = Seq.length (view'0 self_)} (! return' {result}) ]
  
  
  function view'1 (self : MutBorrow.t t_Vec) : Seq.seq UInt64.t =
    [%#smodel] view self.current
  
  let rec push (self_:MutBorrow.t t_Vec) (v:UInt64.t) (return'  (x:()))= any
    [ return''0 (result:())-> {[%#svec'0] view self_.final = Seq.snoc (view'1 self_) v} (! return' {result}) ]
  
  
  predicate resolve (self : MutBorrow.t t_Vec) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t t_Vec) =
    resolve _0
  
  function index_logic [@inline:trivial] (self : t_Vec) (ix : int) : UInt64.t =
    [%#sindex] Seq.get (view self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec test[#"two_phase.rs" 6 0 6 31] (v:MutBorrow.t t_Vec) (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <t_Vec> {v'0.current} {MutBorrow.get_id v'0}
          (fun (_ret:MutBorrow.t t_Vec) ->  [ &_4 <- _ret ]  [ &v'0 <- { v'0 with current = _ret.final } ] s1)
      | s1 = len {_4.current} (fun (_ret:UInt64.t) ->  [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = push {_4} {_5} (fun (_ret:()) ->  [ &_3 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = -{resolve'0 v'0}- s1 | s1 = return''0 {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & v'0 : MutBorrow.t t_Vec = v
    | & _3 : () = Any.any_l ()
    | & _4 : MutBorrow.t t_Vec = Any.any_l ()
    | & _5 : UInt64.t = Any.any_l () ]
    
    [ return''0 (result:())-> {[@expl:test ensures] [%#stwo_phase] UInt64.t'int (index_logic v.final (Seq.length (view'1 v)))
      = Seq.length (view'1 v)}
      (! return' {result}) ]

end
