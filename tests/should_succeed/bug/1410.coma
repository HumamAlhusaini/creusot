module M_1410__bar [#"1410.rs" 6 0 6 32]
  let%span s14100 = "1410.rs" 9 13 9 14
  let%span s14101 = "1410.rs" 9 16 9 17
  let%span s14102 = "1410.rs" 9 4 9 7
  let%span s14103 = "1410.rs" 9 4 9 7
  let%span s14104 = "1410.rs" 8 16 8 58
  let%span s14105 = "1410.rs" 7 16 7 22
  let%span s14106 = "1410.rs" 9 4 9 7
  let%span s14107 = "1410.rs" 9 4 9 7
  let%span s14108 = "1410.rs" 6 27 6 28
  let%span s14109 = "1410.rs" 5 11 5 29
  let%span siter10 = "../../../creusot-contracts/src/std/iter.rs" 116 0 245 1
  let%span srange11 = "../../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span siter12 = "../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span sops13 = "../../../creusot-contracts/src/std/ops.rs" 169 27 169 52
  let%span sops14 = "../../../creusot-contracts/src/std/ops.rs" 170 26 170 71
  let%span siter15 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter16 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange17 = "../../../creusot-contracts/src/std/iter/range.rs" 35 14 35 45
  let%span srange18 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 32
  let%span srange19 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 32
  let%span srange20 = "../../../creusot-contracts/src/std/iter/range.rs" 42 14 42 42
  let%span snum21 = "../../../creusot-contracts/src/std/num.rs" 25 28 25 33
  let%span srange22 = "../../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sresolve23 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sops24 = "../../../creusot-contracts/src/std/ops.rs" 115 15 115 59
  let%span sops25 = "../../../creusot-contracts/src/std/ops.rs" 116 14 116 36
  let%span sops26 = "../../../creusot-contracts/src/std/ops.rs" 121 14 121 31
  let%span sops27 = "../../../creusot-contracts/src/std/ops.rs" 126 15 126 29
  let%span sops28 = "../../../creusot-contracts/src/std/ops.rs" 127 15 127 26
  let%span sops29 = "../../../creusot-contracts/src/std/ops.rs" 128 14 128 28
  let%span sops30 = "../../../creusot-contracts/src/std/ops.rs" 133 14 134 105
  let%span sinvariant31 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  
  use creusot.int.Int32
  
  type t_Range'0  =
    { t_Range__start'0: Int32.t; t_Range__end'0: Int32.t }
  
  predicate inv'1 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'1 x] . inv'1 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter15] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter16] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'1 self}
    {[@expl:into_iter requires] [%#siter10] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'1 result} {[%#siter10] into_iter_post'0 self result} (! return' {result}) ] 
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  type t_F'0
  
  predicate precondition'0 (self : t_F'0) (args : ())
  
  predicate inv'0 (_1 : t_F'0)
  
  use seq.Seq
  
  use creusot.int.Int32
  
  function deep_model'0 (self : Int32.t) : int =
    [%#snum21] Int32.to_int self
  
  use mach.int.Int
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq Int32.t) (o : t_Range'0) =
    [%#srange11] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq Int32.t) (b : t_Range'0) (bc : Seq.seq Int32.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq Int32.t, b : t_Range'0, bc : Seq.seq Int32.t, c : t_Range'0 . ([%#srange18] produces'0 a ab b)
   -> ([%#srange19] produces'0 b bc c)  -> ([%#srange20] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange17] produces'0 self (Seq.empty : Seq.seq Int32.t) self
  
  predicate inv'2 (_1 : Seq.seq Int32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq Int32.t [inv'2 x] . inv'2 x = true
  
  use creusot.prelude.MutBorrow
  
  predicate inv'3 (_1 : MutBorrow.t t_Range'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t t_Range'0 [inv'3 x] . inv'3 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 Int32.t
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x = true
  
  predicate resolve'2 (self : MutBorrow.t t_Range'0) =
    [%#sresolve23] self.final = self.current
  
  predicate completed'0 (self : MutBorrow.t t_Range'0) =
    [%#srange22] resolve'2 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_Range'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'3 self}
    any
    [ return' (result:t_Option'0)-> {inv'4 result}
      {[%#siter12] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t t_Range'0) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:Int32.t))= any
    [ good (field_0:Int32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : Int32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  predicate invariant'0 (self : MutBorrow.t t_F'0) =
    [%#sinvariant31] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'5 (_1 : MutBorrow.t t_F'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t t_F'0 [inv'5 x] . inv'5 x = invariant'0 x
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'5 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  predicate postcondition_once'0 (self : t_F'0) (args : ()) (result : ())
  
  predicate resolve'1 (_1 : t_F'0)
  
  predicate postcondition_mut'0 (self : t_F'0) (args : ()) (result_state : t_F'0) (result : ())
  
  function fn_mut_once'0 (self : t_F'0) (args : ()) (res : ()) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : (), res : () . [%#sops30] postcondition_once'0 self args res
  = (exists res_state : t_F'0 . postcondition_mut'0 self args res_state res /\ resolve'1 res_state)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops27] unnest'0 self b)
   -> ([%#sops28] unnest'0 b c)  -> ([%#sops29] unnest'0 self c)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops26] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : t_F'0) (args : ()) (res_state : t_F'0) (res : ()) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : t_F'0, args : (), res_state : t_F'0, res : () . ([%#sops24] postcondition_mut'0 self args res_state res)
   -> ([%#sops25] unnest'0 self res_state)
  
  let rec call_mut'0 (self:MutBorrow.t t_F'0) (args:()) (return'  (ret:()))= {[@expl:call_mut 'self' type invariant] inv'5 self}
    {[@expl:call_mut 'args' type invariant] inv'6 args}
    {[@expl:call_mut requires] [%#sops13] precondition'0 self.current args}
    any
    [ return' (result:())-> {inv'6 result}
      {[%#sops14] postcondition_mut'0 self.current args self.final result}
      (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec bar'0[#"1410.rs" 6 0 6 32] (f:t_F'0) (return'  (ret:()))= {[@expl:bar 'f' type invariant] [%#s14108] inv'0 f}
    {[@expl:bar requires] [%#s14109] precondition'0 f ()}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_4 <- { t_Range__start'0 = ([%#s14100] (0 : Int32.t)); t_Range__end'0 = ([%#s14101] (1 : Int32.t)) } ] 
        s1
      | s1 = into_iter'0 {_4} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s14102] iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#s14103] Seq.empty : Seq.seq Int32.t ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] [%#s14106] inv'2 produced}
        {[@expl:for invariant] [%#s14106] inv'1 iter}
        {[@expl:for invariant] [%#s14106] produces'0 iter_old produced iter}
        {[@expl:loop invariant #0] [%#s14105] inv'0 f}
        {[@expl:loop invariant #1] [%#s14104] Seq.length produced = 0  -> precondition'0 f ()}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = bb7
        | bb7 = bb8
        | bb8 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':MutBorrow.t t_Range'0) ->  [ &_18 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range'0> {_18.current} {MutBorrow.get_id _18}
              (fun (_ret':MutBorrow.t t_Range'0) ->
                 [ &_17 <- _ret' ] 
                 [ &_18 <- { _18 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_17} (fun (_ret':t_Option'0) ->  [ &_16 <- _ret' ] s3)
          | s3 = bb9 ]
        
        | bb9 = s0
          [ s0 = -{resolve'0 _18}- s1
          | s1 = any [ br0 -> {_16 = C_None'0 } (! bb12) | br1 (x0:Int32.t)-> {_16 = C_Some'0 x0} (! bb11) ]  ]
        
        | bb11 = bb13
        | bb13 = s0
          [ s0 = v_Some'0 {_16} (fun (r0'0:Int32.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_21 <- [%#s14107] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb14 ]
        
        | bb14 = s0
          [ s0 =  [ &produced <- _21 ] s1
          | s1 = {inv'0 f}
            MutBorrow.borrow_mut <t_F'0> {f}
              (fun (_ret':MutBorrow.t t_F'0) ->  [ &_24 <- _ret' ] -{inv'0 _ret'.final}-  [ &f <- _ret'.final ] s2)
          | s2 = call_mut'0 {_24} {_25} (fun (_ret':()) ->  [ &_23 <- _ret' ] s3)
          | s3 = bb15 ]
        
        | bb15 = bb5 ]
       ]
    
    | bb12 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'1 f}- s2 | s2 = bb16 ] 
    | bb16 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & f : t_F'0 = f
    | & iter : t_Range'0 = Any.any_l ()
    | & _4 : t_Range'0 = Any.any_l ()
    | & iter_old : t_Range'0 = Any.any_l ()
    | & produced : Seq.seq Int32.t = Any.any_l ()
    | & _16 : t_Option'0 = Any.any_l ()
    | & _17 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & _18 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : Int32.t = Any.any_l ()
    | & _21 : Seq.seq Int32.t = Any.any_l ()
    | & _23 : () = Any.any_l ()
    | & _24 : MutBorrow.t t_F'0 = Any.any_l ()
    | & _25 : () = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
