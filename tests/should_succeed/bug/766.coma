module M_766__Trait__goo [#"766.rs" 10 4 10 21]
  let%span s766 = "766.rs" 10 16 10 20
  let%span s766'0 = "766.rs" 8 14 8 18
  let%span s766'1 = "766.rs" 7 14 7 52
  let%span smodel = "../../../creusot-contracts/src/model.rs" 63 8 63 28
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Self
  
  predicate inv (_0 : t_Self)
  
  predicate invariant' (self : MutBorrow.t t_Self) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'0 (_0 : MutBorrow.t t_Self)
  
  axiom inv_axiom [@rewrite] : forall x : MutBorrow.t t_Self [inv'0 x] . inv'0 x = invariant' x
  
  type t_FMap
  
  function deep_model (self : t_Self) : t_FMap
  
  function deep_model'0 (self : MutBorrow.t t_Self) : t_FMap =
    [%#smodel] deep_model self.current
  
  let rec f (self:MutBorrow.t t_Self) (return'  (x:()))= {[@expl:f 'self' type invariant] [%#s766'0] inv'0 self}
    any [ return''0 (result:())-> {[%#s766'1] deep_model'0 self = deep_model'0 self} (! return' {result}) ] 
  
  predicate resolve (self : MutBorrow.t t_Self) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t t_Self) =
    resolve _0
  
  meta "compute_max_steps" 1000000
  
  let rec goo[#"766.rs" 10 4 10 21] (self:MutBorrow.t t_Self) (return'  (x:()))= {[@expl:goo 'self' type invariant] [%#s766] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv self'0.current}
        MutBorrow.borrow_final <t_Self> {self'0.current} {MutBorrow.get_id self'0}
          (fun (_ret:MutBorrow.t t_Self) ->
             [ &_2 <- _ret ] 
            -{inv _ret.final}-
             [ &self'0 <- { self'0 with current = _ret.final } ] 
            s1)
      | s1 = f {_2} (fun (_ret:()) ->  [ &_0 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 self'0} s1 | s1 = -{resolve'0 self'0}- s2 | s2 = return''0 {_0} ]  ]
    ) [ & _0 : () = Any.any_l () | & self'0 : MutBorrow.t t_Self = self | & _2 : MutBorrow.t t_Self = Any.any_l () ] 
    [ return''0 (result:())-> (! return' {result}) ]

end
