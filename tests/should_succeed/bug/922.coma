module M_922__g [#"922.rs" 5 0 5 57]
  let%span s9220 = "922.rs" 4 0 4 27
  let%span sresolve1 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sresolve2 = "../../../creusot-contracts/src/resolve.rs" 40 8 40 44
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple'1  =
    { _0'1: Int32.t; _1'0: MutBorrow.t Int32.t }
  
  type tuple'0  =
    { _0'0: tuple'1; _1'1: Int32.t }
  
  predicate resolve'2 (self : MutBorrow.t Int32.t) =
    [%#sresolve1] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'2 _1
  
  predicate resolve'5 (_1 : Int32.t) =
    true
  
  predicate resolve'6 (self : tuple'1) =
    [%#sresolve2] resolve'5 self._0'1 /\ resolve'0 self._1'0
  
  predicate resolve'4 (_1 : tuple'1) =
    resolve'6 _1
  
  predicate resolve'3 (self : tuple'0) =
    [%#sresolve2] resolve'4 self._0'0 /\ resolve'5 self._1'1
  
  predicate resolve'1 (_1 : tuple'0) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec g'0[#"922.rs" 5 0 5 57] (x:tuple'0) (return'  (ret:MutBorrow.t Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_final <Int32.t> {((x._0'0)._1'0).current} {MutBorrow.get_id (x._0'0)._1'0}
          (fun (_ret':MutBorrow.t Int32.t) ->
             [ &_4 <- _ret' ] 
             [ &x <- { x with _0'0 = { x._0'0 with _1'0 = { (x._0'0)._1'0 with current = _ret'.final } } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_4.current} {MutBorrow.get_id _4}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_2 <- _ret' ]  [ &_4 <- { _4 with current = _ret'.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _4}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x}- s6
      | s6 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t Int32.t = Any.any_l ()
    | & x : tuple'0 = x
    | & _2 : MutBorrow.t Int32.t = Any.any_l ()
    | & _4 : MutBorrow.t Int32.t = Any.any_l () ]
    
    [ return' (result:MutBorrow.t Int32.t)-> {[@expl:g ensures] [%#s9220] result = (x._0'0)._1'0} (! return' {result}) ]

end
module M_922__f1 [#"922.rs" 12 0 12 59]
  let%span s9220 = "922.rs" 9 10 9 28
  let%span s9221 = "922.rs" 10 10 10 28
  let%span s9222 = "922.rs" 11 10 11 28
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: Int32.t; _1'0: MutBorrow.t Int32.t }
  
  predicate resolve'2 (self : MutBorrow.t Int32.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t tuple'0) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t tuple'0) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f1'0[#"922.rs" 12 0 12 59] (b:MutBorrow.t tuple'0) (return'  (ret:MutBorrow.t Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((b.current)._1'0).current}
          (fun (_ret':MutBorrow.t Int32.t) ->
             [ &_6 <- _ret' ] 
             [ &b <- { b with current = { b.current with _1'0 = { (b.current)._1'0 with current = _ret'.final } } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 b}- s6
      | s6 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t Int32.t = Any.any_l ()
    | & b : MutBorrow.t tuple'0 = b
    | & _2 : MutBorrow.t Int32.t = Any.any_l ()
    | & _6 : MutBorrow.t Int32.t = Any.any_l () ]
    
    [ return' (result:MutBorrow.t Int32.t)-> {[@expl:f1 ensures #0] [%#s9220] result.current
      = ((b.current)._1'0).current}
      {[@expl:f1 ensures #1] [%#s9221] result.final = ((b.final)._1'0).current}
      {[@expl:f1 ensures #2] [%#s9222] ((b.current)._1'0).final = ((b.final)._1'0).final}
      (! return' {result}) ]

end
module M_922__f2 [#"922.rs" 19 0 19 60]
  let%span s9220 = "922.rs" 16 10 16 29
  let%span s9221 = "922.rs" 17 10 17 29
  let%span s9222 = "922.rs" 18 10 18 30
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: Int32.t; _1'0: MutBorrow.t Int32.t }
  
  predicate resolve'2 (self : MutBorrow.t Int32.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t tuple'0) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t tuple'0) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f2'0[#"922.rs" 19 0 19 60] (x0:MutBorrow.t tuple'0) (return'  (ret:MutBorrow.t Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((x0.current)._1'0).current}
          (fun (_ret':MutBorrow.t Int32.t) ->
             [ &_6 <- _ret' ] 
            
            [ &x0 <- { x0 with current = { x0.current with _1'0 = { (x0.current)._1'0 with current = _ret'.final } } } ]
            
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x0}- s6
      | s6 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t Int32.t = Any.any_l ()
    | & x0 : MutBorrow.t tuple'0 = x0
    | & _2 : MutBorrow.t Int32.t = Any.any_l ()
    | & _6 : MutBorrow.t Int32.t = Any.any_l () ]
    
    [ return' (result:MutBorrow.t Int32.t)-> {[@expl:f2 ensures #0] [%#s9220] result.current
      = ((x0.current)._1'0).current}
      {[@expl:f2 ensures #1] [%#s9221] result.final = ((x0.final)._1'0).current}
      {[@expl:f2 ensures #2] [%#s9222] ((x0.current)._1'0).final = ((x0.final)._1'0).final}
      (! return' {result}) ]

end
module M_922__f3 [#"922.rs" 26 0 26 60]
  let%span s9220 = "922.rs" 23 10 23 29
  let%span s9221 = "922.rs" 24 10 24 29
  let%span s9222 = "922.rs" 25 10 25 30
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: Int32.t; _1'0: MutBorrow.t Int32.t }
  
  predicate resolve'2 (self : MutBorrow.t Int32.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t tuple'0) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t tuple'0) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f3'0[#"922.rs" 26 0 26 60] (x1:MutBorrow.t tuple'0) (return'  (ret:MutBorrow.t Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((x1.current)._1'0).current}
          (fun (_ret':MutBorrow.t Int32.t) ->
             [ &_6 <- _ret' ] 
            
            [ &x1 <- { x1 with current = { x1.current with _1'0 = { (x1.current)._1'0 with current = _ret'.final } } } ]
            
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x1}- s6
      | s6 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t Int32.t = Any.any_l ()
    | & x1 : MutBorrow.t tuple'0 = x1
    | & _2 : MutBorrow.t Int32.t = Any.any_l ()
    | & _6 : MutBorrow.t Int32.t = Any.any_l () ]
    
    [ return' (result:MutBorrow.t Int32.t)-> {[@expl:f3 ensures #0] [%#s9220] result.current
      = ((x1.current)._1'0).current}
      {[@expl:f3 ensures #1] [%#s9221] result.final = ((x1.final)._1'0).current}
      {[@expl:f3 ensures #2] [%#s9222] ((x1.current)._1'0).final = ((x1.final)._1'0).final}
      (! return' {result}) ]

end
module M_922__f4 [#"922.rs" 33 0 33 60]
  let%span s9220 = "922.rs" 30 10 30 29
  let%span s9221 = "922.rs" 31 10 31 29
  let%span s9222 = "922.rs" 32 10 32 30
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.prelude.MutBorrow
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: Int32.t; _1'0: MutBorrow.t Int32.t }
  
  predicate resolve'2 (self : MutBorrow.t Int32.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t tuple'0) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t tuple'0) =
    resolve'3 _1
  
  meta "compute_max_steps" 1000000
  
  let rec f4'0[#"922.rs" 33 0 33 60] (x2:MutBorrow.t tuple'0) (return'  (ret:MutBorrow.t Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <Int32.t> {((x2.current)._1'0).current}
          (fun (_ret':MutBorrow.t Int32.t) ->
             [ &_6 <- _ret' ] 
            
            [ &x2 <- { x2 with current = { x2.current with _1'0 = { (x2.current)._1'0 with current = _ret'.final } } } ]
            
            s1)
      | s1 = MutBorrow.borrow_final <Int32.t> {_6.current} {MutBorrow.get_id _6}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_2 <- _ret' ]  [ &_6 <- { _6 with current = _ret'.final } ] s2)
      | s2 = MutBorrow.borrow_final <Int32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s3)
      | s3 = -{resolve'0 _6}- s4
      | s4 = -{resolve'0 _2}- s5
      | s5 = -{resolve'1 x2}- s6
      | s6 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t Int32.t = Any.any_l ()
    | & x2 : MutBorrow.t tuple'0 = x2
    | & _2 : MutBorrow.t Int32.t = Any.any_l ()
    | & _6 : MutBorrow.t Int32.t = Any.any_l () ]
    
    [ return' (result:MutBorrow.t Int32.t)-> {[@expl:f4 ensures #0] [%#s9220] result.current
      = ((x2.current)._1'0).current}
      {[@expl:f4 ensures #1] [%#s9221] result.final = ((x2.final)._1'0).current}
      {[@expl:f4 ensures #2] [%#s9222] ((x2.current)._1'0).final = ((x2.final)._1'0).final}
      (! return' {result}) ]

end
