module M_594__test_program [#"594.rs" 11 0 11 46]
  let%span s5940 = "594.rs" 10 10 10 21
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: UInt32.t; _1'0: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  let rec test_program'0[#"594.rs" 11 0 11 46] (_1:tuple'0) (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- _1._0'0 ] s1 | s1 =  [ &_0 <- x ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : UInt32.t = Any.any_l () | & _1 : tuple'0 = _1 | & x : UInt32.t = Any.any_l () ] 
    [ return' (result:UInt32.t)-> {[@expl:test_program ensures] [%#s5940] let {_0'0 = x} = _1 in result = x}
      (! return' {result}) ]

end
module M_594__test_closure [#"594.rs" 15 0 15 21]
  let%span s5940 = "594.rs" 20 23 20 24
  let%span s5941 = "594.rs" 20 26 20 27
  let%span s5942 = "594.rs" 20 19 20 20
  let%span s5943 = "594.rs" 21 20 21 21
  let%span s5944 = "594.rs" 21 23 21 24
  let%span s5945 = "594.rs" 16 24 16 35
  let%span s5946 = "594.rs" 18 24 18 35
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: Int32.t; _1'0: Int32.t }
  
  let rec closure0'0[#"594.rs" 16 14 16 37] (_1:()) (_c:Int32.t) (_3:tuple'0) (return'  (ret:Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- _3._0'0 ] s1
      | s1 =  [ &b <- _3._1'0 ] s2
      | s2 =  [ &res <- b ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
     ]
    )
    [ & _0 : Int32.t = Any.any_l ()
    | & _3 : tuple'0 = _3
    | & _a : Int32.t = Any.any_l ()
    | & b : Int32.t = Any.any_l ()
    | & res : Int32.t = Any.any_l () ]
    
    [ return' (result:Int32.t)-> {[@expl:closure ensures] [%#s5945] let {_0'0 = _a ; _1'0 = b} = _3 in result = b}
      (! return' {result}) ]
  
  
  let rec closure1'0[#"594.rs" 18 14 18 37] (_1:()) (_2:tuple'0) (return'  (ret:Int32.t))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_a <- _2._0'0 ] s1
      | s1 =  [ &b <- _2._1'0 ] s2
      | s2 =  [ &res <- b ] s3
      | s3 =  [ &_0 <- res ] s4
      | s4 = return' {_0} ]
     ]
    )
    [ & _0 : Int32.t = Any.any_l ()
    | & _2 : tuple'0 = _2
    | & _a : Int32.t = Any.any_l ()
    | & b : Int32.t = Any.any_l ()
    | & res : Int32.t = Any.any_l () ]
    
    [ return' (result:Int32.t)-> {[@expl:closure ensures] [%#s5946] let {_0'0 = _a ; _1'0 = b} = _2 in result = b}
      (! return' {result}) ]
  
  
  type tuple'1  =
    { _0'1: Int32.t; _1'1: tuple'0 }
  
  meta "compute_max_steps" 1000000
  
  let rec test_closure'0[#"594.rs" 15 0 15 21] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &cl1 <- () ] s1
      | s1 =  [ &cl2 <- () ] s2
      | s2 =  [ &_6 <- { _0'0 = ([%#s5940] (0 : Int32.t)); _1'0 = ([%#s5941] (3 : Int32.t)) } ] s3
      | s3 =  [ &_5 <- { _0'1 = ([%#s5942] (4 : Int32.t)); _1'1 = _6 } ] s4
      | s4 = closure0'0 {cl1} {_5._0'1} {_5._1'1} (fun (_ret':Int32.t) ->  [ &_a <- _ret' ] s5)
      | s5 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_10 <- { _0'0 = ([%#s5943] (0 : Int32.t)); _1'0 = ([%#s5944] (4 : Int32.t)) } ] s1
      | s1 =  [ &_9 <- _10 ] s2
      | s2 = closure1'0 {cl2} {_9} (fun (_ret':Int32.t) ->  [ &_b <- _ret' ] s3)
      | s3 = bb2 ]
    
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & cl1 : () = Any.any_l ()
    | & cl2 : () = Any.any_l ()
    | & _a : Int32.t = Any.any_l ()
    | & _5 : tuple'1 = Any.any_l ()
    | & _6 : tuple'0 = Any.any_l ()
    | & _b : Int32.t = Any.any_l ()
    | & _9 : tuple'0 = Any.any_l ()
    | & _10 : tuple'0 = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_594__qyi1704796797730763899__test_method [#"594.rs" 33 4 33 55] (* T *)
  let%span s5940 = "594.rs" 32 14 32 25
  
  use creusot.int.UInt32
  use creusot.prelude.Any
  
  type tuple'0  =
    { _0'0: UInt32.t; _1'0: UInt32.t }
  
  type t_T'0  =
    { t_T__0'0: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  let rec test_method'0[#"594.rs" 33 4 33 55] (self:t_T'0) (_2:tuple'0) (return'  (ret:UInt32.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- _2._0'0 ] s1 | s1 =  [ &_0 <- x ] s2 | s2 = return' {_0} ]  ]
    ) [ & _0 : UInt32.t = Any.any_l () | & _2 : tuple'0 = _2 | & x : UInt32.t = Any.any_l () ] 
    [ return' (result:UInt32.t)-> {[@expl:test_method ensures] [%#s5940] let {_0'0 = x} = _2 in result = x}
      (! return' {result}) ]

end
