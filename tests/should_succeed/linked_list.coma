module M_linked_list__qyi10858349784728989480__new [#"linked_list.rs" 61 4 61 27] (* List<T> *)
  let%span slinked_list0 = "linked_list.rs" 61 20 61 27
  let%span slinked_list1 = "linked_list.rs" 60 14 60 35
  let%span sptr2 = "../../creusot-contracts/src/std/ptr.rs" 121 22 121 44
  let%span sseq3 = "../../creusot-contracts/src/logic/seq.rs" 427 4 427 31
  let%span sseq4 = "../../creusot-contracts/src/logic/seq.rs" 425 14 425 36
  let%span slinked_list5 = "linked_list.rs" 48 12 48 74
  let%span sptr6 = "../../creusot-contracts/src/std/ptr.rs" 80 14 80 48
  let%span sptr7 = "../../creusot-contracts/src/std/ptr.rs" 82 8 82 30
  let%span slinked_list8 = "linked_list.rs" 56 4 56 41
  let%span slinked_list9 = "linked_list.rs" 26 12 36 69
  let%span sghost10 = "../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sseq11 = "../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed12 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sptr_own13 = "../../creusot-contracts/src/ptr_own.rs" 51 8 51 35
  
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.Any
  use map.Map
  
  function addr_logic'0 (self : Opaque.ptr) : int
  
  function is_null_logic'0 (self : Opaque.ptr) : bool =
    [%#sptr7] addr_logic'0 self = 0
  
  axiom is_null_logic'0_spec : forall self : Opaque.ptr . [%#sptr6] is_null_logic'0 self = (addr_logic'0 self = 0)
  
  let rec null'0 (return'  (ret:Opaque.ptr))= any
    [ return' (result:Opaque.ptr)-> {[%#sptr2] is_null_logic'0 result} (! return' {result}) ]
  
  
  type t_T'0
  
  type t_Cell'0  =
    { t_Cell__v'0: t_T'0; t_Cell__next'0: Opaque.ptr }
  
  type t_PtrOwn'0  =
    { t_PtrOwn__ptr'0: Opaque.ptr; t_PtrOwn__val'0: t_Cell'0 }
  
  type t_Ghost'0  =
    { t_Ghost__0'0: Seq.seq t_PtrOwn'0 }
  
  function ptr'0 (self : t_PtrOwn'0) : Opaque.ptr
  
  predicate invariant'4 (self : t_PtrOwn'0) =
    [%#sptr_own13] not is_null_logic'0 (ptr'0 self)
  
  predicate inv'7 (_1 : t_T'0)
  
  predicate inv'6 (_1 : t_Cell'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Cell'0 [inv'6 x] . inv'6 x
  = match x with
    | {t_Cell__v'0 = v ; t_Cell__next'0 = next} -> inv'7 v
    end
  
  predicate invariant'5 (self : t_Cell'0) =
    [%#sboxed12] inv'6 self
  
  predicate inv'5 (_1 : t_Cell'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Cell'0 [inv'5 x] . inv'5 x = invariant'5 x
  
  predicate inv'4 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_PtrOwn'0 [inv'4 x] . inv'4 x
  = (invariant'4 x
  /\ match x with
    | {t_PtrOwn__ptr'0 = ptr ; t_PtrOwn__val'0 = val'} -> inv'5 val'
    end)
  
  predicate invariant'3 (self : t_PtrOwn'0) =
    [%#sboxed12] inv'4 self
  
  predicate inv'3 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_PtrOwn'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_PtrOwn'0) =
    [%#sseq11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_PtrOwn'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_PtrOwn'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  function inner_logic'0 (self : t_Ghost'0) : Seq.seq t_PtrOwn'0
  
  predicate invariant'1 (self : t_Ghost'0) =
    [%#sghost10] inv'2 (inner_logic'0 self)
  
  predicate inv'1 (_1 : t_Ghost'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Ghost'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> inv'2 a_0
    end)
  
  let rec new'1 (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sseq3] inv'1 result}
      {[%#sseq4] inner_logic'0 result = (Seq.empty : Seq.seq t_PtrOwn'0)}
      (! return' {result}) ]
  
  
  type t_List'0  =
    { t_List__first'0: Opaque.ptr; t_List__last'0: Opaque.ptr; t_List__seq'0: t_Ghost'0 }
  
  function val'0 (self : t_PtrOwn'0) : t_Cell'0
  
  predicate invariant'0 [#"linked_list.rs" 24 4 24 30] (self : t_List'0) =
    [%#slinked_list9] inner_logic'0 self.t_List__seq'0 = (Seq.empty : Seq.seq t_PtrOwn'0)
    /\ is_null_logic'0 self.t_List__first'0 /\ is_null_logic'0 self.t_List__last'0
    \/ Seq.length (inner_logic'0 self.t_List__seq'0) > 0
    /\ self.t_List__first'0 = ptr'0 (Seq.get (inner_logic'0 self.t_List__seq'0) 0)
    /\ self.t_List__last'0
    = ptr'0 (Seq.get (inner_logic'0 self.t_List__seq'0) (Seq.length (inner_logic'0 self.t_List__seq'0) - 1))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (inner_logic'0 self.t_List__seq'0) - 1
     -> (val'0 (Seq.get (inner_logic'0 self.t_List__seq'0) i)).t_Cell__next'0
    = ptr'0 (Seq.get (inner_logic'0 self.t_List__seq'0) (i + 1)))
    /\ is_null_logic'0 (val'0 (Seq.get (inner_logic'0 self.t_List__seq'0) (Seq.length (inner_logic'0 self.t_List__seq'0)
    - 1))).t_Cell__next'0
  
  predicate inv'0 (_1 : t_List'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_List'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_List__first'0 = first ; t_List__last'0 = last ; t_List__seq'0 = seq} -> inv'1 seq
    end)
  
  function seq_map'0 [#"linked_list.rs" 55 0 55 66] (s : Seq.seq t_PtrOwn'0) (f : Map.map t_PtrOwn'0 t_T'0) : Seq.seq t_T'0
  
   =
    [%#slinked_list8] Seq.create (Seq.length s) (fun (i : int) -> Map.get f (Seq.get s i))
  
  function view'0 [#"linked_list.rs" 46 4 46 33] (self : t_List'0) : Seq.seq t_T'0 =
    [%#slinked_list5] seq_map'0 (inner_logic'0 self.t_List__seq'0) (fun (ptr_own : t_PtrOwn'0) -> (val'0 ptr_own).t_Cell__v'0)
  
  meta "compute_max_steps" 1000000
  
  let rec new'0[#"linked_list.rs" 61 4 61 27] (return'  (ret:t_List'0))= (! bb0
    [ bb0 = s0 [ s0 = null'0 (fun (_ret':Opaque.ptr) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = null'0 (fun (_ret':Opaque.ptr) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'1 (fun (_ret':t_Ghost'0) ->  [ &_4 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &_0 <- { t_List__first'0 = _2; t_List__last'0 = _3; t_List__seq'0 = _4 } ] s1 | s1 = return' {_0} ]
     ]
    )
    [ & _0 : t_List'0 = Any.any_l ()
    | & _2 : Opaque.ptr = Any.any_l ()
    | & _3 : Opaque.ptr = Any.any_l ()
    | & _4 : t_Ghost'0 = Any.any_l () ]
    
    [ return' (result:t_List'0)-> {[@expl:new result type invariant] [%#slinked_list0] inv'0 result}
      {[@expl:new ensures] [%#slinked_list1] view'0 result = (Seq.empty : Seq.seq t_T'0)}
      (! return' {result}) ]

end
module M_linked_list__qyi10858349784728989480__push_back [#"linked_list.rs" 66 4 66 37] (* List<T> *)
  let%span slinked_list0 = "linked_list.rs" 75 53 75 57
  let%span slinked_list1 = "linked_list.rs" 66 26 66 30
  let%span slinked_list2 = "linked_list.rs" 66 32 66 33
  let%span slinked_list3 = "linked_list.rs" 65 14 65 47
  let%span sptr4 = "../../creusot-contracts/src/std/ptr.rs" 121 22 121 44
  let%span sptr_own5 = "../../creusot-contracts/src/ptr_own.rs" 68 20 68 23
  let%span sptr_own6 = "../../creusot-contracts/src/ptr_own.rs" 68 4 68 65
  let%span sptr_own7 = "../../creusot-contracts/src/ptr_own.rs" 67 14 67 67
  let%span sptr8 = "../../creusot-contracts/src/std/ptr.rs" 107 18 107 48
  let%span sghost9 = "../../creusot-contracts/src/ghost.rs" 67 14 67 18
  let%span sghost10 = "../../creusot-contracts/src/ghost.rs" 67 4 67 36
  let%span sghost11 = "../../creusot-contracts/src/ghost.rs" 66 14 66 46
  let%span sseq12 = "../../creusot-contracts/src/logic/seq.rs" 451 22 451 26
  let%span sseq13 = "../../creusot-contracts/src/logic/seq.rs" 450 14 450 34
  let%span sint14 = "../../creusot-contracts/src/logic/int.rs" 59 4 59 42
  let%span sint15 = "../../creusot-contracts/src/logic/int.rs" 56 14 56 31
  let%span sghost16 = "../../creusot-contracts/src/ghost.rs" 216 22 216 26
  let%span sghost17 = "../../creusot-contracts/src/ghost.rs" 216 4 216 32
  let%span sghost18 = "../../creusot-contracts/src/ghost.rs" 214 14 214 29
  let%span sint19 = "../../creusot-contracts/src/logic/int.rs" 258 14 258 36
  let%span sghost20 = "../../creusot-contracts/src/ghost.rs" 84 22 84 26
  let%span sghost21 = "../../creusot-contracts/src/ghost.rs" 84 4 84 48
  let%span sghost22 = "../../creusot-contracts/src/ghost.rs" 82 14 82 46
  let%span sghost23 = "../../creusot-contracts/src/ghost.rs" 83 14 83 46
  let%span sseq24 = "../../creusot-contracts/src/logic/seq.rs" 553 30 553 34
  let%span sseq25 = "../../creusot-contracts/src/logic/seq.rs" 553 4 553 65
  let%span sseq26 = "../../creusot-contracts/src/logic/seq.rs" 547 14 550 5
  let%span sseq27 = "../../creusot-contracts/src/logic/seq.rs" 551 14 551 76
  let%span sseq28 = "../../creusot-contracts/src/logic/seq.rs" 552 14 552 44
  let%span soption29 = "../../creusot-contracts/src/std/option.rs" 89 27 89 39
  let%span soption30 = "../../creusot-contracts/src/std/option.rs" 90 26 90 46
  let%span sghost31 = "../../creusot-contracts/src/ghost.rs" 191 15 191 16
  let%span sghost32 = "../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost33 = "../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sptr_own34 = "../../creusot-contracts/src/ptr_own.rs" 104 41 104 44
  let%span sptr_own35 = "../../creusot-contracts/src/ptr_own.rs" 99 15 99 31
  let%span sptr_own36 = "../../creusot-contracts/src/ptr_own.rs" 104 4 104 78
  let%span sptr_own37 = "../../creusot-contracts/src/ptr_own.rs" 100 14 100 35
  let%span sptr_own38 = "../../creusot-contracts/src/ptr_own.rs" 102 14 102 53
  let%span sptr_own39 = "../../creusot-contracts/src/ptr_own.rs" 103 14 103 52
  let%span sseq40 = "../../creusot-contracts/src/logic/seq.rs" 494 32 494 36
  let%span sseq41 = "../../creusot-contracts/src/logic/seq.rs" 494 38 494 39
  let%span sseq42 = "../../creusot-contracts/src/logic/seq.rs" 493 14 493 40
  let%span slinked_list43 = "linked_list.rs" 48 12 48 74
  let%span sptr44 = "../../creusot-contracts/src/std/ptr.rs" 80 14 80 48
  let%span sptr45 = "../../creusot-contracts/src/std/ptr.rs" 82 8 82 30
  let%span sseq46 = "../../creusot-contracts/src/logic/seq.rs" 86 8 86 82
  let%span sresolve47 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span slinked_list48 = "linked_list.rs" 56 4 56 41
  let%span sghost49 = "../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sseq50 = "../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sptr_own51 = "../../creusot-contracts/src/ptr_own.rs" 51 8 51 35
  let%span sinvariant52 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sboxed53 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span sinvariant54 = "../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span slinked_list55 = "linked_list.rs" 26 12 36 69
  
  use creusot.prelude.Opaque
  use seq.Seq
  use mach.int.Int
  use creusot.int.Int128
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  use map.Map
  
  function addr_logic'0 (self : Opaque.ptr) : int
  
  function is_null_logic'0 (self : Opaque.ptr) : bool =
    [%#sptr45] addr_logic'0 self = 0
  
  axiom is_null_logic'0_spec : forall self : Opaque.ptr . [%#sptr44] is_null_logic'0 self = (addr_logic'0 self = 0)
  
  let rec null'0 (return'  (ret:Opaque.ptr))= any
    [ return' (result:Opaque.ptr)-> {[%#sptr4] is_null_logic'0 result} (! return' {result}) ]
  
  
  type t_T'0
  
  type t_Cell'0  =
    { t_Cell__v'0: t_T'0; t_Cell__next'0: Opaque.ptr }
  
  type t_PtrOwn'0  =
    { t_PtrOwn__ptr'0: Opaque.ptr; t_PtrOwn__val'0: t_Cell'0 }
  
  type t_Ghost'0  =
    { t_Ghost__0'0: t_PtrOwn'0 }
  
  predicate inv'8 (_1 : t_T'0)
  
  predicate inv'3 (_1 : t_Cell'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Cell'0 [inv'3 x] . inv'3 x
  = match x with
    | {t_Cell__v'0 = v ; t_Cell__next'0 = next} -> inv'8 v
    end
  
  predicate invariant'7 (self : t_Cell'0) =
    [%#sboxed53] inv'3 self
  
  predicate inv'9 (_1 : t_Cell'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Cell'0 [inv'9 x] . inv'9 x = invariant'7 x
  
  function ptr'0 (self : t_PtrOwn'0) : Opaque.ptr
  
  predicate invariant'2 (self : t_PtrOwn'0) =
    [%#sptr_own51] not is_null_logic'0 (ptr'0 self)
  
  predicate inv'2 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_PtrOwn'0 [inv'2 x] . inv'2 x
  = (invariant'2 x
  /\ match x with
    | {t_PtrOwn__ptr'0 = ptr ; t_PtrOwn__val'0 = val'} -> inv'9 val'
    end)
  
  function inner_logic'0 (self : t_Ghost'0) : t_PtrOwn'0
  
  predicate invariant'13 (self : t_Ghost'0) =
    [%#sghost49] inv'2 (inner_logic'0 self)
  
  predicate inv'18 (_1 : t_Ghost'0)
  
  axiom inv_axiom'17 [@rewrite] : forall x : t_Ghost'0 [inv'18 x] . inv'18 x
  = (invariant'13 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> inv'2 a_0
    end)
  
  predicate inv'10 (_1 : (Opaque.ptr, t_Ghost'0))
  
  axiom inv_axiom'9 [@rewrite] : forall x : (Opaque.ptr, t_Ghost'0) [inv'10 x] . inv'10 x
  = (let (x0, x1) = x in inv'18 x1)
  
  function val'0 (self : t_PtrOwn'0) : t_Cell'0
  
  let rec from_box'0 (val':t_Cell'0) (return'  (ret:(Opaque.ptr, t_Ghost'0)))= {[@expl:from_box 'val' type invariant] [%#sptr_own5] inv'9 val'}
    any
    [ return' (result:(Opaque.ptr, t_Ghost'0))-> {[%#sptr_own6] inv'10 result}
      {[%#sptr_own7] ptr'0 (inner_logic'0 (let (_, a) = result in a)) = (let (a, _) = result in a)
      /\ val'0 (inner_logic'0 (let (_, a) = result in a)) = val'}
      (! return' {result}) ]
  
  
  type t_Ghost'2  =
    { t_Ghost__0'2: Seq.seq t_PtrOwn'0 }
  
  type t_List'0  =
    { t_List__first'0: Opaque.ptr; t_List__last'0: Opaque.ptr; t_List__seq'0: t_Ghost'2 }
  
  let rec is_null'0 (self:Opaque.ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#sptr8] result = is_null_logic'0 self} (! return' {result}) ]
  
  
  predicate invariant'15 (self : t_PtrOwn'0) =
    [%#sboxed53] inv'2 self
  
  predicate inv'21 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'20 [@rewrite] : forall x : t_PtrOwn'0 [inv'21 x] . inv'21 x = invariant'15 x
  
  predicate invariant'1 (self : Seq.seq t_PtrOwn'0) =
    [%#sseq50] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'21 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_PtrOwn'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_PtrOwn'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  function inner_logic'1 (self : t_Ghost'2) : Seq.seq t_PtrOwn'0
  
  predicate invariant'0 (self : t_Ghost'2) =
    [%#sghost49] inv'1 (inner_logic'1 self)
  
  predicate inv'0 (_1 : t_Ghost'2)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'2 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'2 = a_0} -> inv'1 a_0
    end)
  
  predicate invariant'8 (self : t_Ghost'2) =
    [%#sinvariant54] inv'0 self
  
  predicate inv'11 (_1 : t_Ghost'2)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_Ghost'2 [inv'11 x] . inv'11 x = invariant'8 x
  
  predicate invariant'9 (self : Seq.seq t_PtrOwn'0) =
    [%#sinvariant54] inv'1 self
  
  predicate inv'12 (_1 : Seq.seq t_PtrOwn'0)
  
  axiom inv_axiom'11 [@rewrite] : forall x : Seq.seq t_PtrOwn'0 [inv'12 x] . inv'12 x = invariant'9 x
  
  let rec deref'0 (self:t_Ghost'2) (return'  (ret:Seq.seq t_PtrOwn'0))= {[@expl:deref 'self' type invariant] [%#sghost9] inv'11 self}
    any
    [ return' (result:Seq.seq t_PtrOwn'0)-> {[%#sghost10] inv'12 result}
      {[%#sghost11] inner_logic'1 self = result}
      (! return' {result}) ]
  
  
  let rec len_ghost'0 (self:Seq.seq t_PtrOwn'0) (return'  (ret:int))= {[@expl:len_ghost 'self' type invariant] [%#sseq12] inv'12 self}
    any [ return' (result:int)-> {[%#sseq13] result = Seq.length self} (! return' {result}) ] 
  
  type t_Ghost'1  =
    { t_Ghost__0'1: int }
  
  predicate inv'14 (_1 : int)
  
  axiom inv_axiom'13 [@rewrite] : forall x : int [inv'14 x] . inv'14 x = true
  
  function inner_logic'2 (self : t_Ghost'1) : int
  
  predicate invariant'10 (self : t_Ghost'1) =
    [%#sghost49] inv'14 (inner_logic'2 self)
  
  predicate inv'13 (_1 : t_Ghost'1)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_Ghost'1 [inv'13 x] . inv'13 x
  = (invariant'10 x
  /\ match x with
    | {t_Ghost__0'1 = a_0} -> true
    end)
  
  let rec new'0 (value:Int128.t) (return'  (ret:t_Ghost'1))= any
    [ return' (result:t_Ghost'1)-> {[%#sint14] inv'13 result}
      {[%#sint15] inner_logic'2 result = Int128.to_int value}
      (! return' {result}) ]
  
  
  let rec into_inner'0 (self:t_Ghost'1) (return'  (ret:int))= {[@expl:into_inner 'self' type invariant] [%#sghost16] inv'13 self}
    any
    [ return' (result:int)-> {[%#sghost17] inv'14 result}
      {[%#sghost18] result = inner_logic'2 self}
      (! return' {result}) ]
  
  
  let rec sub'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint19] result = self - other} (! return' {result}) ]
  
  
  predicate invariant'11 (self : MutBorrow.t t_Ghost'2) =
    [%#sinvariant52] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'15 (_1 : MutBorrow.t t_Ghost'2)
  
  axiom inv_axiom'14 [@rewrite] : forall x : MutBorrow.t t_Ghost'2 [inv'15 x] . inv'15 x = invariant'11 x
  
  predicate invariant'3 (self : MutBorrow.t (Seq.seq t_PtrOwn'0)) =
    [%#sinvariant52] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'4 (_1 : MutBorrow.t (Seq.seq t_PtrOwn'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t (Seq.seq t_PtrOwn'0) [inv'4 x] . inv'4 x = invariant'3 x
  
  let rec deref_mut'0 (self:MutBorrow.t t_Ghost'2) (return'  (ret:MutBorrow.t (Seq.seq t_PtrOwn'0)))= {[@expl:deref_mut 'self' type invariant] [%#sghost20] inv'15 self}
    any
    [ return' (result:MutBorrow.t (Seq.seq t_PtrOwn'0))-> {[%#sghost21] inv'4 result}
      {[%#sghost22] result.current = inner_logic'1 self.current}
      {[%#sghost23] result.final = inner_logic'1 self.final}
      (! return' {result}) ]
  
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (MutBorrow.t t_PtrOwn'0)
  
  predicate invariant'4 (self : MutBorrow.t t_PtrOwn'0) =
    [%#sinvariant52] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'5 (_1 : MutBorrow.t t_PtrOwn'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t t_PtrOwn'0 [inv'5 x] . inv'5 x = invariant'4 x
  
  predicate inv'16 (_1 : t_Option'0)
  
  axiom inv_axiom'15 [@rewrite] : forall x : t_Option'0 [inv'16 x] . inv'16 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'5 a_0
    end
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_PtrOwn'0
  
  function get'0 (self : Seq.seq t_PtrOwn'0) (ix : int) : t_Option'1 =
    [%#sseq46] if 0 <= ix /\ ix < Seq.length self then C_Some'1 (Seq.get self ix) else C_None'1
  
  let rec get_mut_ghost'0 (self:MutBorrow.t (Seq.seq t_PtrOwn'0)) (index:int) (return'  (ret:t_Option'0))= {[@expl:get_mut_ghost 'self' type invariant] [%#sseq24] inv'4 self}
    any
    [ return' (result:t_Option'0)-> {[%#sseq25] inv'16 result}
      {[%#sseq26] match result with
        | C_None'0 -> get'0 self.current index = C_None'1 /\ self.current = self.final
        | C_Some'0 r -> get'0 self.current index = C_Some'1 (r.current) /\ r.final = Seq.get self.final index
        end}
      {[%#sseq27] forall i : int . i <> index  -> get'0 self.current i = get'0 self.final i}
      {[%#sseq28] Seq.length self.current = Seq.length self.final}
      (! return' {result}) ]
  
  
  let rec unwrap'0 (self:t_Option'0) (return'  (ret:MutBorrow.t t_PtrOwn'0))= {[@expl:unwrap 'self' type invariant] inv'16 self}
    {[@expl:unwrap requires] [%#soption29] self <> C_None'0}
    any
    [ return' (result:MutBorrow.t t_PtrOwn'0)-> {inv'5 result}
      {[%#soption30] C_Some'0 result = self}
      (! return' {result}) ]
  
  
  type t_Ghost'3  =
    { t_Ghost__0'3: MutBorrow.t t_PtrOwn'0 }
  
  function inner_logic'3 (self : t_Ghost'3) : MutBorrow.t t_PtrOwn'0
  
  predicate invariant'12 (self : t_Ghost'3) =
    [%#sghost49] inv'5 (inner_logic'3 self)
  
  predicate inv'17 (_1 : t_Ghost'3)
  
  axiom inv_axiom'16 [@rewrite] : forall x : t_Ghost'3 [inv'17 x] . inv'17 x
  = (invariant'12 x
  /\ match x with
    | {t_Ghost__0'3 = a_0} -> inv'5 a_0
    end)
  
  let rec new'1 (x:MutBorrow.t t_PtrOwn'0) (return'  (ret:t_Ghost'3))= {[@expl:new 'x' type invariant] [%#sghost31] inv'5 x}
    any
    [ return' (result:t_Ghost'3)-> {[%#sghost32] inv'17 result}
      {[%#sghost33] inner_logic'3 result = x}
      (! return' {result}) ]
  
  
  predicate invariant'5 (self : MutBorrow.t t_Cell'0) =
    [%#sinvariant52] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'6 (_1 : MutBorrow.t t_Cell'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : MutBorrow.t t_Cell'0 [inv'6 x] . inv'6 x = invariant'5 x
  
  let rec as_mut'0 (ptr:Opaque.ptr) (own:t_Ghost'3) (return'  (ret:MutBorrow.t t_Cell'0))= {[@expl:as_mut 'own' type invariant] [%#sptr_own34] inv'17 own}
    {[@expl:as_mut requires] [%#sptr_own35] ptr = ptr'0 (inner_logic'3 own).current}
    any
    [ return' (result:MutBorrow.t t_Cell'0)-> {[%#sptr_own36] inv'6 result}
      {[%#sptr_own37] result.current = val'0 (inner_logic'3 own).current}
      {[%#sptr_own38] ptr'0 (inner_logic'3 own).final = ptr'0 (inner_logic'3 own).current}
      {[%#sptr_own39] val'0 (inner_logic'3 own).final = result.final}
      (! return' {result}) ]
  
  
  predicate resolve'4 (self : MutBorrow.t (Seq.seq t_PtrOwn'0)) =
    [%#sresolve47] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t (Seq.seq t_PtrOwn'0)) =
    resolve'4 _1
  
  predicate resolve'5 (self : MutBorrow.t t_PtrOwn'0) =
    [%#sresolve47] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_PtrOwn'0) =
    resolve'5 _1
  
  predicate resolve'6 (self : MutBorrow.t t_Cell'0) =
    [%#sresolve47] self.final = self.current
  
  predicate resolve'2 (_1 : MutBorrow.t t_Cell'0) =
    resolve'6 _1
  
  let rec into_inner'1 (self:t_Ghost'0) (return'  (ret:t_PtrOwn'0))= {[@expl:into_inner 'self' type invariant] [%#sghost16] inv'18 self}
    any
    [ return' (result:t_PtrOwn'0)-> {[%#sghost17] inv'2 result}
      {[%#sghost18] result = inner_logic'0 self}
      (! return' {result}) ]
  
  
  let rec push_back_ghost'0 (self:MutBorrow.t (Seq.seq t_PtrOwn'0)) (x:t_PtrOwn'0) (return'  (ret:()))= {[@expl:push_back_ghost 'self' type invariant] [%#sseq40] inv'4 self}
    {[@expl:push_back_ghost 'x' type invariant] [%#sseq41] inv'2 x}
    any [ return' (result:())-> {[%#sseq42] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  predicate invariant'16 [#"linked_list.rs" 24 4 24 30] (self : t_List'0) =
    [%#slinked_list55] inner_logic'1 self.t_List__seq'0 = (Seq.empty : Seq.seq t_PtrOwn'0)
    /\ is_null_logic'0 self.t_List__first'0 /\ is_null_logic'0 self.t_List__last'0
    \/ Seq.length (inner_logic'1 self.t_List__seq'0) > 0
    /\ self.t_List__first'0 = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) 0)
    /\ self.t_List__last'0
    = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (Seq.length (inner_logic'1 self.t_List__seq'0) - 1))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (inner_logic'1 self.t_List__seq'0) - 1
     -> (val'0 (Seq.get (inner_logic'1 self.t_List__seq'0) i)).t_Cell__next'0
    = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (i + 1)))
    /\ is_null_logic'0 (val'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (Seq.length (inner_logic'1 self.t_List__seq'0)
    - 1))).t_Cell__next'0
  
  predicate inv'22 (_1 : t_List'0)
  
  axiom inv_axiom'21 [@rewrite] : forall x : t_List'0 [inv'22 x] . inv'22 x
  = (invariant'16 x
  /\ match x with
    | {t_List__first'0 = first ; t_List__last'0 = last ; t_List__seq'0 = seq} -> inv'0 seq
    end)
  
  predicate invariant'6 (self : MutBorrow.t t_List'0) =
    [%#sinvariant52] inv'22 self.current /\ inv'22 self.final
  
  predicate inv'7 (_1 : MutBorrow.t t_List'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : MutBorrow.t t_List'0 [inv'7 x] . inv'7 x = invariant'6 x
  
  predicate resolve'7 (self : MutBorrow.t t_List'0) =
    [%#sresolve47] self.final = self.current
  
  predicate resolve'3 (_1 : MutBorrow.t t_List'0) =
    resolve'7 _1
  
  type t_Ghost'4  =
    { t_Ghost__0'4: () }
  
  predicate inv'19 (_1 : ())
  
  axiom inv_axiom'18 [@rewrite] : forall x : () [inv'19 x] . inv'19 x = true
  
  function inner_logic'4 (self : t_Ghost'4) : ()
  
  predicate invariant'14 (self : t_Ghost'4) =
    [%#sghost49] inv'19 (inner_logic'4 self)
  
  predicate inv'20 (_1 : t_Ghost'4)
  
  axiom inv_axiom'19 [@rewrite] : forall x : t_Ghost'4 [inv'20 x] . inv'20 x
  = (invariant'14 x
  /\ match x with
    | {t_Ghost__0'4 = a_0} -> true
    end)
  
  let rec new'2 (x:()) (return'  (ret:t_Ghost'4))= {[@expl:new 'x' type invariant] [%#sghost31] inv'19 x}
    any
    [ return' (result:t_Ghost'4)-> {[%#sghost32] inv'20 result}
      {[%#sghost33] inner_logic'4 result = x}
      (! return' {result}) ]
  
  
  function seq_map'0 [#"linked_list.rs" 55 0 55 66] (s : Seq.seq t_PtrOwn'0) (f : Map.map t_PtrOwn'0 t_T'0) : Seq.seq t_T'0
  
   =
    [%#slinked_list48] Seq.create (Seq.length s) (fun (i : int) -> Map.get f (Seq.get s i))
  
  function view'0 [#"linked_list.rs" 46 4 46 33] (self : t_List'0) : Seq.seq t_T'0 =
    [%#slinked_list43] seq_map'0 (inner_logic'1 self.t_List__seq'0) (fun (ptr_own : t_PtrOwn'0) -> (val'0 ptr_own).t_Cell__v'0)
  
  meta "compute_max_steps" 1000000
  
  let rec push_back'0[#"linked_list.rs" 66 4 66 37] (self:MutBorrow.t t_List'0) (x:t_T'0) (return'  (ret:()))= {[@expl:push_back 'self' type invariant] [%#slinked_list1] inv'7 self}
    {[@expl:push_back 'x' type invariant] [%#slinked_list2] inv'8 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 = null'0 (fun (_ret':Opaque.ptr) ->  [ &_7 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_5 <- { t_Cell__v'0 = x; t_Cell__next'0 = _7 } ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &cell <- _5 ] s1 | s1 = bb4 ] 
    | bb4 = s0 [ s0 = from_box'0 {cell} (fun (_ret':(Opaque.ptr, t_Ghost'0)) ->  [ &_10 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 =  [ &cell_ptr <- let (r'0, _) = _10 in r'0 ] s1
      | s1 =  [ &cell_own <- let (_, r'1) = _10 in r'1 ] s2
      | s2 = bb6 ]
    
    | bb6 = s0
      [ s0 = is_null'0 {(self.current).t_List__last'0} (fun (_ret':bool) ->  [ &_13 <- _ret' ] s1) | s1 = bb7 ]
    
    | bb7 = any [ br0 -> {_13 = false} (! bb9) | br1 -> {_13} (! bb8) ] 
    | bb8 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_List__first'0 = cell_ptr } } ] s1
      | s1 =  [ &self <- { self with current = { self.current with t_List__last'0 = cell_ptr } } ] s2
      | s2 = bb20 ]
    
    | bb9 = s0
      [ s0 = deref'0 {(self.current).t_List__seq'0} (fun (_ret':Seq.seq t_PtrOwn'0) ->  [ &_26 <- _ret' ] s1)
      | s1 = bb10 ]
    
    | bb10 = s0 [ s0 = len_ghost'0 {_26} (fun (_ret':int) ->  [ &_24 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = new'0 {[%#slinked_list0] (1 : Int128.t)} (fun (_ret':t_Ghost'1) ->  [ &_29 <- _ret' ] s1) | s1 = bb12 ]
    
    | bb12 = s0 [ s0 = into_inner'0 {_29} (fun (_ret':int) ->  [ &_28 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0 [ s0 = sub'0 {_24} {_28} (fun (_ret':int) ->  [ &off <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 = {inv'0 (self.current).t_List__seq'0}
        MutBorrow.borrow_mut <t_Ghost'2> {(self.current).t_List__seq'0}
          (fun (_ret':MutBorrow.t t_Ghost'2) ->
             [ &_34 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_List__seq'0 = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_34} (fun (_ret':MutBorrow.t (Seq.seq t_PtrOwn'0)) ->  [ &_33 <- _ret' ] s2)
      | s2 = bb15 ]
    
    | bb15 = s0
      [ s0 = {inv'1 _33.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn'0> {_33.current} {MutBorrow.get_id _33}
          (fun (_ret':MutBorrow.t (Seq.seq t_PtrOwn'0)) ->
             [ &_32 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_33 <- { _33 with current = _ret'.final } ] 
            s1)
      | s1 = get_mut_ghost'0 {_32} {off} (fun (_ret':t_Option'0) ->  [ &_31 <- _ret' ] s2)
      | s2 = bb16 ]
    
    | bb16 = s0 [ s0 = unwrap'0 {_31} (fun (_ret':MutBorrow.t t_PtrOwn'0) ->  [ &_30 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = {inv'2 _30.current}
        MutBorrow.borrow_final <t_PtrOwn'0> {_30.current} {MutBorrow.get_id _30}
          (fun (_ret':MutBorrow.t t_PtrOwn'0) ->
             [ &_22 <- _ret' ] 
            -{inv'2 _ret'.final}-
             [ &_30 <- { _30 with current = _ret'.final } ] 
            s1)
      | s1 = {inv'2 _22.current}
        MutBorrow.borrow_final <t_PtrOwn'0> {_22.current} {MutBorrow.get_id _22}
          (fun (_ret':MutBorrow.t t_PtrOwn'0) ->
             [ &_21 <- _ret' ] 
            -{inv'2 _ret'.final}-
             [ &_22 <- { _22 with current = _ret'.final } ] 
            s2)
      | s2 = new'1 {_21} (fun (_ret':t_Ghost'3) ->  [ &_20 <- _ret' ] s3)
      | s3 = bb18 ]
    
    | bb18 = s0
      [ s0 = as_mut'0 {(self.current).t_List__last'0} {_20} (fun (_ret':MutBorrow.t t_Cell'0) ->  [ &_18 <- _ret' ] s1)
      | s1 = bb19 ]
    
    | bb19 = s0
      [ s0 = {inv'3 _18.current}
        MutBorrow.borrow_final <t_Cell'0> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret':MutBorrow.t t_Cell'0) ->
             [ &cell_last <- _ret' ] 
            -{inv'3 _ret'.final}-
             [ &_18 <- { _18 with current = _ret'.final } ] 
            s1)
      | s1 = {[@expl:type invariant] inv'4 _33} s2
      | s2 = -{resolve'0 _33}- s3
      | s3 = {[@expl:type invariant] inv'5 _30} s4
      | s4 = -{resolve'1 _30}- s5
      | s5 = {[@expl:type invariant] inv'5 _22} s6
      | s6 = -{resolve'1 _22}- s7
      | s7 = {[@expl:type invariant] inv'6 _18} s8
      | s8 = -{resolve'2 _18}- s9
      | s9 =  [ &cell_last <- { cell_last with current = { cell_last.current with t_Cell__next'0 = cell_ptr } } ] s10
      | s10 = {[@expl:type invariant] inv'6 cell_last} s11
      | s11 = -{resolve'2 cell_last}- s12
      | s12 =  [ &self <- { self with current = { self.current with t_List__last'0 = cell_ptr } } ] s13
      | s13 = bb20 ]
    
    | bb20 = s0
      [ s0 = {inv'0 (self.current).t_List__seq'0}
        MutBorrow.borrow_final
          <t_Ghost'2>
          {(self.current).t_List__seq'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
          (fun (_ret':MutBorrow.t t_Ghost'2) ->
             [ &_42 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_List__seq'0 = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_42} (fun (_ret':MutBorrow.t (Seq.seq t_PtrOwn'0)) ->  [ &_41 <- _ret' ] s2)
      | s2 = bb21 ]
    
    | bb21 = s0
      [ s0 = {inv'1 _41.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn'0> {_41.current} {MutBorrow.get_id _41}
          (fun (_ret':MutBorrow.t (Seq.seq t_PtrOwn'0)) ->
             [ &_40 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_41 <- { _41 with current = _ret'.final } ] 
            s1)
      | s1 = into_inner'1 {cell_own} (fun (_ret':t_PtrOwn'0) ->  [ &_43 <- _ret' ] s2)
      | s2 = bb22 ]
    
    | bb22 = s0 [ s0 = push_back_ghost'0 {_40} {_43} (fun (_ret':()) ->  [ &_39 <- _ret' ] s1) | s1 = bb23 ] 
    | bb23 = s0
      [ s0 = {[@expl:type invariant] inv'4 _41} s1
      | s1 = -{resolve'0 _41}- s2
      | s2 = {[@expl:type invariant] inv'7 self} s3
      | s3 = -{resolve'3 self}- s4
      | s4 = new'2 {_39} (fun (_ret':t_Ghost'4) ->  [ &_38 <- _ret' ] s5)
      | s5 = bb24 ]
    
    | bb24 = bb25
    | bb25 = bb26
    | bb26 = bb27
    | bb27 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & self : MutBorrow.t t_List'0 = self
    | & x : t_T'0 = x
    | & cell : t_Cell'0 = Any.any_l ()
    | & _5 : t_Cell'0 = Any.any_l ()
    | & _7 : Opaque.ptr = Any.any_l ()
    | & cell_ptr : Opaque.ptr = Any.any_l ()
    | & cell_own : t_Ghost'0 = Any.any_l ()
    | & _10 : (Opaque.ptr, t_Ghost'0) = Any.any_l ()
    | & _13 : bool = Any.any_l ()
    | & cell_last : MutBorrow.t t_Cell'0 = Any.any_l ()
    | & _18 : MutBorrow.t t_Cell'0 = Any.any_l ()
    | & _20 : t_Ghost'3 = Any.any_l ()
    | & _21 : MutBorrow.t t_PtrOwn'0 = Any.any_l ()
    | & _22 : MutBorrow.t t_PtrOwn'0 = Any.any_l ()
    | & off : int = Any.any_l ()
    | & _24 : int = Any.any_l ()
    | & _26 : Seq.seq t_PtrOwn'0 = Any.any_l ()
    | & _28 : int = Any.any_l ()
    | & _29 : t_Ghost'1 = Any.any_l ()
    | & _30 : MutBorrow.t t_PtrOwn'0 = Any.any_l ()
    | & _31 : t_Option'0 = Any.any_l ()
    | & _32 : MutBorrow.t (Seq.seq t_PtrOwn'0) = Any.any_l ()
    | & _33 : MutBorrow.t (Seq.seq t_PtrOwn'0) = Any.any_l ()
    | & _34 : MutBorrow.t t_Ghost'2 = Any.any_l ()
    | & _38 : t_Ghost'4 = Any.any_l ()
    | & _39 : () = Any.any_l ()
    | & _40 : MutBorrow.t (Seq.seq t_PtrOwn'0) = Any.any_l ()
    | & _41 : MutBorrow.t (Seq.seq t_PtrOwn'0) = Any.any_l ()
    | & _42 : MutBorrow.t t_Ghost'2 = Any.any_l ()
    | & _43 : t_PtrOwn'0 = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:push_back ensures] [%#slinked_list3] view'0 self.final
      = Seq.snoc (view'0 self.current) x}
      (! return' {result}) ]

end
module M_linked_list__qyi10858349784728989480__push_front [#"linked_list.rs" 86 4 86 38] (* List<T> *)
  let%span slinked_list0 = "linked_list.rs" 86 27 86 31
  let%span slinked_list1 = "linked_list.rs" 86 33 86 34
  let%span slinked_list2 = "linked_list.rs" 85 14 85 48
  let%span sptr_own3 = "../../creusot-contracts/src/ptr_own.rs" 59 15 59 16
  let%span sptr_own4 = "../../creusot-contracts/src/ptr_own.rs" 59 4 59 53
  let%span sptr_own5 = "../../creusot-contracts/src/ptr_own.rs" 58 14 58 64
  let%span sptr6 = "../../creusot-contracts/src/std/ptr.rs" 107 18 107 48
  let%span sghost7 = "../../creusot-contracts/src/ghost.rs" 84 22 84 26
  let%span sghost8 = "../../creusot-contracts/src/ghost.rs" 84 4 84 48
  let%span sghost9 = "../../creusot-contracts/src/ghost.rs" 82 14 82 46
  let%span sghost10 = "../../creusot-contracts/src/ghost.rs" 83 14 83 46
  let%span sghost11 = "../../creusot-contracts/src/ghost.rs" 216 22 216 26
  let%span sghost12 = "../../creusot-contracts/src/ghost.rs" 216 4 216 32
  let%span sghost13 = "../../creusot-contracts/src/ghost.rs" 214 14 214 29
  let%span sseq14 = "../../creusot-contracts/src/logic/seq.rs" 472 33 472 37
  let%span sseq15 = "../../creusot-contracts/src/logic/seq.rs" 472 39 472 40
  let%span sseq16 = "../../creusot-contracts/src/logic/seq.rs" 471 14 471 41
  let%span sghost17 = "../../creusot-contracts/src/ghost.rs" 191 15 191 16
  let%span sghost18 = "../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost19 = "../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span slinked_list20 = "linked_list.rs" 48 12 48 74
  let%span sseq21 = "../../creusot-contracts/src/logic/seq.rs" 247 8 247 27
  let%span sptr22 = "../../creusot-contracts/src/std/ptr.rs" 80 14 80 48
  let%span sptr23 = "../../creusot-contracts/src/std/ptr.rs" 82 8 82 30
  let%span sresolve24 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span slinked_list25 = "linked_list.rs" 56 4 56 41
  let%span sghost26 = "../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sseq27 = "../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sinvariant28 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sptr_own29 = "../../creusot-contracts/src/ptr_own.rs" 51 8 51 35
  let%span sboxed30 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  let%span slinked_list31 = "linked_list.rs" 26 12 36 69
  
  use creusot.prelude.Opaque
  use seq.Seq
  use creusot.prelude.MutBorrow
  use mach.int.Int
  use creusot.prelude.Any
  use map.Map
  
  type t_T'0
  
  type t_Cell'0  =
    { t_Cell__v'0: t_T'0; t_Cell__next'0: Opaque.ptr }
  
  type t_PtrOwn'0  =
    { t_PtrOwn__ptr'0: Opaque.ptr; t_PtrOwn__val'0: t_Cell'0 }
  
  type t_Ghost'1  =
    { t_Ghost__0'1: Seq.seq t_PtrOwn'0 }
  
  type t_List'0  =
    { t_List__first'0: Opaque.ptr; t_List__last'0: Opaque.ptr; t_List__seq'0: t_Ghost'1 }
  
  type t_Ghost'0  =
    { t_Ghost__0'0: t_PtrOwn'0 }
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate inv'5 (_1 : t_Cell'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Cell'0 [inv'5 x] . inv'5 x
  = match x with
    | {t_Cell__v'0 = v ; t_Cell__next'0 = next} -> inv'4 v
    end
  
  function addr_logic'0 (self : Opaque.ptr) : int
  
  function is_null_logic'0 (self : Opaque.ptr) : bool =
    [%#sptr23] addr_logic'0 self = 0
  
  axiom is_null_logic'0_spec : forall self : Opaque.ptr . [%#sptr22] is_null_logic'0 self = (addr_logic'0 self = 0)
  
  function ptr'0 (self : t_PtrOwn'0) : Opaque.ptr
  
  predicate invariant'6 (self : t_PtrOwn'0) =
    [%#sptr_own29] not is_null_logic'0 (ptr'0 self)
  
  predicate invariant'9 (self : t_Cell'0) =
    [%#sboxed30] inv'5 self
  
  predicate inv'13 (_1 : t_Cell'0)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_Cell'0 [inv'13 x] . inv'13 x = invariant'9 x
  
  predicate inv'9 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_PtrOwn'0 [inv'9 x] . inv'9 x
  = (invariant'6 x
  /\ match x with
    | {t_PtrOwn__ptr'0 = ptr ; t_PtrOwn__val'0 = val'} -> inv'13 val'
    end)
  
  function inner_logic'0 (self : t_Ghost'0) : t_PtrOwn'0
  
  predicate invariant'5 (self : t_Ghost'0) =
    [%#sghost26] inv'9 (inner_logic'0 self)
  
  predicate inv'8 (_1 : t_Ghost'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Ghost'0 [inv'8 x] . inv'8 x
  = (invariant'5 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> inv'9 a_0
    end)
  
  predicate inv'6 (_1 : (Opaque.ptr, t_Ghost'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : (Opaque.ptr, t_Ghost'0) [inv'6 x] . inv'6 x = (let (x0, x1) = x in inv'8 x1)
  
  function val'0 (self : t_PtrOwn'0) : t_Cell'0
  
  let rec new'0 (v:t_Cell'0) (return'  (ret:(Opaque.ptr, t_Ghost'0)))= {[@expl:new 'v' type invariant] [%#sptr_own3] inv'5 v}
    any
    [ return' (result:(Opaque.ptr, t_Ghost'0))-> {[%#sptr_own4] inv'6 result}
      {[%#sptr_own5] ptr'0 (inner_logic'0 (let (_, a) = result in a)) = (let (a, _) = result in a)
      /\ val'0 (inner_logic'0 (let (_, a) = result in a)) = v}
      (! return' {result}) ]
  
  
  let rec is_null'0 (self:Opaque.ptr) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#sptr6] result = is_null_logic'0 self} (! return' {result}) ]
  
  
  predicate invariant'8 (self : t_PtrOwn'0) =
    [%#sboxed30] inv'9 self
  
  predicate inv'12 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'11 [@rewrite] : forall x : t_PtrOwn'0 [inv'12 x] . inv'12 x = invariant'8 x
  
  predicate invariant'1 (self : Seq.seq t_PtrOwn'0) =
    [%#sseq27] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_PtrOwn'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_PtrOwn'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  function inner_logic'1 (self : t_Ghost'1) : Seq.seq t_PtrOwn'0
  
  predicate invariant'0 (self : t_Ghost'1) =
    [%#sghost26] inv'1 (inner_logic'1 self)
  
  predicate inv'0 (_1 : t_Ghost'1)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'1 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'1 = a_0} -> inv'1 a_0
    end)
  
  predicate invariant'4 (self : MutBorrow.t t_Ghost'1) =
    [%#sinvariant28] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'7 (_1 : MutBorrow.t t_Ghost'1)
  
  axiom inv_axiom'6 [@rewrite] : forall x : MutBorrow.t t_Ghost'1 [inv'7 x] . inv'7 x = invariant'4 x
  
  predicate invariant'2 (self : MutBorrow.t (Seq.seq t_PtrOwn'0)) =
    [%#sinvariant28] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : MutBorrow.t (Seq.seq t_PtrOwn'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t (Seq.seq t_PtrOwn'0) [inv'2 x] . inv'2 x = invariant'2 x
  
  let rec deref_mut'0 (self:MutBorrow.t t_Ghost'1) (return'  (ret:MutBorrow.t (Seq.seq t_PtrOwn'0)))= {[@expl:deref_mut 'self' type invariant] [%#sghost7] inv'7 self}
    any
    [ return' (result:MutBorrow.t (Seq.seq t_PtrOwn'0))-> {[%#sghost8] inv'2 result}
      {[%#sghost9] result.current = inner_logic'1 self.current}
      {[%#sghost10] result.final = inner_logic'1 self.final}
      (! return' {result}) ]
  
  
  let rec into_inner'0 (self:t_Ghost'0) (return'  (ret:t_PtrOwn'0))= {[@expl:into_inner 'self' type invariant] [%#sghost11] inv'8 self}
    any
    [ return' (result:t_PtrOwn'0)-> {[%#sghost12] inv'9 result}
      {[%#sghost13] result = inner_logic'0 self}
      (! return' {result}) ]
  
  
  function push_front'2 [@inline:trivial] (self : Seq.seq t_PtrOwn'0) (x : t_PtrOwn'0) : Seq.seq t_PtrOwn'0 =
    [%#sseq21] Seq.cons x self
  
  let rec push_front_ghost'0 (self:MutBorrow.t (Seq.seq t_PtrOwn'0)) (x:t_PtrOwn'0) (return'  (ret:()))= {[@expl:push_front_ghost 'self' type invariant] [%#sseq14] inv'2 self}
    {[@expl:push_front_ghost 'x' type invariant] [%#sseq15] inv'9 x}
    any [ return' (result:())-> {[%#sseq16] self.final = push_front'2 self.current x} (! return' {result}) ] 
  
  predicate resolve'2 (self : MutBorrow.t (Seq.seq t_PtrOwn'0)) =
    [%#sresolve24] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t (Seq.seq t_PtrOwn'0)) =
    resolve'2 _1
  
  predicate invariant'10 [#"linked_list.rs" 24 4 24 30] (self : t_List'0) =
    [%#slinked_list31] inner_logic'1 self.t_List__seq'0 = (Seq.empty : Seq.seq t_PtrOwn'0)
    /\ is_null_logic'0 self.t_List__first'0 /\ is_null_logic'0 self.t_List__last'0
    \/ Seq.length (inner_logic'1 self.t_List__seq'0) > 0
    /\ self.t_List__first'0 = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) 0)
    /\ self.t_List__last'0
    = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (Seq.length (inner_logic'1 self.t_List__seq'0) - 1))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (inner_logic'1 self.t_List__seq'0) - 1
     -> (val'0 (Seq.get (inner_logic'1 self.t_List__seq'0) i)).t_Cell__next'0
    = ptr'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (i + 1)))
    /\ is_null_logic'0 (val'0 (Seq.get (inner_logic'1 self.t_List__seq'0) (Seq.length (inner_logic'1 self.t_List__seq'0)
    - 1))).t_Cell__next'0
  
  predicate inv'14 (_1 : t_List'0)
  
  axiom inv_axiom'13 [@rewrite] : forall x : t_List'0 [inv'14 x] . inv'14 x
  = (invariant'10 x
  /\ match x with
    | {t_List__first'0 = first ; t_List__last'0 = last ; t_List__seq'0 = seq} -> inv'0 seq
    end)
  
  predicate invariant'3 (self : MutBorrow.t t_List'0) =
    [%#sinvariant28] inv'14 self.current /\ inv'14 self.final
  
  predicate inv'3 (_1 : MutBorrow.t t_List'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t t_List'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate resolve'3 (self : MutBorrow.t t_List'0) =
    [%#sresolve24] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_List'0) =
    resolve'3 _1
  
  type t_Ghost'2  =
    { t_Ghost__0'2: () }
  
  predicate inv'10 (_1 : ())
  
  axiom inv_axiom'9 [@rewrite] : forall x : () [inv'10 x] . inv'10 x = true
  
  function inner_logic'2 (self : t_Ghost'2) : ()
  
  predicate invariant'7 (self : t_Ghost'2) =
    [%#sghost26] inv'10 (inner_logic'2 self)
  
  predicate inv'11 (_1 : t_Ghost'2)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_Ghost'2 [inv'11 x] . inv'11 x
  = (invariant'7 x
  /\ match x with
    | {t_Ghost__0'2 = a_0} -> true
    end)
  
  let rec new'1 (x:()) (return'  (ret:t_Ghost'2))= {[@expl:new 'x' type invariant] [%#sghost17] inv'10 x}
    any
    [ return' (result:t_Ghost'2)-> {[%#sghost18] inv'11 result}
      {[%#sghost19] inner_logic'2 result = x}
      (! return' {result}) ]
  
  
  function seq_map'0 [#"linked_list.rs" 55 0 55 66] (s : Seq.seq t_PtrOwn'0) (f : Map.map t_PtrOwn'0 t_T'0) : Seq.seq t_T'0
  
   =
    [%#slinked_list25] Seq.create (Seq.length s) (fun (i : int) -> Map.get f (Seq.get s i))
  
  function view'0 [#"linked_list.rs" 46 4 46 33] (self : t_List'0) : Seq.seq t_T'0 =
    [%#slinked_list20] seq_map'0 (inner_logic'1 self.t_List__seq'0) (fun (ptr_own : t_PtrOwn'0) -> (val'0 ptr_own).t_Cell__v'0)
  
  function push_front'1 [@inline:trivial] (self : Seq.seq t_T'0) (x : t_T'0) : Seq.seq t_T'0 =
    [%#sseq21] Seq.cons x self
  
  meta "compute_max_steps" 1000000
  
  let rec push_front'0[#"linked_list.rs" 86 4 86 38] (self:MutBorrow.t t_List'0) (x:t_T'0) (return'  (ret:()))= {[@expl:push_front 'self' type invariant] [%#slinked_list0] inv'3 self}
    {[@expl:push_front 'x' type invariant] [%#slinked_list1] inv'4 x}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0 [ s0 =  [ &_7 <- { t_Cell__v'0 = x; t_Cell__next'0 = (self.current).t_List__first'0 } ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'0 {_7} (fun (_ret':(Opaque.ptr, t_Ghost'0)) ->  [ &_6 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &cell_ptr <- let (r'0, _) = _6 in r'0 ] s1
      | s1 =  [ &cell_own <- let (_, r'1) = _6 in r'1 ] s2
      | s2 = bb4 ]
    
    | bb4 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_List__first'0 = cell_ptr } } ] s1
      | s1 = is_null'0 {(self.current).t_List__last'0} (fun (_ret':bool) ->  [ &_12 <- _ret' ] s2)
      | s2 = bb5 ]
    
    | bb5 = any [ br0 -> {_12 = false} (! bb7) | br1 -> {_12} (! bb6) ] 
    | bb6 = s0
      [ s0 =  [ &self <- { self with current = { self.current with t_List__last'0 = cell_ptr } } ] s1 | s1 = bb8 ]
    
    | bb7 = bb8
    | bb8 = s0
      [ s0 = {inv'0 (self.current).t_List__seq'0}
        MutBorrow.borrow_final
          <t_Ghost'1>
          {(self.current).t_List__seq'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
          (fun (_ret':MutBorrow.t t_Ghost'1) ->
             [ &_19 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_List__seq'0 = _ret'.final } } ] 
            s1)
      | s1 = deref_mut'0 {_19} (fun (_ret':MutBorrow.t (Seq.seq t_PtrOwn'0)) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb9 ]
    
    | bb9 = s0
      [ s0 = {inv'1 _18.current}
        MutBorrow.borrow_final <Seq.seq t_PtrOwn'0> {_18.current} {MutBorrow.get_id _18}
          (fun (_ret':MutBorrow.t (Seq.seq t_PtrOwn'0)) ->
             [ &_17 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_18 <- { _18 with current = _ret'.final } ] 
            s1)
      | s1 = into_inner'0 {cell_own} (fun (_ret':t_PtrOwn'0) ->  [ &_20 <- _ret' ] s2)
      | s2 = bb10 ]
    
    | bb10 = s0 [ s0 = push_front_ghost'0 {_17} {_20} (fun (_ret':()) ->  [ &_16 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'2 _18} s1
      | s1 = -{resolve'0 _18}- s2
      | s2 = {[@expl:type invariant] inv'3 self} s3
      | s3 = -{resolve'1 self}- s4
      | s4 = new'1 {_16} (fun (_ret':t_Ghost'2) ->  [ &_15 <- _ret' ] s5)
      | s5 = bb12 ]
    
    | bb12 = bb13
    | bb13 = bb14
    | bb14 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & self : MutBorrow.t t_List'0 = self
    | & x : t_T'0 = x
    | & cell_ptr : Opaque.ptr = Any.any_l ()
    | & cell_own : t_Ghost'0 = Any.any_l ()
    | & _6 : (Opaque.ptr, t_Ghost'0) = Any.any_l ()
    | & _7 : t_Cell'0 = Any.any_l ()
    | & _12 : bool = Any.any_l ()
    | & _15 : t_Ghost'2 = Any.any_l ()
    | & _16 : () = Any.any_l ()
    | & _17 : MutBorrow.t (Seq.seq t_PtrOwn'0) = Any.any_l ()
    | & _18 : MutBorrow.t (Seq.seq t_PtrOwn'0) = Any.any_l ()
    | & _19 : MutBorrow.t t_Ghost'1 = Any.any_l ()
    | & _20 : t_PtrOwn'0 = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:push_front ensures] [%#slinked_list2] view'0 self.final
      = push_front'1 (view'0 self.current) x}
      (! return' {result}) ]

end
