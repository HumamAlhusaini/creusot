module M_default__qyi3915135727482750158__default [#"default.rs" 4 9 4 16] (* <Unit as std::default::Default> *)
  let%span sdefault = "default.rs" 4 9 4 16
  
  use creusot.prelude.Any
  
  predicate is_default [#"default.rs" 4 9 4 16] (self : ()) =
    [%#sdefault] true
  
  meta "compute_max_steps" 1000000
  
  let rec default[#"default.rs" 4 9 4 16] (return'  (x:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- () ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0 : () = Any.any_l () ] 
    [ return''0 (result:())-> {[@expl:default ensures] [%#sdefault] is_default result} (! return' {result}) ]

end
module M_default__qyi13740418467561183253__default [#"default.rs" 7 9 7 16] (* <Tuple as std::default::Default> *)
  let%span sdefault = "default.rs" 7 9 7 16
  let%span sdefault'0 = "../../../../creusot-contracts/src/std/default.rs" 31 26 31 45
  let%span snum = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  let%span snum'0 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.int.Int64
  use creusot.prelude.Any
  
  predicate is_default (self : Int32.t) =
    [%#snum] self = (0 : Int32.t)
  
  let rec default (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#sdefault'0] is_default result} (! return' {result}) ]
  
  
  predicate is_default'0 (self : Int64.t) =
    [%#snum'0] self = (0 : Int64.t)
  
  let rec default'0 (return'  (x:Int64.t))= any
    [ return''0 (result:Int64.t)-> {[%#sdefault'0] is_default'0 result} (! return' {result}) ]
  
  
  type t_Tuple  =
    { t_Tuple__0: Int32.t; t_Tuple__1: Int64.t }
  
  predicate is_default'1 [#"default.rs" 7 9 7 16] (self : t_Tuple) =
    [%#sdefault] true /\ is_default self.t_Tuple__0 /\ is_default'0 self.t_Tuple__1
  
  meta "compute_max_steps" 1000000
  
  let rec default'1[#"default.rs" 7 9 7 16] (return'  (x:t_Tuple))= (! bb0
    [ bb0 = s0 [ s0 = default (fun (_ret:Int32.t) ->  [ &_2 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default'0 (fun (_ret:Int64.t) ->  [ &_3 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- { t_Tuple__0 = _2; t_Tuple__1 = _3 } ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0 : t_Tuple = Any.any_l () | & _2 : Int32.t = Any.any_l () | & _3 : Int64.t = Any.any_l () ] 
    [ return''0 (result:t_Tuple)-> {[@expl:default ensures] [%#sdefault] is_default'1 result} (! return' {result}) ]

end
module M_default__qyi8078909456326062290__default [#"default.rs" 10 9 10 16] (* <Named<T> as std::default::Default> *)
  let%span sdefault = "default.rs" 10 9 10 16
  let%span sdefault'0 = "../../../../creusot-contracts/src/std/default.rs" 31 26 31 45
  let%span snum = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  predicate is_default (self : Int32.t) =
    [%#snum] self = (0 : Int32.t)
  
  let rec default (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#sdefault'0] is_default result} (! return' {result}) ]
  
  
  type t_T
  
  predicate precondition (self : ()) (args : ())
  
  axiom precondition_fndef : forall args : () [precondition () args] . (let () = args in true)  -> precondition () args
  
  predicate is_default'0 (self : t_T)
  
  predicate inv (_0 : t_T)
  
  predicate postcondition_once (self : ()) (args : ()) (result : t_T)
  
  axiom postcondition_fndef : forall args : (), res : t_T [postcondition_once () args res] . postcondition_once () args res
   -> (let () = args in is_default'0 res /\ inv res)
  
  let rec default'0 (return'  (x:t_T))= {[@expl:default requires] precondition () ()}
    any [ return''0 (result:t_T)-> {postcondition_once () () result} (! return' {result}) ] 
  
  type t_Named  =
    { t_Named__x: Int32.t; t_Named__y: t_T }
  
  predicate inv'0 (_0 : t_Named)
  
  axiom inv_axiom [@rewrite] : forall x : t_Named [inv'0 x] . inv'0 x
  = match x with
    | {t_Named__x = x'0 ; t_Named__y = y} -> inv y
    end
  
  predicate is_default'1 [#"default.rs" 10 9 10 16] (self : t_Named) =
    [%#sdefault] true /\ is_default self.t_Named__x /\ is_default'0 self.t_Named__y
  
  meta "compute_max_steps" 1000000
  
  let rec default'1[#"default.rs" 10 9 10 16] (return'  (x:t_Named))= (! bb0
    [ bb0 = s0 [ s0 = default (fun (_ret:Int32.t) ->  [ &_2 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default'0 (fun (_ret:t_T) ->  [ &_3 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- { t_Named__x = _2; t_Named__y = _3 } ] s1 | s1 = bb3 ] 
    | bb3 = return''0 {_0} ]
    ) [ & _0 : t_Named = Any.any_l () | & _2 : Int32.t = Any.any_l () | & _3 : t_T = Any.any_l () ] 
    [ return''0 (result:t_Named)-> {[@expl:default result type invariant] [%#sdefault] inv'0 result}
      {[@expl:default ensures] [%#sdefault] is_default'1 result}
      (! return' {result}) ]

end
module M_default__qyi4734115080308954550__default [#"default.rs" 16 9 16 16] (* <EUnit as std::default::Default> *)
  let%span sdefault = "default.rs" 16 9 16 16
  
  use creusot.prelude.Any
  
  type t_EUnit  =
    | C_X
    | C_Y
  
  predicate is_default [#"default.rs" 16 9 16 16] (self : t_EUnit) =
    [%#sdefault] match self with
      | C_Y -> true
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec default[#"default.rs" 16 9 16 16] (return'  (x:t_EUnit))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- C_Y ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0 : t_EUnit = Any.any_l () ] 
    [ return''0 (result:t_EUnit)-> {[@expl:default ensures] [%#sdefault] is_default result} (! return' {result}) ]

end
module M_default__qyi14004758275928035824__default [#"default.rs" 23 9 23 16] (* <ETuple as std::default::Default> *)
  let%span sdefault = "default.rs" 23 9 23 16
  let%span sdefault'0 = "../../../../creusot-contracts/src/std/default.rs" 31 26 31 45
  let%span snum = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  predicate is_default (self : Int32.t) =
    [%#snum] self = (0 : Int32.t)
  
  let rec default (return'  (x:Int32.t))= any
    [ return''0 (result:Int32.t)-> {[%#sdefault'0] is_default result} (! return' {result}) ]
  
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_ETuple  =
    | C_A Int32.t Int32.t
    | C_B t_Vec
  
  predicate is_default'0 [#"default.rs" 23 9 23 16] (self : t_ETuple) =
    [%#sdefault] match self with
      | C_A x0 x1 -> true /\ is_default x0 /\ is_default x1
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec default'0[#"default.rs" 23 9 23 16] (return'  (x:t_ETuple))= (! bb0
    [ bb0 = s0 [ s0 = default (fun (_ret:Int32.t) ->  [ &_2 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default (fun (_ret:Int32.t) ->  [ &_3 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- C_A _2 _3 ] s1 | s1 = return''0 {_0} ]  ]
    ) [ & _0 : t_ETuple = Any.any_l () | & _2 : Int32.t = Any.any_l () | & _3 : Int32.t = Any.any_l () ] 
    [ return''0 (result:t_ETuple)-> {[@expl:default ensures] [%#sdefault] is_default'0 result} (! return' {result}) ]

end
module M_default__qyi4220271428403486757__default [#"default.rs" 32 9 32 16] (* <ENamed<T, U> as std::default::Default> *)
  let%span sdefault = "default.rs" 32 9 32 16
  
  use creusot.prelude.Any
  
  type t_T
  
  predicate precondition (self : ()) (args : ())
  
  axiom precondition_fndef : forall args : () [precondition () args] . (let () = args in true)  -> precondition () args
  
  predicate is_default (self : t_T)
  
  predicate inv (_0 : t_T)
  
  predicate postcondition_once (self : ()) (args : ()) (result : t_T)
  
  axiom postcondition_fndef : forall args : (), res : t_T [postcondition_once () args res] . postcondition_once () args res
   -> (let () = args in is_default res /\ inv res)
  
  let rec default (return'  (x:t_T))= {[@expl:default requires] precondition () ()}
    any [ return''0 (result:t_T)-> {postcondition_once () () result} (! return' {result}) ] 
  
  type t_U
  
  predicate precondition'0 (self : ()) (args : ())
  
  axiom precondition_fndef'0 : forall args : () [precondition'0 () args] . (let () = args in true)
   -> precondition'0 () args
  
  predicate is_default'0 (self : t_U)
  
  predicate inv'0 (_0 : t_U)
  
  predicate postcondition_once'0 (self : ()) (args : ()) (result : t_U)
  
  axiom postcondition_fndef'0 : forall args : (), res : t_U [postcondition_once'0 () args res] . postcondition_once'0 () args res
   -> (let () = args in is_default'0 res /\ inv'0 res)
  
  let rec default'0 (return'  (x:t_U))= {[@expl:default requires] precondition'0 () ()}
    any [ return''0 (result:t_U)-> {postcondition_once'0 () () result} (! return' {result}) ] 
  
  type t_ENamed  =
    | C_A t_T t_U
    | C_B
  
  predicate inv'1 (_0 : t_ENamed)
  
  axiom inv_axiom [@rewrite] : forall x : t_ENamed [inv'1 x] . inv'1 x
  = match x with
    | C_A x'0 y -> inv x'0 /\ inv'0 y
    | C_B -> true
    end
  
  predicate is_default'1 [#"default.rs" 32 9 32 16] (self : t_ENamed) =
    [%#sdefault] match self with
      | C_A x y -> true /\ is_default x /\ is_default'0 y
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec default'1[#"default.rs" 32 9 32 16] (return'  (x:t_ENamed))= (! bb0
    [ bb0 = s0 [ s0 = default (fun (_ret:t_T) ->  [ &_2 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default'0 (fun (_ret:t_U) ->  [ &_3 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- C_A _2 _3 ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return''0 {_0} ]
    ) [ & _0 : t_ENamed = Any.any_l () | & _2 : t_T = Any.any_l () | & _3 : t_U = Any.any_l () ] 
    [ return''0 (result:t_ENamed)-> {[@expl:default result type invariant] [%#sdefault] inv'1 result}
      {[@expl:default ensures] [%#sdefault] is_default'1 result}
      (! return' {result}) ]

end
module M_default__qyi3915135727482750158__default__refines [#"default.rs" 4 9 4 16] (* <Unit as std::default::Default> *)
  let%span sdefault = "default.rs" 4 9 4 16
  
  predicate is_default [#"default.rs" 4 9 4 16] (self : ()) =
    [%#sdefault] true
  
  goal refines : [%#sdefault] forall result : () . is_default result  -> is_default result
end
module M_default__qyi13740418467561183253__default__refines [#"default.rs" 7 9 7 16] (* <Tuple as std::default::Default> *)
  let%span sdefault = "default.rs" 7 9 7 16
  let%span snum = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  let%span snum'0 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.int.Int64
  
  type t_Tuple  =
    { t_Tuple__0: Int32.t; t_Tuple__1: Int64.t }
  
  predicate is_default (self : Int32.t) =
    [%#snum] self = (0 : Int32.t)
  
  predicate is_default'0 (self : Int64.t) =
    [%#snum'0] self = (0 : Int64.t)
  
  predicate is_default'1 [#"default.rs" 7 9 7 16] (self : t_Tuple) =
    [%#sdefault] true /\ is_default self.t_Tuple__0 /\ is_default'0 self.t_Tuple__1
  
  goal refines : [%#sdefault] forall result : t_Tuple . is_default'1 result  -> is_default'1 result
end
module M_default__qyi8078909456326062290__default__refines [#"default.rs" 10 9 10 16] (* <Named<T> as std::default::Default> *)
  let%span sdefault = "default.rs" 10 9 10 16
  let%span snum = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  
  type t_T
  
  type t_Named  =
    { t_Named__x: Int32.t; t_Named__y: t_T }
  
  predicate is_default (self : Int32.t) =
    [%#snum] self = (0 : Int32.t)
  
  predicate is_default'0 (self : t_T)
  
  predicate is_default'1 [#"default.rs" 10 9 10 16] (self : t_Named) =
    [%#sdefault] true /\ is_default self.t_Named__x /\ is_default'0 self.t_Named__y
  
  predicate inv (_0 : t_T)
  
  predicate inv'0 (_0 : t_Named)
  
  axiom inv_axiom [@rewrite] : forall x : t_Named [inv'0 x] . inv'0 x
  = match x with
    | {t_Named__x = x'0 ; t_Named__y = y} -> inv y
    end
  
  goal refines : [%#sdefault] forall result : t_Named . is_default'1 result /\ inv'0 result
   -> is_default'1 result /\ inv'0 result
end
module M_default__qyi4734115080308954550__default__refines [#"default.rs" 16 9 16 16] (* <EUnit as std::default::Default> *)
  let%span sdefault = "default.rs" 16 9 16 16
  
  type t_EUnit  =
    | C_X
    | C_Y
  
  predicate is_default [#"default.rs" 16 9 16 16] (self : t_EUnit) =
    [%#sdefault] match self with
      | C_Y -> true
      | _ -> false
      end
  
  goal refines : [%#sdefault] forall result : t_EUnit . is_default result  -> is_default result
end
module M_default__qyi14004758275928035824__default__refines [#"default.rs" 23 9 23 16] (* <ETuple as std::default::Default> *)
  let%span sdefault = "default.rs" 23 9 23 16
  let%span snum = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  
  type t_NonNull  =
    { t_NonNull__pointer: Opaque.ptr }
  
  type t_Unique  =
    { t_Unique__pointer: t_NonNull; t_Unique__qy95zmarker: () }
  
  type t_UsizeNoHighBit  =
    { t_UsizeNoHighBit__0: UInt64.t }
  
  type t_RawVecInner  =
    { t_RawVecInner__ptr: t_Unique; t_RawVecInner__cap: t_UsizeNoHighBit; t_RawVecInner__alloc: () }
  
  type t_RawVec  =
    { t_RawVec__inner: t_RawVecInner; t_RawVec__qy95zmarker: () }
  
  type t_Vec  =
    { t_Vec__buf: t_RawVec; t_Vec__len: UInt64.t }
  
  type t_ETuple  =
    | C_A Int32.t Int32.t
    | C_B t_Vec
  
  predicate is_default (self : Int32.t) =
    [%#snum] self = (0 : Int32.t)
  
  predicate is_default'0 [#"default.rs" 23 9 23 16] (self : t_ETuple) =
    [%#sdefault] match self with
      | C_A x0 x1 -> true /\ is_default x0 /\ is_default x1
      | _ -> false
      end
  
  goal refines : [%#sdefault] forall result : t_ETuple . is_default'0 result  -> is_default'0 result
end
module M_default__qyi4220271428403486757__default__refines [#"default.rs" 32 9 32 16] (* <ENamed<T, U> as std::default::Default> *)
  let%span sdefault = "default.rs" 32 9 32 16
  
  type t_T
  
  type t_U
  
  type t_ENamed  =
    | C_A t_T t_U
    | C_B
  
  predicate is_default (self : t_T)
  
  predicate is_default'0 (self : t_U)
  
  predicate is_default'1 [#"default.rs" 32 9 32 16] (self : t_ENamed) =
    [%#sdefault] match self with
      | C_A x y -> true /\ is_default x /\ is_default'0 y
      | _ -> false
      end
  
  predicate inv (_0 : t_T)
  
  predicate inv'0 (_0 : t_U)
  
  predicate inv'1 (_0 : t_ENamed)
  
  axiom inv_axiom [@rewrite] : forall x : t_ENamed [inv'1 x] . inv'1 x
  = match x with
    | C_A x'0 y -> inv x'0 /\ inv'0 y
    | C_B -> true
    end
  
  goal refines : [%#sdefault] forall result : t_ENamed . is_default'1 result /\ inv'1 result
   -> is_default'1 result /\ inv'1 result
end
