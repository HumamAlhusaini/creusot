module M_default__qyi3915135727482750158__default [#"default.rs" 4 9 4 16] (* <Unit as std::default::Default> *)
  let%span sdefault0 = "default.rs" 4 9 4 16
  
  use creusot.prelude.Any
  
  predicate is_default'0 [#"default.rs" 4 9 4 16] (self : ()) =
    [%#sdefault0] true
  
  meta "compute_max_steps" 1000000
  
  let rec default'0[#"default.rs" 4 9 4 16] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = Any.any_l () ] 
    [ return' (result:())-> {[@expl:default ensures] [%#sdefault0] is_default'0 result} (! return' {result}) ]

end
module M_default__qyi13740418467561183253__default [#"default.rs" 7 9 7 16] (* <Tuple as std::default::Default> *)
  let%span sdefault0 = "default.rs" 7 9 7 16
  let%span sdefault1 = "../../../../creusot-contracts/src/std/default.rs" 31 26 31 45
  let%span snum2 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  let%span snum3 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.int.Int64
  use creusot.prelude.Any
  
  predicate is_default'1 (self : Int32.t) =
    [%#snum2] self = (0 : Int32.t)
  
  let rec default'1 (return'  (ret:Int32.t))= any
    [ return' (result:Int32.t)-> {[%#sdefault1] is_default'1 result} (! return' {result}) ]
  
  
  predicate is_default'2 (self : Int64.t) =
    [%#snum3] self = (0 : Int64.t)
  
  let rec default'2 (return'  (ret:Int64.t))= any
    [ return' (result:Int64.t)-> {[%#sdefault1] is_default'2 result} (! return' {result}) ]
  
  
  type t_Tuple'0  =
    { t_Tuple__0'0: Int32.t; t_Tuple__1'0: Int64.t }
  
  predicate is_default'0 [#"default.rs" 7 9 7 16] (self : t_Tuple'0) =
    [%#sdefault0] true /\ is_default'1 self.t_Tuple__0'0 /\ is_default'2 self.t_Tuple__1'0
  
  meta "compute_max_steps" 1000000
  
  let rec default'0[#"default.rs" 7 9 7 16] (return'  (ret:t_Tuple'0))= (! bb0
    [ bb0 = s0 [ s0 = default'1 (fun (_ret':Int32.t) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default'2 (fun (_ret':Int64.t) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- { t_Tuple__0'0 = _2; t_Tuple__1'0 = _3 } ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : t_Tuple'0 = Any.any_l () | & _2 : Int32.t = Any.any_l () | & _3 : Int64.t = Any.any_l () ] 
    [ return' (result:t_Tuple'0)-> {[@expl:default ensures] [%#sdefault0] is_default'0 result} (! return' {result}) ]

end
module M_default__qyi8078909456326062290__default [#"default.rs" 10 9 10 16] (* <Named<T> as std::default::Default> *)
  let%span sdefault0 = "default.rs" 10 9 10 16
  let%span sdefault1 = "../../../../creusot-contracts/src/std/default.rs" 31 26 31 45
  let%span snum2 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  predicate is_default'1 (self : Int32.t) =
    [%#snum2] self = (0 : Int32.t)
  
  let rec default'1 (return'  (ret:Int32.t))= any
    [ return' (result:Int32.t)-> {[%#sdefault1] is_default'1 result} (! return' {result}) ]
  
  
  type t_T'0
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate is_default'2 (self : t_T'0)
  
  let rec default'2 (return'  (ret:t_T'0))= any
    [ return' (result:t_T'0)-> {inv'1 result} {[%#sdefault1] is_default'2 result} (! return' {result}) ]
  
  
  type t_Named'0  =
    { t_Named__x'0: Int32.t; t_Named__y'0: t_T'0 }
  
  predicate inv'0 (_1 : t_Named'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Named'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_Named__x'0 = x ; t_Named__y'0 = y} -> inv'1 y
    end
  
  predicate is_default'0 [#"default.rs" 10 9 10 16] (self : t_Named'0) =
    [%#sdefault0] true /\ is_default'1 self.t_Named__x'0 /\ is_default'2 self.t_Named__y'0
  
  meta "compute_max_steps" 1000000
  
  let rec default'0[#"default.rs" 10 9 10 16] (return'  (ret:t_Named'0))= (! bb0
    [ bb0 = s0 [ s0 = default'1 (fun (_ret':Int32.t) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default'2 (fun (_ret':t_T'0) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- { t_Named__x'0 = _2; t_Named__y'0 = _3 } ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : t_Named'0 = Any.any_l () | & _2 : Int32.t = Any.any_l () | & _3 : t_T'0 = Any.any_l () ] 
    [ return' (result:t_Named'0)-> {[@expl:default result type invariant] [%#sdefault0] inv'0 result}
      {[@expl:default ensures] [%#sdefault0] is_default'0 result}
      (! return' {result}) ]

end
module M_default__qyi4734115080308954550__default [#"default.rs" 16 9 16 16] (* <EUnit as std::default::Default> *)
  let%span sdefault0 = "default.rs" 16 9 16 16
  
  use creusot.prelude.Any
  
  type t_EUnit'0  =
    | C_X'0
    | C_Y'0
  
  predicate is_default'0 [#"default.rs" 16 9 16 16] (self : t_EUnit'0) =
    [%#sdefault0] match self with
      | C_Y'0 -> true
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec default'0[#"default.rs" 16 9 16 16] (return'  (ret:t_EUnit'0))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- C_Y'0 ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : t_EUnit'0 = Any.any_l () ] 
    [ return' (result:t_EUnit'0)-> {[@expl:default ensures] [%#sdefault0] is_default'0 result} (! return' {result}) ]

end
module M_default__qyi14004758275928035824__default [#"default.rs" 23 9 23 16] (* <ETuple as std::default::Default> *)
  let%span sdefault0 = "default.rs" 23 9 23 16
  let%span sdefault1 = "../../../../creusot-contracts/src/std/default.rs" 31 26 31 45
  let%span snum2 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  predicate is_default'1 (self : Int32.t) =
    [%#snum2] self = (0 : Int32.t)
  
  let rec default'1 (return'  (ret:Int32.t))= any
    [ return' (result:Int32.t)-> {[%#sdefault1] is_default'1 result} (! return' {result}) ]
  
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_ETuple'0  =
    | C_A'0 Int32.t Int32.t
    | C_B'0 t_Vec'0
  
  predicate is_default'0 [#"default.rs" 23 9 23 16] (self : t_ETuple'0) =
    [%#sdefault0] match self with
      | C_A'0 x0 x1 -> true /\ is_default'1 x0 /\ is_default'1 x1
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec default'0[#"default.rs" 23 9 23 16] (return'  (ret:t_ETuple'0))= (! bb0
    [ bb0 = s0 [ s0 = default'1 (fun (_ret':Int32.t) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default'1 (fun (_ret':Int32.t) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- C_A'0 _2 _3 ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : t_ETuple'0 = Any.any_l () | & _2 : Int32.t = Any.any_l () | & _3 : Int32.t = Any.any_l () ] 
    [ return' (result:t_ETuple'0)-> {[@expl:default ensures] [%#sdefault0] is_default'0 result} (! return' {result}) ]

end
module M_default__qyi4220271428403486757__default [#"default.rs" 32 9 32 16] (* <ENamed<T, U> as std::default::Default> *)
  let%span sdefault0 = "default.rs" 32 9 32 16
  let%span sdefault1 = "../../../../creusot-contracts/src/std/default.rs" 31 26 31 45
  
  use creusot.prelude.Any
  
  type t_T'0
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate is_default'1 (self : t_T'0)
  
  let rec default'1 (return'  (ret:t_T'0))= any
    [ return' (result:t_T'0)-> {inv'1 result} {[%#sdefault1] is_default'1 result} (! return' {result}) ]
  
  
  type t_U'0
  
  predicate inv'2 (_1 : t_U'0)
  
  predicate is_default'2 (self : t_U'0)
  
  let rec default'2 (return'  (ret:t_U'0))= any
    [ return' (result:t_U'0)-> {inv'2 result} {[%#sdefault1] is_default'2 result} (! return' {result}) ]
  
  
  type t_ENamed'0  =
    | C_A'0 t_T'0 t_U'0
    | C_B'0
  
  predicate inv'0 (_1 : t_ENamed'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_ENamed'0 [inv'0 x] . inv'0 x
  = match x with
    | C_A'0 x y -> inv'1 x /\ inv'2 y
    | C_B'0 -> true
    end
  
  predicate is_default'0 [#"default.rs" 32 9 32 16] (self : t_ENamed'0) =
    [%#sdefault0] match self with
      | C_A'0 x y -> true /\ is_default'1 x /\ is_default'2 y
      | _ -> false
      end
  
  meta "compute_max_steps" 1000000
  
  let rec default'0[#"default.rs" 32 9 32 16] (return'  (ret:t_ENamed'0))= (! bb0
    [ bb0 = s0 [ s0 = default'1 (fun (_ret':t_T'0) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = default'2 (fun (_ret':t_U'0) ->  [ &_3 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- C_A'0 _2 _3 ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : t_ENamed'0 = Any.any_l () | & _2 : t_T'0 = Any.any_l () | & _3 : t_U'0 = Any.any_l () ] 
    [ return' (result:t_ENamed'0)-> {[@expl:default result type invariant] [%#sdefault0] inv'0 result}
      {[@expl:default ensures] [%#sdefault0] is_default'0 result}
      (! return' {result}) ]

end
module M_default__qyi3915135727482750158__default__refines [#"default.rs" 4 9 4 16] (* <Unit as std::default::Default> *)
  let%span sdefault0 = "default.rs" 4 9 4 16
  
  predicate is_default'0 [#"default.rs" 4 9 4 16] (self : ()) =
    [%#sdefault0] true
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  goal refines : [%#sdefault0] forall result : () . is_default'0 result  -> is_default'0 result /\ inv'0 result
end
module M_default__qyi13740418467561183253__default__refines [#"default.rs" 7 9 7 16] (* <Tuple as std::default::Default> *)
  let%span sdefault0 = "default.rs" 7 9 7 16
  let%span snum1 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  let%span snum2 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.int.Int64
  
  type t_Tuple'0  =
    { t_Tuple__0'0: Int32.t; t_Tuple__1'0: Int64.t }
  
  predicate is_default'1 (self : Int32.t) =
    [%#snum1] self = (0 : Int32.t)
  
  predicate is_default'2 (self : Int64.t) =
    [%#snum2] self = (0 : Int64.t)
  
  predicate is_default'0 [#"default.rs" 7 9 7 16] (self : t_Tuple'0) =
    [%#sdefault0] true /\ is_default'1 self.t_Tuple__0'0 /\ is_default'2 self.t_Tuple__1'0
  
  predicate inv'0 (_1 : t_Tuple'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Tuple'0 [inv'0 x] . inv'0 x = true
  
  goal refines : [%#sdefault0] forall result : t_Tuple'0 . is_default'0 result  -> is_default'0 result /\ inv'0 result
end
module M_default__qyi8078909456326062290__default__refines [#"default.rs" 10 9 10 16] (* <Named<T> as std::default::Default> *)
  let%span sdefault0 = "default.rs" 10 9 10 16
  let%span snum1 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  
  type t_T'0
  
  type t_Named'0  =
    { t_Named__x'0: Int32.t; t_Named__y'0: t_T'0 }
  
  predicate is_default'1 (self : Int32.t) =
    [%#snum1] self = (0 : Int32.t)
  
  predicate is_default'2 (self : t_T'0)
  
  predicate is_default'0 [#"default.rs" 10 9 10 16] (self : t_Named'0) =
    [%#sdefault0] true /\ is_default'1 self.t_Named__x'0 /\ is_default'2 self.t_Named__y'0
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate inv'0 (_1 : t_Named'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Named'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_Named__x'0 = x ; t_Named__y'0 = y} -> inv'1 y
    end
  
  goal refines : [%#sdefault0] forall result : t_Named'0 . is_default'0 result /\ inv'0 result
   -> is_default'0 result /\ inv'0 result
end
module M_default__qyi4734115080308954550__default__refines [#"default.rs" 16 9 16 16] (* <EUnit as std::default::Default> *)
  let%span sdefault0 = "default.rs" 16 9 16 16
  
  type t_EUnit'0  =
    | C_X'0
    | C_Y'0
  
  predicate is_default'0 [#"default.rs" 16 9 16 16] (self : t_EUnit'0) =
    [%#sdefault0] match self with
      | C_Y'0 -> true
      | _ -> false
      end
  
  predicate inv'0 (_1 : t_EUnit'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_EUnit'0 [inv'0 x] . inv'0 x = true
  
  goal refines : [%#sdefault0] forall result : t_EUnit'0 . is_default'0 result  -> is_default'0 result /\ inv'0 result
end
module M_default__qyi14004758275928035824__default__refines [#"default.rs" 23 9 23 16] (* <ETuple as std::default::Default> *)
  let%span sdefault0 = "default.rs" 23 9 23 16
  let%span snum1 = "../../../../creusot-contracts/src/std/num.rs" 33 28 33 41
  
  use creusot.int.Int32
  use creusot.prelude.Opaque
  use creusot.int.UInt64
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_ETuple'0  =
    | C_A'0 Int32.t Int32.t
    | C_B'0 t_Vec'0
  
  predicate is_default'1 (self : Int32.t) =
    [%#snum1] self = (0 : Int32.t)
  
  predicate is_default'0 [#"default.rs" 23 9 23 16] (self : t_ETuple'0) =
    [%#sdefault0] match self with
      | C_A'0 x0 x1 -> true /\ is_default'1 x0 /\ is_default'1 x1
      | _ -> false
      end
  
  predicate inv'0 (_1 : t_ETuple'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_ETuple'0 [inv'0 x] . inv'0 x = true
  
  goal refines : [%#sdefault0] forall result : t_ETuple'0 . is_default'0 result  -> is_default'0 result /\ inv'0 result
end
module M_default__qyi4220271428403486757__default__refines [#"default.rs" 32 9 32 16] (* <ENamed<T, U> as std::default::Default> *)
  let%span sdefault0 = "default.rs" 32 9 32 16
  
  type t_T'0
  
  type t_U'0
  
  type t_ENamed'0  =
    | C_A'0 t_T'0 t_U'0
    | C_B'0
  
  predicate is_default'1 (self : t_T'0)
  
  predicate is_default'2 (self : t_U'0)
  
  predicate is_default'0 [#"default.rs" 32 9 32 16] (self : t_ENamed'0) =
    [%#sdefault0] match self with
      | C_A'0 x y -> true /\ is_default'1 x /\ is_default'2 y
      | _ -> false
      end
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate inv'2 (_1 : t_U'0)
  
  predicate inv'0 (_1 : t_ENamed'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_ENamed'0 [inv'0 x] . inv'0 x
  = match x with
    | C_A'0 x y -> inv'1 x /\ inv'2 y
    | C_B'0 -> true
    end
  
  goal refines : [%#sdefault0] forall result : t_ENamed'0 . is_default'0 result /\ inv'0 result
   -> is_default'0 result /\ inv'0 result
end
