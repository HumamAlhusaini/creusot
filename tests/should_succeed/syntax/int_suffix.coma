module M_int_suffix__foo [#"int_suffix.rs" 5 0 5 26]
  let%span sint_suffix = "int_suffix.rs" 6 11 6 15
  let%span sint_suffix'0 = "int_suffix.rs" 5 16 5 26
  let%span sint_suffix'1 = "int_suffix.rs" 4 10 4 25
  let%span sint = "../../../creusot-contracts/src/logic/int.rs" 59 4 59 42
  let%span sint'0 = "../../../creusot-contracts/src/logic/int.rs" 56 14 56 31
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 216 22 216 26
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 214 14 214 29
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost'3 = "../../../creusot-contracts/src/ghost.rs" 234 8 234 14
  let%span sghost'4 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  
  use creusot.int.Int128
  use creusot.prelude.Any
  
  type t_Ghost  =
    { t_Ghost__0: int }
  
  predicate inv (_0 : int)
  
  axiom inv_axiom [@rewrite] : forall x : int [inv x] . inv x = true
  
  function inner_logic (self : t_Ghost) : int =
    [%#sghost'3] self.t_Ghost__0
  
  predicate invariant' (self : t_Ghost) =
    [%#sghost'4] inv (inner_logic self)
  
  predicate inv'0 (_0 : t_Ghost)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost [inv'0 x] . inv'0 x
  = (invariant' x
  /\ match x with
    | {t_Ghost__0 = a_0} -> true
    end)
  
  let rec new (value:Int128.t) (return'  (x:t_Ghost))= any
    [ return''0 (result:t_Ghost)-> {[%#sint] inv'0 result}
      {[%#sint'0] inner_logic result = Int128.to_int value}
      (! return' {result}) ]
  
  
  let rec into_inner (self:t_Ghost) (return'  (x:int))= {[@expl:into_inner 'self' type invariant] [%#sghost] inv'0 self}
    any [ return''0 (result:int)-> {[%#sghost'0] result = inner_logic self} (! return' {result}) ] 
  
  let rec new'0 (x:int) (return'  (x'0:t_Ghost))= any
    [ return''0 (result:t_Ghost)-> {[%#sghost'1] inv'0 result}
      {[%#sghost'2] inner_logic result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec foo[#"int_suffix.rs" 5 0 5 26] (return'  (x:t_Ghost))= (! bb0
    [ bb0 = s0 [ s0 = new {[%#sint_suffix] (1 : Int128.t)} (fun (_ret:t_Ghost) ->  [ &_3 <- _ret ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = into_inner {_3} (fun (_ret:int) ->  [ &_2 <- _ret ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'0 {_2} (fun (_ret:t_Ghost) ->  [ &_0 <- _ret ] s1) | s1 = bb3 ] 
    | bb3 = return''0 {_0} ]
    ) [ & _0 : t_Ghost = Any.any_l () | & _2 : int = Any.any_l () | & _3 : t_Ghost = Any.any_l () ] 
    [ return''0 (result:t_Ghost)-> {[@expl:foo result type invariant] [%#sint_suffix'0] inv'0 result}
      {[@expl:foo ensures] [%#sint_suffix'1] inner_logic result = 1}
      (! return' {result}) ]

end
