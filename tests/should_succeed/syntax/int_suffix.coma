module M_int_suffix__foo [#"int_suffix.rs" 5 0 5 26]
  let%span sint_suffix0 = "int_suffix.rs" 6 11 6 15
  let%span sint_suffix1 = "int_suffix.rs" 5 16 5 26
  let%span sint_suffix2 = "int_suffix.rs" 4 10 4 25
  let%span sint3 = "../../../creusot-contracts/src/logic/int.rs" 59 4 59 42
  let%span sint4 = "../../../creusot-contracts/src/logic/int.rs" 56 14 56 31
  let%span sghost5 = "../../../creusot-contracts/src/ghost.rs" 216 22 216 26
  let%span sghost6 = "../../../creusot-contracts/src/ghost.rs" 214 14 214 29
  let%span sghost7 = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost8 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost9 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  
  use creusot.int.Int128
  use creusot.prelude.Any
  
  type t_Ghost'0  =
    { t_Ghost__0'0: int }
  
  predicate inv'1 (_1 : int)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int [inv'1 x] . inv'1 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : int
  
  predicate invariant'0 (self : t_Ghost'0) =
    [%#sghost9] inv'1 (inner_logic'0 self)
  
  predicate inv'0 (_1 : t_Ghost'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec new'0 (value:Int128.t) (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sint3] inv'0 result}
      {[%#sint4] inner_logic'0 result = Int128.to_int value}
      (! return' {result}) ]
  
  
  let rec into_inner'0 (self:t_Ghost'0) (return'  (ret:int))= {[@expl:into_inner 'self' type invariant] [%#sghost5] inv'0 self}
    any [ return' (result:int)-> {[%#sghost6] result = inner_logic'0 self} (! return' {result}) ] 
  
  let rec new'1 (x:int) (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sghost7] inv'0 result}
      {[%#sghost8] inner_logic'0 result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0[#"int_suffix.rs" 5 0 5 26] (return'  (ret:t_Ghost'0))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sint_suffix0] (1 : Int128.t)} (fun (_ret':t_Ghost'0) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ]
    
    | bb1 = s0 [ s0 = into_inner'0 {_3} (fun (_ret':int) ->  [ &_2 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'1 {_2} (fun (_ret':t_Ghost'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : t_Ghost'0 = Any.any_l () | & _2 : int = Any.any_l () | & _3 : t_Ghost'0 = Any.any_l () ] 
    [ return' (result:t_Ghost'0)-> {[@expl:foo result type invariant] [%#sint_suffix1] inv'0 result}
      {[@expl:foo ensures] [%#sint_suffix2] inner_logic'0 result = 1}
      (! return' {result}) ]

end
