module M_15_impl_trait__qyi17433463795637978863__a [#"15_impl_trait.rs" 10 4 10 23] (* <() as MyTrait> *)
  let%span s15_impl_trait0 = "15_impl_trait.rs" 11 8 11 12
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec a'0[#"15_impl_trait.rs" 10 4 10 23] (self:()) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#s15_impl_trait0] true ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : bool = Any.any_l () ]  [ return' (result:bool)-> (! return' {result}) ] 
end
module M_15_impl_trait__returns_iterator [#"15_impl_trait.rs" 15 0 15 41]
  let%span s15_impl_trait0 = "15_impl_trait.rs" 15 29 15 41
  
  use creusot.prelude.Any
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  meta "compute_max_steps" 1000000
  
  let rec returns_iterator'0[#"15_impl_trait.rs" 15 0 15 41] (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:returns_iterator result type invariant] [%#s15_impl_trait0] inv'0 result}
      (! return' {result}) ]

end
module M_15_impl_trait__main [#"15_impl_trait.rs" 20 0 20 13]
  let%span s15_impl_trait0 = "15_impl_trait.rs" 23 18 23 19
  let%span s15_impl_trait1 = "15_impl_trait.rs" 19 10 19 14
  let%span s15_impl_trait2 = "15_impl_trait.rs" 15 29 15 41
  let%span s15_impl_trait3 = "15_impl_trait.rs" 6 10 6 14
  let%span sinvariant4 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  type opaque0'0
  
  predicate inv'0 (_1 : opaque0'0)
  
  let rec returns_iterator'0 (return'  (ret:opaque0'0))= any
    [ return' (result:opaque0'0)-> {[%#s15_impl_trait2] inv'0 result} (! return' {result}) ]
  
  
  predicate invariant'0 (self : opaque0'0) =
    [%#sinvariant4] inv'0 self
  
  predicate inv'1 (_1 : opaque0'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : opaque0'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  let rec a'0 (self:opaque0'0) (return'  (ret:bool))= {[@expl:a 'self' type invariant] [%#s15_impl_trait3] inv'1 self}
    any [ return' (result:bool)-> (! return' {result}) ] 
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec main'0[#"15_impl_trait.rs" 20 0 20 13] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = returns_iterator'0 (fun (_ret':opaque0'0) ->  [ &_4 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = a'0 {_4} (fun (_ret':bool) ->  [ &x <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = bb3
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#s15_impl_trait0] x} s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = Any.any_l () | & x : bool = Any.any_l () | & _4 : opaque0'0 = Any.any_l () ] 
    [ return' (result:())-> {[@expl:main ensures] [%#s15_impl_trait1] true} (! return' {result}) ]

end
module M_15_impl_trait__qyi17433463795637978863__a__refines [#"15_impl_trait.rs" 10 4 10 23] (* <() as MyTrait> *)
  let%span s15_impl_trait0 = "15_impl_trait.rs" 10 4 10 23
  
  goal refines : [%#s15_impl_trait0] true
end
