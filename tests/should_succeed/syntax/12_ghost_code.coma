module M_12_ghost_code__ghost_arg [#"12_ghost_code.rs" 4 0 4 34]
  let%span s12_ghost_code0 = "12_ghost_code.rs" 5 28 5 44
  
  use creusot.prelude.Any
  
  use creusot.int.UInt32
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_arg'0[#"12_ghost_code.rs" 4 0 4 34] (g:UInt32.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_x <- [%#s12_ghost_code0] g ] s1 | s1 = bb1 ]  | bb1 = return' {_0} ]
    ) [ & _0 : () = Any.any_l () | & g : UInt32.t = g | & _x : UInt32.t = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_12_ghost_code__ghost_vec [#"12_ghost_code.rs" 8 0 8 18]
  let%span s12_ghost_code0 = "12_ghost_code.rs" 9 22 9 32
  let%span s12_ghost_code1 = "12_ghost_code.rs" 10 35 10 50
  let%span svec2 = "../../../creusot-contracts/src/std/vec.rs" 80 26 80 44
  let%span svec3 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use creusot.int.UInt32
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt32.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec3] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  let rec new'0 (_1:()) (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {inv'0 result} {[%#svec2] Seq.length (view'0 result) = 0} (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_vec'0[#"12_ghost_code.rs" 8 0 8 18] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#s12_ghost_code0] ()} (fun (_ret':t_Vec'0) ->  [ &x <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_s <- [%#s12_ghost_code1] x ] s1 | s1 = bb2 ] 
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = Any.any_l () | & x : t_Vec'0 = Any.any_l () | & _s : t_Vec'0 = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_12_ghost_code__ghost_copy [#"12_ghost_code.rs" 17 0 17 19]
  let%span s12_ghost_code0 = "12_ghost_code.rs" 18 12 18 13
  let%span s12_ghost_code1 = "12_ghost_code.rs" 19 17 19 57
  let%span s12_ghost_code2 = "12_ghost_code.rs" 20 9 20 38
  
  use creusot.int.Int32
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_copy'0[#"12_ghost_code.rs" 17 0 17 19] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &a <- [%#s12_ghost_code0] (0 : Int32.t) ] s1
      | s1 =  [ &_s <- [%#s12_ghost_code1] Seq.snoc (Seq.empty : Seq.seq Int32.t) (0 : Int32.t) ] s2
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s12_ghost_code2] Seq.snoc _s a ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &_s <- _4 ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : Int32.t = Any.any_l ()
    | & _s : Seq.seq Int32.t = Any.any_l ()
    | & _4 : Seq.seq Int32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_12_ghost_code__ghost_is_copy [#"12_ghost_code.rs" 23 0 23 22]
  let%span s12_ghost_code0 = "12_ghost_code.rs" 24 16 24 17
  let%span s12_ghost_code1 = "12_ghost_code.rs" 26 12 26 27
  let%span s12_ghost_code2 = "12_ghost_code.rs" 29 18 29 26
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.int.Int32
  
  use creusot.prelude.MutBorrow
  
  predicate resolve'1 (self : MutBorrow.t Int32.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t Int32.t) =
    resolve'1 _1
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_is_copy'0[#"12_ghost_code.rs" 23 0 23 22] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#s12_ghost_code0] (0 : Int32.t) ] s1
      | s1 = MutBorrow.borrow_mut <Int32.t> {x}
          (fun (_ret':MutBorrow.t Int32.t) ->  [ &r <- _ret' ]  [ &x <- _ret'.final ] s2)
      | s2 = -{resolve'0 r}- s3
      | s3 =  [ &g <- [%#s12_ghost_code1] r ] s4
      | s4 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &g1 <- g ] s1
      | s1 =  [ &g2 <- g ] s2
      | s2 = {[@expl:assertion] [%#s12_ghost_code2] g1 = g2} s3
      | s3 = return' {_0} ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & x : Int32.t = Any.any_l ()
    | & r : MutBorrow.t Int32.t = Any.any_l ()
    | & g : MutBorrow.t Int32.t = Any.any_l ()
    | & g1 : MutBorrow.t Int32.t = Any.any_l ()
    | & g2 : MutBorrow.t Int32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_12_ghost_code__ghost_check [#"12_ghost_code.rs" 35 0 35 20]
  let%span s12_ghost_code0 = "12_ghost_code.rs" 36 16 36 26
  let%span s12_ghost_code1 = "12_ghost_code.rs" 39 4 39 31
  let%span s12_ghost_code2 = "12_ghost_code.rs" 41 11 41 12
  let%span s12_ghost_code3 = "12_ghost_code.rs" 43 23 43 24
  let%span s12_ghost_code4 = "12_ghost_code.rs" 43 4 43 25
  let%span svec5 = "../../../creusot-contracts/src/std/vec.rs" 80 26 80 44
  let%span s12_ghost_code6 = "12_ghost_code.rs" 33 22 33 24
  let%span svec7 = "../../../creusot-contracts/src/std/vec.rs" 93 26 93 56
  let%span svec8 = "../../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span svec9 = "../../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span smodel10 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel11 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use creusot.int.Int32
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq Int32.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec9] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  let rec new'0 (_1:()) (return'  (ret:t_Vec'0))= any
    [ return' (result:t_Vec'0)-> {inv'0 result} {[%#svec5] Seq.length (view'0 result) = 0} (! return' {result}) ]
  
  
  function logi_drop'0 [#"12_ghost_code.rs" 33 0 33 21] (_1 : t_Vec'0) : () =
    [%#s12_ghost_code6] ()
  
  use creusot.prelude.MutBorrow
  
  predicate inv'1 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : Int32.t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Int32.t [inv'2 x] . inv'2 x = true
  
  use seq.Seq
  
  function view'1 (self : MutBorrow.t t_Vec'0) : Seq.seq Int32.t =
    [%#smodel10] view'0 self.current
  
  let rec push'0 (self:MutBorrow.t t_Vec'0) (value:Int32.t) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'1 self}
    {[@expl:push 'value' type invariant] inv'2 value}
    any [ return' (result:())-> {[%#svec7] view'0 self.final = Seq.snoc (view'1 self) value} (! return' {result}) ] 
  
  predicate inv'3 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = true
  
  function view'2 (self : t_Vec'0) : Seq.seq Int32.t =
    [%#smodel11] view'0 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'3 self}
    any [ return' (result:UInt64.t)-> {[%#svec8] UInt64.t'int result = Seq.length (view'2 self)} (! return' {result}) ] 
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_check'0[#"12_ghost_code.rs" 35 0 35 20] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#s12_ghost_code0] ()} (fun (_ret':t_Vec'0) ->  [ &x <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_2 <- [%#s12_ghost_code1] let _ = logi_drop'0 x in () ] s1 | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec'0> {x}
          (fun (_ret':MutBorrow.t t_Vec'0) ->  [ &_5 <- _ret' ]  [ &x <- _ret'.final ] s1)
      | s1 = push'0 {_5} {[%#s12_ghost_code2] (0 : Int32.t)} (fun (_ret':()) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 = len'0 {x} (fun (_ret':UInt64.t) ->  [ &_8 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_7 <- _8 = ([%#s12_ghost_code3] (1 : UInt64.t)) ] s1
      | s1 = any [ br0 -> {_7 = false} (! bb6) | br1 -> {_7} (! bb5) ]  ]
    
    | bb5 = bb7
    | bb7 = return' {_0}
    | bb6 = {[%#s12_ghost_code4] false} any ]
    )
    [ & _0 : () = Any.any_l ()
    | & x : t_Vec'0 = Any.any_l ()
    | & _2 : () = Any.any_l ()
    | & _4 : () = Any.any_l ()
    | & _5 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _7 : bool = Any.any_l ()
    | & _8 : UInt64.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_12_ghost_code__takes_struct [#"12_ghost_code.rs" 52 0 52 36]
  let%span s12_ghost_code0 = "12_ghost_code.rs" 53 10 53 27
  let%span s12_ghost_code1 = "12_ghost_code.rs" 51 11 51 20
  let%span ssnapshot2 = "../../../creusot-contracts/src/snapshot.rs" 51 20 51 39
  let%span smodel3 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  
  use creusot.int.UInt32
  
  type t_MyStruct'0  =
    { t_MyStruct__f'0: UInt32.t; t_MyStruct__g'0: UInt32.t }
  
  use creusot.prelude.Any
  
  use creusot.int.UInt32
  
  function view'1 (self : UInt32.t) : int =
    [%#smodel3] UInt32.t'int self
  
  function view'0 (self : UInt32.t) : int =
    [%#ssnapshot2] view'1 self
  
  meta "compute_max_steps" 1000000
  
  let rec takes_struct'0[#"12_ghost_code.rs" 52 0 52 36] (x:t_MyStruct'0) (return'  (ret:()))= {[@expl:takes_struct requires] [%#s12_ghost_code1] view'0 x.t_MyStruct__g'0
    = 0}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_3 <- [%#s12_ghost_code0] x.t_MyStruct__f'0 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &x <- { x with t_MyStruct__g'0 = _3 } ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = Any.any_l () | & x : t_MyStruct'0 = x | & _3 : UInt32.t = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
