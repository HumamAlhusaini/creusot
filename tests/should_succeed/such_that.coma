module M_such_that__foo [#"such_that.rs" 4 0 4 12]
  let%span ssuch_that0 = "such_that.rs" 5 12 5 54
  let%span ssuch_that1 = "such_that.rs" 6 18 6 26
  let%span ssuch_that2 = "such_that.rs" 8 12 8 18
  let%span ssuch_that3 = "such_that.rs" 10 18 10 44
  let%span ssuch_that4 = "such_that.rs" 11 20 11 59
  let%span ssuch_that5 = "such_that.rs" 12 4 12 37
  let%span ssuch_that6 = "such_that.rs" 13 12 13 44
  let%span ssuch_that7 = "such_that.rs" 14 18 14 34
  let%span sutil8 = "../../creusot-contracts/src/util.rs" 33 11 33 28
  let%span sutil9 = "../../creusot-contracts/src/util.rs" 34 0 34 21
  let%span ssuch_that10 = "such_that.rs" 17 10 17 26
  let%span smapping11 = "../../creusot-contracts/src/logic/mapping.rs" 60 8 60 19
  
  use map.Map
  
  use map.Map
  
  function index_logic'1 (self : Map.map int bool) (a : int) : bool =
    [%#smapping11] Map.get self a
  
  function such_that'0 (p : Map.map int bool) : int
  
  axiom such_that'0_spec : forall p : Map.map int bool . ([%#sutil8] exists x : int . index_logic'1 p x)
   -> ([%#sutil9] index_logic'1 p (such_that'0 p))
  
  use mach.int.Int
  
  use mach.int.Int
  
  use creusot.int.Int32
  
  use creusot.int.Int32
  
  let rec even'0 (_1:()) (return'  (ret:Int32.t))= any
    [ return' (result:Int32.t)-> {[%#ssuch_that10] Int.mod (Int32.to_int result) 2 = 0} (! return' {result}) ]
  
  
  use map.Map
  
  use map.Map
  
  function index_logic'0 (self : Map.map int int) (a : int) : int =
    [%#smapping11] Map.get self a
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0[#"such_that.rs" 4 0 4 12] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssuch_that0] such_that'0 (fun (x : int) -> x + 1 = 42) ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssuch_that1] x = 41} s1
      | s1 = even'0 {[%#ssuch_that2] ()} (fun (_ret':Int32.t) ->  [ &y <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &mapping <- [%#ssuch_that3] fun (x : int) -> x + Int32.to_int y ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &predicate' <- [%#ssuch_that4] fun (x : int) -> index_logic'0 mapping x + 1 = 0 ] s1 | s1 = bb4 ]
    
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#ssuch_that5] index_logic'1 predicate' (- Int32.to_int y - 1)} s1
      | s1 =  [ &x1 <- [%#ssuch_that6] such_that'0 predicate' ] s2
      | s2 = bb5 ]
    
    | bb5 = s0 [ s0 = {[@expl:assertion] [%#ssuch_that7] x1 + Int32.to_int y + 1 = 0} s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : () = Any.any_l ()
    | & x : int = Any.any_l ()
    | & y : Int32.t = Any.any_l ()
    | & mapping : Map.map int int = Any.any_l ()
    | & predicate' : Map.map int bool = Any.any_l ()
    | & x1 : int = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_such_that__even [#"such_that.rs" 18 0 18 16]
  let%span ssuch_that0 = "such_that.rs" 19 4 19 5
  let%span ssuch_that1 = "such_that.rs" 17 10 17 26
  
  use creusot.int.Int32
  
  use creusot.prelude.Any
  
  use mach.int.Int
  
  use creusot.int.Int32
  
  meta "compute_max_steps" 1000000
  
  let rec even'0[#"such_that.rs" 18 0 18 16] (_1:()) (return'  (ret:Int32.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#ssuch_that0] (2 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : Int32.t = Any.any_l () ] 
    [ return' (result:Int32.t)-> {[@expl:even ensures] [%#ssuch_that1] Int.mod (Int32.to_int result) 2 = 0}
      (! return' {result}) ]

end
