module M_sum_of_odds__sum_of_odd [#"sum_of_odds.rs" 18 0 18 28]
  let%span ssum_of_odds0 = "sum_of_odds.rs" 17 10 17 11
  let%span ssum_of_odds1 = "sum_of_odds.rs" 19 4 19 58
  
  use mach.int.Int
  
  constant x  : int
  
  function sum_of_odd'0 [#"sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  goal vc_sum_of_odd'0 : if x <= 0 then
    true
  else
    0 <= ([%#ssum_of_odds0] x) /\ ([%#ssum_of_odds0] x - 1) < ([%#ssum_of_odds0] x)

end
module M_sum_of_odds__sum_of_odd_is_sqr [#"sum_of_odds.rs" 26 0 26 28]
  let%span ssum_of_odds0 = "sum_of_odds.rs" 23 11 23 17
  let%span ssum_of_odds1 = "sum_of_odds.rs" 24 10 24 33
  let%span ssum_of_odds2 = "sum_of_odds.rs" 25 10 25 11
  let%span ssum_of_odds3 = "sum_of_odds.rs" 27 16 27 63
  let%span ssum_of_odds4 = "sum_of_odds.rs" 17 10 17 11
  let%span ssum_of_odds5 = "sum_of_odds.rs" 19 4 19 58
  let%span ssum_of_odds6 = "sum_of_odds.rs" 8 4 8 9
  
  use mach.int.Int
  
  function sum_of_odd'0 [#"sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([%#ssum_of_odds5] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  
  function sqr'0 [#"sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [%#ssum_of_odds6] x * x
  
  constant x  : int
  
  function sum_of_odd_is_sqr'0 [#"sum_of_odds.rs" 26 0 26 28] (x : int) : ()
  
  goal vc_sum_of_odd_is_sqr'0 : ([%#ssum_of_odds0] x >= 0)
   -> (if x > 0 then
    (([@expl:sum_of_odd_is_sqr requires] [%#ssum_of_odds0] x - 1 >= 0)
    /\ 0 <= ([%#ssum_of_odds2] x) /\ ([%#ssum_of_odds2] x - 1) < ([%#ssum_of_odds2] x))
    /\ (([%#ssum_of_odds1] sum_of_odd'0 (x - 1) = sqr'0 (x - 1))  -> ([%#ssum_of_odds1] sum_of_odd'0 x = sqr'0 x))
  else
    [%#ssum_of_odds1] sum_of_odd'0 x = sqr'0 x
  )
end
module M_sum_of_odds__compute_sum_of_odd [#"sum_of_odds.rs" 32 0 32 36]
  let%span ssum_of_odds0 = "sum_of_odds.rs" 33 21 33 22
  let%span ssum_of_odds1 = "sum_of_odds.rs" 35 13 35 14
  let%span ssum_of_odds2 = "sum_of_odds.rs" 35 4 35 7
  let%span ssum_of_odds3 = "sum_of_odds.rs" 35 4 35 7
  let%span ssum_of_odds4 = "sum_of_odds.rs" 34 16 34 48
  let%span ssum_of_odds5 = "sum_of_odds.rs" 35 4 35 7
  let%span ssum_of_odds6 = "sum_of_odds.rs" 35 4 35 7
  let%span ssum_of_odds7 = "sum_of_odds.rs" 37 12 37 33
  let%span ssum_of_odds8 = "sum_of_odds.rs" 40 13 40 14
  let%span ssum_of_odds9 = "sum_of_odds.rs" 40 21 40 22
  let%span ssum_of_odds10 = "sum_of_odds.rs" 30 11 30 23
  let%span ssum_of_odds11 = "sum_of_odds.rs" 31 10 31 35
  let%span siter12 = "../../creusot-contracts/src/std/iter.rs" 206 27 206 47
  let%span siter13 = "../../creusot-contracts/src/std/iter.rs" 207 26 207 53
  let%span ssum_of_odds14 = "sum_of_odds.rs" 17 10 17 11
  let%span ssum_of_odds15 = "sum_of_odds.rs" 19 4 19 58
  let%span srange16 = "../../creusot-contracts/src/std/iter/range.rs" 25 12 29 70
  let%span siter17 = "../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span ssum_of_odds18 = "sum_of_odds.rs" 23 11 23 17
  let%span ssum_of_odds19 = "sum_of_odds.rs" 24 10 24 33
  let%span ssum_of_odds20 = "sum_of_odds.rs" 25 10 25 11
  let%span ssum_of_odds21 = "sum_of_odds.rs" 27 16 27 63
  let%span siter22 = "../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter23 = "../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange24 = "../../creusot-contracts/src/std/iter/range.rs" 35 14 35 45
  let%span srange25 = "../../creusot-contracts/src/std/iter/range.rs" 40 15 40 32
  let%span srange26 = "../../creusot-contracts/src/std/iter/range.rs" 41 15 41 32
  let%span srange27 = "../../creusot-contracts/src/std/iter/range.rs" 42 14 42 42
  let%span snum28 = "../../creusot-contracts/src/std/num.rs" 25 28 25 33
  let%span srange29 = "../../creusot-contracts/src/std/iter/range.rs" 17 12 17 78
  let%span sresolve30 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span ssum_of_odds31 = "sum_of_odds.rs" 8 4 8 9
  
  use creusot.int.UInt32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Range'0  =
    { t_Range__start'0: UInt32.t; t_Range__end'0: UInt32.t }
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter22] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter23] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter requires] [%#siter12] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {[%#siter13] into_iter_post'0 self result} (! return' {result}) ] 
  
  function sum_of_odd'0 [#"sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([%#ssum_of_odds15] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  
  function deep_model'0 (self : UInt32.t) : int =
    [%#snum28] UInt32.t'int self
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq UInt32.t) (o : t_Range'0) =
    [%#srange16] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq UInt32.t) (b : t_Range'0) (bc : Seq.seq UInt32.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq UInt32.t, b : t_Range'0, bc : Seq.seq UInt32.t, c : t_Range'0 . ([%#srange25] produces'0 a ab b)
   -> ([%#srange26] produces'0 b bc c)  -> ([%#srange27] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange24] produces'0 self (Seq.empty : Seq.seq UInt32.t) self
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : Seq.seq UInt32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq UInt32.t [inv'1 x] . inv'1 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt32.t
  
  predicate resolve'1 (self : MutBorrow.t t_Range'0) =
    [%#sresolve30] self.final = self.current
  
  predicate completed'0 (self : MutBorrow.t t_Range'0) =
    [%#srange29] resolve'1 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  let rec next'0 (self:MutBorrow.t t_Range'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {[%#siter17] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t t_Range'0) =
    resolve'1 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt32.t))= any
    [ good (field_0:UInt32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  function sqr'0 [#"sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [%#ssum_of_odds31] x * x
  
  function sum_of_odd_is_sqr'0 [#"sum_of_odds.rs" 26 0 26 28] (x : int) : ()
  
  axiom sum_of_odd_is_sqr'0_def : forall x : int . ([%#ssum_of_odds18] x >= 0)
   -> sum_of_odd_is_sqr'0 x = ([%#ssum_of_odds21] if x > 0 then sum_of_odd_is_sqr'0 (x - 1) else ())
  
  axiom sum_of_odd_is_sqr'0_spec : forall x : int . ([%#ssum_of_odds18] x >= 0)
   -> ([%#ssum_of_odds19] sum_of_odd'0 x = sqr'0 x)
  
  meta "compute_max_steps" 1000000
  
  let rec compute_sum_of_odd'0[#"sum_of_odds.rs" 32 0 32 36] (x:UInt32.t) (return'  (ret:UInt32.t))= {[@expl:compute_sum_of_odd requires] [%#ssum_of_odds10] UInt32.t'int x
    < 65536}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &s <- [%#ssum_of_odds0] (0 : UInt32.t) ] s1
      | s1 =  [ &_8 <- { t_Range__start'0 = ([%#ssum_of_odds1] (0 : UInt32.t)); t_Range__end'0 = x } ] s2
      | s2 = into_iter'0 {_8} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0 [ s0 =  [ &iter_old <- [%#ssum_of_odds2] iter ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &produced <- [%#ssum_of_odds3] Seq.empty : Seq.seq UInt32.t ] s1 | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb4
      [ bb4 = {[@expl:for invariant] [%#ssum_of_odds5] inv'1 produced}
        {[@expl:for invariant] [%#ssum_of_odds5] inv'0 iter}
        {[@expl:for invariant] [%#ssum_of_odds5] produces'0 iter_old produced iter}
        {[@expl:loop invariant] [%#ssum_of_odds4] UInt32.t'int s = sum_of_odd'0 (Seq.length produced)}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':MutBorrow.t t_Range'0) ->  [ &_22 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range'0> {_22.current} {MutBorrow.get_id _22}
              (fun (_ret':MutBorrow.t t_Range'0) ->
                 [ &_21 <- _ret' ] 
                 [ &_22 <- { _22 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_21} (fun (_ret':t_Option'0) ->  [ &_20 <- _ret' ] s3)
          | s3 = bb6 ]
        
        | bb6 = s0
          [ s0 = -{resolve'0 _22}- s1
          | s1 = any [ br0 -> {_20 = C_None'0} (! bb9) | br1 (x0:UInt32.t)-> {_20 = C_Some'0 x0} (! bb8) ]  ]
        
        | bb8 = bb10
        | bb10 = s0
          [ s0 = v_Some'0 {_20} (fun (r0'0:UInt32.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 =  [ &_25 <- [%#ssum_of_odds6] Seq.(++) produced (Seq.singleton __creusot_proc_iter_elem) ] s2
          | s2 = bb11 ]
        
        | bb11 = s0
          [ s0 =  [ &produced <- _25 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = {[@expl:assertion] [%#ssum_of_odds7] let _ = sum_of_odd_is_sqr'0 (UInt32.t'int i) in true} s3
          | s3 = UInt32.mul {[%#ssum_of_odds8] (2 : UInt32.t)} {i} (fun (_ret':UInt32.t) ->  [ &_31 <- _ret' ] s4)
          | s4 = UInt32.add {_31} {[%#ssum_of_odds9] (1 : UInt32.t)} (fun (_ret':UInt32.t) ->  [ &_30 <- _ret' ] s5)
          | s5 = UInt32.add {s} {_30} (fun (_ret':UInt32.t) ->  [ &s <- _ret' ] s6)
          | s6 = bb4 ]
         ]
       ]
    
    | bb9 = s0 [ s0 =  [ &_0 <- s ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : UInt32.t = Any.any_l ()
    | & x : UInt32.t = x
    | & s : UInt32.t = Any.any_l ()
    | & iter : t_Range'0 = Any.any_l ()
    | & _8 : t_Range'0 = Any.any_l ()
    | & iter_old : t_Range'0 = Any.any_l ()
    | & produced : Seq.seq UInt32.t = Any.any_l ()
    | & _20 : t_Option'0 = Any.any_l ()
    | & _21 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & _22 : MutBorrow.t t_Range'0 = Any.any_l ()
    | & __creusot_proc_iter_elem : UInt32.t = Any.any_l ()
    | & _25 : Seq.seq UInt32.t = Any.any_l ()
    | & i : UInt32.t = Any.any_l ()
    | & _30 : UInt32.t = Any.any_l ()
    | & _31 : UInt32.t = Any.any_l () ]
    
    [ return' (result:UInt32.t)-> {[@expl:compute_sum_of_odd ensures] [%#ssum_of_odds11] UInt32.t'int result
      = sum_of_odd'0 (UInt32.t'int x)}
      (! return' {result}) ]

end
module M_sum_of_odds__test [#"sum_of_odds.rs" 46 0 46 19]
  let%span ssum_of_odds0 = "sum_of_odds.rs" 49 8 49 29
  let%span ssum_of_odds1 = "sum_of_odds.rs" 45 11 45 23
  let%span ssum_of_odds2 = "sum_of_odds.rs" 30 11 30 23
  let%span ssum_of_odds3 = "sum_of_odds.rs" 31 10 31 35
  let%span ssum_of_odds4 = "sum_of_odds.rs" 23 11 23 17
  let%span ssum_of_odds5 = "sum_of_odds.rs" 24 10 24 33
  let%span ssum_of_odds6 = "sum_of_odds.rs" 25 10 25 11
  let%span ssum_of_odds7 = "sum_of_odds.rs" 27 16 27 63
  let%span ssum_of_odds8 = "sum_of_odds.rs" 13 16 13 42
  let%span ssum_of_odds9 = "sum_of_odds.rs" 17 10 17 11
  let%span ssum_of_odds10 = "sum_of_odds.rs" 19 4 19 58
  let%span ssum_of_odds11 = "sum_of_odds.rs" 8 4 8 9
  
  use creusot.int.UInt32
  use mach.int.Int
  use creusot.prelude.Any
  
  function sum_of_odd'0 [#"sum_of_odds.rs" 18 0 18 28] (x : int) : int
  
  axiom sum_of_odd'0_def : forall x : int . sum_of_odd'0 x
  = ([%#ssum_of_odds10] if x <= 0 then 0 else sum_of_odd'0 (x - 1) + 2 * x - 1)
  
  let rec compute_sum_of_odd'0 (x:UInt32.t) (return'  (ret:UInt32.t))= {[@expl:compute_sum_of_odd requires] [%#ssum_of_odds2] UInt32.t'int x
    < 65536}
    any
    [ return' (result:UInt32.t)-> {[%#ssum_of_odds3] UInt32.t'int result = sum_of_odd'0 (UInt32.t'int x)}
      (! return' {result}) ]
  
  
  function sqr'0 [#"sum_of_odds.rs" 7 0 7 21] (x : int) : int =
    [%#ssum_of_odds11] x * x
  
  function sum_of_odd_is_sqr'0 [#"sum_of_odds.rs" 26 0 26 28] (x : int) : ()
  
  axiom sum_of_odd_is_sqr'0_def : forall x : int . ([%#ssum_of_odds4] x >= 0)
   -> sum_of_odd_is_sqr'0 x = ([%#ssum_of_odds7] if x > 0 then sum_of_odd_is_sqr'0 (x - 1) else ())
  
  axiom sum_of_odd_is_sqr'0_spec : forall x : int . ([%#ssum_of_odds4] x >= 0)
   -> ([%#ssum_of_odds5] sum_of_odd'0 x = sqr'0 x)
  
  predicate is_square'0 [#"sum_of_odds.rs" 12 0 12 28] (y : int) =
    [%#ssum_of_odds8] exists z : int . y = sqr'0 z
  
  meta "compute_max_steps" 1000000
  
  let rec test'0[#"sum_of_odds.rs" 46 0 46 19] (x:UInt32.t) (return'  (ret:()))= {[@expl:test requires] [%#ssum_of_odds1] UInt32.t'int x
    < 65536}
    (! bb0
    [ bb0 = s0 [ s0 = compute_sum_of_odd'0 {x} (fun (_ret':UInt32.t) ->  [ &y <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssum_of_odds0] let _ = sum_of_odd_is_sqr'0 (UInt32.t'int x) in is_square'0 (UInt32.t'int y)}
        s1
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Any.any_l () | & x : UInt32.t = x | & y : UInt32.t = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
