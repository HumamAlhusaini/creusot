module M_take_first_mut__take_first_mut [#"take_first_mut.rs" 14 0 14 74]
  let%span stake_first_mut = "take_first_mut.rs" 14 29 14 34
  let%span stake_first_mut'0 = "take_first_mut.rs" 14 57 14 74
  let%span stake_first_mut'1 = "take_first_mut.rs" 6 10 13 1
  let%span smem = "../../creusot-contracts/src/std/mem.rs" 23 32 23 36
  let%span smem'0 = "../../creusot-contracts/src/std/mem.rs" 21 22 21 37
  let%span smem'1 = "../../creusot-contracts/src/std/mem.rs" 22 22 22 42
  let%span sslice = "../../creusot-contracts/src/std/slice.rs" 279 8 279 9
  let%span sslice'0 = "../../creusot-contracts/src/std/slice.rs" 280 18 288 9
  let%span sslice'1 = "../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice'2 = "../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span sslice'3 = "../../creusot-contracts/src/std/slice.rs" 65 20 65 65
  let%span sslice'4 = "../../creusot-contracts/src/std/slice.rs" 17 20 17 30
  let%span sindex = "../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span sseq = "../../creusot-contracts/src/logic/seq.rs" 169 8 169 39
  let%span sseq'0 = "../../creusot-contracts/src/logic/seq.rs" 653 20 653 95
  let%span smodel = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sboxed = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.prelude.MutBorrow
  use creusot.slice.Slice64
  use seq.Seq
  use mach.int.Int
  use creusot.int.UInt64
  use creusot.prelude.Any
  
  type t_T
  
  predicate inv (_0 : t_T)
  
  predicate invariant' (self : t_T) =
    [%#sboxed] inv self
  
  predicate inv'0 (_0 : t_T)
  
  axiom inv_axiom [@rewrite] : forall x : t_T [inv'0 x] . inv'0 x = invariant' x
  
  predicate invariant''0 (self : Seq.seq t_T) =
    [%#sseq'0] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'0 (Seq.get self i)
  
  predicate inv'1 (_0 : Seq.seq t_T)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq t_T [inv'1 x] . inv'1 x = invariant''0 x
  
  constant v_MAX : UInt64.t = (18446744073709551615 : UInt64.t)
  
  function view (self : Slice64.slice t_T) : Seq.seq t_T
  
  axiom view_spec : forall self : Slice64.slice t_T . ([%#sslice'1] Seq.length (view self)
  <= UInt64.t'int (v_MAX : UInt64.t))
  && ([%#sslice'2] view self = Slice64.id self)
  
  predicate invariant''1 (self : Slice64.slice t_T) =
    [%#sslice'4] inv'1 (view self)
  
  predicate inv'2 (_0 : Slice64.slice t_T)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Slice64.slice t_T [inv'2 x] . inv'2 x = invariant''1 x
  
  predicate invariant''2 (self : MutBorrow.t (Slice64.slice t_T)) =
    [%#sinvariant] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'3 (_0 : MutBorrow.t (Slice64.slice t_T))
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t (Slice64.slice t_T) [inv'3 x] . inv'3 x = invariant''2 x
  
  predicate invariant''3 (self : MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) =
    [%#sinvariant] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_0 : MutBorrow.t (MutBorrow.t (Slice64.slice t_T)))
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t (MutBorrow.t (Slice64.slice t_T)) [inv'4 x] . inv'4 x
  = invariant''3 x
  
  function view'0 (self : MutBorrow.t (Slice64.slice t_T)) : Seq.seq t_T =
    [%#smodel] view self.current
  
  predicate is_default (self : MutBorrow.t (Slice64.slice t_T)) =
    [%#sslice'3] view'0 self = (Seq.empty : Seq.seq t_T) /\ view self.final = (Seq.empty : Seq.seq t_T)
  
  let rec take (dest:MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) (return'  (x:MutBorrow.t (Slice64.slice t_T)))= {[@expl:take 'dest' type invariant] [%#smem] inv'4 dest}
    any
    [ return''0 (result:MutBorrow.t (Slice64.slice t_T))-> {inv'3 result}
      {[%#smem'0] result = dest.current}
      {[%#smem'1] is_default dest.final}
      (! return' {result}) ]
  
  
  type tuple  =
    { _0: MutBorrow.t t_T; _1: MutBorrow.t (Slice64.slice t_T) }
  
  type t_Option  =
    | C_None
    | C_Some tuple
  
  predicate invariant''4 (self : MutBorrow.t t_T) =
    [%#sinvariant] inv self.current /\ inv self.final
  
  predicate inv'5 (_0'0 : MutBorrow.t t_T)
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t t_T [inv'5 x] . inv'5 x = invariant''4 x
  
  predicate inv'6 (_0'0 : tuple)
  
  axiom inv_axiom'5 [@rewrite] : forall x : tuple [inv'6 x] . inv'6 x
  = (let {_0 = x0 ; _1 = x1} = x in inv'5 x0 /\ inv'3 x1)
  
  predicate inv'7 (_0'0 : t_Option)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option [inv'7 x] . inv'7 x
  = match x with
    | C_None -> true
    | C_Some a_0 -> inv'6 a_0
    end
  
  function index_logic [@inline:trivial] (self : Slice64.slice t_T) (ix : int) : t_T =
    [%#sindex] Seq.get (view self) ix
  
  function tail (self : Seq.seq t_T) : Seq.seq t_T =
    [%#sseq] Seq.([..]) self 1 (Seq.length self)
  
  let rec split_first_mut (self_:MutBorrow.t (Slice64.slice t_T)) (return'  (x:t_Option))= {[@expl:split_first_mut 'self_' type invariant] [%#sslice] inv'3 self_}
    any
    [ return''0 (result:t_Option)-> {inv'7 result}
      {[%#sslice'0] match result with
        | C_Some {_0 = first ; _1 = tail'0} -> first.current = index_logic self_.current 0
        /\ first.final = index_logic self_.final 0
        /\ Seq.length (view self_.current) > 0
        /\ Seq.length (view self_.final) > 0
        /\ view tail'0.current = tail (view self_.current) /\ view tail'0.final = tail (view self_.final)
        | C_None -> Seq.length (view'0 self_) = 0
        /\ self_.final = self_.current /\ view'0 self_ = (Seq.empty : Seq.seq t_T)
        end}
      (! return' {result}) ]
  
  
  let rec v_Some (input:t_Option) (ret  (field_0:tuple))= any
    [ good (field_0:tuple)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : tuple [C_Some field_0 : t_Option] . C_Some field_0 <> input} (! {false} any) ]
  
  
  predicate resolve (self : MutBorrow.t (Slice64.slice t_T)) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0'0 : MutBorrow.t (Slice64.slice t_T)) =
    resolve _0'0
  
  predicate resolve'1 (self : MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'2 (_0'0 : MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) =
    resolve'1 _0'0
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 (MutBorrow.t t_T)
  
  predicate resolve'3 (self : MutBorrow.t t_T) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'4 (_0'0 : MutBorrow.t t_T) =
    resolve'3 _0'0
  
  predicate inv'8 (_0'0 : t_Option'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Option'0 [inv'8 x] . inv'8 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'5 a_0
    end
  
  meta "compute_max_steps" 1000000
  
  let rec take_first_mut[#"take_first_mut.rs" 14 0 14 74] (self_:MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) (return'  (x:t_Option'0))= {[@expl:take_first_mut 'self_' type invariant] [%#stake_first_mut] inv'4 self_}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'3 self_'0.current}
        MutBorrow.borrow_mut <MutBorrow.t (Slice64.slice t_T)> {self_'0.current}
          (fun (_ret:MutBorrow.t (MutBorrow.t (Slice64.slice t_T))) ->
             [ &_6 <- _ret ] 
            -{inv'3 _ret.final}-
             [ &self_'0 <- { self_'0 with current = _ret.final } ] 
            s1)
      | s1 = take {_6} (fun (_ret:MutBorrow.t (Slice64.slice t_T)) ->  [ &_5 <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = {inv'2 _5.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {_5.current} {MutBorrow.get_id _5}
          (fun (_ret:MutBorrow.t (Slice64.slice t_T)) ->
             [ &_4 <- _ret ] 
            -{inv'2 _ret.final}-
             [ &_5 <- { _5 with current = _ret.final } ] 
            s1)
      | s1 = split_first_mut {_4} (fun (_ret:t_Option) ->  [ &_3 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = any [ br0 -> {_3 = C_None} (! bb4) | br1 (x0:tuple)-> {_3 = C_Some x0} (! bb5) ] 
    | bb5 = s0
      [ s0 = v_Some {_3} (fun (r0:tuple) ->  [ &first <- r0._0 ] s1)
      | s1 = v_Some {_3} (fun (r0:tuple) ->  [ &rem <- r0._1 ] s2)
      | s2 = {inv'2 rem.current}
        MutBorrow.borrow_final <Slice64.slice t_T> {rem.current} {MutBorrow.get_id rem}
          (fun (_ret:MutBorrow.t (Slice64.slice t_T)) ->
             [ &_11 <- _ret ] 
            -{inv'2 _ret.final}-
             [ &rem <- { rem with current = _ret.final } ] 
            s3)
      | s3 = {[@expl:type invariant] match self_'0 with
          | {current = x} -> inv'3 x
          | _ -> true
          end}
        s4
      | s4 = -{match self_'0 with
          | {current = x} -> resolve'0 x
          | _ -> true
          end}-
        s5
      | s5 =  [ &self_'0 <- { self_'0 with current = _11 } ] s6
      | s6 = {[@expl:type invariant] inv'4 self_'0} s7
      | s7 = -{resolve'2 self_'0}- s8
      | s8 = {inv first.current}
        MutBorrow.borrow_final <t_T> {first.current} {MutBorrow.get_id first}
          (fun (_ret:MutBorrow.t t_T) ->
             [ &_12 <- _ret ] 
            -{inv _ret.final}-
             [ &first <- { first with current = _ret.final } ] 
            s9)
      | s9 =  [ &_0'0 <- C_Some'0 _12 ] s10
      | s10 = {[@expl:type invariant] inv'3 rem} s11
      | s11 = -{resolve'0 rem}- s12
      | s12 = {[@expl:type invariant] inv'5 first} s13
      | s13 = -{resolve'4 first}- s14
      | s14 = {[@expl:type invariant] inv'3 _5} s15
      | s15 = -{resolve'0 _5}- s16
      | s16 = bb7 ]
    
    | bb4 = s0 [ s0 = {[@expl:type invariant] inv'4 self_'0} s1 | s1 = -{resolve'2 self_'0}- s2 | s2 = bb6 ] 
    | bb6 = s0
      [ s0 =  [ &_0'0 <- C_None'0 ] s1
      | s1 = {[@expl:type invariant] inv'3 _5} s2
      | s2 = -{resolve'0 _5}- s3
      | s3 = bb7 ]
    
    | bb7 = return''0 {_0'0} ]
    )
    [ & _0'0 : t_Option'0 = Any.any_l ()
    | & self_'0 : MutBorrow.t (MutBorrow.t (Slice64.slice t_T)) = self_
    | & _3 : t_Option = Any.any_l ()
    | & _4 : MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _5 : MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _6 : MutBorrow.t (MutBorrow.t (Slice64.slice t_T)) = Any.any_l ()
    | & first : MutBorrow.t t_T = Any.any_l ()
    | & rem : MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _11 : MutBorrow.t (Slice64.slice t_T) = Any.any_l ()
    | & _12 : MutBorrow.t t_T = Any.any_l () ]
    
    [ return''0 (result:t_Option'0)-> {[@expl:take_first_mut result type invariant] [%#stake_first_mut'0] inv'8 result}
      {[@expl:take_first_mut ensures] [%#stake_first_mut'1] match result with
        | C_Some'0 r -> r.current = index_logic (self_.current).current 0
        /\ r.final = index_logic (self_.current).final 0
        /\ Seq.length (view (self_.current).current) > 0
        /\ Seq.length (view (self_.current).final) > 0
        /\ view (self_.final).current = tail (view (self_.current).current)
        /\ view (self_.final).final = tail (view (self_.current).final)
        | C_None'0 -> view (self_.final).current = (Seq.empty : Seq.seq t_T)
        /\ view (self_.current).final = (Seq.empty : Seq.seq t_T)
        /\ view (self_.current).current = (Seq.empty : Seq.seq t_T)
        /\ view (self_.final).final = (Seq.empty : Seq.seq t_T)
        end}
      (! return' {result}) ]

end
