module M_assert_in_ghost__ghost_only [#"assert_in_ghost.rs" 4 0 4 19]
  let%span sassert_in_ghost = "assert_in_ghost.rs" 6 16 6 20
  let%span sassert_in_ghost'0 = "assert_in_ghost.rs" 7 22 7 31
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 234 8 234 14
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Ghost  =
    { t_Ghost__0: () }
  
  predicate inv (_0 : ())
  
  axiom inv_axiom [@rewrite] : forall x : () [inv x] . inv x = true
  
  function inner_logic (self : t_Ghost) : () =
    [%#sghost'1] self.t_Ghost__0
  
  predicate invariant' (self : t_Ghost) =
    [%#sghost'2] inv (inner_logic self)
  
  predicate inv'0 (_0 : t_Ghost)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost [inv'0 x] . inv'0 x
  = (invariant' x
  /\ match x with
    | {t_Ghost__0 = a_0} -> true
    end)
  
  let rec new (x:()) (return'  (x'0:t_Ghost))= any
    [ return''0 (result:t_Ghost)-> {[%#sghost] inv'0 result}
      {[%#sghost'0] inner_logic result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_only[#"assert_in_ghost.rs" 4 0 4 19] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sassert_in_ghost] (1 : Int32.t) ] s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost'0] x = (1 : Int32.t)} s2
      | s2 = new {_2} (fun (_ret:t_Ghost) ->  [ &_1 <- _ret ] s3)
      | s3 = bb1 ]
    
    | bb1 = return''0 {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & _1 : t_Ghost = Any.any_l ()
    | & _2 : () = Any.any_l ()
    | & x : Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_assert_in_ghost__ghost_capture [#"assert_in_ghost.rs" 11 0 11 22]
  let%span sassert_in_ghost = "assert_in_ghost.rs" 12 12 12 17
  let%span sassert_in_ghost'0 = "assert_in_ghost.rs" 16 22 16 32
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 234 8 234 14
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Ghost  =
    { t_Ghost__0: () }
  
  predicate inv (_0 : ())
  
  axiom inv_axiom [@rewrite] : forall x : () [inv x] . inv x = true
  
  function inner_logic (self : t_Ghost) : () =
    [%#sghost'1] self.t_Ghost__0
  
  predicate invariant' (self : t_Ghost) =
    [%#sghost'2] inv (inner_logic self)
  
  predicate inv'0 (_0 : t_Ghost)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost [inv'0 x] . inv'0 x
  = (invariant' x
  /\ match x with
    | {t_Ghost__0 = a_0} -> true
    end)
  
  let rec new (x:()) (return'  (x'0:t_Ghost))= any
    [ return''0 (result:t_Ghost)-> {[%#sghost] inv'0 result}
      {[%#sghost'0] inner_logic result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_capture[#"assert_in_ghost.rs" 11 0 11 22] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#sassert_in_ghost] (42 : Int32.t) ] s1
      | s1 =  [ &y <- x ] s2
      | s2 = {[@expl:assertion] [%#sassert_in_ghost'0] y = (42 : Int32.t)} s3
      | s3 = new {_3} (fun (_ret:t_Ghost) ->  [ &_2 <- _ret ] s4)
      | s4 = bb1 ]
    
    | bb1 = return''0 {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & x : Int32.t = Any.any_l ()
    | & _2 : t_Ghost = Any.any_l ()
    | & _3 : () = Any.any_l ()
    | & y : Int32.t = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
module M_assert_in_ghost__ghost_mutate [#"assert_in_ghost.rs" 20 0 20 21]
  let%span sassert_in_ghost = "assert_in_ghost.rs" 21 25 21 29
  let%span sassert_in_ghost'0 = "assert_in_ghost.rs" 21 31 21 35
  let%span sassert_in_ghost'1 = "assert_in_ghost.rs" 24 14 24 15
  let%span sassert_in_ghost'2 = "assert_in_ghost.rs" 28 22 28 33
  let%span sassert_in_ghost'3 = "assert_in_ghost.rs" 29 22 29 33
  let%span sghost = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost'0 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost'1 = "../../../creusot-contracts/src/ghost.rs" 84 22 84 26
  let%span sghost'2 = "../../../creusot-contracts/src/ghost.rs" 82 14 82 46
  let%span sghost'3 = "../../../creusot-contracts/src/ghost.rs" 83 14 83 46
  let%span sghost'4 = "../../../creusot-contracts/src/ghost.rs" 234 8 234 14
  let%span sghost'5 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sresolve = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sinvariant = "../../../creusot-contracts/src/invariant.rs" 100 20 100 44
  
  use creusot.int.Int32
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type tuple  =
    { _p0: Int32.t; _p1: Int32.t }
  
  type t_Ghost  =
    { t_Ghost__0: tuple }
  
  predicate inv (_0 : tuple)
  
  axiom inv_axiom [@rewrite] : forall x : tuple [inv x] . inv x = true
  
  function inner_logic (self : t_Ghost) : tuple =
    [%#sghost'4] self.t_Ghost__0
  
  predicate invariant' (self : t_Ghost) =
    [%#sghost'5] inv (inner_logic self)
  
  predicate inv'0 (_0 : t_Ghost)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost [inv'0 x] . inv'0 x
  = (invariant' x
  /\ match x with
    | {t_Ghost__0 = a_0} -> true
    end)
  
  let rec new (x:tuple) (return'  (x'0:t_Ghost))= any
    [ return''0 (result:t_Ghost)-> {[%#sghost] inv'0 result}
      {[%#sghost'0] inner_logic result = x}
      (! return' {result}) ]
  
  
  predicate invariant''0 (self : MutBorrow.t t_Ghost) =
    [%#sinvariant] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_0 : MutBorrow.t t_Ghost)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Ghost [inv'1 x] . inv'1 x = invariant''0 x
  
  let rec deref_mut (self:MutBorrow.t t_Ghost) (return'  (x:MutBorrow.t tuple))= {[@expl:deref_mut 'self' type invariant] [%#sghost'1] inv'1 self}
    any
    [ return''0 (result:MutBorrow.t tuple)-> {[%#sghost'2] result.current = inner_logic self.current}
      {[%#sghost'3] result.final = inner_logic self.final}
      (! return' {result}) ]
  
  
  predicate resolve (self : MutBorrow.t tuple) =
    [%#sresolve] self.final = self.current
  
  predicate resolve'0 (_0 : MutBorrow.t tuple) =
    resolve _0
  
  type t_Ghost'0  =
    { t_Ghost__0'0: () }
  
  predicate inv'2 (_0 : ())
  
  axiom inv_axiom'2 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : () =
    [%#sghost'4] self.t_Ghost__0'0
  
  predicate invariant''1 (self : t_Ghost'0) =
    [%#sghost'5] inv'2 (inner_logic'0 self)
  
  predicate inv'3 (_0 : t_Ghost'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Ghost'0 [inv'3 x] . inv'3 x
  = (invariant''1 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec new'0 (x:()) (return'  (x'0:t_Ghost'0))= any
    [ return''0 (result:t_Ghost'0)-> {[%#sghost] inv'3 result}
      {[%#sghost'0] inner_logic'0 result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_mutate[#"assert_in_ghost.rs" 20 0 20 21] (return'  (x:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- { _p0 = ([%#sassert_in_ghost] (2 : Int32.t)); _p1 = ([%#sassert_in_ghost'0] (3 : Int32.t)) } ] s1
      | s1 = new {_2} (fun (_ret:t_Ghost) ->  [ &p <- _ret ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = {inv'0 p}
        MutBorrow.borrow_mut <t_Ghost> {p}
          (fun (_ret:MutBorrow.t t_Ghost) ->  [ &_6 <- _ret ] -{inv'0 _ret.final}-  [ &p <- _ret.final ] s1)
      | s1 = deref_mut {_6} (fun (_ret:MutBorrow.t tuple) ->  [ &_5 <- _ret ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 =  [ &_5 <- { _5 with current = { _5.current with _p0 = ([%#sassert_in_ghost'1] (4 : Int32.t)) } } ] s1
      | s1 = -{resolve'0 _5}- s2
      | s2 = new'0 {_4} (fun (_ret:t_Ghost'0) ->  [ &_3 <- _ret ] s3)
      | s3 = bb3 ]
    
    | bb3 = s0
      [ s0 = {[@expl:assertion] [%#sassert_in_ghost'2] (inner_logic p)._p0 = (4 : Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sassert_in_ghost'3] (inner_logic p)._p1 = (3 : Int32.t)} s2
      | s2 = new'0 {_8} (fun (_ret:t_Ghost'0) ->  [ &_7 <- _ret ] s3)
      | s3 = bb4 ]
    
    | bb4 = return''0 {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & p : t_Ghost = Any.any_l ()
    | & _2 : tuple = Any.any_l ()
    | & _3 : t_Ghost'0 = Any.any_l ()
    | & _4 : () = Any.any_l ()
    | & _5 : MutBorrow.t tuple = Any.any_l ()
    | & _6 : MutBorrow.t t_Ghost = Any.any_l ()
    | & _7 : t_Ghost'0 = Any.any_l ()
    | & _8 : () = Any.any_l () ]
     [ return''0 (result:())-> (! return' {result}) ] 
end
