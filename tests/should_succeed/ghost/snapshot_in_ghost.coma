module M_snapshot_in_ghost__foo [#"snapshot_in_ghost.rs" 5 0 5 12]
  let%span ssnapshot_in_ghost0 = "snapshot_in_ghost.rs" 7 16 7 28
  let%span ssnapshot_in_ghost1 = "snapshot_in_ghost.rs" 8 22 8 29
  let%span sghost2 = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost3 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost4 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  
  use creusot.prelude.Any
  
  type t_Ghost'0  =
    { t_Ghost__0'0: () }
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : ()
  
  predicate invariant'0 (self : t_Ghost'0) =
    [%#sghost4] inv'1 (inner_logic'0 self)
  
  predicate inv'0 (_1 : t_Ghost'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec new'0 (x:()) (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sghost2] inv'0 result}
      {[%#sghost3] inner_logic'0 result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0[#"snapshot_in_ghost.rs" 5 0 5 12] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost0] 1 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost1] x = 1} s1
      | s1 = new'0 {_2} (fun (_ret':t_Ghost'0) ->  [ &_1 <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l () | & _1 : t_Ghost'0 = Any.any_l () | & _2 : () = Any.any_l () | & x : int = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_snapshot_in_ghost__is_pure [#"snapshot_in_ghost.rs" 14 0 14 16]
  let%span ssnapshot_in_ghost0 = "snapshot_in_ghost.rs" 15 12 15 24
  let%span ssnapshot_in_ghost1 = "snapshot_in_ghost.rs" 16 18 16 25
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec is_pure'0[#"snapshot_in_ghost.rs" 14 0 14 16] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost0] 1 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost1] x = 1} s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = Any.any_l () | & x : int = Any.any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_snapshot_in_ghost__bar [#"snapshot_in_ghost.rs" 21 0 21 12]
  let%span ssnapshot_in_ghost0 = "snapshot_in_ghost.rs" 22 21 22 25
  let%span ssnapshot_in_ghost1 = "snapshot_in_ghost.rs" 24 16 24 28
  let%span ssnapshot_in_ghost2 = "snapshot_in_ghost.rs" 25 22 25 55
  let%span sghost3 = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost4 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost5 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  
  use creusot.int.Int32
  use creusot.prelude.Any
  
  type t_Ghost'0  =
    { t_Ghost__0'0: () }
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : ()
  
  predicate invariant'0 (self : t_Ghost'0) =
    [%#sghost5] inv'1 (inner_logic'0 self)
  
  predicate inv'0 (_1 : t_Ghost'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec new'0 (x:()) (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sghost3] inv'0 result}
      {[%#sghost4] inner_logic'0 result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec bar'0[#"snapshot_in_ghost.rs" 21 0 21 12] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost0] (1 : Int32.t) ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#ssnapshot_in_ghost1] x ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost2] exists y : Int32.t . x = y} s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 = new'0 {_3} (fun (_ret':t_Ghost'0) ->  [ &_2 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & x : Int32.t = Any.any_l ()
    | & _2 : t_Ghost'0 = Any.any_l ()
    | & _3 : () = Any.any_l ()
    | & _4 : Int32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
