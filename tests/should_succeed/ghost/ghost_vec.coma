module M_ghost_vec__ghost_vec [#"ghost_vec.rs" 4 0 4 18]
  let%span sghost_vec0 = "ghost_vec.rs" 6 18 6 49
  let%span sghost_vec1 = "ghost_vec.rs" 8 26 8 28
  let%span sghost_vec2 = "ghost_vec.rs" 9 22 9 35
  let%span sghost_vec3 = "ghost_vec.rs" 10 22 10 34
  let%span sghost_vec4 = "ghost_vec.rs" 12 26 12 28
  let%span sghost_vec5 = "ghost_vec.rs" 13 26 13 28
  let%span sghost_vec6 = "ghost_vec.rs" 15 22 15 30
  let%span sghost_vec7 = "ghost_vec.rs" 16 22 16 69
  let%span sghost_vec8 = "ghost_vec.rs" 18 31 18 35
  let%span sghost_vec9 = "ghost_vec.rs" 19 31 19 35
  let%span sghost_vec10 = "ghost_vec.rs" 20 22 20 42
  let%span sghost_vec11 = "ghost_vec.rs" 21 22 21 34
  let%span sghost_vec12 = "ghost_vec.rs" 23 41 23 45
  let%span sghost_vec13 = "ghost_vec.rs" 24 17 24 19
  let%span sghost_vec14 = "ghost_vec.rs" 26 22 26 35
  let%span sghost_vec15 = "ghost_vec.rs" 33 22 33 41
  let%span sghost_vec16 = "ghost_vec.rs" 34 22 34 41
  let%span sghost_vec17 = "ghost_vec.rs" 35 22 35 41
  let%span sghost_vec18 = "ghost_vec.rs" 36 22 36 34
  let%span sghost_vec19 = "ghost_vec.rs" 37 22 37 34
  let%span sghost_vec20 = "ghost_vec.rs" 42 27 42 28
  let%span sghost_vec21 = "ghost_vec.rs" 43 27 43 28
  let%span sghost_vec22 = "ghost_vec.rs" 44 27 44 28
  let%span sghost_vec23 = "ghost_vec.rs" 49 22 49 40
  let%span sghost_vec24 = "ghost_vec.rs" 50 22 50 40
  let%span sghost_vec25 = "ghost_vec.rs" 51 22 51 40
  let%span sghost_vec26 = "ghost_vec.rs" 52 22 52 34
  let%span sseq27 = "../../../creusot-contracts/src/logic/seq.rs" 427 4 427 31
  let%span sseq28 = "../../../creusot-contracts/src/logic/seq.rs" 425 14 425 36
  let%span sseq29 = "../../../creusot-contracts/src/logic/seq.rs" 86 8 86 82
  let%span sghost30 = "../../../creusot-contracts/src/ghost.rs" 84 22 84 26
  let%span sghost31 = "../../../creusot-contracts/src/ghost.rs" 84 4 84 48
  let%span sghost32 = "../../../creusot-contracts/src/ghost.rs" 82 14 82 46
  let%span sghost33 = "../../../creusot-contracts/src/ghost.rs" 83 14 83 46
  let%span sseq34 = "../../../creusot-contracts/src/logic/seq.rs" 494 32 494 36
  let%span sseq35 = "../../../creusot-contracts/src/logic/seq.rs" 494 38 494 39
  let%span sseq36 = "../../../creusot-contracts/src/logic/seq.rs" 493 14 493 40
  let%span sghost37 = "../../../creusot-contracts/src/ghost.rs" 67 14 67 18
  let%span sghost38 = "../../../creusot-contracts/src/ghost.rs" 67 4 67 36
  let%span sghost39 = "../../../creusot-contracts/src/ghost.rs" 66 14 66 46
  let%span sseq40 = "../../../creusot-contracts/src/logic/seq.rs" 451 22 451 26
  let%span sseq41 = "../../../creusot-contracts/src/logic/seq.rs" 450 14 450 34
  let%span sint42 = "../../../creusot-contracts/src/logic/int.rs" 59 4 59 42
  let%span sint43 = "../../../creusot-contracts/src/logic/int.rs" 56 14 56 31
  let%span sghost44 = "../../../creusot-contracts/src/ghost.rs" 216 22 216 26
  let%span sghost45 = "../../../creusot-contracts/src/ghost.rs" 216 4 216 32
  let%span sghost46 = "../../../creusot-contracts/src/ghost.rs" 214 14 214 29
  let%span sseq47 = "../../../creusot-contracts/src/logic/seq.rs" 522 22 522 26
  let%span sseq48 = "../../../creusot-contracts/src/logic/seq.rs" 522 4 522 53
  let%span sseq49 = "../../../creusot-contracts/src/logic/seq.rs" 518 14 521 5
  let%span sseq50 = "../../../creusot-contracts/src/logic/seq.rs" 553 30 553 34
  let%span sseq51 = "../../../creusot-contracts/src/logic/seq.rs" 553 4 553 65
  let%span sseq52 = "../../../creusot-contracts/src/logic/seq.rs" 547 14 550 5
  let%span sseq53 = "../../../creusot-contracts/src/logic/seq.rs" 551 14 551 76
  let%span sseq54 = "../../../creusot-contracts/src/logic/seq.rs" 552 14 552 44
  let%span sseq55 = "../../../creusot-contracts/src/logic/seq.rs" 580 31 580 35
  let%span sseq56 = "../../../creusot-contracts/src/logic/seq.rs" 580 4 580 49
  let%span sseq57 = "../../../creusot-contracts/src/logic/seq.rs" 576 14 579 5
  let%span sghost58 = "../../../creusot-contracts/src/ghost.rs" 191 15 191 16
  let%span sghost59 = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost60 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sseq61 = "../../../creusot-contracts/src/logic/seq.rs" 472 33 472 37
  let%span sseq62 = "../../../creusot-contracts/src/logic/seq.rs" 472 39 472 40
  let%span sseq63 = "../../../creusot-contracts/src/logic/seq.rs" 471 14 471 41
  let%span sseq64 = "../../../creusot-contracts/src/logic/seq.rs" 606 32 606 36
  let%span sseq65 = "../../../creusot-contracts/src/logic/seq.rs" 606 4 606 50
  let%span sseq66 = "../../../creusot-contracts/src/logic/seq.rs" 602 14 605 5
  let%span sresolve67 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sseq68 = "../../../creusot-contracts/src/logic/seq.rs" 247 8 247 27
  let%span sghost69 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sinvariant70 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sinvariant71 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  use creusot.int.Int32
  use seq.Seq
  use mach.int.Int
  use creusot.prelude.MutBorrow
  use creusot.int.Int128
  use creusot.prelude.Any
  
  type t_Ghost'0  =
    { t_Ghost__0'0: Seq.seq Int32.t }
  
  predicate inv'13 (_1 : Seq.seq Int32.t)
  
  axiom inv_axiom'13 [@rewrite] : forall x : Seq.seq Int32.t [inv'13 x] . inv'13 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : Seq.seq Int32.t
  
  predicate invariant'0 (self : t_Ghost'0) =
    [%#sghost69] inv'13 (inner_logic'0 self)
  
  predicate inv'0 (_1 : t_Ghost'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec new'0 (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sseq27] inv'0 result}
      {[%#sseq28] inner_logic'0 result = (Seq.empty : Seq.seq Int32.t)}
      (! return' {result}) ]
  
  
  type t_Option'2  =
    | C_None'0
    | C_Some'2 Int32.t
  
  function get'0 (self : Seq.seq Int32.t) (ix : int) : t_Option'2 =
    [%#sseq29] if 0 <= ix /\ ix < Seq.length self then C_Some'2 (Seq.get self ix) else C_None'0
  
  predicate invariant'1 (self : MutBorrow.t t_Ghost'0) =
    [%#sinvariant70] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_Ghost'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Ghost'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'2 (_1 : MutBorrow.t (Seq.seq Int32.t))
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t (Seq.seq Int32.t) [inv'2 x] . inv'2 x = true
  
  let rec deref_mut'0 (self:MutBorrow.t t_Ghost'0) (return'  (ret:MutBorrow.t (Seq.seq Int32.t)))= {[@expl:deref_mut 'self' type invariant] [%#sghost30] inv'1 self}
    any
    [ return' (result:MutBorrow.t (Seq.seq Int32.t))-> {[%#sghost31] inv'2 result}
      {[%#sghost32] result.current = inner_logic'0 self.current}
      {[%#sghost33] result.final = inner_logic'0 self.final}
      (! return' {result}) ]
  
  
  predicate inv'3 (_1 : Int32.t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Int32.t [inv'3 x] . inv'3 x = true
  
  let rec push_back_ghost'0 (self:MutBorrow.t (Seq.seq Int32.t)) (x:Int32.t) (return'  (ret:()))= {[@expl:push_back_ghost 'self' type invariant] [%#sseq34] inv'2 self}
    {[@expl:push_back_ghost 'x' type invariant] [%#sseq35] inv'3 x}
    any [ return' (result:())-> {[%#sseq36] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  predicate resolve'2 (self : MutBorrow.t (Seq.seq Int32.t)) =
    [%#sresolve67] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t (Seq.seq Int32.t)) =
    resolve'2 _1
  
  predicate invariant'2 (self : t_Ghost'0) =
    [%#sinvariant71] inv'0 self
  
  predicate inv'4 (_1 : t_Ghost'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Ghost'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate inv'5 (_1 : Seq.seq Int32.t)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq Int32.t [inv'5 x] . inv'5 x = true
  
  let rec deref'0 (self:t_Ghost'0) (return'  (ret:Seq.seq Int32.t))= {[@expl:deref 'self' type invariant] [%#sghost37] inv'4 self}
    any
    [ return' (result:Seq.seq Int32.t)-> {[%#sghost38] inv'5 result}
      {[%#sghost39] inner_logic'0 self = result}
      (! return' {result}) ]
  
  
  let rec len_ghost'0 (self:Seq.seq Int32.t) (return'  (ret:int))= {[@expl:len_ghost 'self' type invariant] [%#sseq40] inv'5 self}
    any [ return' (result:int)-> {[%#sseq41] result = Seq.length self} (! return' {result}) ] 
  
  type t_Ghost'1  =
    { t_Ghost__0'1: int }
  
  predicate inv'7 (_1 : int)
  
  axiom inv_axiom'7 [@rewrite] : forall x : int [inv'7 x] . inv'7 x = true
  
  function inner_logic'1 (self : t_Ghost'1) : int
  
  predicate invariant'3 (self : t_Ghost'1) =
    [%#sghost69] inv'7 (inner_logic'1 self)
  
  predicate inv'6 (_1 : t_Ghost'1)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Ghost'1 [inv'6 x] . inv'6 x
  = (invariant'3 x
  /\ match x with
    | {t_Ghost__0'1 = a_0} -> true
    end)
  
  let rec new'1 (value:Int128.t) (return'  (ret:t_Ghost'1))= any
    [ return' (result:t_Ghost'1)-> {[%#sint42] inv'6 result}
      {[%#sint43] inner_logic'1 result = Int128.to_int value}
      (! return' {result}) ]
  
  
  let rec into_inner'0 (self:t_Ghost'1) (return'  (ret:int))= {[@expl:into_inner 'self' type invariant] [%#sghost44] inv'6 self}
    any
    [ return' (result:int)-> {[%#sghost45] inv'7 result}
      {[%#sghost46] result = inner_logic'1 self}
      (! return' {result}) ]
  
  
  type t_Option'0  =
    | C_None'1
    | C_Some'0 Int32.t
  
  predicate inv'8 (_1 : t_Option'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Option'0 [inv'8 x] . inv'8 x = true
  
  let rec get_ghost'0 (self:Seq.seq Int32.t) (index:int) (return'  (ret:t_Option'0))= {[@expl:get_ghost 'self' type invariant] [%#sseq47] inv'5 self}
    any
    [ return' (result:t_Option'0)-> {[%#sseq48] inv'8 result}
      {[%#sseq49] match get'0 self index with
        | C_None'0 -> result = C_None'1
        | C_Some'2 v -> result = C_Some'0 v
        end}
      (! return' {result}) ]
  
  
  type t_Option'1  =
    | C_None'2
    | C_Some'1 (MutBorrow.t Int32.t)
  
  predicate inv'9 (_1 : t_Option'1)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Option'1 [inv'9 x] . inv'9 x = true
  
  let rec get_mut_ghost'0 (self:MutBorrow.t (Seq.seq Int32.t)) (index:int) (return'  (ret:t_Option'1))= {[@expl:get_mut_ghost 'self' type invariant] [%#sseq50] inv'2 self}
    any
    [ return' (result:t_Option'1)-> {[%#sseq51] inv'9 result}
      {[%#sseq52] match result with
        | C_None'2 -> get'0 self.current index = C_None'0 /\ self.current = self.final
        | C_Some'1 r -> get'0 self.current index = C_Some'2 (r.current) /\ r.final = Seq.get self.final index
        end}
      {[%#sseq53] forall i : int . i <> index  -> get'0 self.current i = get'0 self.final i}
      {[%#sseq54] Seq.length self.current = Seq.length self.final}
      (! return' {result}) ]
  
  
  predicate resolve'3 (self : MutBorrow.t Int32.t) =
    [%#sresolve67] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t Int32.t) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'1) (ret  (field_0:MutBorrow.t Int32.t))= any
    [ good (field_0:MutBorrow.t Int32.t)-> {C_Some'1 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : MutBorrow.t Int32.t [C_Some'1 field_0 : t_Option'1] . C_Some'1 field_0 <> input}
      (! {false}
      any) ]
  
  
  predicate inv'10 (_1 : t_Option'2)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_Option'2 [inv'10 x] . inv'10 x = true
  
  let rec pop_back_ghost'0 (self:MutBorrow.t (Seq.seq Int32.t)) (return'  (ret:t_Option'2))= {[@expl:pop_back_ghost 'self' type invariant] [%#sseq55] inv'2 self}
    any
    [ return' (result:t_Option'2)-> {[%#sseq56] inv'10 result}
      {[%#sseq57] match result with
        | C_None'0 -> self.current = (Seq.empty : Seq.seq Int32.t) /\ self.current = self.final
        | C_Some'2 r -> self.current = Seq.snoc self.final r
        end}
      (! return' {result}) ]
  
  
  type t_Ghost'2  =
    { t_Ghost__0'2: () }
  
  predicate inv'11 (_1 : ())
  
  axiom inv_axiom'11 [@rewrite] : forall x : () [inv'11 x] . inv'11 x = true
  
  function inner_logic'2 (self : t_Ghost'2) : ()
  
  predicate invariant'4 (self : t_Ghost'2) =
    [%#sghost69] inv'11 (inner_logic'2 self)
  
  predicate inv'12 (_1 : t_Ghost'2)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_Ghost'2 [inv'12 x] . inv'12 x
  = (invariant'4 x
  /\ match x with
    | {t_Ghost__0'2 = a_0} -> true
    end)
  
  let rec new'2 (x:()) (return'  (ret:t_Ghost'2))= {[@expl:new 'x' type invariant] [%#sghost58] inv'11 x}
    any
    [ return' (result:t_Ghost'2)-> {[%#sghost59] inv'12 result}
      {[%#sghost60] inner_logic'2 result = x}
      (! return' {result}) ]
  
  
  function push_front'0 [@inline:trivial] (self : Seq.seq Int32.t) (x : Int32.t) : Seq.seq Int32.t =
    [%#sseq68] Seq.cons x self
  
  let rec push_front_ghost'0 (self:MutBorrow.t (Seq.seq Int32.t)) (x:Int32.t) (return'  (ret:()))= {[@expl:push_front_ghost 'self' type invariant] [%#sseq61] inv'2 self}
    {[@expl:push_front_ghost 'x' type invariant] [%#sseq62] inv'3 x}
    any [ return' (result:())-> {[%#sseq63] self.final = push_front'0 self.current x} (! return' {result}) ] 
  
  let rec pop_front_ghost'0 (self:MutBorrow.t (Seq.seq Int32.t)) (return'  (ret:t_Option'2))= {[@expl:pop_front_ghost 'self' type invariant] [%#sseq64] inv'2 self}
    any
    [ return' (result:t_Option'2)-> {[%#sseq65] inv'10 result}
      {[%#sseq66] match result with
        | C_None'0 -> self.current = (Seq.empty : Seq.seq Int32.t) /\ self.current = self.final
        | C_Some'2 r -> self.current = push_front'0 self.final r
        end}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_vec'0[#"ghost_vec.rs" 4 0 4 18] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 (fun (_ret':t_Ghost'0) ->  [ &v <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec0] forall i : int . get'0 (inner_logic'0 v) i = C_None'0} s1
      | s1 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_9 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_9} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_7 <- _ret' ] 
             [ &_8 <- { _8 with current = _ret'.final } ] 
            s1)
      | s1 = push_back_ghost'0 {_7} {[%#sghost_vec1] (21 : Int32.t)} (fun (_ret':()) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec2] Seq.get (inner_logic'0 v) 0 = (21 : Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec3] Seq.length (inner_logic'0 v) = 1} s3
      | s3 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_17 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s4)
      | s4 = deref_mut'0 {_17} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_16 <- _ret' ] s5)
      | s5 = bb4 ]
    
    | bb4 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_16.current} {MutBorrow.get_id _16}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_15 <- _ret' ] 
             [ &_16 <- { _16 with current = _ret'.final } ] 
            s1)
      | s1 = push_back_ghost'0 {_15} {[%#sghost_vec4] (10 : Int32.t)} (fun (_ret':()) ->  [ &_14 <- _ret' ] s2)
      | s2 = bb5 ]
    
    | bb5 = s0
      [ s0 = -{resolve'0 _16}- s1
      | s1 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_21 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_21} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_20 <- _ret' ] s3)
      | s3 = bb6 ]
    
    | bb6 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_20.current} {MutBorrow.get_id _20}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_19 <- _ret' ] 
             [ &_20 <- { _20 with current = _ret'.final } ] 
            s1)
      | s1 = push_back_ghost'0 {_19} {[%#sghost_vec5] (30 : Int32.t)} (fun (_ret':()) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0
      [ s0 = -{resolve'0 _20}- s1 | s1 = deref'0 {v} (fun (_ret':Seq.seq Int32.t) ->  [ &_24 <- _ret' ] s2) | s2 = bb8 ]
    
    | bb8 = s0 [ s0 = len_ghost'0 {_24} (fun (_ret':int) ->  [ &len <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec6] len = 3} s1
      | s1 = {[@expl:assertion] [%#sghost_vec7] Seq.get (inner_logic'0 v) 0 = (21 : Int32.t)
        /\ Seq.get (inner_logic'0 v) 1 = (10 : Int32.t) /\ Seq.get (inner_logic'0 v) 2 = (30 : Int32.t)}
        s2
      | s2 = deref'0 {v} (fun (_ret':Seq.seq Int32.t) ->  [ &_32 <- _ret' ] s3)
      | s3 = bb10 ]
    
    | bb10 = s0
      [ s0 = new'1 {[%#sghost_vec8] (1 : Int128.t)} (fun (_ret':t_Ghost'1) ->  [ &_35 <- _ret' ] s1) | s1 = bb11 ]
    
    | bb11 = s0 [ s0 = into_inner'0 {_35} (fun (_ret':int) ->  [ &_34 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0 [ s0 = get_ghost'0 {_32} {_34} (fun (_ret':t_Option'0) ->  [ &get1 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0 [ s0 = deref'0 {v} (fun (_ret':Seq.seq Int32.t) ->  [ &_38 <- _ret' ] s1) | s1 = bb14 ] 
    | bb14 = s0
      [ s0 = new'1 {[%#sghost_vec9] (3 : Int128.t)} (fun (_ret':t_Ghost'1) ->  [ &_41 <- _ret' ] s1) | s1 = bb15 ]
    
    | bb15 = s0 [ s0 = into_inner'0 {_41} (fun (_ret':int) ->  [ &_40 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0 [ s0 = get_ghost'0 {_38} {_40} (fun (_ret':t_Option'0) ->  [ &get2 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec10] get1 = C_Some'0 (10 : Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec11] get2 = C_None'1} s2
      | s2 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_50 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s3)
      | s3 = deref_mut'0 {_50} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_49 <- _ret' ] s4)
      | s4 = bb18 ]
    
    | bb18 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_49.current} {MutBorrow.get_id _49}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_48 <- _ret' ] 
             [ &_49 <- { _49 with current = _ret'.final } ] 
            s1)
      | s1 = new'1 {[%#sghost_vec12] (0 : Int128.t)} (fun (_ret':t_Ghost'1) ->  [ &_52 <- _ret' ] s2)
      | s2 = bb19 ]
    
    | bb19 = s0 [ s0 = into_inner'0 {_52} (fun (_ret':int) ->  [ &_51 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0 [ s0 = get_mut_ghost'0 {_48} {_51} (fun (_ret':t_Option'1) ->  [ &_47 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = any [ br0 -> {_47 = C_None'2} (! bb24) | br1 (x0:MutBorrow.t Int32.t)-> {_47 = C_Some'1 x0} (! bb22) ] 
    | bb24 = s0
      [ s0 = -{match _47 with
          | C_Some'1 x'0 -> resolve'1 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _49}- s2
      | s2 = bb25 ]
    
    | bb22 = bb23
    | bb23 = s0
      [ s0 = v_Some'0 {_47} (fun (r0'0:MutBorrow.t Int32.t) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#sghost_vec13] (42 : Int32.t)) } ] s2
      | s2 = -{resolve'1 x}- s3
      | s3 = -{resolve'0 _49}- s4
      | s4 = bb25 ]
    
    | bb25 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec14] Seq.get (inner_logic'0 v) 0 = (42 : Int32.t)} s1
      | s1 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_60 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_60} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_59 <- _ret' ] s3)
      | s3 = bb26 ]
    
    | bb26 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_59.current} {MutBorrow.get_id _59}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_58 <- _ret' ] 
             [ &_59 <- { _59 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_58} (fun (_ret':t_Option'2) ->  [ &pop1 <- _ret' ] s2)
      | s2 = bb27 ]
    
    | bb27 = s0
      [ s0 = -{resolve'0 _59}- s1
      | s1 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_64 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_64} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_63 <- _ret' ] s3)
      | s3 = bb28 ]
    
    | bb28 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_63.current} {MutBorrow.get_id _63}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_62 <- _ret' ] 
             [ &_63 <- { _63 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_62} (fun (_ret':t_Option'2) ->  [ &pop2 <- _ret' ] s2)
      | s2 = bb29 ]
    
    | bb29 = s0
      [ s0 = -{resolve'0 _63}- s1
      | s1 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_68 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_68} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_67 <- _ret' ] s3)
      | s3 = bb30 ]
    
    | bb30 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_67.current} {MutBorrow.get_id _67}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_66 <- _ret' ] 
             [ &_67 <- { _67 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_66} (fun (_ret':t_Option'2) ->  [ &pop3 <- _ret' ] s2)
      | s2 = bb31 ]
    
    | bb31 = s0
      [ s0 = -{resolve'0 _67}- s1
      | s1 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_72 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_72} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_71 <- _ret' ] s3)
      | s3 = bb32 ]
    
    | bb32 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_71.current} {MutBorrow.get_id _71}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_70 <- _ret' ] 
             [ &_71 <- { _71 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_70} (fun (_ret':t_Option'2) ->  [ &pop4 <- _ret' ] s2)
      | s2 = bb33 ]
    
    | bb33 = s0
      [ s0 = -{resolve'0 _71}- s1
      | s1 = {inv'0 v}
        MutBorrow.borrow_mut <t_Ghost'0> {v}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_76 <- _ret' ] -{inv'0 _ret'.final}-  [ &v <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_76} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_75 <- _ret' ] s3)
      | s3 = bb34 ]
    
    | bb34 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_75.current} {MutBorrow.get_id _75}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_74 <- _ret' ] 
             [ &_75 <- { _75 with current = _ret'.final } ] 
            s1)
      | s1 = pop_back_ghost'0 {_74} (fun (_ret':t_Option'2) ->  [ &pop5 <- _ret' ] s2)
      | s2 = bb35 ]
    
    | bb35 = s0
      [ s0 = -{resolve'0 _75}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec15] pop1 = C_Some'2 (30 : Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec16] pop2 = C_Some'2 (10 : Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec17] pop3 = C_Some'2 (42 : Int32.t)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec18] pop4 = C_None'0} s5
      | s5 = {[@expl:assertion] [%#sghost_vec19] pop5 = C_None'0} s6
      | s6 = new'2 {_5} (fun (_ret':t_Ghost'2) ->  [ &_4 <- _ret' ] s7)
      | s7 = bb36 ]
    
    | bb36 = s0 [ s0 = new'0 (fun (_ret':t_Ghost'0) ->  [ &v1 <- _ret' ] s1) | s1 = bb37 ] 
    | bb37 = s0
      [ s0 = {inv'0 v1}
        MutBorrow.borrow_mut <t_Ghost'0> {v1}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_93 <- _ret' ] -{inv'0 _ret'.final}-  [ &v1 <- _ret'.final ] s1)
      | s1 = deref_mut'0 {_93} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_92 <- _ret' ] s2)
      | s2 = bb38 ]
    
    | bb38 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_92.current} {MutBorrow.get_id _92}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_91 <- _ret' ] 
             [ &_92 <- { _92 with current = _ret'.final } ] 
            s1)
      | s1 = push_front_ghost'0 {_91} {[%#sghost_vec20] (1 : Int32.t)} (fun (_ret':()) ->  [ &_90 <- _ret' ] s2)
      | s2 = bb39 ]
    
    | bb39 = s0
      [ s0 = -{resolve'0 _92}- s1
      | s1 = {inv'0 v1}
        MutBorrow.borrow_mut <t_Ghost'0> {v1}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_97 <- _ret' ] -{inv'0 _ret'.final}-  [ &v1 <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_97} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_96 <- _ret' ] s3)
      | s3 = bb40 ]
    
    | bb40 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_96.current} {MutBorrow.get_id _96}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_95 <- _ret' ] 
             [ &_96 <- { _96 with current = _ret'.final } ] 
            s1)
      | s1 = push_front_ghost'0 {_95} {[%#sghost_vec21] (2 : Int32.t)} (fun (_ret':()) ->  [ &_94 <- _ret' ] s2)
      | s2 = bb41 ]
    
    | bb41 = s0
      [ s0 = -{resolve'0 _96}- s1
      | s1 = {inv'0 v1}
        MutBorrow.borrow_mut <t_Ghost'0> {v1}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_101 <- _ret' ] -{inv'0 _ret'.final}-  [ &v1 <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_101} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_100 <- _ret' ] s3)
      | s3 = bb42 ]
    
    | bb42 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_100.current} {MutBorrow.get_id _100}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_99 <- _ret' ] 
             [ &_100 <- { _100 with current = _ret'.final } ] 
            s1)
      | s1 = push_front_ghost'0 {_99} {[%#sghost_vec22] (3 : Int32.t)} (fun (_ret':()) ->  [ &_98 <- _ret' ] s2)
      | s2 = bb43 ]
    
    | bb43 = s0
      [ s0 = -{resolve'0 _100}- s1
      | s1 = {inv'0 v1}
        MutBorrow.borrow_mut <t_Ghost'0> {v1}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_105 <- _ret' ] -{inv'0 _ret'.final}-  [ &v1 <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_105} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_104 <- _ret' ] s3)
      | s3 = bb44 ]
    
    | bb44 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_104.current} {MutBorrow.get_id _104}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_103 <- _ret' ] 
             [ &_104 <- { _104 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_103} (fun (_ret':t_Option'2) ->  [ &pop11 <- _ret' ] s2)
      | s2 = bb45 ]
    
    | bb45 = s0
      [ s0 = -{resolve'0 _104}- s1
      | s1 = {inv'0 v1}
        MutBorrow.borrow_mut <t_Ghost'0> {v1}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_109 <- _ret' ] -{inv'0 _ret'.final}-  [ &v1 <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_109} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_108 <- _ret' ] s3)
      | s3 = bb46 ]
    
    | bb46 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_108.current} {MutBorrow.get_id _108}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_107 <- _ret' ] 
             [ &_108 <- { _108 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_107} (fun (_ret':t_Option'2) ->  [ &pop21 <- _ret' ] s2)
      | s2 = bb47 ]
    
    | bb47 = s0
      [ s0 = -{resolve'0 _108}- s1
      | s1 = {inv'0 v1}
        MutBorrow.borrow_mut <t_Ghost'0> {v1}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_113 <- _ret' ] -{inv'0 _ret'.final}-  [ &v1 <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_113} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_112 <- _ret' ] s3)
      | s3 = bb48 ]
    
    | bb48 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_112.current} {MutBorrow.get_id _112}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_111 <- _ret' ] 
             [ &_112 <- { _112 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_111} (fun (_ret':t_Option'2) ->  [ &pop31 <- _ret' ] s2)
      | s2 = bb49 ]
    
    | bb49 = s0
      [ s0 = -{resolve'0 _112}- s1
      | s1 = {inv'0 v1}
        MutBorrow.borrow_mut <t_Ghost'0> {v1}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_117 <- _ret' ] -{inv'0 _ret'.final}-  [ &v1 <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_117} (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->  [ &_116 <- _ret' ] s3)
      | s3 = bb50 ]
    
    | bb50 = s0
      [ s0 = MutBorrow.borrow_final <Seq.seq Int32.t> {_116.current} {MutBorrow.get_id _116}
          (fun (_ret':MutBorrow.t (Seq.seq Int32.t)) ->
             [ &_115 <- _ret' ] 
             [ &_116 <- { _116 with current = _ret'.final } ] 
            s1)
      | s1 = pop_front_ghost'0 {_115} (fun (_ret':t_Option'2) ->  [ &pop41 <- _ret' ] s2)
      | s2 = bb51 ]
    
    | bb51 = s0
      [ s0 = -{resolve'0 _116}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec23] pop11 = C_Some'2 (3 : Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec24] pop21 = C_Some'2 (2 : Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec25] pop31 = C_Some'2 (1 : Int32.t)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec26] pop41 = C_None'0} s5
      | s5 = new'2 {_89} (fun (_ret':t_Ghost'2) ->  [ &_88 <- _ret' ] s6)
      | s6 = bb52 ]
    
    | bb52 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & v : t_Ghost'0 = Any.any_l ()
    | & _4 : t_Ghost'2 = Any.any_l ()
    | & _5 : () = Any.any_l ()
    | & _6 : () = Any.any_l ()
    | & _7 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _8 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _9 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _14 : () = Any.any_l ()
    | & _15 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _16 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _17 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _18 : () = Any.any_l ()
    | & _19 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _20 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _21 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & len : int = Any.any_l ()
    | & _24 : Seq.seq Int32.t = Any.any_l ()
    | & get1 : t_Option'0 = Any.any_l ()
    | & _32 : Seq.seq Int32.t = Any.any_l ()
    | & _34 : int = Any.any_l ()
    | & _35 : t_Ghost'1 = Any.any_l ()
    | & get2 : t_Option'0 = Any.any_l ()
    | & _38 : Seq.seq Int32.t = Any.any_l ()
    | & _40 : int = Any.any_l ()
    | & _41 : t_Ghost'1 = Any.any_l ()
    | & _47 : t_Option'1 = Any.any_l ()
    | & _48 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _49 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _50 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _51 : int = Any.any_l ()
    | & _52 : t_Ghost'1 = Any.any_l ()
    | & x : MutBorrow.t Int32.t = Any.any_l ()
    | & pop1 : t_Option'2 = Any.any_l ()
    | & _58 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _59 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _60 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop2 : t_Option'2 = Any.any_l ()
    | & _62 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _63 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _64 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop3 : t_Option'2 = Any.any_l ()
    | & _66 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _67 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _68 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop4 : t_Option'2 = Any.any_l ()
    | & _70 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _71 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _72 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop5 : t_Option'2 = Any.any_l ()
    | & _74 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _75 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _76 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & v1 : t_Ghost'0 = Any.any_l ()
    | & _88 : t_Ghost'2 = Any.any_l ()
    | & _89 : () = Any.any_l ()
    | & _90 : () = Any.any_l ()
    | & _91 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _92 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _93 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _94 : () = Any.any_l ()
    | & _95 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _96 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _97 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _98 : () = Any.any_l ()
    | & _99 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _100 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _101 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop11 : t_Option'2 = Any.any_l ()
    | & _103 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _104 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _105 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop21 : t_Option'2 = Any.any_l ()
    | & _107 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _108 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _109 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop31 : t_Option'2 = Any.any_l ()
    | & _111 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _112 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _113 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & pop41 : t_Option'2 = Any.any_l ()
    | & _115 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _116 : MutBorrow.t (Seq.seq Int32.t) = Any.any_l ()
    | & _117 : MutBorrow.t t_Ghost'0 = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
