module M_typing__ghost_enter_ghost [#"typing.rs" 14 0 14 26]
  let%span styping0 = "typing.rs" 15 32 15 33
  let%span styping1 = "typing.rs" 16 32 16 33
  let%span styping2 = "typing.rs" 17 35 17 36
  let%span styping3 = "typing.rs" 22 25 22 26
  let%span styping4 = "typing.rs" 25 18 25 30
  let%span styping5 = "typing.rs" 26 18 26 29
  let%span sghost6 = "../../../creusot-contracts/src/ghost.rs" 185 15 185 16
  let%span sghost7 = "../../../creusot-contracts/src/ghost.rs" 185 4 185 28
  let%span sghost8 = "../../../creusot-contracts/src/ghost.rs" 183 14 183 28
  let%span sghost9 = "../../../creusot-contracts/src/ghost.rs" 69 14 69 18
  let%span sghost10 = "../../../creusot-contracts/src/ghost.rs" 69 4 69 36
  let%span sghost11 = "../../../creusot-contracts/src/ghost.rs" 68 14 68 35
  let%span sghost12 = "../../../creusot-contracts/src/ghost.rs" 85 22 85 26
  let%span sghost13 = "../../../creusot-contracts/src/ghost.rs" 85 4 85 48
  let%span sghost14 = "../../../creusot-contracts/src/ghost.rs" 84 14 84 36
  let%span sghost15 = "../../../creusot-contracts/src/ghost.rs" 99 4 99 12
  let%span sresolve16 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sboxed17 = "../../../creusot-contracts/src/std/boxed.rs" 22 8 22 22
  let%span styping18 = "typing.rs" 10 20 10 27
  
  use creusot.int.Int32
  
  type t_NonCopy'0  =
    { t_NonCopy__0'0: Int32.t }
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: t_NonCopy'0 }
  
  predicate inv'0 (_1 : t_NonCopy'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonCopy'0 [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:t_NonCopy'0) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost6] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost7] inv'1 result}
      {[%#sghost8] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
  
  
  predicate inv'2 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_GhostBox'0 [inv'2 x] . inv'2 x = true
  
  predicate inv'3 (_1 : t_NonCopy'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_NonCopy'0 [inv'3 x] . inv'3 x = true
  
  let rec deref'0 (self:t_GhostBox'0) (return'  (ret:t_NonCopy'0))= {[@expl:deref 'self' type invariant] [%#sghost9] inv'2 self}
    any
    [ return' (result:t_NonCopy'0)-> {[%#sghost10] inv'3 result}
      {[%#sghost11] self.t_GhostBox__0'0 = result}
      (! return' {result}) ]
  
  
  use creusot.prelude.MutBorrow
  
  predicate inv'4 (_1 : MutBorrow.t t_GhostBox'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t t_GhostBox'0 [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : MutBorrow.t t_NonCopy'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t t_NonCopy'0 [inv'5 x] . inv'5 x = true
  
  let rec deref_mut'0 (self:MutBorrow.t t_GhostBox'0) (return'  (ret:MutBorrow.t t_NonCopy'0))= {[@expl:deref_mut 'self' type invariant] [%#sghost12] inv'4 self}
    any
    [ return' (result:MutBorrow.t t_NonCopy'0)-> {[%#sghost13] inv'5 result}
      {[%#sghost14] result
      = MutBorrow.borrow_logic (self.current).t_GhostBox__0'0 (self.final).t_GhostBox__0'0 (MutBorrow.inherit_id (MutBorrow.get_id self) 1)}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t t_NonCopy'0) =
    [%#sresolve16] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_NonCopy'0) =
    resolve'1 _1
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  predicate inv'7 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_GhostBox'1 [inv'7 x] . inv'7 x = true
  
  let rec new'1 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:new 'x' type invariant] [%#sghost6] inv'6 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost7] inv'7 result}
      {[%#sghost8] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
  
  
  use creusot.int.Int32
  
  function view'2 [#"typing.rs" 9 4 9 33] (self : t_NonCopy'0) : int =
    [%#styping18] Int32.to_int self.t_NonCopy__0'0
  
  function view'1 (self : t_NonCopy'0) : int =
    [%#sboxed17] view'2 self
  
  function view'0 (self : t_GhostBox'0) : int =
    [%#sghost15] view'1 self.t_GhostBox__0'0
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_enter_ghost'0[#"typing.rs" 14 0 14 26] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- { t_NonCopy__0'0 = ([%#styping0] (1 : Int32.t)) } ] s1
      | s1 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &g_move <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_4 <- { t_NonCopy__0'0 = ([%#styping1] (2 : Int32.t)) } ] s1
      | s1 = new'0 {_4} (fun (_ret':t_GhostBox'0) ->  [ &g_read <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 =  [ &_6 <- { t_NonCopy__0'0 = ([%#styping2] (3 : Int32.t)) } ] s1
      | s1 = new'0 {_6} (fun (_ret':t_GhostBox'0) ->  [ &g_mut <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 = deref'0 {g_read} (fun (_ret':t_NonCopy'0) ->  [ &_9 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_11 <- { t_NonCopy__0'0 = ([%#styping3] (4 : Int32.t)) } ] s1
      | s1 = MutBorrow.borrow_mut <t_GhostBox'0> {g_mut}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_13 <- _ret' ]  [ &g_mut <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_13} (fun (_ret':MutBorrow.t t_NonCopy'0) ->  [ &_12 <- _ret' ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0
      [ s0 =  [ &_12 <- { _12 with current = _11 } ] s1
      | s1 = -{resolve'0 _12}- s2
      | s2 = new'1 {_8} (fun (_ret':t_GhostBox'1) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb6 ]
    
    | bb6 = bb7
    | bb7 = s0 [ s0 = {[@expl:assertion] [%#styping4] view'0 g_read = 2} s1 | s1 = bb8 ] 
    | bb8 = s0 [ s0 = {[@expl:assertion] [%#styping5] view'0 g_mut = 4} s1 | s1 = bb9 ] 
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & g_move : t_GhostBox'0 = Any.any_l ()
    | & _2 : t_NonCopy'0 = Any.any_l ()
    | & g_read : t_GhostBox'0 = Any.any_l ()
    | & _4 : t_NonCopy'0 = Any.any_l ()
    | & g_mut : t_GhostBox'0 = Any.any_l ()
    | & _6 : t_NonCopy'0 = Any.any_l ()
    | & _7 : t_GhostBox'1 = Any.any_l ()
    | & _8 : () = Any.any_l ()
    | & _9 : t_NonCopy'0 = Any.any_l ()
    | & _11 : t_NonCopy'0 = Any.any_l ()
    | & _12 : MutBorrow.t t_NonCopy'0 = Any.any_l ()
    | & _13 : MutBorrow.t t_GhostBox'0 = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_typing__copy_enter_ghost [#"typing.rs" 29 0 29 25]
  let%span styping0 = "typing.rs" 30 12 30 16
  let%span styping1 = "typing.rs" 32 16 32 17
  let%span styping2 = "typing.rs" 32 19 32 21
  let%span styping3 = "typing.rs" 39 18 39 25
  let%span styping4 = "typing.rs" 40 18 40 47
  let%span sghost5 = "../../../creusot-contracts/src/ghost.rs" 185 15 185 16
  let%span sghost6 = "../../../creusot-contracts/src/ghost.rs" 185 4 185 28
  let%span sghost7 = "../../../creusot-contracts/src/ghost.rs" 183 14 183 28
  
  use creusot.int.Int32
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: () }
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:()) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost5] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost6] inv'1 result}
      {[%#sghost7] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
  
  
  use creusot.int.Int32
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec copy_enter_ghost'0[#"typing.rs" 29 0 29 25] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#styping0] (2 : Int32.t) ] s1
      | s1 =  [ &pair <- (([%#styping1] (6 : Int32.t)), ([%#styping2] (42 : Int32.t))) ] s2
      | s2 =  [ &_x <- x ] s3
      | s3 =  [ &_pair <- pair ] s4
      | s4 = new'0 {_5} (fun (_ret':t_GhostBox'0) ->  [ &_4 <- _ret' ] s5)
      | s5 = bb1 ]
    
    | bb1 = bb2
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#styping3] Int32.to_int x = 2} s1
      | s1 = {[@expl:assertion] [%#styping4] Int32.to_int (let (a, _) = pair in a) = 6
        /\ Int32.to_int (let (_, a) = pair in a) = 42}
        s2
      | s2 = return' {_0} ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & x : Int32.t = Any.any_l ()
    | & pair : (Int32.t, Int32.t) = Any.any_l ()
    | & _4 : t_GhostBox'0 = Any.any_l ()
    | & _5 : () = Any.any_l ()
    | & _x : Int32.t = Any.any_l ()
    | & _pair : (Int32.t, Int32.t) = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
