module M_disjoint_raw_ptr__foo [#"disjoint_raw_ptr.rs" 4 0 4 12]
  let%span sdisjoint_raw_ptr0 = "disjoint_raw_ptr.rs" 5 37 5 41
  let%span sdisjoint_raw_ptr1 = "disjoint_raw_ptr.rs" 6 33 6 37
  let%span sdisjoint_raw_ptr2 = "disjoint_raw_ptr.rs" 11 18 11 30
  let%span sdisjoint_raw_ptr3 = "disjoint_raw_ptr.rs" 12 18 12 26
  let%span sptr_own4 = "../../../creusot-contracts/src/ptr_own.rs" 59 15 59 16
  let%span sptr_own5 = "../../../creusot-contracts/src/ptr_own.rs" 59 4 59 56
  let%span sptr_own6 = "../../../creusot-contracts/src/ptr_own.rs" 58 14 58 64
  let%span sghost7 = "../../../creusot-contracts/src/ghost.rs" 85 22 85 26
  let%span sghost8 = "../../../creusot-contracts/src/ghost.rs" 85 4 85 48
  let%span sghost9 = "../../../creusot-contracts/src/ghost.rs" 84 14 84 36
  let%span sghost10 = "../../../creusot-contracts/src/ghost.rs" 69 14 69 18
  let%span sghost11 = "../../../creusot-contracts/src/ghost.rs" 69 4 69 36
  let%span sghost12 = "../../../creusot-contracts/src/ghost.rs" 68 14 68 35
  let%span sptr_own13 = "../../../creusot-contracts/src/ptr_own.rs" 143 26 143 30
  let%span sptr_own14 = "../../../creusot-contracts/src/ptr_own.rs" 143 48 143 52
  let%span sptr_own15 = "../../../creusot-contracts/src/ptr_own.rs" 140 14 140 64
  let%span sptr_own16 = "../../../creusot-contracts/src/ptr_own.rs" 141 14 141 28
  let%span sghost17 = "../../../creusot-contracts/src/ghost.rs" 185 15 185 16
  let%span sghost18 = "../../../creusot-contracts/src/ghost.rs" 185 4 185 28
  let%span sghost19 = "../../../creusot-contracts/src/ghost.rs" 183 14 183 28
  let%span sghost20 = "../../../creusot-contracts/src/ghost.rs" 224 4 224 12
  let%span sresolve21 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sptr_own22 = "../../../creusot-contracts/src/ptr_own.rs" 51 8 51 35
  let%span sinvariant23 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sptr24 = "../../../creusot-contracts/src/std/ptr.rs" 80 14 80 48
  let%span sptr25 = "../../../creusot-contracts/src/std/ptr.rs" 82 8 82 30
  let%span sinvariant26 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sboxed27 = "../../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.Int32
  
  predicate inv'4 (_1 : Int32.t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Int32.t [inv'4 x] . inv'4 x = true
  
  use creusot.prelude.Opaque
  
  type t_PtrOwn'0  =
    { t_PtrOwn__ptr'0: Opaque.ptr; t_PtrOwn__val'0: Int32.t }
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: t_PtrOwn'0 }
  
  function addr_logic'0 (self : Opaque.ptr) : int
  
  function is_null_logic'0 (self : Opaque.ptr) : bool =
    [%#sptr25] addr_logic'0 self = 0
  
  axiom is_null_logic'0_spec : forall self : Opaque.ptr . [%#sptr24] is_null_logic'0 self = (addr_logic'0 self = 0)
  
  function ptr'0 (self : t_PtrOwn'0) : Opaque.ptr
  
  predicate invariant'0 (self : t_PtrOwn'0) =
    [%#sptr_own22] not is_null_logic'0 (ptr'0 self)
  
  predicate inv'1 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_PtrOwn'0 [inv'1 x] . inv'1 x
  = (invariant'0 x
  /\ match x with
    | {t_PtrOwn__ptr'0 = ptr ; t_PtrOwn__val'0 = val'} -> true
    end)
  
  predicate invariant'5 (self : t_PtrOwn'0) =
    [%#sboxed27] inv'1 self
  
  predicate inv'10 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_PtrOwn'0 [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate inv'0 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostBox'0 [inv'0 x] . inv'0 x
  = match x with
    | {t_GhostBox__0'0 = a_0} -> inv'10 a_0
    end
  
  predicate inv'5 (_1 : (Opaque.ptr, t_GhostBox'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : (Opaque.ptr, t_GhostBox'0) [inv'5 x] . inv'5 x
  = (let (x0, x1) = x in inv'0 x1)
  
  function inner_logic'0 (self : t_GhostBox'0) : t_PtrOwn'0 =
    [%#sghost20] self.t_GhostBox__0'0
  
  function val'0 (self : t_PtrOwn'0) : Int32.t
  
  let rec new'0 (v:Int32.t) (return'  (ret:(Opaque.ptr, t_GhostBox'0)))= {[@expl:new 'v' type invariant] [%#sptr_own4] inv'4 v}
    any
    [ return' (result:(Opaque.ptr, t_GhostBox'0))-> {[%#sptr_own5] inv'5 result}
      {[%#sptr_own6] ptr'0 (inner_logic'0 (let (_, a) = result in a)) = (let (a, _) = result in a)
      /\ val'0 (inner_logic'0 (let (_, a) = result in a)) = v}
      (! return' {result}) ]
  
  
  use creusot.prelude.MutBorrow
  
  predicate invariant'1 (self : MutBorrow.t t_GhostBox'0) =
    [%#sinvariant23] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : MutBorrow.t t_GhostBox'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t t_GhostBox'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate invariant'2 (self : MutBorrow.t t_PtrOwn'0) =
    [%#sinvariant23] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'3 (_1 : MutBorrow.t t_PtrOwn'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t t_PtrOwn'0 [inv'3 x] . inv'3 x = invariant'2 x
  
  let rec deref_mut'0 (self:MutBorrow.t t_GhostBox'0) (return'  (ret:MutBorrow.t t_PtrOwn'0))= {[@expl:deref_mut 'self' type invariant] [%#sghost7] inv'2 self}
    any
    [ return' (result:MutBorrow.t t_PtrOwn'0)-> {[%#sghost8] inv'3 result}
      {[%#sghost9] result
      = MutBorrow.borrow_logic (self.current).t_GhostBox__0'0 (self.final).t_GhostBox__0'0 (MutBorrow.inherit_id (MutBorrow.get_id self) 1)}
      (! return' {result}) ]
  
  
  predicate invariant'3 (self : t_GhostBox'0) =
    [%#sinvariant26] inv'0 self
  
  predicate inv'6 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_GhostBox'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate invariant'4 (self : t_PtrOwn'0) =
    [%#sinvariant26] inv'1 self
  
  predicate inv'7 (_1 : t_PtrOwn'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_PtrOwn'0 [inv'7 x] . inv'7 x = invariant'4 x
  
  let rec deref'0 (self:t_GhostBox'0) (return'  (ret:t_PtrOwn'0))= {[@expl:deref 'self' type invariant] [%#sghost10] inv'6 self}
    any
    [ return' (result:t_PtrOwn'0)-> {[%#sghost11] inv'7 result}
      {[%#sghost12] self.t_GhostBox__0'0 = result}
      (! return' {result}) ]
  
  
  let rec disjoint_lemma'0 (own1:MutBorrow.t t_PtrOwn'0) (own2:t_PtrOwn'0) (return'  (ret:()))= {[@expl:disjoint_lemma 'own1' type invariant] [%#sptr_own13] inv'3 own1}
    {[@expl:disjoint_lemma 'own2' type invariant] [%#sptr_own14] inv'7 own2}
    any
    [ return' (result:())-> {[%#sptr_own15] addr_logic'0 (ptr'0 own1.current) <> addr_logic'0 (ptr'0 own2)}
      {[%#sptr_own16] own1.current = own1.final}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t t_GhostBox'0) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_GhostBox'0) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_PtrOwn'0) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_PtrOwn'0) =
    resolve'3 _1
  
  predicate inv'8 (_1 : ())
  
  axiom inv_axiom'8 [@rewrite] : forall x : () [inv'8 x] . inv'8 x = true
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'9 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_GhostBox'1 [inv'9 x] . inv'9 x = true
  
  let rec new'1 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:new 'x' type invariant] [%#sghost17] inv'8 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost18] inv'9 result}
      {[%#sghost19] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
  
  
  use creusot.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0[#"disjoint_raw_ptr.rs" 4 0 4 12] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sdisjoint_raw_ptr0] (1 : Int32.t)}
          (fun (_ret':(Opaque.ptr, t_GhostBox'0)) ->  [ &_3 <- _ret' ] s1)
      | s1 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &p1 <- let (r'0, _) = _3 in r'0 ] s1 | s1 =  [ &own1 <- let (_, r'1) = _3 in r'1 ] s2 | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = new'0 {[%#sdisjoint_raw_ptr1] (1 : Int32.t)}
          (fun (_ret':(Opaque.ptr, t_GhostBox'0)) ->  [ &_6 <- _ret' ] s1)
      | s1 = bb3 ]
    
    | bb3 = s0
      [ s0 =  [ &p2 <- let (r'0, _) = _6 in r'0 ] s1 | s1 =  [ &own2 <- let (_, r'1) = _6 in r'1 ] s2 | s2 = bb4 ]
    
    | bb4 = s0
      [ s0 = {inv'0 own1}
        MutBorrow.borrow_mut <t_GhostBox'0> {own1}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->
             [ &_13 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &own1 <- _ret'.final ] 
            s1)
      | s1 = {inv'0 _13.current}
        MutBorrow.borrow_final <t_GhostBox'0> {_13.current} {MutBorrow.get_id _13}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->
             [ &_12 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &_13 <- { _13 with current = _ret'.final } ] 
            s2)
      | s2 = deref_mut'0 {_12} (fun (_ret':MutBorrow.t t_PtrOwn'0) ->  [ &_11 <- _ret' ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0
      [ s0 = {inv'1 _11.current}
        MutBorrow.borrow_final <t_PtrOwn'0> {_11.current} {MutBorrow.get_id _11}
          (fun (_ret':MutBorrow.t t_PtrOwn'0) ->
             [ &_10 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_11 <- { _11 with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_17 <- own2 ] s2
      | s2 = deref'0 {_17} (fun (_ret':t_PtrOwn'0) ->  [ &_15 <- _ret' ] s3)
      | s3 = bb6 ]
    
    | bb6 = s0 [ s0 = disjoint_lemma'0 {_10} {_15} (fun (_ret':()) ->  [ &_9 <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'2 _13} s1
      | s1 = -{resolve'0 _13}- s2
      | s2 = {[@expl:type invariant] inv'3 _11} s3
      | s3 = -{resolve'1 _11}- s4
      | s4 = new'1 {_8} (fun (_ret':t_GhostBox'1) ->  [ &_7 <- _ret' ] s5)
      | s5 = bb8 ]
    
    | bb8 = bb9
    | bb9 = s0 [ s0 = {[@expl:assertion] [%#sdisjoint_raw_ptr2] own1 <> own2} s1 | s1 = bb10 ] 
    | bb10 = s0 [ s0 = {[@expl:assertion] [%#sdisjoint_raw_ptr3] p1 <> p2} s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & p1 : Opaque.ptr = Any.any_l ()
    | & own1 : t_GhostBox'0 = Any.any_l ()
    | & _3 : (Opaque.ptr, t_GhostBox'0) = Any.any_l ()
    | & p2 : Opaque.ptr = Any.any_l ()
    | & own2 : t_GhostBox'0 = Any.any_l ()
    | & _6 : (Opaque.ptr, t_GhostBox'0) = Any.any_l ()
    | & _7 : t_GhostBox'1 = Any.any_l ()
    | & _8 : () = Any.any_l ()
    | & _9 : () = Any.any_l ()
    | & _10 : MutBorrow.t t_PtrOwn'0 = Any.any_l ()
    | & _11 : MutBorrow.t t_PtrOwn'0 = Any.any_l ()
    | & _12 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & _13 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & _15 : t_PtrOwn'0 = Any.any_l ()
    | & _17 : t_GhostBox'0 = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
