module M_integers__in_ghost_block [#"integers.rs" 4 0 4 23]
  let%span sintegers0 = "integers.rs" 5 19 5 23
  let%span sintegers1 = "integers.rs" 7 16 7 20
  let%span sintegers2 = "integers.rs" 9 20 9 24
  let%span sintegers3 = "integers.rs" 10 22 10 28
  let%span sintegers4 = "integers.rs" 14 31 14 35
  let%span sintegers5 = "integers.rs" 14 37 14 42
  let%span sintegers6 = "integers.rs" 14 44 14 48
  let%span sintegers7 = "integers.rs" 15 22 15 28
  let%span sint8 = "../../../creusot-contracts/src/logic/int.rs" 59 4 59 42
  let%span sint9 = "../../../creusot-contracts/src/logic/int.rs" 56 14 56 31
  let%span sghost10 = "../../../creusot-contracts/src/ghost.rs" 216 22 216 26
  let%span sghost11 = "../../../creusot-contracts/src/ghost.rs" 216 4 216 32
  let%span sghost12 = "../../../creusot-contracts/src/ghost.rs" 214 14 214 29
  let%span sghost13 = "../../../creusot-contracts/src/ghost.rs" 191 15 191 16
  let%span sghost14 = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost15 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sghost16 = "../../../creusot-contracts/src/ghost.rs" 67 14 67 18
  let%span sghost17 = "../../../creusot-contracts/src/ghost.rs" 67 4 67 36
  let%span sghost18 = "../../../creusot-contracts/src/ghost.rs" 66 14 66 46
  let%span sint19 = "../../../creusot-contracts/src/logic/int.rs" 247 14 247 36
  let%span sint20 = "../../../creusot-contracts/src/logic/int.rs" 269 14 269 36
  let%span sintegers21 = "integers.rs" 20 10 20 29
  let%span sghost22 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sinvariant23 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  use creusot.int.Int128
  use mach.int.Int
  use creusot.prelude.Any
  
  type t_Ghost'0  =
    { t_Ghost__0'0: int }
  
  predicate inv'1 (_1 : int)
  
  axiom inv_axiom'1 [@rewrite] : forall x : int [inv'1 x] . inv'1 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : int
  
  predicate invariant'0 (self : t_Ghost'0) =
    [%#sghost22] inv'1 (inner_logic'0 self)
  
  predicate inv'0 (_1 : t_Ghost'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec new'0 (value:Int128.t) (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sint8] inv'0 result}
      {[%#sint9] inner_logic'0 result = Int128.to_int value}
      (! return' {result}) ]
  
  
  let rec into_inner'0 (self:t_Ghost'0) (return'  (ret:int))= {[@expl:into_inner 'self' type invariant] [%#sghost10] inv'0 self}
    any
    [ return' (result:int)-> {[%#sghost11] inv'1 result}
      {[%#sghost12] result = inner_logic'0 self}
      (! return' {result}) ]
  
  
  let rec new'1 (x:int) (return'  (ret:t_Ghost'0))= {[@expl:new 'x' type invariant] [%#sghost13] inv'1 x}
    any
    [ return' (result:t_Ghost'0)-> {[%#sghost14] inv'0 result}
      {[%#sghost15] inner_logic'0 result = x}
      (! return' {result}) ]
  
  
  predicate invariant'1 (self : t_Ghost'0) =
    [%#sinvariant23] inv'0 self
  
  predicate inv'2 (_1 : t_Ghost'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Ghost'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  predicate inv'3 (_1 : int)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int [inv'3 x] . inv'3 x = true
  
  let rec deref'0 (self:t_Ghost'0) (return'  (ret:int))= {[@expl:deref 'self' type invariant] [%#sghost16] inv'2 self}
    any
    [ return' (result:int)-> {[%#sghost17] inv'3 result}
      {[%#sghost18] inner_logic'0 self = result}
      (! return' {result}) ]
  
  
  let rec add'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint19] result = self + other} (! return' {result}) ]
  
  
  let rec mul'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint20] result = self * other} (! return' {result}) ]
  
  
  type t_Ghost'1  =
    { t_Ghost__0'1: () }
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  function inner_logic'1 (self : t_Ghost'1) : ()
  
  predicate invariant'2 (self : t_Ghost'1) =
    [%#sghost22] inv'4 (inner_logic'1 self)
  
  predicate inv'5 (_1 : t_Ghost'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Ghost'1 [inv'5 x] . inv'5 x
  = (invariant'2 x
  /\ match x with
    | {t_Ghost__0'1 = a_0} -> true
    end)
  
  let rec new'2 (x:()) (return'  (ret:t_Ghost'1))= {[@expl:new 'x' type invariant] [%#sghost13] inv'4 x}
    any
    [ return' (result:t_Ghost'1)-> {[%#sghost14] inv'5 result}
      {[%#sghost15] inner_logic'1 result = x}
      (! return' {result}) ]
  
  
  let rec ghost_function'0 (x:int) (y:int) (z:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sintegers21] result = x + Int.mod y z} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec in_ghost_block'0[#"integers.rs" 4 0 4 23] (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sintegers0] (1 : Int128.t)} (fun (_ret':t_Ghost'0) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ]
    
    | bb1 = s0 [ s0 = into_inner'0 {_3} (fun (_ret':int) ->  [ &_2 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 = new'1 {_2} (fun (_ret':t_Ghost'0) ->  [ &x <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = new'0 {[%#sintegers1] (2 : Int128.t)} (fun (_ret':t_Ghost'0) ->  [ &_7 <- _ret' ] s1) | s1 = bb4 ]
    
    | bb4 = s0 [ s0 = into_inner'0 {_7} (fun (_ret':int) ->  [ &y <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 = deref'0 {x} (fun (_ret':int) ->  [ &_10 <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0 [ s0 = add'0 {_10} {y} (fun (_ret':int) ->  [ &z <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0
      [ s0 = new'0 {[%#sintegers2] (3 : Int128.t)} (fun (_ret':t_Ghost'0) ->  [ &_16 <- _ret' ] s1) | s1 = bb8 ]
    
    | bb8 = s0 [ s0 = into_inner'0 {_16} (fun (_ret':int) ->  [ &_15 <- _ret' ] s1) | s1 = bb9 ] 
    | bb9 = s0 [ s0 = mul'0 {z} {_15} (fun (_ret':int) ->  [ &w <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0
      [ s0 = {[@expl:assertion] [%#sintegers3] w = 9} s1
      | s1 = new'2 {_5} (fun (_ret':t_Ghost'1) ->  [ &_4 <- _ret' ] s2)
      | s2 = bb11 ]
    
    | bb11 = s0
      [ s0 = new'0 {[%#sintegers4] (4 : Int128.t)} (fun (_ret':t_Ghost'0) ->  [ &_23 <- _ret' ] s1) | s1 = bb12 ]
    
    | bb12 = s0 [ s0 = into_inner'0 {_23} (fun (_ret':int) ->  [ &_22 <- _ret' ] s1) | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = new'0 {[%#sintegers5] (13 : Int128.t)} (fun (_ret':t_Ghost'0) ->  [ &_25 <- _ret' ] s1) | s1 = bb14 ]
    
    | bb14 = s0 [ s0 = into_inner'0 {_25} (fun (_ret':int) ->  [ &_24 <- _ret' ] s1) | s1 = bb15 ] 
    | bb15 = s0
      [ s0 = new'0 {[%#sintegers6] (5 : Int128.t)} (fun (_ret':t_Ghost'0) ->  [ &_27 <- _ret' ] s1) | s1 = bb16 ]
    
    | bb16 = s0 [ s0 = into_inner'0 {_27} (fun (_ret':int) ->  [ &_26 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0 [ s0 = ghost_function'0 {_22} {_24} {_26} (fun (_ret':int) ->  [ &x1 <- _ret' ] s1) | s1 = bb18 ] 
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#sintegers7] x1 = 7} s1
      | s1 = new'2 {_20} (fun (_ret':t_Ghost'1) ->  [ &_19 <- _ret' ] s2)
      | s2 = bb19 ]
    
    | bb19 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & x : t_Ghost'0 = Any.any_l ()
    | & _2 : int = Any.any_l ()
    | & _3 : t_Ghost'0 = Any.any_l ()
    | & _4 : t_Ghost'1 = Any.any_l ()
    | & _5 : () = Any.any_l ()
    | & y : int = Any.any_l ()
    | & _7 : t_Ghost'0 = Any.any_l ()
    | & z : int = Any.any_l ()
    | & _10 : int = Any.any_l ()
    | & w : int = Any.any_l ()
    | & _15 : int = Any.any_l ()
    | & _16 : t_Ghost'0 = Any.any_l ()
    | & _19 : t_Ghost'1 = Any.any_l ()
    | & _20 : () = Any.any_l ()
    | & x1 : int = Any.any_l ()
    | & _22 : int = Any.any_l ()
    | & _23 : t_Ghost'0 = Any.any_l ()
    | & _24 : int = Any.any_l ()
    | & _25 : t_Ghost'0 = Any.any_l ()
    | & _26 : int = Any.any_l ()
    | & _27 : t_Ghost'0 = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_integers__ghost_function [#"integers.rs" 21 0 21 52]
  let%span sintegers0 = "integers.rs" 20 10 20 29
  let%span sint1 = "../../../creusot-contracts/src/logic/int.rs" 291 14 291 36
  let%span sint2 = "../../../creusot-contracts/src/logic/int.rs" 247 14 247 36
  
  use mach.int.Int
  use creusot.prelude.Any
  
  let rec rem'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint1] result = Int.mod self other} (! return' {result}) ]
  
  
  let rec add'0 (self:int) (other:int) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sint2] result = self + other} (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_function'0[#"integers.rs" 21 0 21 52] (x:int) (y:int) (z:int) (return'  (ret:int))= (! bb0
    [ bb0 = s0 [ s0 = rem'0 {y} {z} (fun (_ret':int) ->  [ &_6 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = add'0 {x} {_6} (fun (_ret':int) ->  [ &_0 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : int = Any.any_l () | & x : int = x | & y : int = y | & z : int = z | & _6 : int = Any.any_l () ] 
    [ return' (result:int)-> {[@expl:ghost_function ensures] [%#sintegers0] result = x + Int.mod y z}
      (! return' {result}) ]

end
