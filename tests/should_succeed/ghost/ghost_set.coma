module M_ghost_set__ghost_map [#"ghost_set.rs" 4 0 4 18]
  let%span sghost_set0 = "ghost_set.rs" 7 22 7 53
  let%span sghost_set1 = "ghost_set.rs" 8 25 8 26
  let%span sghost_set2 = "ghost_set.rs" 10 22 10 63
  let%span sghost_set3 = "ghost_set.rs" 11 22 11 34
  let%span sghost_set4 = "ghost_set.rs" 12 28 12 29
  let%span sghost_set5 = "ghost_set.rs" 12 31 12 32
  let%span sghost_set6 = "ghost_set.rs" 12 34 12 35
  let%span sghost_set7 = "ghost_set.rs" 14 45 14 46
  let%span sghost_set8 = "ghost_set.rs" 15 46 15 47
  let%span sghost_set9 = "ghost_set.rs" 17 22 17 54
  let%span sghost_set10 = "ghost_set.rs" 18 22 18 34
  let%span sghost_set11 = "ghost_set.rs" 19 22 19 62
  let%span sghost_set12 = "ghost_set.rs" 24 22 24 69
  let%span sghost_set13 = "ghost_set.rs" 25 22 25 41
  let%span sghost_set14 = "ghost_set.rs" 26 22 26 36
  let%span sghost_set15 = "ghost_set.rs" 31 22 31 31
  let%span sghost_set16 = "ghost_set.rs" 32 22 32 32
  let%span sghost_set17 = "ghost_set.rs" 33 22 33 32
  let%span sfset18 = "../../../creusot-contracts/src/logic/fset.rs" 328 4 328 31
  let%span sfset19 = "../../../creusot-contracts/src/logic/fset.rs" 326 14 326 31
  let%span sfset20 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  let%span sghost21 = "../../../creusot-contracts/src/ghost.rs" 84 22 84 26
  let%span sghost22 = "../../../creusot-contracts/src/ghost.rs" 82 14 82 46
  let%span sghost23 = "../../../creusot-contracts/src/ghost.rs" 83 14 83 46
  let%span sfset24 = "../../../creusot-contracts/src/logic/fset.rs" 407 14 407 44
  let%span sfset25 = "../../../creusot-contracts/src/logic/fset.rs" 408 14 408 48
  let%span sghost26 = "../../../creusot-contracts/src/ghost.rs" 67 14 67 18
  let%span sghost27 = "../../../creusot-contracts/src/ghost.rs" 66 14 66 46
  let%span sfset28 = "../../../creusot-contracts/src/logic/fset.rs" 353 14 353 34
  let%span sfset29 = "../../../creusot-contracts/src/logic/fset.rs" 443 14 443 45
  let%span sfset30 = "../../../creusot-contracts/src/logic/fset.rs" 444 14 444 48
  let%span sfset31 = "../../../creusot-contracts/src/logic/fset.rs" 374 14 374 45
  let%span sghost32 = "../../../creusot-contracts/src/ghost.rs" 191 4 191 28
  let%span sghost33 = "../../../creusot-contracts/src/ghost.rs" 189 14 189 26
  let%span sfset34 = "../../../creusot-contracts/src/logic/fset.rs" 66 8 66 26
  let%span sresolve35 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sfset36 = "../../../creusot-contracts/src/logic/fset.rs" 93 8 93 26
  let%span sghost37 = "../../../creusot-contracts/src/ghost.rs" 109 8 109 31
  let%span sinvariant38 = "../../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sinvariant39 = "../../../creusot-contracts/src/invariant.rs" 25 8 25 18
  
  use creusot.int.Int32
  use set.Fset
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_Ghost'0  =
    { t_Ghost__0'0: Fset.fset Int32.t }
  
  predicate inv'4 (_1 : Fset.fset Int32.t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Fset.fset Int32.t [inv'4 x] . inv'4 x = true
  
  function inner_logic'0 (self : t_Ghost'0) : Fset.fset Int32.t
  
  predicate invariant'0 (self : t_Ghost'0) =
    [%#sghost37] inv'4 (inner_logic'0 self)
  
  predicate inv'0 (_1 : t_Ghost'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Ghost'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Ghost__0'0 = a_0} -> true
    end)
  
  let rec new'0 (return'  (ret:t_Ghost'0))= any
    [ return' (result:t_Ghost'0)-> {[%#sfset18] inv'0 result}
      {[%#sfset19] Fset.is_empty (inner_logic'0 result)}
      (! return' {result}) ]
  
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset Int32.t) (e : Int32.t) =
    [%#sfset20] Fset.mem e self
  
  predicate invariant'1 (self : MutBorrow.t t_Ghost'0) =
    [%#sinvariant38] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_Ghost'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Ghost'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  let rec deref_mut'0 (self:MutBorrow.t t_Ghost'0) (return'  (ret:MutBorrow.t (Fset.fset Int32.t)))= {[@expl:deref_mut 'self' type invariant] [%#sghost21] inv'1 self}
    any
    [ return' (result:MutBorrow.t (Fset.fset Int32.t))-> {[%#sghost22] result.current = inner_logic'0 self.current}
      {[%#sghost23] result.final = inner_logic'0 self.final}
      (! return' {result}) ]
  
  
  function insert'0 [@inline:trivial] (self : Fset.fset Int32.t) (e : Int32.t) : Fset.fset Int32.t =
    [%#sfset34] Fset.add e self
  
  let rec insert_ghost'0 (self:MutBorrow.t (Fset.fset Int32.t)) (value:Int32.t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#sfset24] self.final = insert'0 self.current value}
      {[%#sfset25] result = (not contains'0 self.current value)}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : MutBorrow.t (Fset.fset Int32.t)) =
    [%#sresolve35] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t (Fset.fset Int32.t)) =
    resolve'1 _1
  
  predicate invariant'2 (self : t_Ghost'0) =
    [%#sinvariant39] inv'0 self
  
  predicate inv'2 (_1 : t_Ghost'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Ghost'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  let rec deref'0 (self:t_Ghost'0) (return'  (ret:Fset.fset Int32.t))= {[@expl:deref 'self' type invariant] [%#sghost26] inv'2 self}
    any [ return' (result:Fset.fset Int32.t)-> {[%#sghost27] inner_logic'0 self = result} (! return' {result}) ] 
  
  let rec len_ghost'0 (self:Fset.fset Int32.t) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sfset28] result = Fset.cardinal self} (! return' {result}) ]
  
  
  type tuple'0  =
    { _0'0: Int32.t; _1'0: Int32.t; _2'0: Int32.t }
  
  function remove'0 [@inline:trivial] (self : Fset.fset Int32.t) (e : Int32.t) : Fset.fset Int32.t =
    [%#sfset36] Fset.remove e self
  
  let rec remove_ghost'0 (self:MutBorrow.t (Fset.fset Int32.t)) (value:Int32.t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#sfset29] self.final = remove'0 self.current value}
      {[%#sfset30] result = contains'0 self.current value}
      (! return' {result}) ]
  
  
  let rec contains_ghost'0 (self:Fset.fset Int32.t) (value:Int32.t) (return'  (ret:bool))= any
    [ return' (result:bool)-> {[%#sfset31] result = contains'0 self value} (! return' {result}) ]
  
  
  type t_Ghost'1  =
    { t_Ghost__0'1: () }
  
  predicate inv'5 (_1 : ())
  
  axiom inv_axiom'5 [@rewrite] : forall x : () [inv'5 x] . inv'5 x = true
  
  function inner_logic'1 (self : t_Ghost'1) : ()
  
  predicate invariant'3 (self : t_Ghost'1) =
    [%#sghost37] inv'5 (inner_logic'1 self)
  
  predicate inv'3 (_1 : t_Ghost'1)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Ghost'1 [inv'3 x] . inv'3 x
  = (invariant'3 x
  /\ match x with
    | {t_Ghost__0'1 = a_0} -> true
    end)
  
  let rec new'1 (x:()) (return'  (ret:t_Ghost'1))= any
    [ return' (result:t_Ghost'1)-> {[%#sghost32] inv'3 result}
      {[%#sghost33] inner_logic'1 result = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_map'0[#"ghost_set.rs" 4 0 4 18] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 (fun (_ret':t_Ghost'0) ->  [ &set <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set0] forall k : Int32.t . not contains'0 (inner_logic'0 set) k} s1
      | s1 = {inv'0 set}
        MutBorrow.borrow_mut <t_Ghost'0> {set}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_9 <- _ret' ] -{inv'0 _ret'.final}-  [ &set <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_9} (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_7 <- _ret' ] 
             [ &_8 <- { _8 with current = _ret'.final } ] 
            s1)
      | s1 = insert_ghost'0 {_7} {[%#sghost_set1] (1 : Int32.t)} (fun (_ret':bool) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = -{resolve'0 _8}- s1
      | s1 = deref'0 {set} (fun (_ret':Fset.fset Int32.t) ->  [ &_12 <- _ret' ] s2)
      | s2 = bb4 ]
    
    | bb4 = s0 [ s0 = len_ghost'0 {_12} (fun (_ret':int) ->  [ &length1 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set2] contains'0 (inner_logic'0 set) (1 : Int32.t)
        /\ not contains'0 (inner_logic'0 set) (2 : Int32.t)}
        s1
      | s1 = {[@expl:assertion] [%#sghost_set3] length1 = 1} s2
      | s2 = 
        [ &_21 <- { _0'0 = ([%#sghost_set4] (1 : Int32.t));
                    _1'0 = ([%#sghost_set5] (2 : Int32.t));
                    _2'0 = ([%#sghost_set6] (3 : Int32.t)) } ]
        
        s3
      | s3 =  [ &x1 <- _21._0'0 ] s4
      | s4 =  [ &x2 <- _21._1'0 ] s5
      | s5 =  [ &x3 <- _21._2'0 ] s6
      | s6 = {inv'0 set}
        MutBorrow.borrow_mut <t_Ghost'0> {set}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_25 <- _ret' ] -{inv'0 _ret'.final}-  [ &set <- _ret'.final ] s7)
      | s7 = deref_mut'0 {_25} (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->  [ &_24 <- _ret' ] s8)
      | s8 = bb6 ]
    
    | bb6 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_24.current} {MutBorrow.get_id _24}
          (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_23 <- _ret' ] 
             [ &_24 <- { _24 with current = _ret'.final } ] 
            s1)
      | s1 = insert_ghost'0 {_23} {[%#sghost_set7] (2 : Int32.t)} (fun (_ret':bool) ->  [ &inserted_true <- _ret' ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0
      [ s0 = -{resolve'0 _24}- s1
      | s1 = {inv'0 set}
        MutBorrow.borrow_mut <t_Ghost'0> {set}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_29 <- _ret' ] -{inv'0 _ret'.final}-  [ &set <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_29} (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->  [ &_28 <- _ret' ] s3)
      | s3 = bb8 ]
    
    | bb8 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_28.current} {MutBorrow.get_id _28}
          (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_27 <- _ret' ] 
             [ &_28 <- { _28 with current = _ret'.final } ] 
            s1)
      | s1 = insert_ghost'0 {_27} {[%#sghost_set8] (2 : Int32.t)} (fun (_ret':bool) ->  [ &inserted_false <- _ret' ] s2)
      | s2 = bb9 ]
    
    | bb9 = s0
      [ s0 = -{resolve'0 _28}- s1
      | s1 = deref'0 {set} (fun (_ret':Fset.fset Int32.t) ->  [ &_32 <- _ret' ] s2)
      | s2 = bb10 ]
    
    | bb10 = s0 [ s0 = len_ghost'0 {_32} (fun (_ret':int) ->  [ &length2 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set9] inserted_true /\ not inserted_false} s1
      | s1 = {[@expl:assertion] [%#sghost_set10] length2 = 2} s2
      | s2 = {[@expl:assertion] [%#sghost_set11] contains'0 (inner_logic'0 set) (1 : Int32.t)
        /\ contains'0 (inner_logic'0 set) (2 : Int32.t)}
        s3
      | s3 = {inv'0 set}
        MutBorrow.borrow_mut <t_Ghost'0> {set}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_43 <- _ret' ] -{inv'0 _ret'.final}-  [ &set <- _ret'.final ] s4)
      | s4 = deref_mut'0 {_43} (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->  [ &_42 <- _ret' ] s5)
      | s5 = bb12 ]
    
    | bb12 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_42.current} {MutBorrow.get_id _42}
          (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_41 <- _ret' ] 
             [ &_42 <- { _42 with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_45 <- x3 ] s2
      | s2 = remove_ghost'0 {_41} {_45} (fun (_ret':bool) ->  [ &remove_false1 <- _ret' ] s3)
      | s3 = bb13 ]
    
    | bb13 = s0
      [ s0 = -{resolve'0 _42}- s1
      | s1 = {inv'0 set}
        MutBorrow.borrow_mut <t_Ghost'0> {set}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_49 <- _ret' ] -{inv'0 _ret'.final}-  [ &set <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_49} (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->  [ &_48 <- _ret' ] s3)
      | s3 = bb14 ]
    
    | bb14 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_48.current} {MutBorrow.get_id _48}
          (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_47 <- _ret' ] 
             [ &_48 <- { _48 with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_51 <- x2 ] s2
      | s2 = remove_ghost'0 {_47} {_51} (fun (_ret':bool) ->  [ &remove_true <- _ret' ] s3)
      | s3 = bb15 ]
    
    | bb15 = s0
      [ s0 = -{resolve'0 _48}- s1
      | s1 = {inv'0 set}
        MutBorrow.borrow_mut <t_Ghost'0> {set}
          (fun (_ret':MutBorrow.t t_Ghost'0) ->  [ &_55 <- _ret' ] -{inv'0 _ret'.final}-  [ &set <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_55} (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->  [ &_54 <- _ret' ] s3)
      | s3 = bb16 ]
    
    | bb16 = s0
      [ s0 = MutBorrow.borrow_final <Fset.fset Int32.t> {_54.current} {MutBorrow.get_id _54}
          (fun (_ret':MutBorrow.t (Fset.fset Int32.t)) ->
             [ &_53 <- _ret' ] 
             [ &_54 <- { _54 with current = _ret'.final } ] 
            s1)
      | s1 =  [ &_57 <- x2 ] s2
      | s2 = remove_ghost'0 {_53} {_57} (fun (_ret':bool) ->  [ &remove_false2 <- _ret' ] s3)
      | s3 = bb17 ]
    
    | bb17 = s0
      [ s0 = -{resolve'0 _54}- s1
      | s1 = {[@expl:assertion] [%#sghost_set12] not remove_false1 /\ remove_true /\ not remove_false2} s2
      | s2 = {[@expl:assertion] [%#sghost_set13] not contains'0 (inner_logic'0 set) (2 : Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_set14] Fset.cardinal (inner_logic'0 set) = 1} s4
      | s4 = deref'0 {set} (fun (_ret':Fset.fset Int32.t) ->  [ &_66 <- _ret' ] s5)
      | s5 = bb18 ]
    
    | bb18 = s0
      [ s0 =  [ &_69 <- x1 ] s1
      | s1 = contains_ghost'0 {_66} {_69} (fun (_ret':bool) ->  [ &contains1 <- _ret' ] s2)
      | s2 = bb19 ]
    
    | bb19 = s0 [ s0 = deref'0 {set} (fun (_ret':Fset.fset Int32.t) ->  [ &_72 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 =  [ &_75 <- x2 ] s1
      | s1 = contains_ghost'0 {_72} {_75} (fun (_ret':bool) ->  [ &contains2 <- _ret' ] s2)
      | s2 = bb21 ]
    
    | bb21 = s0 [ s0 = deref'0 {set} (fun (_ret':Fset.fset Int32.t) ->  [ &_78 <- _ret' ] s1) | s1 = bb22 ] 
    | bb22 = s0
      [ s0 =  [ &_81 <- x3 ] s1
      | s1 = contains_ghost'0 {_78} {_81} (fun (_ret':bool) ->  [ &contains3 <- _ret' ] s2)
      | s2 = bb23 ]
    
    | bb23 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set15] contains1} s1
      | s1 = {[@expl:assertion] [%#sghost_set16] not contains2} s2
      | s2 = {[@expl:assertion] [%#sghost_set17] not contains3} s3
      | s3 = new'1 {_3} (fun (_ret':t_Ghost'1) ->  [ &_2 <- _ret' ] s4)
      | s4 = bb24 ]
    
    | bb24 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & set : t_Ghost'0 = Any.any_l ()
    | & _2 : t_Ghost'1 = Any.any_l ()
    | & _3 : () = Any.any_l ()
    | & _6 : bool = Any.any_l ()
    | & _7 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _8 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _9 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & length1 : int = Any.any_l ()
    | & _12 : Fset.fset Int32.t = Any.any_l ()
    | & x1 : Int32.t = Any.any_l ()
    | & x2 : Int32.t = Any.any_l ()
    | & x3 : Int32.t = Any.any_l ()
    | & _21 : tuple'0 = Any.any_l ()
    | & inserted_true : bool = Any.any_l ()
    | & _23 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _24 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _25 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & inserted_false : bool = Any.any_l ()
    | & _27 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _28 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _29 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & length2 : int = Any.any_l ()
    | & _32 : Fset.fset Int32.t = Any.any_l ()
    | & remove_false1 : bool = Any.any_l ()
    | & _41 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _42 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _43 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _45 : Int32.t = Any.any_l ()
    | & remove_true : bool = Any.any_l ()
    | & _47 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _48 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _49 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _51 : Int32.t = Any.any_l ()
    | & remove_false2 : bool = Any.any_l ()
    | & _53 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _54 : MutBorrow.t (Fset.fset Int32.t) = Any.any_l ()
    | & _55 : MutBorrow.t t_Ghost'0 = Any.any_l ()
    | & _57 : Int32.t = Any.any_l ()
    | & contains1 : bool = Any.any_l ()
    | & _66 : Fset.fset Int32.t = Any.any_l ()
    | & _69 : Int32.t = Any.any_l ()
    | & contains2 : bool = Any.any_l ()
    | & _72 : Fset.fset Int32.t = Any.any_l ()
    | & _75 : Int32.t = Any.any_l ()
    | & contains3 : bool = Any.any_l ()
    | & _78 : Fset.fset Int32.t = Any.any_l ()
    | & _81 : Int32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
