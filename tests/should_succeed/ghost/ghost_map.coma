module M_ghost_map__ghost_map [#"ghost_map.rs" 4 0 4 18]
  let%span sghost_map0 = "ghost_map.rs" 7 22 7 53
  let%span sghost_map1 = "ghost_map.rs" 8 25 8 26
  let%span sghost_map2 = "ghost_map.rs" 8 28 8 30
  let%span sghost_map3 = "ghost_map.rs" 10 22 10 47
  let%span sghost_map4 = "ghost_map.rs" 11 22 11 34
  let%span sghost_map5 = "ghost_map.rs" 13 17 13 19
  let%span sghost_map6 = "ghost_map.rs" 15 22 15 47
  let%span sghost_map7 = "ghost_map.rs" 17 45 17 46
  let%span sghost_map8 = "ghost_map.rs" 17 48 17 50
  let%span sghost_map9 = "ghost_map.rs" 18 45 18 46
  let%span sghost_map10 = "ghost_map.rs" 18 48 18 51
  let%span sghost_map11 = "ghost_map.rs" 20 22 20 43
  let%span sghost_map12 = "ghost_map.rs" 21 22 21 50
  let%span sghost_map13 = "ghost_map.rs" 22 22 22 34
  let%span sghost_map14 = "ghost_map.rs" 23 22 23 48
  let%span sghost_map15 = "ghost_map.rs" 24 22 24 47
  let%span sghost_map16 = "ghost_map.rs" 27 17 27 19
  let%span sghost_map17 = "ghost_map.rs" 28 30 28 31
  let%span sghost_map18 = "ghost_map.rs" 28 33 28 36
  let%span sghost_map19 = "ghost_map.rs" 29 30 29 31
  let%span sghost_map20 = "ghost_map.rs" 29 33 29 35
  let%span sghost_map21 = "ghost_map.rs" 31 22 31 47
  let%span sghost_map22 = "ghost_map.rs" 32 22 32 48
  let%span sghost_map23 = "ghost_map.rs" 37 22 37 42
  let%span sghost_map24 = "ghost_map.rs" 38 22 38 49
  let%span sghost_map25 = "ghost_map.rs" 39 22 39 42
  let%span sghost_map26 = "ghost_map.rs" 40 22 40 43
  let%span sghost_map27 = "ghost_map.rs" 45 22 45 31
  let%span sghost_map28 = "ghost_map.rs" 46 22 46 32
  let%span sghost_map29 = "ghost_map.rs" 47 22 47 32
  let%span sghost_map30 = "ghost_map.rs" 52 22 52 42
  let%span sghost_map31 = "ghost_map.rs" 53 22 53 34
  let%span sghost_map32 = "ghost_map.rs" 54 22 54 34
  let%span sfmap33 = "../../../creusot-contracts/src/logic/fmap.rs" 240 4 240 34
  let%span sfmap34 = "../../../creusot-contracts/src/logic/fmap.rs" 238 14 238 31
  let%span sfmap35 = "../../../creusot-contracts/src/logic/fmap.rs" 133 8 133 35
  let%span sghost36 = "../../../creusot-contracts/src/ghost.rs" 224 4 224 12
  let%span sghost37 = "../../../creusot-contracts/src/ghost.rs" 85 22 85 26
  let%span sghost38 = "../../../creusot-contracts/src/ghost.rs" 85 4 85 48
  let%span sghost39 = "../../../creusot-contracts/src/ghost.rs" 84 14 84 36
  let%span sfmap40 = "../../../creusot-contracts/src/logic/fmap.rs" 414 29 414 33
  let%span sfmap41 = "../../../creusot-contracts/src/logic/fmap.rs" 414 35 414 38
  let%span sfmap42 = "../../../creusot-contracts/src/logic/fmap.rs" 414 43 414 48
  let%span sfmap43 = "../../../creusot-contracts/src/logic/fmap.rs" 414 4 416 17
  let%span sfmap44 = "../../../creusot-contracts/src/logic/fmap.rs" 412 14 412 49
  let%span sfmap45 = "../../../creusot-contracts/src/logic/fmap.rs" 413 14 413 40
  let%span sghost46 = "../../../creusot-contracts/src/ghost.rs" 69 14 69 18
  let%span sghost47 = "../../../creusot-contracts/src/ghost.rs" 69 4 69 36
  let%span sghost48 = "../../../creusot-contracts/src/ghost.rs" 68 14 68 35
  let%span sfmap49 = "../../../creusot-contracts/src/logic/fmap.rs" 266 22 266 26
  let%span sfmap50 = "../../../creusot-contracts/src/logic/fmap.rs" 265 14 265 34
  let%span sfmap51 = "../../../creusot-contracts/src/logic/fmap.rs" 117 8 117 31
  let%span sghost_map52 = "ghost_map.rs" 12 44 12 45
  let%span sfmap53 = "../../../creusot-contracts/src/logic/fmap.rs" 349 30 349 34
  let%span sfmap54 = "../../../creusot-contracts/src/logic/fmap.rs" 349 36 349 39
  let%span sfmap55 = "../../../creusot-contracts/src/logic/fmap.rs" 349 4 349 62
  let%span sfmap56 = "../../../creusot-contracts/src/logic/fmap.rs" 337 14 346 9
  let%span sfmap57 = "../../../creusot-contracts/src/logic/fmap.rs" 347 14 347 89
  let%span sfmap58 = "../../../creusot-contracts/src/logic/fmap.rs" 348 14 348 44
  let%span sghost_map59 = "ghost_map.rs" 26 54 26 55
  let%span sfmap60 = "../../../creusot-contracts/src/logic/fmap.rs" 386 32 386 36
  let%span sfmap61 = "../../../creusot-contracts/src/logic/fmap.rs" 386 38 386 41
  let%span sfmap62 = "../../../creusot-contracts/src/logic/fmap.rs" 386 4 386 77
  let%span sfmap63 = "../../../creusot-contracts/src/logic/fmap.rs" 377 14 385 5
  let%span sghost_map64 = "ghost_map.rs" 34 45 34 46
  let%span sfmap65 = "../../../creusot-contracts/src/logic/fmap.rs" 453 29 453 33
  let%span sfmap66 = "../../../creusot-contracts/src/logic/fmap.rs" 453 35 453 38
  let%span sfmap67 = "../../../creusot-contracts/src/logic/fmap.rs" 453 4 455 17
  let%span sfmap68 = "../../../creusot-contracts/src/logic/fmap.rs" 451 14 451 43
  let%span sfmap69 = "../../../creusot-contracts/src/logic/fmap.rs" 452 14 452 41
  let%span sghost_map70 = "ghost_map.rs" 35 44 35 45
  let%span sghost_map71 = "ghost_map.rs" 36 45 36 46
  let%span sfmap72 = "../../../creusot-contracts/src/logic/fmap.rs" 93 8 96 9
  let%span sghost_map73 = "ghost_map.rs" 42 44 42 45
  let%span sfmap74 = "../../../creusot-contracts/src/logic/fmap.rs" 286 27 286 31
  let%span sfmap75 = "../../../creusot-contracts/src/logic/fmap.rs" 286 33 286 36
  let%span sfmap76 = "../../../creusot-contracts/src/logic/fmap.rs" 285 14 285 43
  let%span sghost_map77 = "ghost_map.rs" 43 44 43 45
  let%span sghost_map78 = "ghost_map.rs" 44 44 44 45
  let%span sghost_map79 = "ghost_map.rs" 49 34 49 35
  let%span sfmap80 = "../../../creusot-contracts/src/logic/fmap.rs" 315 22 315 26
  let%span sfmap81 = "../../../creusot-contracts/src/logic/fmap.rs" 315 28 315 31
  let%span sfmap82 = "../../../creusot-contracts/src/logic/fmap.rs" 315 4 315 50
  let%span sfmap83 = "../../../creusot-contracts/src/logic/fmap.rs" 307 14 314 9
  let%span sghost_map84 = "ghost_map.rs" 50 34 50 35
  let%span sghost_map85 = "ghost_map.rs" 51 34 51 35
  let%span sghost86 = "../../../creusot-contracts/src/ghost.rs" 185 15 185 16
  let%span sghost87 = "../../../creusot-contracts/src/ghost.rs" 185 4 185 28
  let%span sghost88 = "../../../creusot-contracts/src/ghost.rs" 183 14 183 28
  let%span sfmap89 = "../../../creusot-contracts/src/logic/fmap.rs" 140 8 140 34
  let%span sfmap90 = "../../../creusot-contracts/src/logic/fmap.rs" 104 8 104 26
  let%span sfmap91 = "../../../creusot-contracts/src/logic/fmap.rs" 67 14 67 71
  let%span sfmap92 = "../../../creusot-contracts/src/logic/fmap.rs" 68 14 68 61
  let%span sfmap93 = "../../../creusot-contracts/src/logic/fmap.rs" 69 14 69 66
  let%span sresolve94 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sfmap95 = "../../../creusot-contracts/src/logic/fmap.rs" 49 14 49 25
  let%span sfmap96 = "../../../creusot-contracts/src/logic/fmap.rs" 125 8 125 35
  let%span sfmap97 = "../../../creusot-contracts/src/logic/fmap.rs" 77 14 77 55
  let%span sfmap98 = "../../../creusot-contracts/src/logic/fmap.rs" 78 14 78 84
  let%span sfmap99 = "../../../creusot-contracts/src/logic/fmap.rs" 215 14 215 38
  let%span sfmap100 = "../../../creusot-contracts/src/logic/fmap.rs" 216 14 216 83
  let%span sfmap101 = "../../../creusot-contracts/src/logic/fmap.rs" 218 8 218 35
  let%span sfmap102 = "../../../creusot-contracts/src/logic/fmap.rs" 40 14 40 31
  let%span sfmap103 = "../../../creusot-contracts/src/logic/fmap.rs" 41 14 41 49
  let%span sfmap104 = "../../../creusot-contracts/src/logic/fmap.rs" 59 14 59 86
  let%span sutil105 = "../../../creusot-contracts/src/util.rs" 21 14 21 30
  let%span sutil106 = "../../../creusot-contracts/src/util.rs" 55 11 55 21
  let%span sutil107 = "../../../creusot-contracts/src/util.rs" 56 10 56 28
  
  use creusot.int.Int32
  use map.Map
  use mach.int.Int
  use map.Const
  use creusot.prelude.MutBorrow
  use creusot.prelude.Any
  
  type t_FMap'0
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: t_FMap'0 }
  
  predicate inv'0 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_GhostBox'0 [inv'0 x] . inv'0 x = true
  
  type t_Option'3  =
    | C_None'3
    | C_Some'3 Int32.t
  
  function view'0 (self : t_FMap'0) : Map.map Int32.t t_Option'3
  
  axiom view'0_spec : forall self : t_FMap'0 . [%#sfmap104] forall m1 : t_FMap'0, m2 : t_FMap'0 . m1 <> m2
   -> view'0 m1 <> view'0 m2
  
  function get_unsized'0 [@inline:trivial] (self : t_FMap'0) (k : Int32.t) : t_Option'3 =
    [%#sfmap90] Map.get (view'0 self) k
  
  function ext_eq'0 (self : t_FMap'0) (other : t_FMap'0) : bool =
    [%#sfmap101] view'0 self = view'0 other
  
  axiom ext_eq'0_spec : forall self : t_FMap'0, other : t_FMap'0 . ([%#sfmap99] ext_eq'0 self other  -> self = other)
  && ([%#sfmap100] (forall k : Int32.t . get_unsized'0 self k = get_unsized'0 other k)  -> ext_eq'0 self other)
  
  function len'0 (self : t_FMap'0) : int
  
  axiom len'0_spec : forall self : t_FMap'0 . [%#sfmap95] len'0 self >= 0
  
  function empty'0  : t_FMap'0
  
  axiom empty'0_spec : ([%#sfmap102] len'0 empty'0 = 0) && ([%#sfmap103] view'0 empty'0 = Const.const (C_None'3))
  
  function is_empty'0 (self : t_FMap'0) : bool =
    [%#sfmap89] ext_eq'0 self empty'0
  
  function inner_logic'0 (self : t_GhostBox'0) : t_FMap'0 =
    [%#sghost36] self.t_GhostBox__0'0
  
  let rec new'0 (return'  (ret:t_GhostBox'0))= any
    [ return' (result:t_GhostBox'0)-> {[%#sfmap33] inv'0 result}
      {[%#sfmap34] is_empty'0 (inner_logic'0 result)}
      (! return' {result}) ]
  
  
  function contains'0 [@inline:trivial] (self : t_FMap'0) (k : Int32.t) : bool =
    [%#sfmap35] get_unsized'0 self k <> C_None'3
  
  predicate inv'1 (_1 : MutBorrow.t t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : MutBorrow.t t_FMap'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t t_FMap'0 [inv'2 x] . inv'2 x = true
  
  let rec deref_mut'0 (self:MutBorrow.t t_GhostBox'0) (return'  (ret:MutBorrow.t t_FMap'0))= {[@expl:deref_mut 'self' type invariant] [%#sghost37] inv'1 self}
    any
    [ return' (result:MutBorrow.t t_FMap'0)-> {[%#sghost38] inv'2 result}
      {[%#sghost39] result
      = MutBorrow.borrow_logic (self.current).t_GhostBox__0'0 (self.final).t_GhostBox__0'0 (MutBorrow.inherit_id (MutBorrow.get_id self) 1)}
      (! return' {result}) ]
  
  
  type t_Option'0  =
    | C_None'1
    | C_Some'1 Int32.t
  
  predicate inv'3 (_1 : Int32.t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Int32.t [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : t_Option'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Option'0 [inv'4 x] . inv'4 x = true
  
  function make_sized'0 (self : Int32.t) : Int32.t
  
  axiom make_sized'0_spec : forall self : Int32.t . [%#sutil105] make_sized'0 self = self
  
  function insert'0 (self : t_FMap'0) (k : Int32.t) (v : Int32.t) : t_FMap'0
  
  axiom insert'0_spec : forall self : t_FMap'0, k : Int32.t, v : Int32.t . ([%#sfmap91] view'0 (insert'0 self k v)
  = Map.set (view'0 self) k (C_Some'3 (make_sized'0 v)))
  && ([%#sfmap92] contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self)
  && ([%#sfmap93] not contains'0 self k  -> len'0 (insert'0 self k v) = len'0 self + 1)
  
  function get'0 [@inline:trivial] (self : t_FMap'0) (k : Int32.t) : t_Option'0 =
    [%#sfmap72] match get_unsized'0 self k with
      | C_None'3 -> C_None'1
      | C_Some'3 x -> C_Some'1 x
      end
  
  let rec insert_ghost'0 (self:MutBorrow.t t_FMap'0) (key:Int32.t) (value:Int32.t) (return'  (ret:t_Option'0))= {[@expl:insert_ghost 'self' type invariant] [%#sfmap40] inv'2 self}
    {[@expl:insert_ghost 'key' type invariant] [%#sfmap41] inv'3 key}
    {[@expl:insert_ghost 'value' type invariant] [%#sfmap42] inv'3 value}
    any
    [ return' (result:t_Option'0)-> {[%#sfmap43] inv'4 result}
      {[%#sfmap44] self.final = insert'0 self.current key value}
      {[%#sfmap45] result = get'0 self.current key}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t t_FMap'0) =
    [%#sresolve94] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_FMap'0) =
    resolve'2 _1
  
  predicate inv'5 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_GhostBox'0 [inv'5 x] . inv'5 x = true
  
  predicate inv'6 (_1 : t_FMap'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_FMap'0 [inv'6 x] . inv'6 x = true
  
  let rec deref'0 (self:t_GhostBox'0) (return'  (ret:t_FMap'0))= {[@expl:deref 'self' type invariant] [%#sghost46] inv'5 self}
    any
    [ return' (result:t_FMap'0)-> {[%#sghost47] inv'6 result}
      {[%#sghost48] self.t_GhostBox__0'0 = result}
      (! return' {result}) ]
  
  
  let rec len_ghost'0 (self:t_FMap'0) (return'  (ret:int))= {[@expl:len_ghost 'self' type invariant] [%#sfmap49] inv'6 self}
    any [ return' (result:int)-> {[%#sfmap50] result = len'0 self} (! return' {result}) ] 
  
  function unwrap'0 (op : t_Option'3) : Int32.t
  
  axiom unwrap'0_spec : forall op : t_Option'3 . ([%#sutil106] op <> C_None'3)
   -> ([%#sutil107] C_Some'3 (unwrap'0 op) = op)
  
  function lookup_unsized'0 [@inline:trivial] (self : t_FMap'0) (k : Int32.t) : Int32.t =
    [%#sfmap96] unwrap'0 (get_unsized'0 self k)
  
  function lookup'0 [@inline:trivial] (self : t_FMap'0) (k : Int32.t) : Int32.t =
    [%#sfmap51] lookup_unsized'0 self k
  
  let rec promoted10__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map52] (1 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  type t_Option'1  =
    | C_None'0
    | C_Some'0 (MutBorrow.t Int32.t)
  
  predicate inv'7 (_1 : Int32.t)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Int32.t [inv'7 x] . inv'7 x = true
  
  predicate inv'8 (_1 : t_Option'1)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Option'1 [inv'8 x] . inv'8 x = true
  
  let rec get_mut_ghost'0 (self:MutBorrow.t t_FMap'0) (key:Int32.t) (return'  (ret:t_Option'1))= {[@expl:get_mut_ghost 'self' type invariant] [%#sfmap53] inv'2 self}
    {[@expl:get_mut_ghost 'key' type invariant] [%#sfmap54] inv'7 key}
    any
    [ return' (result:t_Option'1)-> {[%#sfmap55] inv'8 result}
      {[%#sfmap56] if contains'0 self.current key then
        match result with
          | C_None'0 -> false
          | C_Some'0 r -> contains'0 self.final key
          /\ lookup_unsized'0 self.current key = r.current /\ lookup_unsized'0 self.final key = r.final
          end
      else
        result = C_None'0 /\ self.current = self.final
      }
      {[%#sfmap57] forall k : Int32.t . k <> key  -> get_unsized'0 self.current k = get_unsized'0 self.final k}
      {[%#sfmap58] len'0 self.current = len'0 self.final}
      (! return' {result}) ]
  
  
  predicate resolve'3 (self : MutBorrow.t Int32.t) =
    [%#sresolve94] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t Int32.t) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'1) (ret  (field_0:MutBorrow.t Int32.t))= any
    [ good (field_0:MutBorrow.t Int32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : MutBorrow.t Int32.t [C_Some'0 field_0 : t_Option'1] . C_Some'0 field_0 <> input}
      (! {false}
      any) ]
  
  
  let rec promoted9__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map59] (1 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  predicate inv'9 (_1 : (t_Option'1, MutBorrow.t t_FMap'0))
  
  axiom inv_axiom'9 [@rewrite] : forall x : (t_Option'1, MutBorrow.t t_FMap'0) [inv'9 x] . inv'9 x = true
  
  function remove'0 (self : t_FMap'0) (k : Int32.t) : t_FMap'0
  
  axiom remove'0_spec : forall self : t_FMap'0, k : Int32.t . ([%#sfmap97] view'0 (remove'0 self k)
  = Map.set (view'0 self) k (C_None'3))
  && ([%#sfmap98] len'0 (remove'0 self k) = (if contains'0 self k then len'0 self - 1 else len'0 self))
  
  let rec split_mut_ghost'0 (self:MutBorrow.t t_FMap'0) (key:Int32.t) (return'  (ret:(t_Option'1, MutBorrow.t t_FMap'0)))= {[@expl:split_mut_ghost 'self' type invariant] [%#sfmap60] inv'2 self}
    {[@expl:split_mut_ghost 'key' type invariant] [%#sfmap61] inv'7 key}
    any
    [ return' (result:(t_Option'1, MutBorrow.t t_FMap'0))-> {[%#sfmap62] inv'9 result}
      {[%#sfmap63] if contains'0 self.current key then
        (let (_, a) = result in a).current = remove'0 self.current key
        /\ match let (a, _) = result in a with
          | C_None'0 -> false
          | C_Some'0 r -> lookup_unsized'0 self.current key = r.current
          /\ self.final = insert'0 (let (_, a) = result in a).final key r.final
          end
      else
        (let (a, _) = result in a) = C_None'0 /\ (let (_, a) = result in a) = self
      }
      (! return' {result}) ]
  
  
  let rec promoted8__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map64] (3 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  let rec remove_ghost'0 (self:MutBorrow.t t_FMap'0) (key:Int32.t) (return'  (ret:t_Option'0))= {[@expl:remove_ghost 'self' type invariant] [%#sfmap65] inv'2 self}
    {[@expl:remove_ghost 'key' type invariant] [%#sfmap66] inv'7 key}
    any
    [ return' (result:t_Option'0)-> {[%#sfmap67] inv'4 result}
      {[%#sfmap68] self.final = remove'0 self.current key}
      {[%#sfmap69] result = get'0 self.current key}
      (! return' {result}) ]
  
  
  let rec promoted7__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map70] (2 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  let rec promoted6__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map71] (2 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  let rec promoted5__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map73] (1 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  let rec contains_ghost'0 (self:t_FMap'0) (key:Int32.t) (return'  (ret:bool))= {[@expl:contains_ghost 'self' type invariant] [%#sfmap74] inv'6 self}
    {[@expl:contains_ghost 'key' type invariant] [%#sfmap75] inv'7 key}
    any [ return' (result:bool)-> {[%#sfmap76] result = contains'0 self key} (! return' {result}) ] 
  
  let rec promoted4__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map77] (2 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  let rec promoted3__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map78] (3 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  let rec promoted2__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map79] (1 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  type t_Option'2  =
    | C_None'2
    | C_Some'2 Int32.t
  
  predicate inv'10 (_1 : t_Option'2)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_Option'2 [inv'10 x] . inv'10 x = true
  
  let rec get_ghost'0 (self:t_FMap'0) (key:Int32.t) (return'  (ret:t_Option'2))= {[@expl:get_ghost 'self' type invariant] [%#sfmap80] inv'6 self}
    {[@expl:get_ghost 'key' type invariant] [%#sfmap81] inv'7 key}
    any
    [ return' (result:t_Option'2)-> {[%#sfmap82] inv'10 result}
      {[%#sfmap83] if contains'0 self key then
        match result with
          | C_None'2 -> false
          | C_Some'2 r -> lookup_unsized'0 self key = r
          end
      else
        result = C_None'2
      }
      (! return' {result}) ]
  
  
  let rec promoted1__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map84] (2 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  let rec promoted0__ghost_map'0 (return'  (ret:Int32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#sghost_map85] (3 : Int32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : Int32.t = Any.any_l () ]  [ return' (result:Int32.t)-> return' {result} ] 
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'11 (_1 : ())
  
  axiom inv_axiom'11 [@rewrite] : forall x : () [inv'11 x] . inv'11 x = true
  
  predicate inv'12 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_GhostBox'1 [inv'12 x] . inv'12 x = true
  
  let rec new'1 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:new 'x' type invariant] [%#sghost86] inv'11 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost87] inv'12 result}
      {[%#sghost88] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
  
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_map'0[#"ghost_map.rs" 4 0 4 18] (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 (fun (_ret':t_GhostBox'0) ->  [ &map <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_map0] forall k : Int32.t . not contains'0 (inner_logic'0 map) k} s1
      | s1 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_9 <- _ret' ]  [ &map <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_9} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_8.current} {MutBorrow.get_id _8}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_7 <- _ret' ]  [ &_8 <- { _8 with current = _ret'.final } ] s1)
      | s1 = insert_ghost'0 {_7} {[%#sghost_map1] (1 : Int32.t)} {[%#sghost_map2] (21 : Int32.t)}
          (fun (_ret':t_Option'0) ->  [ &_6 <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0
      [ s0 = -{resolve'0 _8}- s1 | s1 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_12 <- _ret' ] s2) | s2 = bb4 ]
    
    | bb4 = s0 [ s0 = len_ghost'0 {_12} (fun (_ret':int) ->  [ &length1 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0
      [ s0 = {[@expl:assertion] [%#sghost_map3] lookup'0 (inner_logic'0 map) (1 : Int32.t) = (21 : Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_map4] length1 = 1} s2
      | s2 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_22 <- _ret' ]  [ &map <- _ret'.final ] s3)
      | s3 = deref_mut'0 {_22} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_21 <- _ret' ] s4)
      | s4 = bb6 ]
    
    | bb6 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_21.current} {MutBorrow.get_id _21}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_20 <- _ret' ]  [ &_21 <- { _21 with current = _ret'.final } ] s1)
      | s1 = promoted10__ghost_map'0 (fun (pr10:Int32.t) ->  [ &_164 <- pr10 ] s2)
      | s2 =  [ &_24 <- _164 ] s3
      | s3 = get_mut_ghost'0 {_20} {_24} (fun (_ret':t_Option'1) ->  [ &_19 <- _ret' ] s4)
      | s4 = bb7 ]
    
    | bb7 = any [ br0 -> {_19 = C_None'0} (! bb10) | br1 (x0:MutBorrow.t Int32.t)-> {_19 = C_Some'0 x0} (! bb8) ] 
    | bb10 = s0
      [ s0 = -{match _19 with
          | C_Some'0 x'0 -> resolve'1 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _21}- s2
      | s2 = bb11 ]
    
    | bb8 = bb9
    | bb9 = s0
      [ s0 = v_Some'0 {_19} (fun (r0'0:MutBorrow.t Int32.t) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#sghost_map5] (43 : Int32.t)) } ] s2
      | s2 = -{resolve'1 x}- s3
      | s3 = -{resolve'0 _21}- s4
      | s4 = bb11 ]
    
    | bb11 = s0
      [ s0 = {[@expl:assertion] [%#sghost_map6] lookup'0 (inner_logic'0 map) (1 : Int32.t) = (43 : Int32.t)} s1
      | s1 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_33 <- _ret' ]  [ &map <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_33} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_32 <- _ret' ] s3)
      | s3 = bb12 ]
    
    | bb12 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_32.current} {MutBorrow.get_id _32}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_31 <- _ret' ]  [ &_32 <- { _32 with current = _ret'.final } ] s1)
      | s1 = insert_ghost'0 {_31} {[%#sghost_map7] (2 : Int32.t)} {[%#sghost_map8] (50 : Int32.t)}
          (fun (_ret':t_Option'0) ->  [ &inserted_none <- _ret' ] s2)
      | s2 = bb13 ]
    
    | bb13 = s0
      [ s0 = -{resolve'0 _32}- s1
      | s1 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_37 <- _ret' ]  [ &map <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_37} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_36 <- _ret' ] s3)
      | s3 = bb14 ]
    
    | bb14 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_36.current} {MutBorrow.get_id _36}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_35 <- _ret' ]  [ &_36 <- { _36 with current = _ret'.final } ] s1)
      | s1 = insert_ghost'0 {_35} {[%#sghost_map9] (2 : Int32.t)} {[%#sghost_map10] (100 : Int32.t)}
          (fun (_ret':t_Option'0) ->  [ &inserted_some <- _ret' ] s2)
      | s2 = bb15 ]
    
    | bb15 = s0
      [ s0 = -{resolve'0 _36}- s1 | s1 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_40 <- _ret' ] s2) | s2 = bb16 ]
    
    | bb16 = s0 [ s0 = len_ghost'0 {_40} (fun (_ret':int) ->  [ &length2 <- _ret' ] s1) | s1 = bb17 ] 
    | bb17 = s0
      [ s0 = {[@expl:assertion] [%#sghost_map11] inserted_none = C_None'1} s1
      | s1 = {[@expl:assertion] [%#sghost_map12] inserted_some = C_Some'1 (50 : Int32.t)} s2
      | s2 = {[@expl:assertion] [%#sghost_map13] length2 = 2} s3
      | s3 = {[@expl:assertion] [%#sghost_map14] lookup'0 (inner_logic'0 map) (2 : Int32.t) = (100 : Int32.t)} s4
      | s4 = {[@expl:assertion] [%#sghost_map15] lookup'0 (inner_logic'0 map) (1 : Int32.t) = (43 : Int32.t)} s5
      | s5 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_56 <- _ret' ]  [ &map <- _ret'.final ] s6)
      | s6 = deref_mut'0 {_56} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_55 <- _ret' ] s7)
      | s7 = bb18 ]
    
    | bb18 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_55.current} {MutBorrow.get_id _55}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_54 <- _ret' ]  [ &_55 <- { _55 with current = _ret'.final } ] s1)
      | s1 = promoted9__ghost_map'0 (fun (pr9:Int32.t) ->  [ &_163 <- pr9 ] s2)
      | s2 =  [ &_58 <- _163 ] s3
      | s3 = split_mut_ghost'0 {_54} {_58} (fun (_ret':(t_Option'1, MutBorrow.t t_FMap'0)) ->  [ &_53 <- _ret' ] s4)
      | s4 = bb19 ]
    
    | bb19 = any
      [ br0 -> {(let (r'0, _) = _53 in r'0) = C_None'0} (! bb24)
      | br1 (x0:MutBorrow.t Int32.t)-> {(let (r'0, _) = _53 in r'0) = C_Some'0 x0} (! bb20) ]
    
    | bb24 = s0
      [ s0 = -{match _53 with
          | (_, x'0) -> resolve'0 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{match _53 with
          | (C_Some'0 x'1, _) -> resolve'1 x'1
          | _ -> true
          end}-
        s2
      | s2 = -{resolve'0 _55}- s3
      | s3 = bb25 ]
    
    | bb20 = bb21
    | bb21 = s0
      [ s0 = v_Some'0 {let (r'0, _) = _53 in r'0} (fun (r0'0:MutBorrow.t Int32.t) ->  [ &x1 <- r0'0 ] s1)
      | s1 =  [ &map2 <- let (_, r'1) = _53 in r'1 ] s2
      | s2 =  [ &x1 <- { x1 with current = ([%#sghost_map16] (42 : Int32.t)) } ] s3
      | s3 = -{resolve'1 x1}- s4
      | s4 = MutBorrow.borrow_mut <t_FMap'0> {map2.current}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_64 <- _ret' ]  [ &map2 <- { map2 with current = _ret'.final } ] s5)
      | s5 = insert_ghost'0 {_64} {[%#sghost_map17] (2 : Int32.t)} {[%#sghost_map18] (200 : Int32.t)}
          (fun (_ret':t_Option'0) ->  [ &_63 <- _ret' ] s6)
      | s6 = bb22 ]
    
    | bb22 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {map2.current} {MutBorrow.get_id map2}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_66 <- _ret' ]  [ &map2 <- { map2 with current = _ret'.final } ] s1)
      | s1 = insert_ghost'0 {_66} {[%#sghost_map19] (1 : Int32.t)} {[%#sghost_map20] (56 : Int32.t)}
          (fun (_ret':t_Option'0) ->  [ &_65 <- _ret' ] s2)
      | s2 = bb23 ]
    
    | bb23 = s0 [ s0 = -{resolve'0 map2}- s1 | s1 = -{resolve'0 _55}- s2 | s2 = bb25 ] 
    | bb25 = s0
      [ s0 = {[@expl:assertion] [%#sghost_map21] lookup'0 (inner_logic'0 map) (1 : Int32.t) = (42 : Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_map22] lookup'0 (inner_logic'0 map) (2 : Int32.t) = (200 : Int32.t)} s2
      | s2 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_74 <- _ret' ]  [ &map <- _ret'.final ] s3)
      | s3 = deref_mut'0 {_74} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_73 <- _ret' ] s4)
      | s4 = bb26 ]
    
    | bb26 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_73.current} {MutBorrow.get_id _73}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_72 <- _ret' ]  [ &_73 <- { _73 with current = _ret'.final } ] s1)
      | s1 = promoted8__ghost_map'0 (fun (pr8:Int32.t) ->  [ &_162 <- pr8 ] s2)
      | s2 =  [ &_76 <- _162 ] s3
      | s3 = remove_ghost'0 {_72} {_76} (fun (_ret':t_Option'0) ->  [ &remove_none1 <- _ret' ] s4)
      | s4 = bb27 ]
    
    | bb27 = s0
      [ s0 = -{resolve'0 _73}- s1
      | s1 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_81 <- _ret' ]  [ &map <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_81} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_80 <- _ret' ] s3)
      | s3 = bb28 ]
    
    | bb28 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_80.current} {MutBorrow.get_id _80}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_79 <- _ret' ]  [ &_80 <- { _80 with current = _ret'.final } ] s1)
      | s1 = promoted7__ghost_map'0 (fun (pr7:Int32.t) ->  [ &_161 <- pr7 ] s2)
      | s2 =  [ &_83 <- _161 ] s3
      | s3 = remove_ghost'0 {_79} {_83} (fun (_ret':t_Option'0) ->  [ &remove_some <- _ret' ] s4)
      | s4 = bb29 ]
    
    | bb29 = s0
      [ s0 = -{resolve'0 _80}- s1
      | s1 = MutBorrow.borrow_mut <t_GhostBox'0> {map}
          (fun (_ret':MutBorrow.t t_GhostBox'0) ->  [ &_88 <- _ret' ]  [ &map <- _ret'.final ] s2)
      | s2 = deref_mut'0 {_88} (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_87 <- _ret' ] s3)
      | s3 = bb30 ]
    
    | bb30 = s0
      [ s0 = MutBorrow.borrow_final <t_FMap'0> {_87.current} {MutBorrow.get_id _87}
          (fun (_ret':MutBorrow.t t_FMap'0) ->  [ &_86 <- _ret' ]  [ &_87 <- { _87 with current = _ret'.final } ] s1)
      | s1 = promoted6__ghost_map'0 (fun (pr6:Int32.t) ->  [ &_160 <- pr6 ] s2)
      | s2 =  [ &_90 <- _160 ] s3
      | s3 = remove_ghost'0 {_86} {_90} (fun (_ret':t_Option'0) ->  [ &remove_none2 <- _ret' ] s4)
      | s4 = bb31 ]
    
    | bb31 = s0
      [ s0 = -{resolve'0 _87}- s1
      | s1 = {[@expl:assertion] [%#sghost_map23] remove_none1 = C_None'1} s2
      | s2 = {[@expl:assertion] [%#sghost_map24] remove_some = C_Some'1 (200 : Int32.t)} s3
      | s3 = {[@expl:assertion] [%#sghost_map25] remove_none2 = C_None'1} s4
      | s4 = {[@expl:assertion] [%#sghost_map26] get'0 (inner_logic'0 map) (2 : Int32.t) = C_None'1} s5
      | s5 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_102 <- _ret' ] s6)
      | s6 = bb32 ]
    
    | bb32 = s0
      [ s0 = promoted5__ghost_map'0 (fun (pr5:Int32.t) ->  [ &_159 <- pr5 ] s1)
      | s1 =  [ &_105 <- _159 ] s2
      | s2 = contains_ghost'0 {_102} {_105} (fun (_ret':bool) ->  [ &contains1 <- _ret' ] s3)
      | s3 = bb33 ]
    
    | bb33 = s0 [ s0 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_109 <- _ret' ] s1) | s1 = bb34 ] 
    | bb34 = s0
      [ s0 = promoted4__ghost_map'0 (fun (pr4:Int32.t) ->  [ &_158 <- pr4 ] s1)
      | s1 =  [ &_112 <- _158 ] s2
      | s2 = contains_ghost'0 {_109} {_112} (fun (_ret':bool) ->  [ &contains2 <- _ret' ] s3)
      | s3 = bb35 ]
    
    | bb35 = s0 [ s0 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_116 <- _ret' ] s1) | s1 = bb36 ] 
    | bb36 = s0
      [ s0 = promoted3__ghost_map'0 (fun (pr3:Int32.t) ->  [ &_157 <- pr3 ] s1)
      | s1 =  [ &_119 <- _157 ] s2
      | s2 = contains_ghost'0 {_116} {_119} (fun (_ret':bool) ->  [ &contains3 <- _ret' ] s3)
      | s3 = bb37 ]
    
    | bb37 = s0
      [ s0 = {[@expl:assertion] [%#sghost_map27] contains1} s1
      | s1 = {[@expl:assertion] [%#sghost_map28] not contains2} s2
      | s2 = {[@expl:assertion] [%#sghost_map29] not contains3} s3
      | s3 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_129 <- _ret' ] s4)
      | s4 = bb38 ]
    
    | bb38 = s0
      [ s0 = promoted2__ghost_map'0 (fun (pr2:Int32.t) ->  [ &_156 <- pr2 ] s1)
      | s1 =  [ &_132 <- _156 ] s2
      | s2 = get_ghost'0 {_129} {_132} (fun (_ret':t_Option'2) ->  [ &get1 <- _ret' ] s3)
      | s3 = bb39 ]
    
    | bb39 = s0 [ s0 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_136 <- _ret' ] s1) | s1 = bb40 ] 
    | bb40 = s0
      [ s0 = promoted1__ghost_map'0 (fun (pr1:Int32.t) ->  [ &_155 <- pr1 ] s1)
      | s1 =  [ &_139 <- _155 ] s2
      | s2 = get_ghost'0 {_136} {_139} (fun (_ret':t_Option'2) ->  [ &get2 <- _ret' ] s3)
      | s3 = bb41 ]
    
    | bb41 = s0 [ s0 = deref'0 {map} (fun (_ret':t_FMap'0) ->  [ &_143 <- _ret' ] s1) | s1 = bb42 ] 
    | bb42 = s0
      [ s0 = promoted0__ghost_map'0 (fun (pr0:Int32.t) ->  [ &_154 <- pr0 ] s1)
      | s1 =  [ &_146 <- _154 ] s2
      | s2 = get_ghost'0 {_143} {_146} (fun (_ret':t_Option'2) ->  [ &get3 <- _ret' ] s3)
      | s3 = bb43 ]
    
    | bb43 = s0
      [ s0 = {[@expl:assertion] [%#sghost_map30] get1 = C_Some'2 (42 : Int32.t)} s1
      | s1 = {[@expl:assertion] [%#sghost_map31] get2 = C_None'2} s2
      | s2 = {[@expl:assertion] [%#sghost_map32] get3 = C_None'2} s3
      | s3 = new'1 {_3} (fun (_ret':t_GhostBox'1) ->  [ &_2 <- _ret' ] s4)
      | s4 = bb44 ]
    
    | bb44 = bb45
    | bb45 = bb46
    | bb46 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & map : t_GhostBox'0 = Any.any_l ()
    | & _2 : t_GhostBox'1 = Any.any_l ()
    | & _3 : () = Any.any_l ()
    | & _6 : t_Option'0 = Any.any_l ()
    | & _7 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _8 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _9 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & length1 : int = Any.any_l ()
    | & _12 : t_FMap'0 = Any.any_l ()
    | & _19 : t_Option'1 = Any.any_l ()
    | & _20 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _21 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _22 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & _24 : Int32.t = Any.any_l ()
    | & x : MutBorrow.t Int32.t = Any.any_l ()
    | & inserted_none : t_Option'0 = Any.any_l ()
    | & _31 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _32 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _33 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & inserted_some : t_Option'0 = Any.any_l ()
    | & _35 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _36 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _37 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & length2 : int = Any.any_l ()
    | & _40 : t_FMap'0 = Any.any_l ()
    | & _53 : (t_Option'1, MutBorrow.t t_FMap'0) = Any.any_l ()
    | & _54 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _55 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _56 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & _58 : Int32.t = Any.any_l ()
    | & x1 : MutBorrow.t Int32.t = Any.any_l ()
    | & map2 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _63 : t_Option'0 = Any.any_l ()
    | & _64 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _65 : t_Option'0 = Any.any_l ()
    | & _66 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & remove_none1 : t_Option'0 = Any.any_l ()
    | & _72 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _73 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _74 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & _76 : Int32.t = Any.any_l ()
    | & remove_some : t_Option'0 = Any.any_l ()
    | & _79 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _80 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _81 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & _83 : Int32.t = Any.any_l ()
    | & remove_none2 : t_Option'0 = Any.any_l ()
    | & _86 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _87 : MutBorrow.t t_FMap'0 = Any.any_l ()
    | & _88 : MutBorrow.t t_GhostBox'0 = Any.any_l ()
    | & _90 : Int32.t = Any.any_l ()
    | & contains1 : bool = Any.any_l ()
    | & _102 : t_FMap'0 = Any.any_l ()
    | & _105 : Int32.t = Any.any_l ()
    | & contains2 : bool = Any.any_l ()
    | & _109 : t_FMap'0 = Any.any_l ()
    | & _112 : Int32.t = Any.any_l ()
    | & contains3 : bool = Any.any_l ()
    | & _116 : t_FMap'0 = Any.any_l ()
    | & _119 : Int32.t = Any.any_l ()
    | & get1 : t_Option'2 = Any.any_l ()
    | & _129 : t_FMap'0 = Any.any_l ()
    | & _132 : Int32.t = Any.any_l ()
    | & get2 : t_Option'2 = Any.any_l ()
    | & _136 : t_FMap'0 = Any.any_l ()
    | & _139 : Int32.t = Any.any_l ()
    | & get3 : t_Option'2 = Any.any_l ()
    | & _143 : t_FMap'0 = Any.any_l ()
    | & _146 : Int32.t = Any.any_l ()
    | & _154 : Int32.t = Any.any_l ()
    | & _155 : Int32.t = Any.any_l ()
    | & _156 : Int32.t = Any.any_l ()
    | & _157 : Int32.t = Any.any_l ()
    | & _158 : Int32.t = Any.any_l ()
    | & _159 : Int32.t = Any.any_l ()
    | & _160 : Int32.t = Any.any_l ()
    | & _161 : Int32.t = Any.any_l ()
    | & _162 : Int32.t = Any.any_l ()
    | & _163 : Int32.t = Any.any_l ()
    | & _164 : Int32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
