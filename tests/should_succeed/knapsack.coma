module M_knapsack__max [#"knapsack.rs" 16 0 16 35]
  let%span sknapsack0 = "knapsack.rs" 14 11 14 15
  let%span sknapsack1 = "knapsack.rs" 15 10 15 31
  
  use creusot.int.UInt64
  
  use creusot.prelude.Any
  
  use creusot.int.UInt64
  
  use int.MinMax
  
  meta "compute_max_steps" 1000000
  
  let rec max'0[#"knapsack.rs" 16 0 16 35] (a:UInt64.t) (b:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:max requires] [%#sknapsack0] true}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &_5 <- UInt64.lt a b ] s1 | s1 = any [ br0 -> {_5 = false} (! bb2) | br1 -> {_5} (! bb1) ]  ] 
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : UInt64.t = Any.any_l () | & a : UInt64.t = a | & b : UInt64.t = b | & _5 : bool = Any.any_l () ] 
    [ return' (result:UInt64.t)-> {[@expl:max ensures] [%#sknapsack1] UInt64.t'int result
      = MinMax.max (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]

end
module M_knapsack__m [#"knapsack.rs" 31 0 31 57]
  let%span sknapsack0 = "knapsack.rs" 28 11 28 37
  let%span sknapsack1 = "knapsack.rs" 29 11 29 17
  let%span sknapsack2 = "knapsack.rs" 30 10 30 21
  let%span sknapsack3 = "knapsack.rs" 27 10 27 11
  let%span sknapsack4 = "knapsack.rs" 32 4 39 5
  
  use mach.int.Int
  
  use seq.Seq
  
  type t_Name'0
  
  use creusot.int.UInt64
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: UInt64.t; t_Item__value'0: UInt64.t }
  
  use seq.Seq
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  use int.MinMax
  
  constant items  : Seq.seq t_Item'0
  
  constant i  : int
  
  constant w  : int
  
  function m'0 [#"knapsack.rs" 31 0 31 57] (items : Seq.seq t_Item'0) (i : int) (w : int) : int
  
  goal vc_m'0 : ([%#sknapsack1] 0 <= w)
   -> ([%#sknapsack0] 0 <= i /\ i <= Seq.length items)
   -> (if i = 0 then
    [%#sknapsack2] 0 >= 0
  else
    if UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0 > w then
      ((([@expl:m requires #0] [%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items)
      && ([@expl:m requires #1] [%#sknapsack1] 0 <= w))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m'0 items (i - 1) w >= 0)  -> ([%#sknapsack2] m'0 items (i - 1) w >= 0))
    else
      ((([@expl:m requires #0] [%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items)
      && ([@expl:m requires #1] [%#sknapsack1] 0 <= w))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m'0 items (i - 1) w >= 0)
       -> ((([@expl:m requires #0] [%#sknapsack0] 0 <= i - 1 /\ i - 1 <= Seq.length items)
      && ([@expl:m requires #1] [%#sknapsack1] 0 <= w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0))
      /\ 0 <= ([%#sknapsack3] i) /\ ([%#sknapsack3] i - 1) < ([%#sknapsack3] i))
      /\ (([%#sknapsack2] m'0 items (i - 1) (w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0) >= 0)
       -> ([%#sknapsack2] MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w
      - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0)
      + UInt64.t'int (Seq.get items (i - 1)).t_Item__value'0)
      >= 0)))
  
  )
end
module M_knapsack__knapsack01_dyn [#"knapsack.rs" 45 0 45 91]
  let%span sknapsack0 = "knapsack.rs" 46 51 46 52
  let%span sknapsack1 = "knapsack.rs" 46 35 46 36
  let%span sknapsack2 = "knapsack.rs" 46 69 46 70
  let%span sknapsack3 = "knapsack.rs" 47 16 47 17
  let%span sknapsack4 = "knapsack.rs" 54 16 55 57
  let%span sknapsack5 = "knapsack.rs" 52 16 53 61
  let%span sknapsack6 = "knapsack.rs" 50 16 51 57
  let%span sknapsack7 = "knapsack.rs" 49 16 49 53
  let%span sknapsack8 = "knapsack.rs" 61 20 61 21
  let%span sknapsack9 = "knapsack.rs" 71 20 72 57
  let%span sknapsack10 = "knapsack.rs" 69 20 70 69
  let%span sknapsack11 = "knapsack.rs" 66 20 68 65
  let%span sknapsack12 = "knapsack.rs" 64 20 65 63
  let%span sknapsack13 = "knapsack.rs" 63 20 63 57
  let%span sknapsack14 = "knapsack.rs" 74 27 74 28
  let%span sknapsack15 = "knapsack.rs" 79 17 79 18
  let%span sknapsack16 = "knapsack.rs" 81 13 81 14
  let%span sknapsack17 = "knapsack.rs" 90 16 90 43
  let%span sknapsack18 = "knapsack.rs" 89 16 89 34
  let%span sknapsack19 = "knapsack.rs" 88 16 88 27
  let%span sknapsack20 = "knapsack.rs" 91 10 91 11
  let%span sknapsack21 = "knapsack.rs" 92 13 92 14
  let%span sknapsack22 = "knapsack.rs" 94 26 94 27
  let%span sknapsack23 = "knapsack.rs" 45 28 45 33
  let%span sknapsack24 = "knapsack.rs" 42 11 42 34
  let%span sknapsack25 = "knapsack.rs" 43 11 43 33
  let%span sknapsack26 = "knapsack.rs" 44 11 44 84
  let%span sknapsack27 = "knapsack.rs" 45 75 45 91
  let%span svec28 = "../../creusot-contracts/src/std/vec.rs" 186 22 186 41
  let%span svec29 = "../../creusot-contracts/src/std/vec.rs" 187 22 187 76
  let%span svec30 = "../../creusot-contracts/src/std/vec.rs" 89 26 89 48
  let%span smodel31 = "../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span svec32 = "../../creusot-contracts/src/std/vec.rs" 21 14 21 41
  let%span sindex33 = "../../creusot-contracts/src/logic/ops/index.rs" 29 8 29 31
  let%span sknapsack34 = "knapsack.rs" 28 11 28 37
  let%span sknapsack35 = "knapsack.rs" 29 11 29 17
  let%span sknapsack36 = "knapsack.rs" 30 10 30 21
  let%span sknapsack37 = "knapsack.rs" 27 10 27 11
  let%span sknapsack38 = "knapsack.rs" 32 4 39 5
  let%span svec39 = "../../creusot-contracts/src/std/vec.rs" 168 27 168 46
  let%span svec40 = "../../creusot-contracts/src/std/vec.rs" 169 26 169 54
  let%span sknapsack41 = "knapsack.rs" 14 11 14 15
  let%span sknapsack42 = "knapsack.rs" 15 10 15 31
  let%span svec43 = "../../creusot-contracts/src/std/vec.rs" 158 27 158 46
  let%span svec44 = "../../creusot-contracts/src/std/vec.rs" 159 26 159 54
  let%span svec45 = "../../creusot-contracts/src/std/vec.rs" 160 26 160 57
  let%span svec46 = "../../creusot-contracts/src/std/vec.rs" 161 26 161 62
  let%span svec47 = "../../creusot-contracts/src/std/vec.rs" 162 26 162 55
  let%span svec48 = "../../creusot-contracts/src/std/vec.rs" 84 26 84 44
  let%span svec49 = "../../creusot-contracts/src/std/vec.rs" 93 26 93 56
  let%span sslice50 = "../../creusot-contracts/src/std/slice.rs" 123 20 123 37
  let%span sslice51 = "../../creusot-contracts/src/std/slice.rs" 130 20 130 37
  let%span smodel52 = "../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice53 = "../../creusot-contracts/src/std/slice.rs" 137 20 137 94
  let%span sresolve54 = "../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span svec55 = "../../creusot-contracts/src/std/vec.rs" 71 20 71 41
  let%span sinvariant56 = "../../creusot-contracts/src/invariant.rs" 25 8 25 18
  let%span sinvariant57 = "../../creusot-contracts/src/invariant.rs" 35 20 35 44
  let%span sseq58 = "../../creusot-contracts/src/logic/seq.rs" 629 20 629 95
  let%span sboxed59 = "../../creusot-contracts/src/std/boxed.rs" 33 8 33 18
  
  use creusot.int.UInt64
  
  predicate inv'2 (_1 : UInt64.t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : UInt64.t [inv'2 x] . inv'2 x = true
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'3 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  use creusot.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec32] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'2 [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt64.t =
    [%#sindex33] Seq.get (view'1 self) ix
  
  let rec from_elem'0 (elem:UInt64.t) (n:UInt64.t) (return'  (ret:t_Vec'0))= {[@expl:from_elem 'elem' type invariant] inv'2 elem}
    any
    [ return' (result:t_Vec'0)-> {inv'3 result}
      {[%#svec28] Seq.length (view'1 result) = UInt64.t'int n}
      {[%#svec29] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'2 result i = elem}
      (! return' {result}) ]
  
  
  type t_RawVec'3  =
    { t_RawVec__inner'3: t_RawVecInner'0; t_RawVec__qy95zmarker'3: () }
  
  type t_Vec'3  =
    { t_Vec__buf'3: t_RawVec'3; t_Vec__len'3: UInt64.t }
  
  type t_Name'0
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: UInt64.t; t_Item__value'0: UInt64.t }
  
  use seq.Seq
  
  use seq.Seq
  
  predicate inv'16 (_1 : t_Name'0)
  
  predicate inv'15 (_1 : t_Item'0)
  
  axiom inv_axiom'15 [@rewrite] : forall x : t_Item'0 [inv'15 x] . inv'15 x
  = match x with
    | {t_Item__name'0 = name ; t_Item__weight'0 = weight ; t_Item__value'0 = value} -> inv'16 name
    end
  
  predicate invariant'8 (self : t_Item'0) =
    [%#sboxed59] inv'15 self
  
  predicate inv'19 (_1 : t_Item'0)
  
  axiom inv_axiom'18 [@rewrite] : forall x : t_Item'0 [inv'19 x] . inv'19 x = invariant'8 x
  
  use seq.Seq
  
  predicate invariant'7 (self : Seq.seq t_Item'0) =
    [%#sseq58] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'19 (Seq.get self i)
  
  predicate inv'18 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'17 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'18 x] . inv'18 x = invariant'7 x
  
  function view'3 (self : t_Vec'3) : Seq.seq t_Item'0
  
  axiom view'3_spec : forall self : t_Vec'3 . [%#svec32] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'5 (self : t_Vec'3) =
    [%#svec55] inv'18 (view'3 self)
  
  predicate inv'14 (_1 : t_Vec'3)
  
  axiom inv_axiom'14 [@rewrite] : forall x : t_Vec'3 [inv'14 x] . inv'14 x = invariant'5 x
  
  predicate invariant'1 (self : t_Vec'3) =
    [%#sinvariant56] inv'14 self
  
  predicate inv'1 (_1 : t_Vec'3)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'3 [inv'1 x] . inv'1 x = invariant'1 x
  
  function view'0 (self : t_Vec'3) : Seq.seq t_Item'0 =
    [%#smodel31] view'3 self
  
  let rec len'0 (self:t_Vec'3) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'1 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec30] UInt64.t'int result = Seq.length (view'0 self)} (! return' {result}) ]
  
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  predicate inv'4 (_1 : t_Vec'1)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'1 [inv'4 x] . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'2 (self : t_Vec'1) : Seq.seq t_Vec'0
  
  axiom view'2_spec : forall self : t_Vec'1 . [%#svec32] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : t_Vec'0 =
    [%#sindex33] Seq.get (view'2 self) ix
  
  let rec from_elem'1 (elem:t_Vec'0) (n:UInt64.t) (return'  (ret:t_Vec'1))= {[@expl:from_elem 'elem' type invariant] inv'3 elem}
    any
    [ return' (result:t_Vec'1)-> {inv'4 result}
      {[%#svec28] Seq.length (view'2 result) = UInt64.t'int n}
      {[%#svec29] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'0 result i = elem}
      (! return' {result}) ]
  
  
  use seq.Seq
  
  use int.MinMax
  
  function m'0 [#"knapsack.rs" 31 0 31 57] (items : Seq.seq t_Item'0) (i : int) (w : int) : int
  
  axiom m'0_def : forall items : Seq.seq t_Item'0, i : int, w : int . ([%#sknapsack34] 0 <= i /\ i <= Seq.length items)
   -> ([%#sknapsack35] 0 <= w)
   -> m'0 items i w
  = ([%#sknapsack38] if i = 0 then
    0
  else
    if UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0 > w then
      m'0 items (i - 1) w
    else
      MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w - UInt64.t'int (Seq.get items (i - 1)).t_Item__weight'0)
      + UInt64.t'int (Seq.get items (i - 1)).t_Item__value'0)
  
  )
  
  axiom m'0_spec : forall items : Seq.seq t_Item'0, i : int, w : int . ([%#sknapsack34] 0 <= i /\ i <= Seq.length items)
   -> ([%#sknapsack35] 0 <= w)  -> ([%#sknapsack36] m'0 items i w >= 0)
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Item'0) =
    [%#sslice50] UInt64.t'int self < Seq.length seq
  
  predicate invariant'2 (self : t_Item'0) =
    [%#sinvariant56] inv'15 self
  
  predicate inv'5 (_1 : t_Item'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Item'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Item'0) (out : t_Item'0) =
    [%#sslice51] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'3) (index:UInt64.t) (return'  (ret:t_Item'0))= {[@expl:index 'self' type invariant] inv'1 self}
    {[@expl:index 'index' type invariant] inv'2 index}
    {[@expl:index requires] [%#svec39] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:t_Item'0)-> {inv'5 result}
      {[%#svec40] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
  
  
  predicate inv'6 (_1 : t_Vec'1)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'1 [inv'6 x] . inv'6 x = true
  
  predicate in_bounds'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) =
    [%#sslice50] UInt64.t'int self < Seq.length seq
  
  function view'4 (self : t_Vec'1) : Seq.seq t_Vec'0 =
    [%#smodel31] view'2 self
  
  predicate inv'7 (_1 : t_Vec'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Vec'0 [inv'7 x] . inv'7 x = true
  
  predicate has_value'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_Vec'0) (out : t_Vec'0) =
    [%#sslice51] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'1 (self:t_Vec'1) (index:UInt64.t) (return'  (ret:t_Vec'0))= {[@expl:index 'self' type invariant] inv'6 self}
    {[@expl:index 'index' type invariant] inv'2 index}
    {[@expl:index requires] [%#svec39] in_bounds'1 index (view'4 self)}
    any
    [ return' (result:t_Vec'0)-> {inv'7 result}
      {[%#svec40] has_value'1 index (view'4 self) result}
      (! return' {result}) ]
  
  
  predicate in_bounds'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice50] UInt64.t'int self < Seq.length seq
  
  function view'5 (self : t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel31] view'1 self
  
  predicate inv'8 (_1 : UInt64.t)
  
  axiom inv_axiom'8 [@rewrite] : forall x : UInt64.t [inv'8 x] . inv'8 x = true
  
  predicate has_value'2 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice51] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'2 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index 'self' type invariant] inv'7 self}
    {[@expl:index 'index' type invariant] inv'2 index}
    {[@expl:index requires] [%#svec39] in_bounds'2 index (view'5 self)}
    any
    [ return' (result:UInt64.t)-> {inv'8 result}
      {[%#svec40] has_value'2 index (view'5 self) result}
      (! return' {result}) ]
  
  
  let rec max'0 (a:UInt64.t) (b:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:max requires] [%#sknapsack41] true}
    any
    [ return' (result:UInt64.t)-> {[%#sknapsack42] UInt64.t'int result = MinMax.max (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]
  
  
  use creusot.prelude.MutBorrow
  
  predicate inv'9 (_1 : MutBorrow.t t_Vec'1)
  
  axiom inv_axiom'9 [@rewrite] : forall x : MutBorrow.t t_Vec'1 [inv'9 x] . inv'9 x = true
  
  function view'6 (self : MutBorrow.t t_Vec'1) : Seq.seq t_Vec'0 =
    [%#smodel52] view'2 self.current
  
  predicate inv'10 (_1 : MutBorrow.t t_Vec'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : MutBorrow.t t_Vec'0 [inv'10 x] . inv'10 x = true
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq t_Vec'0) (fin : Seq.seq t_Vec'0) =
    [%#sslice53] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:MutBorrow.t t_Vec'1) (index:UInt64.t) (return'  (ret:MutBorrow.t t_Vec'0))= {[@expl:index_mut 'self' type invariant] inv'9 self}
    {[@expl:index_mut 'index' type invariant] inv'2 index}
    {[@expl:index_mut requires] [%#svec43] in_bounds'1 index (view'6 self)}
    any
    [ return' (result:MutBorrow.t t_Vec'0)-> {inv'10 result}
      {[%#svec44] has_value'1 index (view'6 self) result.current}
      {[%#svec45] has_value'1 index (view'2 self.final) result.final}
      {[%#svec46] resolve_elswhere'0 index (view'6 self) (view'2 self.final)}
      {[%#svec47] Seq.length (view'2 self.final) = Seq.length (view'6 self)}
      (! return' {result}) ]
  
  
  function view'7 (self : MutBorrow.t t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel52] view'1 self.current
  
  predicate inv'11 (_1 : MutBorrow.t UInt64.t)
  
  axiom inv_axiom'11 [@rewrite] : forall x : MutBorrow.t UInt64.t [inv'11 x] . inv'11 x = true
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt64.t) (fin : Seq.seq UInt64.t) =
    [%#sslice53] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'1 (self:MutBorrow.t t_Vec'0) (index:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut 'self' type invariant] inv'10 self}
    {[@expl:index_mut 'index' type invariant] inv'2 index}
    {[@expl:index_mut requires] [%#svec43] in_bounds'2 index (view'7 self)}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {inv'11 result}
      {[%#svec44] has_value'2 index (view'7 self) result.current}
      {[%#svec45] has_value'2 index (view'1 self.final) result.final}
      {[%#svec46] resolve_elswhere'1 index (view'7 self) (view'1 self.final)}
      {[%#svec47] Seq.length (view'1 self.final) = Seq.length (view'7 self)}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t UInt64.t) =
    [%#sresolve54] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt64.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t t_Vec'0) =
    [%#sresolve54] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_Vec'0) =
    resolve'3 _1
  
  type t_RawVec'2  =
    { t_RawVec__inner'2: t_RawVecInner'0; t_RawVec__qy95zmarker'2: () }
  
  type t_Vec'2  =
    { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: UInt64.t }
  
  use seq.Seq
  
  use seq.Seq
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed59] inv'5 self
  
  predicate inv'17 (_1 : t_Item'0)
  
  axiom inv_axiom'16 [@rewrite] : forall x : t_Item'0 [inv'17 x] . inv'17 x = invariant'6 x
  
  use seq.Seq
  
  predicate invariant'4 (self : Seq.seq t_Item'0) =
    [%#sseq58] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'17 (Seq.get self i)
  
  predicate inv'13 (_1 : Seq.seq t_Item'0)
  
  axiom inv_axiom'13 [@rewrite] : forall x : Seq.seq t_Item'0 [inv'13 x] . inv'13 x = invariant'4 x
  
  function view'8 (self : t_Vec'2) : Seq.seq t_Item'0
  
  axiom view'8_spec : forall self : t_Vec'2 . [%#svec32] Seq.length (view'8 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  predicate invariant'0 (self : t_Vec'2) =
    [%#svec55] inv'13 (view'8 self)
  
  predicate inv'0 (_1 : t_Vec'2)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'2 [inv'0 x] . inv'0 x = invariant'0 x
  
  let rec with_capacity'0 (capacity:UInt64.t) (return'  (ret:t_Vec'2))= any
    [ return' (result:t_Vec'2)-> {inv'0 result} {[%#svec48] Seq.length (view'8 result) = 0} (! return' {result}) ]
  
  
  predicate invariant'3 (self : MutBorrow.t t_Vec'2) =
    [%#sinvariant57] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'12 (_1 : MutBorrow.t t_Vec'2)
  
  axiom inv_axiom'12 [@rewrite] : forall x : MutBorrow.t t_Vec'2 [inv'12 x] . inv'12 x = invariant'3 x
  
  use seq.Seq
  
  function view'9 (self : MutBorrow.t t_Vec'2) : Seq.seq t_Item'0 =
    [%#smodel52] view'8 self.current
  
  let rec push'0 (self:MutBorrow.t t_Vec'2) (value:t_Item'0) (return'  (ret:()))= {[@expl:push 'self' type invariant] inv'12 self}
    {[@expl:push 'value' type invariant] inv'5 value}
    any [ return' (result:())-> {[%#svec49] view'8 self.final = Seq.snoc (view'9 self) value} (! return' {result}) ] 
  
  use creusot.prelude.Any
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'3) (ix : int) : t_Item'0 =
    [%#sindex33] Seq.get (view'3 self) ix
  
  meta "compute_max_steps" 1000000
  
  let rec knapsack01_dyn'0[#"knapsack.rs" 45 0 45 91] (items:t_Vec'3) (max_weight:UInt64.t) (return'  (ret:t_Vec'2))= {[@expl:knapsack01_dyn 'items' type invariant] [%#sknapsack23] inv'1 items}
    {[@expl:knapsack01_dyn requires #0] [%#sknapsack24] Seq.length (view'0 items) < 10000000}
    {[@expl:knapsack01_dyn requires #1] [%#sknapsack25] UInt64.t'int max_weight < 10000000}
    {[@expl:knapsack01_dyn requires #2] [%#sknapsack26] forall i : int . 0 <= i /\ i < Seq.length (view'0 items)
     -> UInt64.t'int (index_logic'1 items i).t_Item__value'0 <= 10000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UInt64.add {max_weight} {[%#sknapsack0] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_8 <- _ret' ] s1)
      | s1 = from_elem'0 {[%#sknapsack1] (0 : UInt64.t)} {_8} (fun (_ret':t_Vec'0) ->  [ &_7 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0 [ s0 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &_11 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UInt64.add {_11} {[%#sknapsack2] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_10 <- _ret' ] s1)
      | s1 = from_elem'1 {_7} {_10} (fun (_ret':t_Vec'1) ->  [ &best_value <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 =  [ &i <- [%#sknapsack3] (0 : UInt64.t) ] s1 | s1 = bb4 ] 
    | bb4 = bb4
      [ bb4 = {[@expl:loop invariant #0] [%#sknapsack7] Seq.length (view'0 items) + 1 = Seq.length (view'2 best_value)}
        {[@expl:loop invariant #1] [%#sknapsack6] forall i : int . 0 <= i /\ i < Seq.length (view'2 best_value)
         -> UInt64.t'int max_weight + 1 = Seq.length (view'1 (index_logic'0 best_value i))}
        {[@expl:loop invariant #2] [%#sknapsack5] forall ii : int, ww : int . 0 <= ii
        /\ ii <= UInt64.t'int i /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
         -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
        {[@expl:loop invariant #3] [%#sknapsack4] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
         -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
        (! s0) [ s0 = bb5 ] 
        [ bb5 = bb6
        | bb6 = bb7
        | bb7 = bb8
        | bb8 = bb9
        | bb9 = s0 [ s0 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &_23 <- _ret' ] s1) | s1 = bb10 ] 
        | bb10 = s0
          [ s0 =  [ &_21 <- UInt64.lt i _23 ] s1 | s1 = any [ br0 -> {_21 = false} (! bb34) | br1 -> {_21} (! bb11) ]  ]
        
        | bb11 = s0 [ s0 = index'0 {items} {i} (fun (_ret':t_Item'0) ->  [ &_26 <- _ret' ] s1) | s1 = bb12 ] 
        | bb12 = s0 [ s0 =  [ &it <- _26 ] s1 | s1 =  [ &w <- [%#sknapsack8] (0 : UInt64.t) ] s2 | s2 = bb13 ] 
        | bb13 = bb13
          [ bb13 = {[@expl:loop invariant #0] [%#sknapsack13] Seq.length (view'0 items) + 1
            = Seq.length (view'2 best_value)}
            {[@expl:loop invariant #1] [%#sknapsack12] forall i : int . 0 <= i /\ i < Seq.length (view'2 best_value)
             -> UInt64.t'int max_weight + 1 = Seq.length (view'1 (index_logic'0 best_value i))}
            {[@expl:loop invariant #2] [%#sknapsack11] forall ii : int, ww : int . 0 <= ii
            /\ ii <= UInt64.t'int i /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
             -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
            {[@expl:loop invariant #3] [%#sknapsack10] forall ww : int . 0 <= ww /\ ww <= UInt64.t'int w - 1
             -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value (UInt64.t'int i + 1))) ww)
            = m'0 (view'0 items) (UInt64.t'int i + 1) ww}
            {[@expl:loop invariant #4] [%#sknapsack9] forall ii : int, ww : int . 0 <= ii
            /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UInt64.t'int max_weight
             -> UInt64.t'int (Seq.get (view'1 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
            (! s0) [ s0 = bb14 ] 
            [ bb14 = bb15
            | bb15 = bb16
            | bb16 = bb17
            | bb17 = bb18
            | bb18 = bb19
            | bb19 = s0
              [ s0 =  [ &_37 <- UInt64.le w max_weight ] s1
              | s1 = any [ br0 -> {_37 = false} (! bb33) | br1 -> {_37} (! bb20) ]  ]
            
            | bb20 = s0
              [ s0 =  [ &_41 <- UInt64.gt it.t_Item__weight'0 w ] s1
              | s1 = any [ br0 -> {_41 = false} (! bb24) | br1 -> {_41} (! bb21) ]  ]
            
            | bb21 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_46 <- _ret' ] s1) | s1 = bb22 ] 
            | bb22 = s0 [ s0 = index'2 {_46} {w} (fun (_ret':UInt64.t) ->  [ &_44 <- _ret' ] s1) | s1 = bb23 ] 
            | bb23 = s0 [ s0 =  [ &_40 <- _44 ] s1 | s1 = bb30 ] 
            | bb24 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_53 <- _ret' ] s1) | s1 = bb25 ] 
            | bb25 = s0 [ s0 = index'2 {_53} {w} (fun (_ret':UInt64.t) ->  [ &_51 <- _ret' ] s1) | s1 = bb26 ] 
            | bb26 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_61 <- _ret' ] s1) | s1 = bb27 ] 
            | bb27 = s0
              [ s0 = UInt64.sub {w} {it.t_Item__weight'0} (fun (_ret':UInt64.t) ->  [ &_64 <- _ret' ] s1)
              | s1 = index'2 {_61} {_64} (fun (_ret':UInt64.t) ->  [ &_59 <- _ret' ] s2)
              | s2 = bb28 ]
            
            | bb28 = s0
              [ s0 = UInt64.add {_59} {it.t_Item__value'0} (fun (_ret':UInt64.t) ->  [ &_57 <- _ret' ] s1)
              | s1 = max'0 {_51} {_57} (fun (_ret':UInt64.t) ->  [ &_40 <- _ret' ] s2)
              | s2 = bb29 ]
            
            | bb29 = bb30
            | bb30 = s0
              [ s0 = MutBorrow.borrow_mut <t_Vec'1> {best_value}
                  (fun (_ret':MutBorrow.t t_Vec'1) ->  [ &_71 <- _ret' ]  [ &best_value <- _ret'.final ] s1)
              | s1 = UInt64.add {i} {[%#sknapsack14] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_72 <- _ret' ] s2)
              | s2 = index_mut'0 {_71} {_72} (fun (_ret':MutBorrow.t t_Vec'0) ->  [ &_70 <- _ret' ] s3)
              | s3 = bb31 ]
            
            | bb31 = s0
              [ s0 = MutBorrow.borrow_final <t_Vec'0> {_70.current} {MutBorrow.get_id _70}
                  (fun (_ret':MutBorrow.t t_Vec'0) ->
                     [ &_69 <- _ret' ] 
                     [ &_70 <- { _70 with current = _ret'.final } ] 
                    s1)
              | s1 = index_mut'1 {_69} {w} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_68 <- _ret' ] s2)
              | s2 = bb32 ]
            
            | bb32 = s0
              [ s0 =  [ &_68 <- { _68 with current = _40 } ] s1
              | s1 = -{resolve'0 _68}- s2
              | s2 = -{resolve'1 _70}- s3
              | s3 = UInt64.add {w} {[%#sknapsack15] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &w <- _ret' ] s4)
              | s4 = bb13 ]
             ]
           ]
        
        | bb33 = s0
          [ s0 = UInt64.add {i} {[%#sknapsack16] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &i <- _ret' ] s1)
          | s1 = bb4 ]
         ]
       ]
    
    | bb34 = s0 [ s0 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &_78 <- _ret' ] s1) | s1 = bb35 ] 
    | bb35 = s0 [ s0 = with_capacity'0 {_78} (fun (_ret':t_Vec'2) ->  [ &result <- _ret' ] s1) | s1 = bb36 ] 
    | bb36 = s0
      [ s0 =  [ &left_weight <- max_weight ] s1
      | s1 = len'0 {items} (fun (_ret':UInt64.t) ->  [ &j <- _ret' ] s2)
      | s2 = bb37 ]
    
    | bb37 = bb38
    | bb38 = bb38
      [ bb38 = {[@expl:loop invariant #0] [%#sknapsack19] inv'0 result}
        {[@expl:loop invariant #1] [%#sknapsack18] UInt64.t'int j <= Seq.length (view'0 items)}
        {[@expl:loop invariant #2] [%#sknapsack17] UInt64.t'int left_weight <= UInt64.t'int max_weight}
        (! s0) [ s0 = bb39 ] 
        [ bb39 = bb40
        | bb40 = s0
          [ s0 =  [ &_88 <- UInt64.lt ([%#sknapsack20] (0 : UInt64.t)) j ] s1
          | s1 = any [ br0 -> {_88 = false} (! bb51) | br1 -> {_88} (! bb41) ]  ]
        
        | bb41 = s0
          [ s0 = UInt64.sub {j} {[%#sknapsack21] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &j <- _ret' ] s1)
          | s1 = index'0 {items} {j} (fun (_ret':t_Item'0) ->  [ &_91 <- _ret' ] s2)
          | s2 = bb42 ]
        
        | bb42 = s0
          [ s0 =  [ &it1 <- _91 ] s1
          | s1 = UInt64.add {j} {[%#sknapsack22] (1 : UInt64.t)} (fun (_ret':UInt64.t) ->  [ &_100 <- _ret' ] s2)
          | s2 = index'1 {best_value} {_100} (fun (_ret':t_Vec'0) ->  [ &_98 <- _ret' ] s3)
          | s3 = bb43 ]
        
        | bb43 = s0 [ s0 = index'2 {_98} {left_weight} (fun (_ret':UInt64.t) ->  [ &_96 <- _ret' ] s1) | s1 = bb44 ] 
        | bb44 = s0 [ s0 = index'1 {best_value} {j} (fun (_ret':t_Vec'0) ->  [ &_106 <- _ret' ] s1) | s1 = bb45 ] 
        | bb45 = s0 [ s0 = index'2 {_106} {left_weight} (fun (_ret':UInt64.t) ->  [ &_104 <- _ret' ] s1) | s1 = bb46 ] 
        | bb46 = s0
          [ s0 =  [ &_94 <- _96 <> _104 ] s1 | s1 = any [ br0 -> {_94 = false} (! bb49) | br1 -> {_94} (! bb47) ]  ]
        
        | bb47 = s0
          [ s0 = {inv'0 result}
            MutBorrow.borrow_mut <t_Vec'2> {result}
              (fun (_ret':MutBorrow.t t_Vec'2) ->
                 [ &_111 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &result <- _ret'.final ] 
                s1)
          | s1 = push'0 {_111} {it1} (fun (_ret':()) ->  [ &_110 <- _ret' ] s2)
          | s2 = bb48 ]
        
        | bb48 = s0
          [ s0 = UInt64.sub {left_weight} {it1.t_Item__weight'0} (fun (_ret':UInt64.t) ->  [ &left_weight <- _ret' ] s1)
          | s1 = bb50 ]
        
        | bb49 = bb50
        | bb50 = bb38 ]
       ]
    
    | bb51 = s0 [ s0 =  [ &_0 <- result ] s1 | s1 = bb52 ] 
    | bb52 = bb53
    | bb53 = return' {_0} ]
    )
    [ & _0 : t_Vec'2 = Any.any_l ()
    | & items : t_Vec'3 = items
    | & max_weight : UInt64.t = max_weight
    | & best_value : t_Vec'1 = Any.any_l ()
    | & _7 : t_Vec'0 = Any.any_l ()
    | & _8 : UInt64.t = Any.any_l ()
    | & _10 : UInt64.t = Any.any_l ()
    | & _11 : UInt64.t = Any.any_l ()
    | & i : UInt64.t = Any.any_l ()
    | & _21 : bool = Any.any_l ()
    | & _23 : UInt64.t = Any.any_l ()
    | & it : t_Item'0 = Any.any_l ()
    | & _26 : t_Item'0 = Any.any_l ()
    | & w : UInt64.t = Any.any_l ()
    | & _37 : bool = Any.any_l ()
    | & _40 : UInt64.t = Any.any_l ()
    | & _41 : bool = Any.any_l ()
    | & _44 : UInt64.t = Any.any_l ()
    | & _46 : t_Vec'0 = Any.any_l ()
    | & _51 : UInt64.t = Any.any_l ()
    | & _53 : t_Vec'0 = Any.any_l ()
    | & _57 : UInt64.t = Any.any_l ()
    | & _59 : UInt64.t = Any.any_l ()
    | & _61 : t_Vec'0 = Any.any_l ()
    | & _64 : UInt64.t = Any.any_l ()
    | & _68 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _69 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _70 : MutBorrow.t t_Vec'0 = Any.any_l ()
    | & _71 : MutBorrow.t t_Vec'1 = Any.any_l ()
    | & _72 : UInt64.t = Any.any_l ()
    | & result : t_Vec'2 = Any.any_l ()
    | & _78 : UInt64.t = Any.any_l ()
    | & left_weight : UInt64.t = Any.any_l ()
    | & j : UInt64.t = Any.any_l ()
    | & _88 : bool = Any.any_l ()
    | & it1 : t_Item'0 = Any.any_l ()
    | & _91 : t_Item'0 = Any.any_l ()
    | & _94 : bool = Any.any_l ()
    | & _96 : UInt64.t = Any.any_l ()
    | & _98 : t_Vec'0 = Any.any_l ()
    | & _100 : UInt64.t = Any.any_l ()
    | & _104 : UInt64.t = Any.any_l ()
    | & _106 : t_Vec'0 = Any.any_l ()
    | & _110 : () = Any.any_l ()
    | & _111 : MutBorrow.t t_Vec'2 = Any.any_l () ]
    
    [ return' (result:t_Vec'2)-> {[@expl:knapsack01_dyn result type invariant] [%#sknapsack27] inv'0 result}
      (! return' {result}) ]

end
