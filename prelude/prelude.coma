(* Why3 Logical Types *)
module Mapping
  function from_fn (f : 'a -> 'b) : ('a -> 'b) = f
end

module Seq
  use export seq.Seq

  function to_owned (a : 'a) : 'a = a
end

module Intrinsic
  function any_l (a :'a) : 'b
end

(* Rust primitive types *)

module Bool
  let eq (a : bool) (b : bool) (ret (result : bool) { a = b}) = any
  function eq (a : bool) (b : bool) : bool = (a = b)

  let ne (a : bool) (b : bool) (ret (result : bool) { a <> b}) = any
  function ne (a : bool) (b : bool) : bool = a <> b

  let to_int (b : bool) (ret (result : int) { result = if b then 1 else 0 }) = any
  function to_int (b : bool) : int = if b then 1 else 0
(*
  function to_BV256 (x: t) : BV256.t = if b then toBig 1 else toBig 0
  function of_BV256 (x: BV256.t) : t = if b  =  0 then false else true
  *)
end

module MutBorrow
  type t 'a = { current : 'a; final : 'a; id : int }

  function ( *_ ) (x : t 'a) : 'a = x.current
  function ( ^_ ) (x : t 'a) : 'a = x.final

  let borrow_final < 'a > (a : 'a) (id : int) (ret (result : t 'a)) =
    any [ ret' (fin : 'a) -> (! ret { { current = a; final = fin; id = id } })]

  let borrow_mut < 'a > (a : 'a) (ret (result : t 'a)) =
    any [ ret (fin : 'a) (id: int) -> (! ret { { current = a; final = fin; id = id } })]

  function borrow_logic (cur fin : 'a) (id : int) : t 'a = { current = cur; final = fin; id = id }

  function get_id (x : t 'a) : int = x.id
  function inherit_id (old_id inherit_path: int) : int
end

module Char
  (* utf8 characters (not glyphs)
      highly restricted until Why3 supports Unicode strings
  *)
  use int.Int
  use bv.BV256 as BV256

  type t

  function to_int (x : t) : int
  axiom to_int: forall c. 0 <= to_int c < 0x10FFFF /\ not(0xD800 <= to_int c < 0xE000)

  function of_int (n: int) : t

  let of_int (n : int) { 0 <= n < 0x10FFFF } { not(0xD800 <= n < 0xE000) }
    (ret (result : t) { to_int result = n }) = any

  axiom to_of_int: forall n. 0 <= n < 0x10FFFF /\ not(0xD800 <= n < 0xE000) -> to_int (of_int n) = n
  axiom of_to_int: forall c. of_int (to_int c) = c

  let of_BV256 (n: BV256.t)
        { [@expl:arithmetic overflow] BV256.t'int n >= 0 /\ BV256.t'int n < 0x10FFFF /\ not(0xD800 <= BV256.t'int n < 0xE000)}
        (ret (result: t)  { to_int result = BV256.t'int n}) = any

  let eq (a: t) (b: t) (ret (result: bool) { result <-> to_int a = to_int b } { result <-> a = b }) = any
  let ne (a: t) (b: t) (ret (result: bool) { result <-> to_int a <> to_int b } { result <-> a <> b }) = any

end

module Snapshot
  type snap_ty 't

  function new (x : 't) : snap_ty 't
  function inner (x : snap_ty 't) : 't

  axiom new_spec [@rewrite] : forall x: 't [new x]. inner (new x) = x
  axiom inner_spec [@rewrite]: forall x: snap_ty 't [inner x]. new (inner x) = x
end

module Opaque
  type ptr
  let fresh_ptr (ret (result : ptr) {true}) = any

  type dyn
  type foreign
end
