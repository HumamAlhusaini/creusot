module M_specialize__f [#"specialize.rs" 22 0 22 17]
  let%span sspecialize0 = "specialize.rs" 25 20 25 25
  let%span sspecialize1 = "specialize.rs" 18 14 18 18
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  let rec x'0 (self:t_Vec'0) (return'  (ret:()))= any
    [ return' (result:())-> {[%#sspecialize1] true} (! return' {result}) ]
  
  
  use prelude.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec f'0[#"specialize.rs" 22 0 22 17] (v:t_Vec'0) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = Any.any_l () | & v : t_Vec'0 = v | & _2 : () = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_specialize__g [#"specialize.rs" 28 0 28 18]
  let%span sspecialize0 = "specialize.rs" 32 20 32 25
  let%span sspecialize1 = "specialize.rs" 28 8 28 9
  let%span sspecialize2 = "specialize.rs" 7 9 7 13
  let%span svec3 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sseq5 = "../../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed6 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec4] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate invariant'2 (self : t_T'0) =
    [%#sboxed6] inv'3 self
  
  predicate inv'2 (_1 : t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : Seq.seq t_T'0) =
    [%#sseq5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'2 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_T'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec3] inv'1 (view'0 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  let rec x'0 (self:t_Vec'0) (return'  (ret:()))= {[@expl:x 'self' type invariant] [%#sspecialize2] inv'0 self}
    any [ return' (result:())-> (! return' {result}) ] 
  
  use prelude.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec g'0[#"specialize.rs" 28 0 28 18] (v:t_Vec'0) (return'  (ret:()))= {[@expl:g 'v' type invariant] [%#sspecialize1] inv'0 v}
    (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = Any.any_l () | & v : t_Vec'0 = v | & _2 : () = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_specialize__h [#"specialize.rs" 35 0 35 17]
  let%span sspecialize0 = "specialize.rs" 38 20 38 25
  let%span sspecialize1 = "specialize.rs" 13 17 13 21
  let%span sspecialize2 = "specialize.rs" 12 14 12 19
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = true
  
  let rec x'0 (self:t_Vec'0) (return'  (ret:()))= {[@expl:x 'self' type invariant] [%#sspecialize1] inv'0 self}
    any [ return' (result:())-> {[%#sspecialize2] false} (! return' {result}) ] 
  
  use prelude.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec h'0[#"specialize.rs" 35 0 35 17] (v:t_Vec'0) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = Any.any_l () | & v : t_Vec'0 = v | & _2 : () = Any.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_specialize__qyi7590077194068412461__x__refines [#"specialize.rs" 13 4 13 22] (* <std::vec::Vec<U> as T> *)
  let%span sspecialize0 = "specialize.rs" 13 4 13 22
  let%span svec1 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span svec2 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sseq3 = "../../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed4 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  type t_U'0
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq t_U'0
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec2] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  predicate inv'3 (_1 : t_U'0)
  
  predicate invariant'2 (self : t_U'0) =
    [%#sboxed4] inv'3 self
  
  predicate inv'2 (_1 : t_U'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_U'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : Seq.seq t_U'0) =
    [%#sseq3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'2 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_U'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_U'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec1] inv'1 (view'0 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  goal refines : [%#sspecialize0] forall self : t_Vec'0 . inv'0 self  -> inv'0 self
end
module M_specialize__qyi7277341344010858608__x__refines [#"specialize.rs" 19 4 19 14] (* <std::vec::Vec<u32> as T> *)
  let%span sspecialize0 = "specialize.rs" 19 4 19 14
  
  goal refines : [%#sspecialize0] true
end
