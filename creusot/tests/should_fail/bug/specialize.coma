
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_T'0
  
  type t_NonNull 't_T'0 =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't_T'0 > (input:t_NonNull 't_T'0) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_T'0
  
  type t_PhantomData 't_T'0 =
    | C_PhantomData
  
  let rec t_PhantomData < 't_T'0 > (input:t_PhantomData 't_T'0) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_T'0
  
  type t_Unique 't_T'0 =
    | C_Unique (NonNull'0.t_NonNull 't_T'0) (PhantomData'0.t_PhantomData 't_T'0)
  
  let rec t_Unique < 't_T'0 > (input:t_Unique 't_T'0) (ret  (pointer:NonNull'0.t_NonNull 't_T'0) (_marker:PhantomData'0.t_PhantomData 't_T'0))= any
    [ good (pointer:NonNull'0.t_NonNull 't_T'0) (_marker:PhantomData'0.t_PhantomData 't_T'0)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_A'0
  
  type t_T'0
  
  type t_RawVec 't_T'0 't_A'0 =
    | C_RawVec (Unique'0.t_Unique 't_T'0) (Cap'0.t_Cap) 't_A'0
  
  let rec t_RawVec < 't_T'0 > < 't_A'0 > (input:t_RawVec 't_T'0 't_A'0) (ret  (ptr:Unique'0.t_Unique 't_T'0) (cap:Cap'0.t_Cap) (alloc:'t_A'0))= any
    [ good (ptr:Unique'0.t_Unique 't_T'0) (cap:Cap'0.t_Cap) (alloc:'t_A'0)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_A'0
  
  type t_T'0
  
  type t_Vec 't_T'0 't_A'0 =
    | C_Vec (RawVec'0.t_RawVec 't_T'0 't_A'0) usize
  
  let rec t_Vec < 't_T'0 > < 't_A'0 > (input:t_Vec 't_T'0 't_A'0) (ret  (buf:RawVec'0.t_RawVec 't_T'0 't_A'0) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't_T'0 't_A'0) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_specialize__f [#"specialize.rs" 21 0 21 17]
  let%span sspecialize0 = "specialize.rs" 24 20 24 25
  let%span sspecialize1 = "specialize.rs" 17 14 17 18
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UInt32
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.Intrinsic
  
  let rec x'0 (self:Vec'0.t_Vec uint32 (Global'0.t_Global)) (return'  (ret:()))= any
    [ return' (result:())-> {[%#sspecialize1] true} (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec f (v:Vec'0.t_Vec uint32 (Global'0.t_Global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & v : Vec'0.t_Vec uint32 (Global'0.t_Global) = v | & _2 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_specialize__g [#"specialize.rs" 27 0 27 18]
  let%span sspecialize0 = "specialize.rs" 31 20 31 25
  let%span sspecialize1 = "specialize.rs" 27 8 27 9
  let%span sspecialize2 = "specialize.rs" 6 9 6 13
  let%span svec3 = "../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span svec4 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sseq5 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed6 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'3 (_1 : t_T'0)
  
  predicate invariant'2 (self : t_T'0) =
    [%#sboxed6] inv'3 self
  
  predicate inv'2 (_1 : t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_T'0) =
    [%#sseq5] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'2 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_T'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec t_T'0 (Global'0.t_Global)) : Seq.seq t_T'0
  
  axiom view'0_spec : forall self : Vec'0.t_Vec t_T'0 (Global'0.t_Global) . [%#svec4] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t_T'0 (Global'0.t_Global)) =
    [%#svec3] inv'1 (view'0 self)
  
  predicate inv'0 (_1 : Vec'0.t_Vec t_T'0 (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec t_T'0 (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  use prelude.prelude.Intrinsic
  
  let rec x'0 (self:Vec'0.t_Vec t_T'0 (Global'0.t_Global)) (return'  (ret:()))= {[@expl:precondition] [%#sspecialize2] inv'0 self}
    any [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec g (v:Vec'0.t_Vec t_T'0 (Global'0.t_Global)) (return'  (ret:()))= {[%#sspecialize1] inv'0 v}
    (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & v : Vec'0.t_Vec t_T'0 (Global'0.t_Global) = v | & _2 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_specialize__h [#"specialize.rs" 34 0 34 17]
  let%span sspecialize0 = "specialize.rs" 37 20 37 25
  let%span sspecialize1 = "specialize.rs" 12 17 12 21
  let%span sspecialize2 = "specialize.rs" 11 14 11 19
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.Int32
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec int32 (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec int32 (Global'0.t_Global) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  let rec x'0 (self:Vec'0.t_Vec int32 (Global'0.t_Global)) (return'  (ret:()))= {[@expl:precondition] [%#sspecialize1] inv'0 self}
    any [ return' (result:())-> {[%#sspecialize2] false} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec h (v:Vec'0.t_Vec int32 (Global'0.t_Global)) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = x'0 {v} (fun (_ret':()) ->  [ &_2 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sspecialize0] false} s1 | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & v : Vec'0.t_Vec int32 (Global'0.t_Global) = v | & _2 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_specialize__qyi2463200954251793265__x__refines [#"specialize.rs" 12 4 12 22] (* <std::vec::Vec<U> as T> *)
  let%span sspecialize0 = "specialize.rs" 12 4 12 22
  let%span svec1 = "../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span svec2 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sseq3 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed4 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_U'0
  
  predicate inv'3 (_1 : t_U'0)
  
  predicate invariant'2 (self : t_U'0) =
    [%#sboxed4] inv'3 self
  
  predicate inv'2 (_1 : t_U'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_U'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'1 (self : Seq.seq t_U'0) =
    [%#sseq3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'2 (Seq.get self i)
  
  predicate inv'1 (_1 : Seq.seq t_U'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq t_U'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : Vec'0.t_Vec t_U'0 (Global'0.t_Global)) : Seq.seq t_U'0
  
  axiom view'0_spec : forall self : Vec'0.t_Vec t_U'0 (Global'0.t_Global) . [%#svec2] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t_U'0 (Global'0.t_Global)) =
    [%#svec1] inv'1 (view'0 self)
  
  predicate inv'0 (_1 : Vec'0.t_Vec t_U'0 (Global'0.t_Global))
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec t_U'0 (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  goal refines : [%#sspecialize0] forall self : Vec'0.t_Vec t_U'0 (Global'0.t_Global) . inv'0 self  -> inv'0 self
end
module M_specialize__qyi7277341344010858608__x__refines [#"specialize.rs" 18 4 18 14] (* <std::vec::Vec<u32> as T> *)
  let%span sspecialize0 = "specialize.rs" 18 4 18 14
  
  goal refines : [%#sspecialize0] true
end
