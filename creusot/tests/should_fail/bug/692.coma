
module M_692__incorrect [#"692.rs" 8 0 8 76]
  let%span s6920 = "692.rs" 5 0 6 87
  let%span s6921 = "692.rs" 8 57 8 61
  let%span s6922 = "692.rs" 8 66 8 72
  let%span s6923 = "692.rs" 7 10 7 15
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 138 14 138 100
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 144 14 144 101
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sops7 = "../../../../creusot-contracts/src/std/ops.rs" 103 15 103 48
  let%span sops8 = "../../../../creusot-contracts/src/std/ops.rs" 104 14 104 35
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 109 14 109 31
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 114 15 114 29
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 115 15 115 26
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 116 14 116 28
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 133
  
  type t_C'0
  
  use prelude.prelude.Borrow
  
  predicate resolve'1 (_1 : t_C'0)
  
  predicate postcondition_mut'0 (self : borrowed t_C'0) (_2 : ()) (_3 : bool)
  
  predicate postcondition_once'0 (self : t_C'0) (_2 : ()) (_3 : bool)
  
  function fn_mut_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops13] postcondition_once'0 self args res
  = (exists s : borrowed t_C'0 . s.current = self /\ postcondition_mut'0 s args res /\ resolve'1 s.final)
  
  predicate unnest'0 (self : t_C'0) (_2 : t_C'0)
  
  function unnest_trans'0 (self : t_C'0) (b : t_C'0) (c : t_C'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_C'0, b : t_C'0, c : t_C'0 . ([%#sops10] unnest'0 self b)
   -> ([%#sops11] unnest'0 b c)  -> ([%#sops12] unnest'0 self c)
  
  function unnest_refl'0 (self : t_C'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_C'0 . [%#sops9] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : borrowed t_C'0) (args : ()) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed t_C'0, args : (), res : bool . ([%#sops7] postcondition_mut'0 self args res)
   -> ([%#sops8] unnest'0 self.current self.final)
  
  predicate postcondition'0 (self : t_C'0) (_2 : ()) (_3 : bool)
  
  function fn_once'0 (self : t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_once'0_spec : forall self : t_C'0, args : (), res : bool . [%#sops5] postcondition_once'0 self args res
  = (resolve'1 self /\ postcondition'0 self args res)
  
  predicate resolve'2 (self : borrowed t_C'0) =
    [%#sresolve6] self.final = self.current
  
  function fn_mut'0 (self : borrowed t_C'0) (args : ()) (res : bool) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed t_C'0, args : (), res : bool . [%#sops4] postcondition_mut'0 self args res
  = (resolve'2 self /\ postcondition'0 self.current args res)
  
  type t_B'0
  
  predicate precondition'1 (self : t_B'0) (_2 : bool)
  
  predicate precondition'0 (self : t_C'0) (_2 : ())
  
  use prelude.prelude.Intrinsic
  
  predicate inv'1 (_1 : t_C'0)
  
  predicate resolve'0 (_1 : t_B'0)
  
  predicate inv'0 (_1 : t_B'0)
  
  meta "compute_max_steps" 1000000
  
  let rec incorrect (cond:t_C'0) (branch:t_B'0) (return'  (ret:()))= {[%#s6922] inv'0 branch}
    {[%#s6921] inv'1 cond}
    {[%#s6920] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch (b)
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    (! bb0
    [ bb0 = s0
      [ s0 = {[@expl:type invariant] inv'0 branch} s1
      | s1 = -{resolve'0 branch}- s2
      | s2 = {[@expl:type invariant] inv'1 cond} s3
      | s3 = -{resolve'1 cond}- s4
      | s4 = bb1 ]
      
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & cond : t_C'0 = cond | & branch : t_B'0 = branch ] 
    [ return' (result:())-> {[@expl:postcondition] [%#s6923] false} (! return' {result}) ]
    
end
module M_692__valid_normal__qy123zclosureqy35z1qy125z_Type [#"692.rs" 13 15 13 47]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  type m_692__valid_normal__qy123zclosureqy35z1qy125z  =
    | M_692__valid_normal__qy123zclosureqy35z1qy125z uint32
  
  let rec m_692__valid_normal__qy123zclosureqy35z1qy125z (input:m_692__valid_normal__qy123zclosureqy35z1qy125z) (ret  (n:uint32))= any
    [ good (n:uint32)-> {M_692__valid_normal__qy123zclosureqy35z1qy125z n = input} (! ret {n}) ]
    
end
module M_692__valid_normal__qy123zclosureqy35z1qy125z [#"692.rs" 13 15 13 47]
  let%span s6920 = "692.rs" 14 11 14 15
  let%span s6921 = "692.rs" 13 25 13 45
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use M_692__valid_normal__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  function field_0'0 [#"692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) : uint32
   =
    let Closure'0.M_692__valid_normal__qy123zclosureqy35z1qy125z a = self in a
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec m_692__valid_normal__qy123zclosureqy35z1qy125z (_1:Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (return'  (ret:bool))= (! bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:uint32) -> UInt32.gt {r'0} {[%#s6920] (7 : uint32)} (fun (_ret':bool) ->  [ &res <- _ret' ] s1))
      | s1 =  [ &_0 <- res ] s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : bool = any_l ()
    | & _1 : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z = _1
    | & res : bool = any_l () ]
    
    [ return' (result:bool)-> {[@expl:postcondition] [%#s6921] result = (field_0'0 _1 > (7 : uint32))}
      (! return' {result}) ]
    
end
module M_692__valid_normal__qy123zclosureqy35z2qy125z_Type [#"692.rs" 15 17 15 64]
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  type m_692__valid_normal__qy123zclosureqy35z2qy125z  =
    | M_692__valid_normal__qy123zclosureqy35z2qy125z (borrowed uint32)
  
  let rec m_692__valid_normal__qy123zclosureqy35z2qy125z (input:m_692__valid_normal__qy123zclosureqy35z2qy125z) (ret  (r:borrowed uint32))= any
    [ good (r:borrowed uint32)-> {M_692__valid_normal__qy123zclosureqy35z2qy125z r = input} (! ret {r}) ]
    
end
module M_692__valid_normal__qy123zclosureqy35z2qy125z [#"692.rs" 15 17 15 64]
  let%span s6920 = "692.rs" 16 25 16 26
  let%span s6921 = "692.rs" 16 36 16 37
  let%span s6922 = "692.rs" 15 27 15 62
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  use M_692__valid_normal__qy123zclosureqy35z2qy125z_Type as Closure'0
  
  function field_0'0 [#"692.rs" 15 17 15 64] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) : borrowed uint32
    
   =
    let Closure'0.M_692__valid_normal__qy123zclosureqy35z2qy125z a = self in a
  
  predicate unnest'0 [#"692.rs" 15 17 15 64] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) (_2 : Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z)
    
   =
    (field_0'0 _2).final = (field_0'0 self).final
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) =
    resolve'1 _1
  
  meta "compute_max_steps" 1000000
  
  let rec m_692__valid_normal__qy123zclosureqy35z2qy125z (_1:borrowed Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z) (b:bool) (return'  (ret:()))= (! bb0
    [ bb0 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#s6920] (2 : uint32) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_4 <- [%#s6921] (1 : uint32) ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z {_1.current}
          (fun (r'0:borrowed uint32) ->
            
            [ &_1 <- { _1 with current = Closure'0.M_692__valid_normal__qy123zclosureqy35z2qy125z ({ r'0 with current = _4 ; }) ; } ]
            
            s1)
      | s1 = -{resolve'0 _1}- s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & _1 : borrowed Closure'0.m_692__valid_normal__qy123zclosureqy35z2qy125z = _1
    | & b : bool = b
    | & _4 : uint32 = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] unnest'0 _1.current _1.final}
      {[@expl:postcondition] [%#s6922] b /\ (field_0'0 _1.final).current = (2 : uint32)
      \/ not b /\ (field_0'0 _1.final).current = (1 : uint32)}
      (! return' {result}) ]
    
end
module M_692__valid_normal [#"692.rs" 11 0 11 34]
  let%span s6920 = "692.rs" 12 16 12 20
  let%span s6921 = "692.rs" 10 10 10 15
  let%span s6922 = "692.rs" 5 0 6 87
  let%span s6923 = "692.rs" 8 57 8 61
  let%span s6924 = "692.rs" 8 66 8 72
  let%span s6925 = "692.rs" 7 10 7 15
  let%span s6926 = "692.rs" 13 25 13 45
  
  use M_692__valid_normal__qy123zclosureqy35z2qy125z_Type as Closure'1
  
  predicate inv'1 (_1 : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z [inv'1 x] . inv'1 x
  = true
  
  use M_692__valid_normal__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  predicate inv'0 (_1 : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z [inv'0 x] . inv'0 x
  = true
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Int
  
  use prelude.prelude.UInt32
  
  use prelude.prelude.Borrow
  
  function field_0'0 [#"692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) : uint32
   =
    let Closure'0.M_692__valid_normal__qy123zclosureqy35z1qy125z a = self in a
  
  predicate postcondition'0 [#"692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (_ : ()) (result : bool)
    
   =
    [%#s6926] result = (field_0'0 self > (7 : uint32))
  
  predicate precondition'1 [#"692.rs" 15 17 15 64] (self : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z) (args : bool)
    
   =
    let (b) = args in true
  
  predicate precondition'0 [#"692.rs" 13 15 13 47] (self : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (_ : ())
    
   =
    true
  
  let rec incorrect'0 (cond:Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z) (branch:Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z) (return'  (ret:()))= {[@expl:precondition] [%#s6924] inv'1 branch}
    {[@expl:precondition] [%#s6923] inv'0 cond}
    {[@expl:precondition] [%#s6922] precondition'0 cond ()
    /\ (forall b : bool . precondition'1 branch (b)
    /\ (exists b : bool . forall b0 : bool . postcondition'0 cond () b0  -> b0 = b))}
    any [ return' (result:())-> {[%#s6925] false} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec valid_normal (n:uint32) (return'  (ret:uint32))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &r <- [%#s6920] (0 : uint32) ] s1
      | s1 =  [ &cond <- Closure'0.M_692__valid_normal__qy123zclosureqy35z1qy125z n ] s2
      | s2 = Borrow.borrow_mut <uint32> {r} (fun (_ret':borrowed uint32) ->  [ &_7 <- _ret' ]  [ &r <- _ret'.final ] s3)
      | s3 =  [ &branch <- Closure'1.M_692__valid_normal__qy123zclosureqy35z2qy125z _7 ] s4
      | s4 = incorrect'0 {cond} {branch} (fun (_ret':()) ->  [ &_8 <- _ret' ] s5)
      | s5 = bb1 ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- r ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : uint32 = any_l ()
    | & n : uint32 = n
    | & r : uint32 = any_l ()
    | & cond : Closure'0.m_692__valid_normal__qy123zclosureqy35z1qy125z = any_l ()
    | & branch : Closure'1.m_692__valid_normal__qy123zclosureqy35z2qy125z = any_l ()
    | & _7 : borrowed uint32 = any_l ()
    | & _8 : () = any_l () ]
     [ return' (result:uint32)-> {[@expl:postcondition] [%#s6921] false} (! return' {result}) ] 
end
