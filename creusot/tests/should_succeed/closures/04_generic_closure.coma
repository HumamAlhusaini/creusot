module M_04_generic_closure__generic_closure [#"04_generic_closure.rs" 5 0 5 56]
  let%span s04_generic_closure0 = "04_generic_closure.rs" 5 40 5 41
  let%span s04_generic_closure1 = "04_generic_closure.rs" 5 46 5 47
  let%span s04_generic_closure2 = "04_generic_closure.rs" 5 55 5 56
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 158 27 158 52
  let%span sops4 = "../../../../creusot-contracts/src/std/ops.rs" 140 0 164 1
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 131 14 131 100
  let%span sops6 = "../../../../creusot-contracts/src/std/ops.rs" 136 14 136 101
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sresolve8 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sops9 = "../../../../creusot-contracts/src/std/ops.rs" 99 15 99 48
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 100 14 100 35
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 31
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 110 15 110 29
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 111 15 111 26
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 112 14 112 28
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 117 14 117 133
  
  type t_F'0
  
  type t_A'0
  
  predicate precondition'0 (self : t_F'0) (_2 : t_A'0)
  
  use prelude.prelude.Borrow
  
  predicate inv'3 (_1 : t_F'0)
  
  predicate inv'4 (_1 : t_A'0)
  
  type t_B'0
  
  predicate postcondition'0 (self : t_F'0) (_2 : t_A'0) (_3 : t_B'0)
  
  predicate inv'2 (_1 : t_B'0)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate invariant'0 (self : t_F'0) =
    [%#sinvariant7] inv'0 self
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_F'0 [inv'3 x] . inv'3 x = invariant'0 x
  
  predicate inv'1 (_1 : t_A'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_A'0 [inv'4 x] . inv'4 x = (let (x0) = x in inv'1 x0)
  
  let rec call'0 (self:t_F'0) (args:t_A'0) (return'  (ret:t_B'0))= {[@expl:precondition] inv'4 args}
    {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [%#sops3] precondition'0 self args}
    any [ return' (result:t_B'0)-> {inv'2 result} {[%#sops4] postcondition'0 self args result} (! return' {result}) ] 
  
  predicate resolve'0 (_1 : t_F'0)
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition_mut'0 (self : borrowed t_F'0) (_2 : t_A'0) (_3 : t_B'0)
  
  predicate resolve'1 (self : borrowed t_F'0) =
    [%#sresolve8] self.final = self.current
  
  function fn_mut'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_B'0 . [%#sops5] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 self.current args res)
  
  predicate postcondition_once'0 (self : t_F'0) (_2 : t_A'0) (_3 : t_B'0)
  
  function fn_once'0 (self : t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom fn_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_B'0 . [%#sops6] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function postcondition_mut_unnest'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_B'0 . ([%#sops9] postcondition_mut'0 self args res)
   -> ([%#sops10] unnest'0 self.current self.final)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops11] unnest'0 self self
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops12] unnest'0 self b)
   -> ([%#sops13] unnest'0 b c)  -> ([%#sops14] unnest'0 self c)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_A'0) (res : t_B'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_B'0 . [%#sops15] postcondition_once'0 self args res
  = (exists s : borrowed t_F'0 . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  meta "compute_max_steps" 1000000
  
  let rec generic_closure'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_B'0))= {[%#s04_generic_closure1] inv'1 a}
    {[%#s04_generic_closure0] inv'0 f}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_4 <- (a) ] s1 | s1 = call'0 {f} {_4} (fun (_ret':t_B'0) ->  [ &_0 <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'0 f} s1 | s1 = -{resolve'0 f}- s2 | s2 = bb2 ] 
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    ) [ & _0 : t_B'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a | & _4 : t_A'0 = any_l () ] 
    [ return' (result:t_B'0)-> {[@expl:postcondition] [%#s04_generic_closure2] inv'2 result} (! return' {result}) ]
    
end
module M_04_generic_closure__mapper [#"04_generic_closure.rs" 9 0 9 22]
  let%span s04_generic_closure0 = "04_generic_closure.rs" 9 17 9 18
  let%span s04_generic_closure1 = "04_generic_closure.rs" 10 29 10 31
  let%span s04_generic_closure2 = "04_generic_closure.rs" 5 40 5 41
  let%span s04_generic_closure3 = "04_generic_closure.rs" 5 46 5 47
  let%span s04_generic_closure4 = "04_generic_closure.rs" 5 55 5 56
  
  type t_A'0
  
  predicate inv'0 (_1 : t_A'0)
  
  use prelude.prelude.Borrow
  
  predicate resolve'0 (_1 : t_A'0)
  
  use prelude.prelude.Intrinsic
  
  predicate inv'1 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  let rec closure0'0 (_1:()) (_a:t_A'0) (return'  (ret:()))= {[%#s04_generic_closure1] inv'0 _a}
    (! bb0
    [ bb0 = s0 [ s0 = {[@expl:type invariant] inv'0 _a} s1 | s1 = -{resolve'0 _a}- s2 | s2 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _a : t_A'0 = _a ]  [ return' (result:())-> (! return' {result}) ] 
  
  let rec generic_closure'0 (f:()) (a:t_A'0) (return'  (ret:()))= {[@expl:precondition] [%#s04_generic_closure3] inv'0 a}
    {[@expl:precondition] [%#s04_generic_closure2] inv'1 f}
    any [ return' (result:())-> {[%#s04_generic_closure4] inv'2 result} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec mapper'0 (x:t_A'0) (return'  (ret:()))= {[%#s04_generic_closure0] inv'0 x}
    (! bb0
    [ bb0 = s0
      [ s0 =  [ &_3 <- () ] s1 | s1 = generic_closure'0 {_3} {x} (fun (_ret':()) ->  [ &_2 <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = bb2
    | bb2 = return' {_0} ]
    ) [ & _0 : () = any_l () | & x : t_A'0 = x | & _2 : () = any_l () | & _3 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
