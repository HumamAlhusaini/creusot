module M_06_fn_specs__weaken [#"06_fn_specs.rs" 8 0 8 61]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 6 11 6 28
  let%span s06_fn_specs1 = "06_fn_specs.rs" 8 37 8 38
  let%span s06_fn_specs2 = "06_fn_specs.rs" 8 43 8 44
  let%span s06_fn_specs3 = "06_fn_specs.rs" 7 10 7 36
  let%span s06_fn_specs4 = "06_fn_specs.rs" 8 52 8 61
  let%span s06_fn_specs5 = "06_fn_specs.rs" 18 11 18 28
  let%span s06_fn_specs6 = "06_fn_specs.rs" 20 38 20 39
  let%span s06_fn_specs7 = "06_fn_specs.rs" 20 44 20 45
  let%span s06_fn_specs8 = "06_fn_specs.rs" 19 0 19 91
  let%span s06_fn_specs9 = "06_fn_specs.rs" 20 53 20 62
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 56 14 56 100
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 60 14 60 101
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 42 14 42 133
  let%span sresolve19 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  type t_F'0
  
  type t_A'0
  
  predicate precondition'0 (self : t_F'0) (a : t_A'0)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_A'0)
  
  use prelude.prelude.Borrow
  
  type t_Output'0
  
  predicate postcondition_mut'0 (self : borrowed t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  let rec weaken_2'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#s06_fn_specs7] inv'1 a}
    {[@expl:precondition] [%#s06_fn_specs6] inv'0 f}
    {[@expl:precondition] [%#s06_fn_specs5] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#s06_fn_specs9] inv'2 result}
      {[%#s06_fn_specs8] exists f2 : borrowed t_F'0 . f2.current = f
      /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition'0 (self : t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate resolve'2 (self : borrowed t_F'0) =
    [%#sresolve19] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed t_F'0) =
    resolve'2 _1
  
  function fn_mut'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_Output'0 . [%#sops10] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 self.current args res)
  
  predicate postcondition_once'0 (self : t_F'0) (a : t_A'0) (res : t_Output'0)
  
  function fn_once'0 (self : t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_Output'0 . [%#sops11] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function postcondition_mut_unnest'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_Output'0 . ([%#sops12] postcondition_mut'0 self args res)
   -> ([%#sops13] unnest'0 self.current self.final)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops14] unnest'0 self self
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_Output'0 . [%#sops18] postcondition_once'0 self args res
  = (exists s : borrowed t_F'0 . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  meta "compute_max_steps" 1000000
  
  let rec weaken'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_2'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_std [#"06_fn_specs.rs" 14 0 14 62]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 12 11 12 28
  let%span s06_fn_specs1 = "06_fn_specs.rs" 14 38 14 39
  let%span s06_fn_specs2 = "06_fn_specs.rs" 14 44 14 45
  let%span s06_fn_specs3 = "06_fn_specs.rs" 13 10 13 36
  let%span s06_fn_specs4 = "06_fn_specs.rs" 14 53 14 62
  let%span s06_fn_specs5 = "06_fn_specs.rs" 24 11 24 28
  let%span s06_fn_specs6 = "06_fn_specs.rs" 26 39 26 40
  let%span s06_fn_specs7 = "06_fn_specs.rs" 26 45 26 46
  let%span s06_fn_specs8 = "06_fn_specs.rs" 25 0 25 91
  let%span s06_fn_specs9 = "06_fn_specs.rs" 26 54 26 63
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 131 14 131 100
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 136 14 136 101
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 99 15 99 48
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 100 14 100 35
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 31
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 110 15 110 29
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 111 15 111 26
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 112 14 112 28
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 117 14 117 133
  let%span sresolve19 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  type t_F'0
  
  type t_A'0
  
  predicate precondition'0 (self : t_F'0) (_2 : t_A'0)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_A'0)
  
  use prelude.prelude.Borrow
  
  type t_Output'0
  
  predicate postcondition_mut'0 (self : borrowed t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  let rec weaken_2_std'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#s06_fn_specs7] inv'1 a}
    {[@expl:precondition] [%#s06_fn_specs6] inv'0 f}
    {[@expl:precondition] [%#s06_fn_specs5] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#s06_fn_specs9] inv'2 result}
      {[%#s06_fn_specs8] exists f2 : borrowed t_F'0 . f2.current = f
      /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate postcondition'0 (self : t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate resolve'1 (self : borrowed t_F'0) =
    [%#sresolve19] self.final = self.current
  
  function fn_mut'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_mut'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_Output'0 . [%#sops10] postcondition_mut'0 self args res
  = (resolve'1 self /\ postcondition'0 self.current args res)
  
  predicate postcondition_once'0 (self : t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  function fn_once'0 (self : t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_Output'0 . [%#sops11] postcondition_once'0 self args res
  = (resolve'0 self /\ postcondition'0 self args res)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function postcondition_mut_unnest'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_Output'0 . ([%#sops12] postcondition_mut'0 self args res)
   -> ([%#sops13] unnest'0 self.current self.final)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops14] unnest'0 self self
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops15] unnest'0 self b)
   -> ([%#sops16] unnest'0 b c)  -> ([%#sops17] unnest'0 self c)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_Output'0 . [%#sops18] postcondition_once'0 self args res
  = (exists s : borrowed t_F'0 . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  meta "compute_max_steps" 1000000
  
  let rec weaken_std'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_2_std'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_2 [#"06_fn_specs.rs" 20 0 20 62]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 18 11 18 28
  let%span s06_fn_specs1 = "06_fn_specs.rs" 20 38 20 39
  let%span s06_fn_specs2 = "06_fn_specs.rs" 20 44 20 45
  let%span s06_fn_specs3 = "06_fn_specs.rs" 19 0 19 91
  let%span s06_fn_specs4 = "06_fn_specs.rs" 20 53 20 62
  let%span s06_fn_specs5 = "06_fn_specs.rs" 30 11 30 28
  let%span s06_fn_specs6 = "06_fn_specs.rs" 32 39 32 40
  let%span s06_fn_specs7 = "06_fn_specs.rs" 32 45 32 46
  let%span s06_fn_specs8 = "06_fn_specs.rs" 31 10 31 41
  let%span s06_fn_specs9 = "06_fn_specs.rs" 32 54 32 63
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 27 15 27 48
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 28 14 28 35
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 32 14 32 31
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 36 15 36 29
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 37 15 37 26
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 38 14 38 28
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 42 14 42 133
  
  type t_F'0
  
  type t_A'0
  
  predicate precondition'0 (self : t_F'0) (a : t_A'0)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_A'0)
  
  type t_Output'0
  
  predicate postcondition_once'0 (self : t_F'0) (a : t_A'0) (res : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  let rec weaken_3'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#s06_fn_specs7] inv'1 a}
    {[@expl:precondition] [%#s06_fn_specs6] inv'0 f}
    {[@expl:precondition] [%#s06_fn_specs5] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#s06_fn_specs9] inv'2 result}
      {[%#s06_fn_specs8] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function postcondition_mut_unnest'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_Output'0 . ([%#sops10] postcondition_mut'0 self args res)
   -> ([%#sops11] unnest'0 self.current self.final)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops12] unnest'0 self self
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops13] unnest'0 self b)
   -> ([%#sops14] unnest'0 b c)  -> ([%#sops15] unnest'0 self c)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_Output'0 . [%#sops16] postcondition_once'0 self args res
  = (exists s : borrowed t_F'0 . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  meta "compute_max_steps" 1000000
  
  let rec weaken_2'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_3'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] exists f2 : borrowed t_F'0 . f2.current = f
      /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_2_std [#"06_fn_specs.rs" 26 0 26 63]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 24 11 24 28
  let%span s06_fn_specs1 = "06_fn_specs.rs" 26 39 26 40
  let%span s06_fn_specs2 = "06_fn_specs.rs" 26 45 26 46
  let%span s06_fn_specs3 = "06_fn_specs.rs" 25 0 25 91
  let%span s06_fn_specs4 = "06_fn_specs.rs" 26 54 26 63
  let%span s06_fn_specs5 = "06_fn_specs.rs" 36 11 36 28
  let%span s06_fn_specs6 = "06_fn_specs.rs" 38 40 38 41
  let%span s06_fn_specs7 = "06_fn_specs.rs" 38 46 38 47
  let%span s06_fn_specs8 = "06_fn_specs.rs" 37 10 37 41
  let%span s06_fn_specs9 = "06_fn_specs.rs" 38 55 38 64
  let%span sops10 = "../../../../creusot-contracts/src/std/ops.rs" 99 15 99 48
  let%span sops11 = "../../../../creusot-contracts/src/std/ops.rs" 100 14 100 35
  let%span sops12 = "../../../../creusot-contracts/src/std/ops.rs" 105 14 105 31
  let%span sops13 = "../../../../creusot-contracts/src/std/ops.rs" 110 15 110 29
  let%span sops14 = "../../../../creusot-contracts/src/std/ops.rs" 111 15 111 26
  let%span sops15 = "../../../../creusot-contracts/src/std/ops.rs" 112 14 112 28
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 117 14 117 133
  
  type t_F'0
  
  type t_A'0
  
  predicate precondition'0 (self : t_F'0) (_2 : t_A'0)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_A'0)
  
  type t_Output'0
  
  predicate postcondition_once'0 (self : t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  let rec weaken_3_std'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[@expl:precondition] [%#s06_fn_specs7] inv'1 a}
    {[@expl:precondition] [%#s06_fn_specs6] inv'0 f}
    {[@expl:precondition] [%#s06_fn_specs5] precondition'0 f a}
    any
    [ return' (result:t_Output'0)-> {[%#s06_fn_specs9] inv'2 result}
      {[%#s06_fn_specs8] postcondition_once'0 f a result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  predicate postcondition_mut'0 (self : borrowed t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate resolve'0 (_1 : t_F'0)
  
  predicate unnest'0 (self : t_F'0) (_2 : t_F'0)
  
  function postcondition_mut_unnest'0 (self : borrowed t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : borrowed t_F'0, args : t_A'0, res : t_Output'0 . ([%#sops10] postcondition_mut'0 self args res)
   -> ([%#sops11] unnest'0 self.current self.final)
  
  function unnest_refl'0 (self : t_F'0) : ()
  
  axiom unnest_refl'0_spec : forall self : t_F'0 . [%#sops12] unnest'0 self self
  
  function unnest_trans'0 (self : t_F'0) (b : t_F'0) (c : t_F'0) : ()
  
  axiom unnest_trans'0_spec : forall self : t_F'0, b : t_F'0, c : t_F'0 . ([%#sops13] unnest'0 self b)
   -> ([%#sops14] unnest'0 b c)  -> ([%#sops15] unnest'0 self c)
  
  function fn_mut_once'0 (self : t_F'0) (args : t_A'0) (res : t_Output'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : t_F'0, args : t_A'0, res : t_Output'0 . [%#sops16] postcondition_once'0 self args res
  = (exists s : borrowed t_F'0 . s.current = self /\ postcondition_mut'0 s args res /\ resolve'0 s.final)
  
  meta "compute_max_steps" 1000000
  
  let rec weaken_2_std'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = weaken_3_std'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] exists f2 : borrowed t_F'0 . f2.current = f
      /\ postcondition_mut'0 f2 a result /\ resolve'0 f2.final}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_3 [#"06_fn_specs.rs" 32 0 32 63]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 30 11 30 28
  let%span s06_fn_specs1 = "06_fn_specs.rs" 32 39 32 40
  let%span s06_fn_specs2 = "06_fn_specs.rs" 32 45 32 46
  let%span s06_fn_specs3 = "06_fn_specs.rs" 31 10 31 41
  let%span s06_fn_specs4 = "06_fn_specs.rs" 32 54 32 63
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 140 0 164 1
  
  type t_F'0
  
  type t_A'0
  
  predicate precondition'0 (self : t_F'0) (a : t_A'0)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_A'0)
  
  type t_Output'0
  
  predicate postcondition_once'0 (self : t_F'0) (a : t_A'0) (res : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  let rec call_once'0 (self:t_F'0) (args:t_A'0) (return'  (ret:t_Output'0))= {[@expl:precondition] inv'1 args}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#sops5] precondition'0 self args}
    any
    [ return' (result:t_Output'0)-> {inv'2 result}
      {[%#sops5] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec weaken_3'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__weaken_3_std [#"06_fn_specs.rs" 38 0 38 64]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 36 11 36 28
  let%span s06_fn_specs1 = "06_fn_specs.rs" 38 40 38 41
  let%span s06_fn_specs2 = "06_fn_specs.rs" 38 46 38 47
  let%span s06_fn_specs3 = "06_fn_specs.rs" 37 10 37 41
  let%span s06_fn_specs4 = "06_fn_specs.rs" 38 55 38 64
  let%span sops5 = "../../../../creusot-contracts/src/std/ops.rs" 140 0 164 1
  
  type t_F'0
  
  type t_A'0
  
  predicate precondition'0 (self : t_F'0) (_2 : t_A'0)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate inv'1 (_1 : t_A'0)
  
  type t_Output'0
  
  predicate postcondition_once'0 (self : t_F'0) (_2 : t_A'0) (_3 : t_Output'0)
  
  predicate inv'2 (_1 : t_Output'0)
  
  let rec call_once'0 (self:t_F'0) (args:t_A'0) (return'  (ret:t_Output'0))= {[@expl:precondition] inv'1 args}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#sops5] precondition'0 self args}
    any
    [ return' (result:t_Output'0)-> {inv'2 result}
      {[%#sops5] postcondition_once'0 self args result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec weaken_3_std'0 (f:t_F'0) (a:t_A'0) (return'  (ret:t_Output'0))= {[%#s06_fn_specs2] inv'1 a}
    {[%#s06_fn_specs1] inv'0 f}
    {[%#s06_fn_specs0] precondition'0 f a}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = s0 [ s0 = call_once'0 {f} {a} (fun (_ret':t_Output'0) ->  [ &_0 <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = bb4
    | bb4 = bb5
    | bb5 = return' {_0} ]
    ) [ & _0 : t_Output'0 = any_l () | & f : t_F'0 = f | & a : t_A'0 = a ] 
    [ return' (result:t_Output'0)-> {[@expl:postcondition] [%#s06_fn_specs4] inv'2 result}
      {[@expl:postcondition] [%#s06_fn_specs3] postcondition_once'0 f a result}
      (! return' {result}) ]
    
end
module M_06_fn_specs__fn_once_user [#"06_fn_specs.rs" 44 0 44 43]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 45 6 45 7
  let%span s06_fn_specs1 = "06_fn_specs.rs" 43 11 43 36
  let%span s06_fn_specs2 = "06_fn_specs.rs" 44 38 44 39
  let%span sops3 = "../../../../creusot-contracts/src/std/ops.rs" 140 0 164 1
  
  use prelude.prelude.UIntSize
  
  type t_F'0
  
  predicate precondition'0 (self : t_F'0) (_2 : usize)
  
  predicate inv'0 (_1 : t_F'0)
  
  predicate inv'1 (_1 : usize)
  
  predicate postcondition_once'0 (self : t_F'0) (_2 : usize) (_3 : ())
  
  predicate inv'2 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : usize [inv'1 x] . inv'1 x = true
  
  axiom inv_axiom'1 [@rewrite] : forall x : () [inv'2 x] . inv'2 x = true
  
  let rec call_once'0 (self:t_F'0) (args:usize) (return'  (ret:()))= {[@expl:precondition] inv'1 args}
    {[@expl:precondition] inv'0 self}
    {[@expl:precondition] [%#sops3] precondition'0 self args}
    any [ return' (result:())-> {inv'2 result} {[%#sops3] postcondition_once'0 self args result} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec fn_once_user'0 (f:t_F'0) (return'  (ret:()))= {[%#s06_fn_specs2] inv'0 f}
    {[%#s06_fn_specs1] precondition'0 f ((0 : usize))}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 =  [ &_4 <- (([%#s06_fn_specs0] (0 : usize))) ] s1
      | s1 = call_once'0 {f} {_4} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = bb3
    | bb3 = return' {_0} ]
    ) [ & _0 : () = any_l () | & f : t_F'0 = f | & _4 : usize = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_06_fn_specs__caller [#"06_fn_specs.rs" 48 0 48 15]
  let%span s06_fn_specs0 = "06_fn_specs.rs" 43 11 43 36
  let%span s06_fn_specs1 = "06_fn_specs.rs" 44 38 44 39
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  let rec closure0'0 (_1:()) (_2:usize) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
  
  predicate precondition'0 [#"06_fn_specs.rs" 49 17 49 20] (self : ()) (args : usize) =
    let (_2) = args in true
  
  let rec fn_once_user'0 (f:()) (return'  (ret:()))= {[@expl:precondition] [%#s06_fn_specs1] inv'0 f}
    {[@expl:precondition] [%#s06_fn_specs0] precondition'0 f ((0 : usize))}
    any [ return' (result:())-> (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec caller'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- () ] s1 | s1 = fn_once_user'0 {_1} (fun (_ret':()) ->  [ &_0 <- _ret' ] s2) | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
    ) [ & _0 : () = any_l () | & _1 : () = any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
