
module T_pcell__Id [#"pcell.rs" 5 0 5 13]
  type t_Id
end
module T_pcell__Token [#"pcell.rs" 34 0 34 19]
  use T_pcell__Id as Id'0
  
  type t_Token 't =
    | C_Token (Id'0.t_Id) 't
  
  let rec t_Token < 't > (input:t_Token 't) (ret  (id:Id'0.t_Id) (value:'t))= any
    [ good (id:Id'0.t_Id) (value:'t)-> {C_Token id value = input} (! ret {id} {value}) ]
    
  
  function t_Token__id (self : t_Token 't) : Id'0.t_Id =
    match self with
      | C_Token a _ -> a
      end
  
  function t_Token__value (self : t_Token 't) : 't =
    match self with
      | C_Token _ a -> a
      end
end
module T_core__cell__UnsafeCell
  type t_UnsafeCell 't =
    | C_UnsafeCell 't
  
  let rec t_UnsafeCell < 't > (input:t_UnsafeCell 't) (ret  (value:'t))= any
    [ good (value:'t)-> {C_UnsafeCell value = input} (! ret {value}) ]
    
end
module T_core__cell__Cell
  use T_core__cell__UnsafeCell as UnsafeCell'0
  
  type t_Cell 't =
    | C_Cell (UnsafeCell'0.t_UnsafeCell 't)
  
  let rec t_Cell < 't > (input:t_Cell 't) (ret  (value:UnsafeCell'0.t_UnsafeCell 't))= any
    [ good (value:UnsafeCell'0.t_UnsafeCell 't)-> {C_Cell value = input} (! ret {value}) ]
    
end
module T_pcell__PCell [#"pcell.rs" 29 0 29 19]
  use T_core__cell__Cell as Cell'0
  
  use T_pcell__Id as Id'0
  
  type t_PCell 't =
    | C_PCell (Id'0.t_Id) (Cell'0.t_Cell 't)
  
  let rec t_PCell < 't > (input:t_PCell 't) (ret  (id:Id'0.t_Id) (inner:Cell'0.t_Cell 't))= any
    [ good (id:Id'0.t_Id) (inner:Cell'0.t_Cell 't)-> {C_PCell id inner = input} (! ret {id} {inner}) ]
    
  
  function t_PCell__id (self : t_PCell 't) : Id'0.t_Id =
    match self with
      | C_PCell a _ -> a
      end
end
module T_creusot_contracts__ghost__GhostBox [#"../../../../creusot-contracts/src/ghost.rs" 27 0 27 22]
  type t_GhostBox 't =
    | C_GhostBox 't
  
  let rec t_GhostBox < 't > (input:t_GhostBox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0}) ]
    
  
  function t_GhostBox__0 (self : t_GhostBox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_pcell__qyi13068451540062991079__new__qy123zclosureqy35z2qy125z_Type [#"pcell.rs" 64 20 66 9] (* PCell<T> *)
  use T_pcell__Token as Token'0
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  type m_pcell__qyi13068451540062991079__new__qy123zclosureqy35z2qy125z 't =
    | M_pcell__qyi13068451540062991079__new__qy123zclosureqy35z2qy125z
  
  let rec m_pcell__qyi13068451540062991079__new__qy123zclosureqy35z2qy125z < 't > (input:m_pcell__qyi13068451540062991079__new__qy123zclosureqy35z2qy125z 't) (ret  )= any
    [ good -> {M_pcell__qyi13068451540062991079__new__qy123zclosureqy35z2qy125z  = input} (! ret) ]
    
end
module M_pcell__qyi13068451540062991079__swap__qy123zclosureqy35z6qy125z_Type [#"pcell.rs" 114 8 118 9] (* PCell<T> *)
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  use T_pcell__Token as Token'0
  
  use prelude.prelude.Borrow
  
  type m_pcell__qyi13068451540062991079__swap__qy123zclosureqy35z6qy125z 't =
    | M_pcell__qyi13068451540062991079__swap__qy123zclosureqy35z6qy125z (borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token 't)))) (borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token 't))))
  
  let rec m_pcell__qyi13068451540062991079__swap__qy123zclosureqy35z6qy125z < 't > (input:m_pcell__qyi13068451540062991079__swap__qy123zclosureqy35z6qy125z 't) (ret  (self_t:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token 't)))) (other_t:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token 't)))))= any
    [ good (self_t:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token 't)))) (other_t:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token 't))))-> {M_pcell__qyi13068451540062991079__swap__qy123zclosureqy35z6qy125z self_t other_t
      = input}
      (! ret {self_t} {other_t}) ]
    
end
module M_pcell__use_pcell__qy123zclosureqy35z4qy125z_Type [#"pcell.rs" 150 8 152 9]
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  use T_pcell__Token as Token'0
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  type m_pcell__use_pcell__qy123zclosureqy35z4qy125z  =
    | M_pcell__use_pcell__qy123zclosureqy35z4qy125z (borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (GhostBox'0.t_GhostBox (Token'0.t_Token int32))
  
  let rec m_pcell__use_pcell__qy123zclosureqy35z4qy125z (input:m_pcell__use_pcell__qy123zclosureqy35z4qy125z) (ret  (token:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (other_token:GhostBox'0.t_GhostBox (Token'0.t_Token int32)))= any
    [ good (token:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (other_token:GhostBox'0.t_GhostBox (Token'0.t_Token int32))-> {M_pcell__use_pcell__qy123zclosureqy35z4qy125z token other_token
      = input}
      (! ret {token} {other_token}) ]
    
end
module M_pcell__use_pcell__qy123zclosureqy35z4qy125z [#"pcell.rs" 150 8 152 9]
  let%span span0 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span1 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span2 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span span3 = "../../../../creusot-contracts/src/ghost.rs" 145 14 145 28
  let%span span4 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  let%span span5 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span6 = "pcell.rs" 24 14 24 28
  let%span span7 = "pcell.rs" 25 14 25 29
  let%span span8 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 18
  let%span span9 = "../../../../creusot-contracts/src/ghost.rs" 50 14 50 35
  let%span span10 = "../../../../creusot-contracts/src/ghost.rs" 51 4 51 36
  let%span span11 = "../../../../creusot-contracts/src/ghost.rs" 66 22 66 26
  let%span span12 = "../../../../creusot-contracts/src/ghost.rs" 65 14 65 36
  let%span span13 = "../../../../creusot-contracts/src/ghost.rs" 66 4 66 48
  
  use prelude.prelude.Int32
  
  use T_pcell__Token as Token'0
  
  predicate inv'10 (_1 : Token'0.t_Token int32)
  
  axiom inv_axiom'10 [@rewrite] : forall x : Token'0.t_Token int32 [inv'10 x] . inv'10 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'9 (self : Token'0.t_Token int32) =
    [%#span0] inv'10 self
  
  predicate inv'9 (_1 : Token'0.t_Token int32)
  
  axiom inv_axiom'9 [@rewrite] : forall x : Token'0.t_Token int32 [inv'9 x] . inv'9 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'8 (_1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32))
  
  axiom inv_axiom'8 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Token'0.t_Token int32) [inv'8 x] . inv'8 x = true
  
  predicate invariant'7 (self : borrowed (Token'0.t_Token int32)) =
    [%#span1] inv'10 self.current /\ inv'10 self.final
  
  predicate inv'7 (_1 : borrowed (Token'0.t_Token int32))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (Token'0.t_Token int32) [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))
  
  axiom inv_axiom'6 [@rewrite] : forall x : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) [inv'6 x] . inv'6 x
  = true
  
  predicate inv'5 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'5 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'5 x] . inv'5 x = true
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate invariant'3 (self : Token'0.t_Token int32) =
    [%#span0] inv'9 self
  
  predicate inv'3 (_1 : Token'0.t_Token int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Token'0.t_Token int32 [inv'3 x] . inv'3 x = true
  
  predicate invariant'2 (self : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) =
    [%#span0] inv'8 self
  
  predicate inv'2 (_1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32))
  
  axiom inv_axiom'2 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Token'0.t_Token int32) [inv'2 x] . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (borrowed (Token'0.t_Token int32))) =
    [%#span1] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'1 (_1 : borrowed (borrowed (Token'0.t_Token int32)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (borrowed (Token'0.t_Token int32)) [inv'1 x] . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) =
    [%#span1] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'0 (_1 : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) [inv'0 x] . inv'0 x
  = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span2] inv'4 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span4] inv'5 result}
      {[%#span3] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) =
    [%#span5] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) =
    resolve'5 _1
  
  use prelude.prelude.Int
  
  use M_pcell__use_pcell__qy123zclosureqy35z4qy125z_Type as Closure'0
  
  function field_0'0 [#"pcell.rs" 150 8 152 9] (self : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))
    
   =
    let Closure'0.M_pcell__use_pcell__qy123zclosureqy35z4qy125z a _ = self in a
  
  predicate resolve'3 [#"pcell.rs" 150 8 152 9] (_1 : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) =
    resolve'4 (field_0'0 _1)
  
  predicate resolve'1 (_1 : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed (borrowed (Token'0.t_Token int32))) =
    [%#span5] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (borrowed (Token'0.t_Token int32))) =
    resolve'2 _1
  
  use T_pcell__Id as Id'0
  
  let rec differentiate'0 (self:borrowed (Id'0.t_Id)) (other:Id'0.t_Id) (return'  (ret:()))= any
    [ return' (result:())-> {[%#span7] self.final <> other} {[%#span6] self.current = self.final} (! return' {result}) ]
    
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) (return'  (ret:Token'0.t_Token int32))= {[@expl:precondition] [%#span8] inv'2 self}
    any
    [ return' (result:Token'0.t_Token int32)-> {[%#span10] inv'3 result}
      {[%#span9] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (return'  (ret:borrowed (borrowed (Token'0.t_Token int32))))= {[@expl:precondition] [%#span11] inv'0 self}
    any
    [ return' (result:borrowed (borrowed (Token'0.t_Token int32)))-> {[%#span13] inv'1 result}
      {[%#span12] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec m_pcell__use_pcell__qy123zclosureqy35z4qy125z (_1:Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (r'1:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->
            Borrow.borrow_final
              <GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))>
              {r'0.current}
              {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) ->
                 [ &_6 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_pcell__use_pcell__qy123zclosureqy35z4qy125z ({ r'0 with current = _ret'.final ; }) r'1 ]
                
                s1))
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (borrowed (Token'0.t_Token int32))) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Token'0.t_Token <int32> {(_5.current).current}
          (fun (rid'0:Id'0.t_Id) (rvalue'0:int32) ->
            Borrow.borrow_mut <Id'0.t_Id> {rid'0}
              (fun (_ret':borrowed (Id'0.t_Id)) ->
                 [ &_4 <- _ret' ] 
                
                [ &_5 <- { _5 with current = { _5.current with current = Token'0.C_Token _ret'.final rvalue'0 ; } ; } ]
                
                s1))
      | s1 = Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (r'1:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->
            deref'0 {r'1} (fun (_ret':Token'0.t_Token int32) ->  [ &_9 <- _ret' ] s2))
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = Token'0.t_Token <int32> {_9} (fun (rid'0:Id'0.t_Id) (rvalue'0:int32) ->  [ &_8 <- rid'0 ] s1)
      | s1 = differentiate'0 {_4} {_8} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = -{resolve'1 _1}- s2
      | s2 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Id'0.t_Id) = any_l ()
    | & _5 : borrowed (borrowed (Token'0.t_Token int32)) = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) = any_l ()
    | & _8 : Id'0.t_Id = any_l ()
    | & _9 : Token'0.t_Token int32 = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_pcell__use_pcell [#"pcell.rs" 130 0 130 18]
  let%span spcell0 = "pcell.rs" 131 40 131 41
  let%span spcell1 = "pcell.rs" 133 18 133 29
  let%span spcell2 = "pcell.rs" 135 34 135 35
  let%span spcell3 = "pcell.rs" 138 18 138 29
  let%span spcell4 = "pcell.rs" 140 54 140 55
  let%span spcell5 = "pcell.rs" 141 18 141 33
  let%span spcell6 = "pcell.rs" 144 18 144 29
  let%span spcell7 = "pcell.rs" 146 52 146 53
  let%span spcell8 = "pcell.rs" 156 18 156 53
  let%span spcell9 = "pcell.rs" 159 18 159 29
  let%span span10 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span11 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span12 = "../../../../creusot-contracts/src/ghost.rs" 161 14 161 31
  let%span span13 = "pcell.rs" 123 15 123 42
  let%span span14 = "pcell.rs" 125 22 125 26
  let%span span15 = "pcell.rs" 125 28 125 33
  let%span span16 = "pcell.rs" 124 14 124 43
  let%span span17 = "pcell.rs" 125 58 125 59
  let%span span18 = "pcell.rs" 43 8 43 12
  let%span span19 = "../../../../creusot-contracts/src/std/boxed.rs" 18 8 18 22
  let%span span20 = "../../../../creusot-contracts/src/ghost.rs" 80 4 80 12
  let%span span21 = "pcell.rs" 102 15 102 46
  let%span span22 = "pcell.rs" 104 15 104 48
  let%span span23 = "pcell.rs" 109 9 109 13
  let%span span24 = "pcell.rs" 110 12 110 18
  let%span span25 = "pcell.rs" 111 8 111 13
  let%span span26 = "pcell.rs" 112 12 112 19
  let%span span27 = "pcell.rs" 103 14 103 45
  let%span span28 = "pcell.rs" 105 14 105 47
  let%span span29 = "pcell.rs" 106 14 106 65
  let%span span30 = "pcell.rs" 107 14 107 65
  let%span span31 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span32 = "../../../../creusot-contracts/src/resolve.rs" 55 8 55 23
  let%span span33 = "../../../../creusot-contracts/src/ghost.rs" 91 8 91 24
  let%span span34 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span span35 = "../../../../creusot-contracts/src/ghost.rs" 145 14 145 28
  let%span span36 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  let%span span37 = "pcell.rs" 24 14 24 28
  let%span span38 = "pcell.rs" 25 14 25 29
  let%span span39 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 18
  let%span span40 = "../../../../creusot-contracts/src/ghost.rs" 50 14 50 35
  let%span span41 = "../../../../creusot-contracts/src/ghost.rs" 51 4 51 36
  let%span span42 = "../../../../creusot-contracts/src/ghost.rs" 66 22 66 26
  let%span span43 = "../../../../creusot-contracts/src/ghost.rs" 65 14 65 36
  let%span span44 = "../../../../creusot-contracts/src/ghost.rs" 66 4 66 48
  let%span span45 = "pcell.rs" 93 15 93 45
  let%span span46 = "pcell.rs" 97 20 97 24
  let%span span47 = "pcell.rs" 97 26 97 31
  let%span span48 = "pcell.rs" 97 58 97 63
  let%span span49 = "pcell.rs" 94 14 94 44
  let%span span50 = "pcell.rs" 95 14 95 46
  let%span span51 = "pcell.rs" 96 14 96 45
  let%span span52 = "pcell.rs" 97 71 97 72
  let%span span53 = "pcell.rs" 82 15 82 45
  let%span span54 = "pcell.rs" 85 16 85 20
  let%span span55 = "pcell.rs" 85 22 85 27
  let%span span56 = "pcell.rs" 85 54 85 59
  let%span span57 = "pcell.rs" 83 14 83 44
  let%span span58 = "pcell.rs" 84 14 84 45
  let%span span59 = "../../../../creusot-contracts/src/ghost.rs" 120 27 120 31
  let%span span60 = "../../../../creusot-contracts/src/ghost.rs" 119 14 119 39
  let%span span61 = "../../../../creusot-contracts/src/ghost.rs" 120 4 120 52
  let%span span62 = "pcell.rs" 72 15 72 42
  let%span span63 = "pcell.rs" 74 16 74 20
  let%span span64 = "pcell.rs" 74 22 74 27
  let%span span65 = "pcell.rs" 73 14 73 43
  let%span span66 = "pcell.rs" 74 53 74 54
  let%span span67 = "../../../../creusot-contracts/src/ghost.rs" 106 19 106 23
  let%span span68 = "../../../../creusot-contracts/src/ghost.rs" 105 14 105 35
  let%span span69 = "../../../../creusot-contracts/src/ghost.rs" 106 4 106 40
  let%span span70 = "pcell.rs" 62 15 62 20
  let%span span71 = "pcell.rs" 60 14 60 41
  let%span span72 = "pcell.rs" 61 14 61 38
  let%span span73 = "pcell.rs" 62 28 62 54
  
  use prelude.prelude.Int32
  
  use T_pcell__Token as Token'0
  
  predicate inv'17 (_1 : Token'0.t_Token int32)
  
  axiom inv_axiom'17 [@rewrite] : forall x : Token'0.t_Token int32 [inv'17 x] . inv'17 x = true
  
  use prelude.prelude.Borrow
  
  predicate invariant'16 (self : Token'0.t_Token int32) =
    [%#span10] inv'17 self
  
  predicate inv'16 (_1 : Token'0.t_Token int32)
  
  axiom inv_axiom'16 [@rewrite] : forall x : Token'0.t_Token int32 [inv'16 x] . inv'16 x = true
  
  predicate invariant'15 (self : borrowed (Token'0.t_Token int32)) =
    [%#span11] inv'17 self.current /\ inv'17 self.final
  
  predicate inv'15 (_1 : borrowed (Token'0.t_Token int32))
  
  axiom inv_axiom'15 [@rewrite] : forall x : borrowed (Token'0.t_Token int32) [inv'15 x] . inv'15 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'14 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'14 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'14 x] . inv'14 x = true
  
  predicate inv'13 (_1 : ())
  
  axiom inv_axiom'13 [@rewrite] : forall x : () [inv'13 x] . inv'13 x = true
  
  predicate invariant'12 (self : Token'0.t_Token int32) =
    [%#span10] inv'16 self
  
  predicate inv'12 (_1 : Token'0.t_Token int32)
  
  axiom inv_axiom'12 [@rewrite] : forall x : Token'0.t_Token int32 [inv'12 x] . inv'12 x = true
  
  predicate inv'3 (_1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32))
  
  predicate invariant'11 (self : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) =
    [%#span10] inv'3 self
  
  predicate inv'11 (_1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32))
  
  axiom inv_axiom'11 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Token'0.t_Token int32) [inv'11 x] . inv'11 x = true
  
  predicate invariant'10 (self : borrowed (borrowed (Token'0.t_Token int32))) =
    [%#span11] inv'15 self.current /\ inv'15 self.final
  
  predicate inv'10 (_1 : borrowed (borrowed (Token'0.t_Token int32)))
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed (borrowed (Token'0.t_Token int32)) [inv'10 x] . inv'10 x = true
  
  predicate inv'6 (_1 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))
  
  predicate invariant'9 (self : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) =
    [%#span11] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'9 (_1 : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))))
  
  axiom inv_axiom'9 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) [inv'9 x] . inv'9 x
  = true
  
  predicate inv'8 (_1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32))
  
  axiom inv_axiom'8 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Token'0.t_Token int32) [inv'8 x] . inv'8 x = true
  
  use T_pcell__PCell as PCell'0
  
  predicate inv'7 (_1 : PCell'0.t_PCell int32)
  
  axiom inv_axiom'7 [@rewrite] : forall x : PCell'0.t_PCell int32 [inv'7 x] . inv'7 x = true
  
  axiom inv_axiom'6 [@rewrite] : forall x : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) [inv'6 x] . inv'6 x
  = true
  
  predicate invariant'5 (self : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32))) =
    [%#span11] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'5 (_1 : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32)))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32)) [inv'5 x] . inv'5 x
  = true
  
  predicate invariant'4 (self : PCell'0.t_PCell int32) =
    [%#span10] inv'7 self
  
  predicate inv'4 (_1 : PCell'0.t_PCell int32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : PCell'0.t_PCell int32 [inv'4 x] . inv'4 x = true
  
  axiom inv_axiom'3 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Token'0.t_Token int32) [inv'3 x] . inv'3 x = true
  
  predicate invariant'2 (self : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) =
    [%#span10] inv'8 self
  
  predicate inv'2 (_1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32))
  
  axiom inv_axiom'2 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Token'0.t_Token int32) [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : (PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : (PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32)) [inv'1 x] . inv'1 x
  = true
  
  predicate inv'0 (_1 : int32)
  
  axiom inv_axiom'0 [@rewrite] : forall x : int32 [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_pcell__Token as T_pcell__Token
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  function inner'0 (self : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) : Token'0.t_Token int32
  
  axiom inner'0_spec : forall self : GhostBox'0.t_GhostBox (Token'0.t_Token int32) . [%#span12] inner'0 self
  = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  use T_pcell__PCell as T_pcell__PCell
  
  let rec into_inner'0 (self:PCell'0.t_PCell int32) (token:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) (return'  (ret:int32))= {[@expl:precondition] [%#span15] inv'8 token}
    {[@expl:precondition] [%#span14] inv'7 self}
    {[@expl:precondition] [%#span13] T_pcell__PCell.t_PCell__id self = T_pcell__Token.t_Token__id (inner'0 token)}
    any
    [ return' (result:int32)-> {[%#span17] inv'0 result}
      {[%#span16] result = T_pcell__Token.t_Token__value (inner'0 token)}
      (! return' {result}) ]
    
  
  use T_alloc__alloc__Global as Global'0
  
  function view'2 [#"pcell.rs" 42 4 42 25] (self : Token'0.t_Token int32) : Token'0.t_Token int32 =
    [%#span18] self
  
  function view'1 (self : Token'0.t_Token int32) : Token'0.t_Token int32 =
    [%#span19] view'2 self
  
  function view'0 (self : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) : Token'0.t_Token int32 =
    [%#span20] view'1 (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self)
  
  function inner'2 (self : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) : borrowed (Token'0.t_Token int32)
  
  axiom inner'2_spec : forall self : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) . [%#span12] inner'2 self
  = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  let rec swap'0 (self:PCell'0.t_PCell int32) (self_t:GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) (other:PCell'0.t_PCell int32) (other_t:GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) (return'  (ret:()))= {[@expl:precondition] [%#span26] inv'6 other_t}
    {[@expl:precondition] [%#span25] inv'4 other}
    {[@expl:precondition] [%#span24] inv'6 self_t}
    {[@expl:precondition] [%#span23] inv'4 self}
    {[@expl:precondition] [%#span22] T_pcell__PCell.t_PCell__id other
    = T_pcell__Token.t_Token__id (inner'2 other_t).current}
    {[@expl:precondition] [%#span21] T_pcell__PCell.t_PCell__id self
    = T_pcell__Token.t_Token__id (inner'2 self_t).current}
    any
    [ return' (result:())-> {[%#span30] T_pcell__Token.t_Token__value (inner'2 self_t).current
      = T_pcell__Token.t_Token__value (inner'2 other_t).final}
      {[%#span29] T_pcell__Token.t_Token__value (inner'2 self_t).final
      = T_pcell__Token.t_Token__value (inner'2 other_t).current}
      {[%#span28] T_pcell__PCell.t_PCell__id other = T_pcell__Token.t_Token__id (inner'2 other_t).final}
      {[%#span27] T_pcell__PCell.t_PCell__id self = T_pcell__Token.t_Token__id (inner'2 self_t).final}
      (! return' {result}) ]
    
  
  predicate resolve'17 (self : borrowed (Token'0.t_Token int32)) =
    [%#span31] self.final = self.current
  
  predicate resolve'15 (_1 : borrowed (Token'0.t_Token int32)) =
    resolve'17 _1
  
  predicate resolve'12 (self : borrowed (Token'0.t_Token int32)) =
    [%#span32] resolve'15 self
  
  predicate resolve'9 (_1 : borrowed (Token'0.t_Token int32)) =
    resolve'12 _1
  
  predicate resolve'5 (self : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) =
    [%#span33] resolve'9 (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self)
  
  predicate resolve'1 (_1 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) =
    resolve'5 _1
  
  predicate resolve'14 (_1 : Token'0.t_Token int32) =
    true
  
  predicate resolve'11 (self : Token'0.t_Token int32) =
    [%#span32] resolve'14 self
  
  predicate resolve'8 (_1 : Token'0.t_Token int32) =
    resolve'11 _1
  
  predicate resolve'4 (self : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) =
    [%#span33] resolve'8 (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self)
  
  predicate resolve'0 (_1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) =
    resolve'4 _1
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span34] inv'13 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span36] inv'14 result}
      {[%#span35] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'13 (self : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) =
    [%#span31] self.final = self.current
  
  predicate resolve'10 (_1 : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) =
    resolve'13 _1
  
  use prelude.prelude.Int
  
  use M_pcell__use_pcell__qy123zclosureqy35z4qy125z_Type as Closure'0
  
  function field_0'0 [#"pcell.rs" 150 8 152 9] (self : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))
    
   =
    let Closure'0.M_pcell__use_pcell__qy123zclosureqy35z4qy125z a _ = self in a
  
  predicate resolve'7 [#"pcell.rs" 150 8 152 9] (_1 : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) =
    resolve'10 (field_0'0 _1)
  
  predicate resolve'3 (_1 : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) =
    resolve'7 _1
  
  predicate resolve'6 (self : borrowed (borrowed (Token'0.t_Token int32))) =
    [%#span31] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (borrowed (Token'0.t_Token int32))) =
    resolve'6 _1
  
  use T_pcell__Id as Id'0
  
  let rec differentiate'0 (self:borrowed (Id'0.t_Id)) (other:Id'0.t_Id) (return'  (ret:()))= any
    [ return' (result:())-> {[%#span38] self.final <> other}
      {[%#span37] self.current = self.final}
      (! return' {result}) ]
    
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) (return'  (ret:Token'0.t_Token int32))= {[@expl:precondition] [%#span39] inv'11 self}
    any
    [ return' (result:Token'0.t_Token int32)-> {[%#span41] inv'12 result}
      {[%#span40] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (return'  (ret:borrowed (borrowed (Token'0.t_Token int32))))= {[@expl:precondition] [%#span42] inv'9 self}
    any
    [ return' (result:borrowed (borrowed (Token'0.t_Token int32)))-> {[%#span44] inv'10 result}
      {[%#span43] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  let rec closure4'0 (_1:Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (r'1:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->
            Borrow.borrow_final
              <GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))>
              {r'0.current}
              {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) ->
                 [ &_6 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_pcell__use_pcell__qy123zclosureqy35z4qy125z ({ r'0 with current = _ret'.final ; }) r'1 ]
                
                s1))
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (borrowed (Token'0.t_Token int32))) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Token'0.t_Token <int32> {(_5.current).current}
          (fun (rid'0:Id'0.t_Id) (rvalue'0:int32) ->
            Borrow.borrow_mut <Id'0.t_Id> {rid'0}
              (fun (_ret':borrowed (Id'0.t_Id)) ->
                 [ &_4 <- _ret' ] 
                
                [ &_5 <- { _5 with current = { _5.current with current = Token'0.C_Token _ret'.final rvalue'0 ; } ; } ]
                
                s1))
      | s1 = Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) (r'1:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->
            deref'0 {r'1} (fun (_ret':Token'0.t_Token int32) ->  [ &_9 <- _ret' ] s2))
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = Token'0.t_Token <int32> {_9} (fun (rid'0:Id'0.t_Id) (rvalue'0:int32) ->  [ &_8 <- rid'0 ] s1)
      | s1 = differentiate'0 {_4} {_8} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = -{resolve'2 _5}- s1
      | s1 = -{resolve'3 _1}- s2
      | s2 = new'1 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Id'0.t_Id) = any_l ()
    | & _5 : borrowed (borrowed (Token'0.t_Token int32)) = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) = any_l ()
    | & _8 : Id'0.t_Id = any_l ()
    | & _9 : Token'0.t_Token int32 = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  let rec replace'0 (self:PCell'0.t_PCell int32) (token:GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) (value:int32) (return'  (ret:int32))= {[@expl:precondition] [%#span48] inv'0 value}
    {[@expl:precondition] [%#span47] inv'6 token}
    {[@expl:precondition] [%#span46] inv'4 self}
    {[@expl:precondition] [%#span45] T_pcell__PCell.t_PCell__id self
    = T_pcell__Token.t_Token__id (inner'2 token).current}
    any
    [ return' (result:int32)-> {[%#span52] inv'0 result}
      {[%#span51] value = T_pcell__Token.t_Token__value (inner'2 token).final}
      {[%#span50] result = T_pcell__Token.t_Token__value (inner'2 token).current}
      {[%#span49] T_pcell__PCell.t_PCell__id self = T_pcell__Token.t_Token__id (inner'2 token).final}
      (! return' {result}) ]
    
  
  let rec set'0 (self:PCell'0.t_PCell int32) (token:GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) (value:int32) (return'  (ret:()))= {[@expl:precondition] [%#span56] inv'0 value}
    {[@expl:precondition] [%#span55] inv'6 token}
    {[@expl:precondition] [%#span54] inv'4 self}
    {[@expl:precondition] [%#span53] T_pcell__PCell.t_PCell__id self
    = T_pcell__Token.t_Token__id (inner'2 token).current}
    any
    [ return' (result:())-> {[%#span58] value = T_pcell__Token.t_Token__value (inner'2 token).final}
      {[%#span57] T_pcell__PCell.t_PCell__id self = T_pcell__Token.t_Token__id (inner'2 token).final}
      (! return' {result}) ]
    
  
  let rec borrow_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32))) (return'  (ret:GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))))= {[@expl:precondition] [%#span59] inv'5 self}
    any
    [ return' (result:GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))-> {[%#span61] inv'6 result}
      {[%#span60] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int32
  
  function inner'1 (self : GhostBox'0.t_GhostBox (Token'0.t_Token int32)) : Token'0.t_Token int32
  
  axiom inner'1_spec : forall self : GhostBox'0.t_GhostBox (Token'0.t_Token int32) . [%#span12] inner'1 self
  = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  let rec get'0 (self:PCell'0.t_PCell int32) (token:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) (return'  (ret:int32))= {[@expl:precondition] [%#span64] inv'3 token}
    {[@expl:precondition] [%#span63] inv'4 self}
    {[@expl:precondition] [%#span62] T_pcell__PCell.t_PCell__id self = T_pcell__Token.t_Token__id (inner'1 token)}
    any
    [ return' (result:int32)-> {[%#span66] inv'0 result}
      {[%#span65] result = T_pcell__Token.t_Token__value (inner'1 token)}
      (! return' {result}) ]
    
  
  let rec borrow'0 (self:GhostBox'0.t_GhostBox (Token'0.t_Token int32)) (return'  (ret:GhostBox'0.t_GhostBox (Token'0.t_Token int32)))= {[@expl:precondition] [%#span67] inv'2 self}
    any
    [ return' (result:GhostBox'0.t_GhostBox (Token'0.t_Token int32))-> {[%#span69] inv'3 result}
      {[%#span68] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result
      = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self}
      (! return' {result}) ]
    
  
  let rec new'0 (value:int32) (return'  (ret:(PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32))))= {[@expl:precondition] [%#span70] inv'0 value}
    any
    [ return' (result:(PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32)))-> {[%#span73] inv'1 result}
      {[%#span72] T_pcell__Token.t_Token__value (view'0 (let (_, a) = result in a)) = value}
      {[%#span71] T_pcell__PCell.t_PCell__id (let (a, _) = result in a)
      = T_pcell__Token.t_Token__id (view'0 (let (_, a) = result in a))}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec use_pcell (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#spcell0] (1 : int32)}
          (fun (_ret':(PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32))) ->  [ &_3 <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &pcell <- let (r'0, _) = _3 in r'0 ] s1 | s1 =  [ &token <- let (_, r'1) = _3 in r'1 ] s2 | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = borrow'0 {token} (fun (_ret':GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->  [ &_6 <- _ret' ] s1)
      | s1 = bb3 ]
      
    | bb3 = s0 [ s0 = get'0 {pcell} {_6} (fun (_ret':int32) ->  [ &value <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#spcell1] Int32.to_int value = 1} s1
      | s1 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Token'0.t_Token int32)> {token}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32))) ->
             [ &_13 <- _ret' ] 
             [ &token <- _ret'.final ] 
            s2)
      | s2 = borrow_mut'0 {_13}
          (fun (_ret':GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) ->  [ &_12 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = set'0 {pcell} {_12} {[%#spcell2] (2 : int32)} (fun (_ret':()) ->  [ &_10 <- _ret' ] s1) | s1 = bb6 ]
      
    | bb6 = s0
      [ s0 = borrow'0 {token} (fun (_ret':GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->  [ &_16 <- _ret' ] s1)
      | s1 = bb7 ]
      
    | bb7 = s0 [ s0 = get'0 {pcell} {_16} (fun (_ret':int32) ->  [ &value1 <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#spcell3] Int32.to_int value1 = 2} s1
      | s1 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Token'0.t_Token int32)> {token}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32))) ->
             [ &_23 <- _ret' ] 
             [ &token <- _ret'.final ] 
            s2)
      | s2 = borrow_mut'0 {_23}
          (fun (_ret':GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) ->  [ &_22 <- _ret' ] s3)
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = replace'0 {pcell} {_22} {[%#spcell4] (3 : int32)} (fun (_ret':int32) ->  [ &old_value <- _ret' ] s1)
      | s1 = bb10 ]
      
    | bb10 = s0
      [ s0 = {[@expl:assertion] [%#spcell5] Int32.to_int old_value = 2} s1
      | s1 = borrow'0 {token} (fun (_ret':GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->  [ &_28 <- _ret' ] s2)
      | s2 = bb11 ]
      
    | bb11 = s0 [ s0 = get'0 {pcell} {_28} (fun (_ret':int32) ->  [ &value2 <- _ret' ] s1) | s1 = bb12 ] 
    | bb12 = s0
      [ s0 = {[@expl:assertion] [%#spcell6] Int32.to_int value2 = 3} s1
      | s1 = new'0 {[%#spcell7] (4 : int32)}
          (fun (_ret':(PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32))) ->  [ &_34 <- _ret' ] s2)
      | s2 = bb13 ]
      
    | bb13 = s0
      [ s0 =  [ &other_pcell <- let (r'0, _) = _34 in r'0 ] s1
      | s1 =  [ &other_token <- let (_, r'1) = _34 in r'1 ] s2
      | s2 = bb14 ]
      
    | bb14 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Token'0.t_Token int32)> {token}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32))) ->
             [ &_37 <- _ret' ] 
             [ &token <- _ret'.final ] 
            s1)
      | s1 = borrow_mut'0 {_37}
          (fun (_ret':GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) ->  [ &token1 <- _ret' ] s2)
      | s2 = bb15 ]
      
    | bb15 = s0
      [ s0 = borrow'0 {other_token}
          (fun (_ret':GhostBox'0.t_GhostBox (Token'0.t_Token int32)) ->  [ &other_token1 <- _ret' ] s1)
      | s1 = bb16 ]
      
    | bb16 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))> {token1}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)))) ->
             [ &_41 <- _ret' ] 
             [ &token1 <- _ret'.final ] 
            s1)
      | s1 =  [ &_40 <- Closure'0.M_pcell__use_pcell__qy123zclosureqy35z4qy125z _41 other_token1 ] s2
      | s2 = closure4'0 {_40} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_35 <- _ret' ] s3)
      | s3 = bb17 ]
      
    | bb17 = s0 [ s0 = -{resolve'0 other_token1}- s1 | s1 = -{resolve'1 token1}- s2 | s2 = bb18 ] 
    | bb18 = bb19
    | bb19 = bb20
    | bb20 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Token'0.t_Token int32)> {token}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32))) ->
             [ &_47 <- _ret' ] 
             [ &token <- _ret'.final ] 
            s1)
      | s1 = borrow_mut'0 {_47}
          (fun (_ret':GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) ->  [ &_46 <- _ret' ] s2)
      | s2 = bb21 ]
      
    | bb21 = s0
      [ s0 =  [ &_49 <- other_pcell ] s1
      | s1 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Token'0.t_Token int32)> {other_token}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32))) ->
             [ &_51 <- _ret' ] 
             [ &other_token <- _ret'.final ] 
            s2)
      | s2 = borrow_mut'0 {_51}
          (fun (_ret':GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) ->  [ &_50 <- _ret' ] s3)
      | s3 = bb22 ]
      
    | bb22 = s0 [ s0 = swap'0 {pcell} {_46} {_49} {_50} (fun (_ret':()) ->  [ &_44 <- _ret' ] s1) | s1 = bb23 ] 
    | bb23 = s0
      [ s0 = {[@expl:assertion] [%#spcell8] T_pcell__Token.t_Token__id (inner'0 token)
        <> T_pcell__Token.t_Token__id (view'0 other_token)}
        s1
      | s1 = bb24 ]
      
    | bb24 = s0 [ s0 = into_inner'0 {pcell} {token} (fun (_ret':int32) ->  [ &value3 <- _ret' ] s1) | s1 = bb25 ] 
    | bb25 = s0 [ s0 = {[@expl:assertion] [%#spcell9] Int32.to_int value3 = 4} s1 | s1 = bb26 ] 
    | bb26 = bb27
    | bb27 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & pcell : PCell'0.t_PCell int32 = any_l ()
    | & token : GhostBox'0.t_GhostBox (Token'0.t_Token int32) = any_l ()
    | & _3 : (PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32)) = any_l ()
    | & value : int32 = any_l ()
    | & _6 : GhostBox'0.t_GhostBox (Token'0.t_Token int32) = any_l ()
    | & _10 : () = any_l ()
    | & _12 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) = any_l ()
    | & _13 : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32)) = any_l ()
    | & value1 : int32 = any_l ()
    | & _16 : GhostBox'0.t_GhostBox (Token'0.t_Token int32) = any_l ()
    | & old_value : int32 = any_l ()
    | & _22 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) = any_l ()
    | & _23 : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32)) = any_l ()
    | & value2 : int32 = any_l ()
    | & _28 : GhostBox'0.t_GhostBox (Token'0.t_Token int32) = any_l ()
    | & other_pcell : PCell'0.t_PCell int32 = any_l ()
    | & other_token : GhostBox'0.t_GhostBox (Token'0.t_Token int32) = any_l ()
    | & _34 : (PCell'0.t_PCell int32, GhostBox'0.t_GhostBox (Token'0.t_Token int32)) = any_l ()
    | & _35 : GhostBox'0.t_GhostBox () = any_l ()
    | & token1 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) = any_l ()
    | & _37 : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32)) = any_l ()
    | & other_token1 : GhostBox'0.t_GhostBox (Token'0.t_Token int32) = any_l ()
    | & _40 : Closure'0.m_pcell__use_pcell__qy123zclosureqy35z4qy125z = any_l ()
    | & _41 : borrowed (GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32))) = any_l ()
    | & _43 : () = any_l ()
    | & _44 : () = any_l ()
    | & _46 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) = any_l ()
    | & _47 : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32)) = any_l ()
    | & _49 : PCell'0.t_PCell int32 = any_l ()
    | & _50 : GhostBox'0.t_GhostBox (borrowed (Token'0.t_Token int32)) = any_l ()
    | & _51 : borrowed (GhostBox'0.t_GhostBox (Token'0.t_Token int32)) = any_l ()
    | & value3 : int32 = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_pcell__qyi15770566659586008400 [#"pcell.rs" 38 0 38 25] (* <Token<T> as creusot_contracts::View> *)
  type t
end
