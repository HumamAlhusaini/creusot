module M_snapshot_in_ghost__foo [#"snapshot_in_ghost.rs" 5 0 5 12]
  let%span ssnapshot_in_ghost0 = "snapshot_in_ghost.rs" 7 16 7 28
  let%span ssnapshot_in_ghost1 = "snapshot_in_ghost.rs" 8 22 8 29
  let%span sghost2 = "../../../../creusot-contracts/src/ghost.rs" 185 15 185 16
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 185 4 185 28
  let%span sghost4 = "../../../../creusot-contracts/src/ghost.rs" 183 14 183 28
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.Snapshot
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: () }
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:()) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost2] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost3] inv'1 result}
      {[%#sghost4] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
  
  
  use creusot.prelude.Intrinsic
  
  use creusot.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0[#"snapshot_in_ghost.rs" 5 0 5 12] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost0] Snapshot.new 1 ] s1 | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost1] Snapshot.inner x = 1} s1
      | s1 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_1 <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = bb3
    | bb3 = return' {_0} ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & _1 : t_GhostBox'0 = Intrinsic.any_l ()
    | & _2 : () = Intrinsic.any_l ()
    | & x : Snapshot.snap_ty (int) = Intrinsic.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_snapshot_in_ghost__is_pure [#"snapshot_in_ghost.rs" 14 0 14 16]
  let%span ssnapshot_in_ghost0 = "snapshot_in_ghost.rs" 15 12 15 24
  let%span ssnapshot_in_ghost1 = "snapshot_in_ghost.rs" 16 18 16 25
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.Snapshot
  
  use creusot.prelude.Intrinsic
  
  use creusot.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec is_pure'0[#"snapshot_in_ghost.rs" 14 0 14 16] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost0] Snapshot.new 1 ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost1] Snapshot.inner x = 1} s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = Intrinsic.any_l () | & x : Snapshot.snap_ty (int) = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_snapshot_in_ghost__bar [#"snapshot_in_ghost.rs" 21 0 21 12]
  let%span ssnapshot_in_ghost0 = "snapshot_in_ghost.rs" 22 21 22 25
  let%span ssnapshot_in_ghost1 = "snapshot_in_ghost.rs" 24 16 24 28
  let%span ssnapshot_in_ghost2 = "snapshot_in_ghost.rs" 25 22 25 55
  let%span sghost3 = "../../../../creusot-contracts/src/ghost.rs" 185 15 185 16
  let%span sghost4 = "../../../../creusot-contracts/src/ghost.rs" 185 4 185 28
  let%span sghost5 = "../../../../creusot-contracts/src/ghost.rs" 183 14 183 28
  
  use creusot.int.Int32
  
  use creusot.prelude.Snapshot
  
  predicate inv'0 (_1 : ())
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: () }
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:()) (return'  (ret:t_GhostBox'0))= {[@expl:new 'x' type invariant] [%#sghost3] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost4] inv'1 result}
      {[%#sghost5] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
  
  
  use creusot.prelude.Intrinsic
  
  use creusot.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec bar'0[#"snapshot_in_ghost.rs" 21 0 21 12] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &x <- [%#ssnapshot_in_ghost0] (1 : Int32.t) ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 =  [ &_4 <- [%#ssnapshot_in_ghost1] Snapshot.new x ] s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = {[@expl:assertion] [%#ssnapshot_in_ghost2] exists y : Int32.t . x = y} s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 = new'0 {_3} (fun (_ret':t_GhostBox'0) ->  [ &_2 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & x : Int32.t = Intrinsic.any_l ()
    | & _2 : t_GhostBox'0 = Intrinsic.any_l ()
    | & _3 : () = Intrinsic.any_l ()
    | & _4 : Snapshot.snap_ty Int32.t = Intrinsic.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
