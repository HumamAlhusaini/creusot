
module M_typing__ghost_enter_ghost [#"typing.rs" 14 0 14 26]
  let%span styping0 = "typing.rs" 25 18 25 30
  let%span styping1 = "typing.rs" 26 18 26 29
  let%span styping2 = "typing.rs" 15 32 15 33
  let%span styping3 = "typing.rs" 16 32 16 33
  let%span styping4 = "typing.rs" 17 35 17 36
  let%span styping5 = "typing.rs" 22 25 22 26
  let%span sghost6 = "../../../../creusot-contracts/src/ghost.rs" 80 4 80 12
  let%span sghost7 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost8 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost9 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  let%span sghost10 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 18
  let%span sghost11 = "../../../../creusot-contracts/src/ghost.rs" 50 14 50 35
  let%span sghost12 = "../../../../creusot-contracts/src/ghost.rs" 51 4 51 36
  let%span sghost13 = "../../../../creusot-contracts/src/ghost.rs" 66 22 66 26
  let%span sghost14 = "../../../../creusot-contracts/src/ghost.rs" 65 14 65 36
  let%span sghost15 = "../../../../creusot-contracts/src/ghost.rs" 66 4 66 48
  let%span sboxed16 = "../../../../creusot-contracts/src/std/boxed.rs" 18 8 18 22
  let%span sresolve17 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span styping18 = "typing.rs" 10 8 10 29
  
  use prelude.prelude.Int32
  
  type t_NonCopy'0  =
    { t_NonCopy__0'0: int32 }
  
  predicate inv'0 (_1 : t_NonCopy'0)
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: t_NonCopy'0 }
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_NonCopy'0 [inv'0 x] . inv'0 x = true
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_GhostBox'0 [inv'2 x] . inv'2 x = true
  
  predicate inv'3 (_1 : t_NonCopy'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_NonCopy'0 [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : borrowed (t_GhostBox'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_GhostBox'0) [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : borrowed (t_NonCopy'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (t_NonCopy'0) [inv'5 x] . inv'5 x = true
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  type t_GhostBox'1  =
    { t_GhostBox__0'1: () }
  
  predicate inv'7 (_1 : t_GhostBox'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_GhostBox'1 [inv'7 x] . inv'7 x = true
  
  let rec new'0 (x:t_NonCopy'0) (return'  (ret:t_GhostBox'0))= {[@expl:precondition] [%#sghost7] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost9] inv'1 result}
      {[%#sghost8] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  let rec closure0'0 (_1:()) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- { t_NonCopy__0'0 = ([%#styping2] (1 : int32)) } ] s1
      | s1 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : t_GhostBox'0 = any_l () | & _2 : t_NonCopy'0 = any_l () ] 
    [ return' (result:t_GhostBox'0)-> return' {result} ]
    
  
  let rec closure1'0 (_1:()) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- { t_NonCopy__0'0 = ([%#styping3] (2 : int32)) } ] s1
      | s1 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : t_GhostBox'0 = any_l () | & _2 : t_NonCopy'0 = any_l () ] 
    [ return' (result:t_GhostBox'0)-> return' {result} ]
    
  
  let rec closure2'0 (_1:()) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- { t_NonCopy__0'0 = ([%#styping4] (3 : int32)) } ] s1
      | s1 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = return' {_0} ]
     [ & _0 : t_GhostBox'0 = any_l () | & _2 : t_NonCopy'0 = any_l () ] 
    [ return' (result:t_GhostBox'0)-> return' {result} ]
    
  
  let rec deref'0 (self:t_GhostBox'0) (return'  (ret:t_NonCopy'0))= {[@expl:precondition] [%#sghost10] inv'2 self}
    any
    [ return' (result:t_NonCopy'0)-> {[%#sghost12] inv'3 result}
      {[%#sghost11] self.t_GhostBox__0'0 = result}
      (! return' {result}) ]
    
  
  let rec deref_mut'0 (self:borrowed (t_GhostBox'0)) (return'  (ret:borrowed (t_NonCopy'0)))= {[@expl:precondition] [%#sghost13] inv'4 self}
    any
    [ return' (result:borrowed (t_NonCopy'0))-> {[%#sghost15] inv'5 result}
      {[%#sghost14] result
      = Borrow.borrow_logic (self.current).t_GhostBox__0'0 (self.final).t_GhostBox__0'0 (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (t_NonCopy'0)) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_NonCopy'0)) =
    resolve'2 _1
  
  type m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z'0  =
    { field_0'0: t_GhostBox'0; field_1'0: borrowed (t_GhostBox'0); field_2'0: t_GhostBox'0 }
  
  predicate resolve'5 (self : borrowed (t_GhostBox'0)) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (t_GhostBox'0)) =
    resolve'5 _1
  
  predicate resolve'3 [#"typing.rs" 19 4 23 5] (_1 : m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z'0) =
    resolve'4 _1.field_1'0
  
  predicate resolve'1 (_1 : m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z'0) =
    resolve'3 _1
  
  let rec new'1 (x:()) (return'  (ret:t_GhostBox'1))= {[@expl:precondition] [%#sghost7] inv'6 x}
    any
    [ return' (result:t_GhostBox'1)-> {[%#sghost9] inv'7 result}
      {[%#sghost8] result.t_GhostBox__0'1 = x}
      (! return' {result}) ]
    
  
  let rec closure3'0 (_1:m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z'0) (return'  (ret:t_GhostBox'1))= bb0
    [ bb0 = s0 [ s0 = deref'0 {_1.field_0'0} (fun (_ret':t_NonCopy'0) ->  [ &_3 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &_5 <- { t_NonCopy__0'0 = ([%#styping5] (4 : int32)) } ] s1
      | s1 = Borrow.borrow_final <t_GhostBox'0> {(_1.field_1'0).current} {Borrow.get_id _1.field_1'0}
          (fun (_ret':borrowed (t_GhostBox'0)) ->
             [ &_7 <- _ret' ] 
             [ &_1 <- { _1 with field_1'0 = { _1.field_1'0 with current = _ret'.final } } ] 
            s2)
      | s2 = deref_mut'0 {_7} (fun (_ret':borrowed (t_NonCopy'0)) ->  [ &_6 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_6 <- { _6 with current = _5 } ] s1
      | s1 = -{resolve'0 _6}- s2
      | s2 = -{resolve'1 _1}- s3
      | s3 = new'1 {_2} (fun (_ret':t_GhostBox'1) ->  [ &_0 <- _ret' ] s4)
      | s4 = bb3 ]
      
    | bb3 = return' {_0} ]
    
    [ & _0 : t_GhostBox'1 = any_l ()
    | & _1 : m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z'0 = _1
    | & _2 : () = any_l ()
    | & _3 : t_NonCopy'0 = any_l ()
    | & _5 : t_NonCopy'0 = any_l ()
    | & _6 : borrowed (t_NonCopy'0) = any_l ()
    | & _7 : borrowed (t_GhostBox'0) = any_l () ]
     [ return' (result:t_GhostBox'1)-> return' {result} ] 
  
  use prelude.prelude.Int
  
  use prelude.prelude.Int32
  
  function view'2 [#"typing.rs" 9 4 9 33] (self : t_NonCopy'0) : int =
    [%#styping18] Int32.to_int self.t_NonCopy__0'0
  
  function view'1 (self : t_NonCopy'0) : int =
    [%#sboxed16] view'2 self
  
  function view'0 (self : t_GhostBox'0) : int =
    [%#sghost6] view'1 self.t_GhostBox__0'0
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_enter_ghost'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &_2 <- () ] s1
      | s1 = closure0'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &g_move <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 =  [ &_5 <- () ] s1
      | s1 = closure1'0 {_5} (fun (_ret':t_GhostBox'0) ->  [ &g_read <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 =  [ &_8 <- () ] s1 | s1 = closure2'0 {_8} (fun (_ret':t_GhostBox'0) ->  [ &g_mut <- _ret' ] s2) | s2 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_mut <t_GhostBox'0> {g_mut}
          (fun (_ret':borrowed (t_GhostBox'0)) ->  [ &_13 <- _ret' ]  [ &g_mut <- _ret'.final ] s1)
      | s1 =  [ &_11 <- { field_0'0 = g_read; field_1'0 = _13; field_2'0 = g_move } ] s2
      | s2 = closure3'0 {_11} (fun (_ret':t_GhostBox'1) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb4 ]
      
    | bb4 = bb5
    | bb5 = s0 [ s0 = {[@expl:assertion] [%#styping0] view'0 g_read = 2} s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 = {[@expl:assertion] [%#styping1] view'0 g_mut = 4} s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & g_move : t_GhostBox'0 = any_l ()
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & g_read : t_GhostBox'0 = any_l ()
    | & _5 : () = any_l ()
    | & _6 : () = any_l ()
    | & g_mut : t_GhostBox'0 = any_l ()
    | & _8 : () = any_l ()
    | & _9 : () = any_l ()
    | & _10 : t_GhostBox'1 = any_l ()
    | & _11 : m_typing__ghost_enter_ghost__qy123zclosureqy35z3qy125z'0 = any_l ()
    | & _13 : borrowed (t_GhostBox'0) = any_l ()
    | & _15 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_typing__copy_enter_ghost [#"typing.rs" 29 0 29 25]
  let%span styping0 = "typing.rs" 30 12 30 16
  let%span styping1 = "typing.rs" 32 16 32 17
  let%span styping2 = "typing.rs" 32 19 32 21
  let%span styping3 = "typing.rs" 39 18 39 25
  let%span styping4 = "typing.rs" 40 18 40 47
  let%span sghost5 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span sghost6 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span sghost7 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  
  use prelude.prelude.Int32
  
  predicate inv'0 (_1 : ())
  
  type t_GhostBox'0  =
    { t_GhostBox__0'0: () }
  
  predicate inv'1 (_1 : t_GhostBox'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : () [inv'0 x] . inv'0 x = true
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_GhostBox'0 [inv'1 x] . inv'1 x = true
  
  let rec new'0 (x:()) (return'  (ret:t_GhostBox'0))= {[@expl:precondition] [%#sghost5] inv'0 x}
    any
    [ return' (result:t_GhostBox'0)-> {[%#sghost7] inv'1 result}
      {[%#sghost6] result.t_GhostBox__0'0 = x}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Borrow
  
  type m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z'0  =
    { field_0'0: int32; field_1'0: (); field_2'0: (int32, int32) }
  
  let rec closure0'0 (_1:m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z'0) (return'  (ret:t_GhostBox'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_x <- _1.field_0'0 ] s1
      | s1 =  [ &_pair <- _1.field_2'0 ] s2
      | s2 = new'0 {_2} (fun (_ret':t_GhostBox'0) ->  [ &_0 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = return' {_0} ]
    
    [ & _0 : t_GhostBox'0 = any_l ()
    | & _1 : m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z'0 = _1
    | & _2 : () = any_l ()
    | & _x : int32 = any_l ()
    | & _pair : (int32, int32) = any_l () ]
     [ return' (result:t_GhostBox'0)-> return' {result} ] 
  
  use prelude.prelude.Int32
  
  meta "compute_max_steps" 1000000
  
  let rec copy_enter_ghost'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &x <- [%#styping0] (2 : int32) ] s1
      | s1 =  [ &pair <- (([%#styping1] (6 : int32)), ([%#styping2] (42 : int32))) ] s2
      | s2 =  [ &_5 <- { field_0'0 = x; field_1'0 = unit; field_2'0 = pair } ] s3
      | s3 = closure0'0 {_5} (fun (_ret':t_GhostBox'0) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb1 ]
      
    | bb1 = bb2
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#styping3] Int32.to_int x = 2} s1
      | s1 = {[@expl:assertion] [%#styping4] Int32.to_int (let (a, _) = pair in a) = 6
        /\ Int32.to_int (let (_, a) = pair in a) = 42}
        s2
      | s2 = return' {_0} ]
       ]
    )
    [ & _0 : () = any_l ()
    | & x : int32 = any_l ()
    | & unit : () = any_l ()
    | & pair : (int32, int32) = any_l ()
    | & _4 : t_GhostBox'0 = any_l ()
    | & _5 : m_typing__copy_enter_ghost__qy123zclosureqy35z0qy125z'0 = any_l ()
    | & _9 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
