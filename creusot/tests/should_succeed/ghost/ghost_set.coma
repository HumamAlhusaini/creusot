module T_creusot_contracts__ghost__GhostBox [#"../../../../creusot-contracts/src/ghost.rs" 27 0 27 22]
  type t_GhostBox 't =
    | C_GhostBox 't
  
  let rec t_GhostBox < 't > (input:t_GhostBox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0}) ]
    
  
  function t_GhostBox__0 (self : t_GhostBox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module T_ghost_set__ghost_map__qyClosure0 [#"ghost_set.rs" 6 4 34 5]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use set.Fset
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Borrow
  
  type m_ghost_set__ghost_map__qyClosure0  =
    | M_ghost_set__ghost_map__qyClosure0 (borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)))
  
  let rec m_ghost_set__ghost_map__qyClosure0 (input:m_ghost_set__ghost_map__qyClosure0) (ret  (set:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))))= any
    [ good (set:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)))-> {M_ghost_set__ghost_map__qyClosure0 set = input}
      (! ret {set}) ]
    
end
module M_ghost_set__ghost_map__qyClosure0 [#"ghost_set.rs" 6 4 34 5]
  let%span sghost_set0 = "ghost_set.rs" 7 22 7 53
  let%span sghost_set1 = "ghost_set.rs" 8 25 8 26
  let%span sghost_set2 = "ghost_set.rs" 10 22 10 63
  let%span sghost_set3 = "ghost_set.rs" 11 22 11 34
  let%span sghost_set4 = "ghost_set.rs" 12 28 12 29
  let%span sghost_set5 = "ghost_set.rs" 12 31 12 32
  let%span sghost_set6 = "ghost_set.rs" 12 34 12 35
  let%span sghost_set7 = "ghost_set.rs" 14 45 14 46
  let%span sghost_set8 = "ghost_set.rs" 15 46 15 47
  let%span sghost_set9 = "ghost_set.rs" 17 22 17 54
  let%span sghost_set10 = "ghost_set.rs" 18 22 18 34
  let%span sghost_set11 = "ghost_set.rs" 19 22 19 62
  let%span sghost_set12 = "ghost_set.rs" 24 22 24 69
  let%span sghost_set13 = "ghost_set.rs" 25 22 25 41
  let%span sghost_set14 = "ghost_set.rs" 26 22 26 36
  let%span sghost_set15 = "ghost_set.rs" 31 22 31 31
  let%span sghost_set16 = "ghost_set.rs" 32 22 32 32
  let%span sghost_set17 = "ghost_set.rs" 33 22 33 32
  let%span sghost18 = "../../../../creusot-contracts/src/ghost.rs" 184 9 184 15
  let%span sfset19 = "../../../../creusot-contracts/src/logic/fset.rs" 35 8 35 26
  let%span sghost20 = "../../../../creusot-contracts/src/ghost.rs" 68 22 68 26
  let%span sghost21 = "../../../../creusot-contracts/src/ghost.rs" 67 14 67 36
  let%span sghost22 = "../../../../creusot-contracts/src/ghost.rs" 68 4 68 48
  let%span sfset23 = "../../../../creusot-contracts/src/logic/fset.rs" 232 35 232 40
  let%span sfset24 = "../../../../creusot-contracts/src/logic/fset.rs" 230 14 230 44
  let%span sfset25 = "../../../../creusot-contracts/src/logic/fset.rs" 231 14 231 48
  let%span sghost26 = "../../../../creusot-contracts/src/ghost.rs" 52 14 52 18
  let%span sghost27 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 35
  let%span sghost28 = "../../../../creusot-contracts/src/ghost.rs" 52 4 52 36
  let%span sfset29 = "../../../../creusot-contracts/src/logic/fset.rs" 176 14 176 34
  let%span sfset30 = "../../../../creusot-contracts/src/logic/fset.rs" 268 35 268 40
  let%span sfset31 = "../../../../creusot-contracts/src/logic/fset.rs" 266 14 266 45
  let%span sfset32 = "../../../../creusot-contracts/src/logic/fset.rs" 267 14 267 48
  let%span sfset33 = "../../../../creusot-contracts/src/logic/fset.rs" 198 33 198 38
  let%span sfset34 = "../../../../creusot-contracts/src/logic/fset.rs" 197 14 197 45
  let%span sghost35 = "../../../../creusot-contracts/src/ghost.rs" 148 15 148 16
  let%span sghost36 = "../../../../creusot-contracts/src/ghost.rs" 146 14 146 28
  let%span sghost37 = "../../../../creusot-contracts/src/ghost.rs" 148 4 148 28
  let%span sfset38 = "../../../../creusot-contracts/src/logic/fset.rs" 51 8 51 26
  let%span sresolve39 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sfset40 = "../../../../creusot-contracts/src/logic/fset.rs" 75 8 75 26
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'7 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'7 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : int32 [inv'5 x] . inv'5 x = true
  
  use set.Fset
  
  predicate inv'4 (_1 : Fset.fset int32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Fset.fset int32 [inv'4 x] . inv'4 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'3 (_1 : GhostBox'0.t_GhostBox (Fset.fset int32))
  
  axiom inv_axiom'3 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Fset.fset int32) [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : int32 [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : borrowed (Fset.fset int32))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Fset.fset int32) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) [inv'0 x] . inv'0 x
  = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'0 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost35] inv'6 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost37] inv'7 result}
      {[%#sghost36] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) =
    [%#sresolve39] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) =
    resolve'5 _1
  
  use T_ghost_set__ghost_map__qyClosure0 as Closure'0
  
  function field_0'0 [#"ghost_set.rs" 6 4 34 5] (self : Closure'0.m_ghost_set__ghost_map__qyClosure0) : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))
    
   =
    let Closure'0.M_ghost_set__ghost_map__qyClosure0 a = self in a
  
  predicate resolve'3 [#"ghost_set.rs" 6 4 34 5] (_1 : Closure'0.m_ghost_set__ghost_map__qyClosure0) =
    resolve'4 (field_0'0 _1)
  
  predicate resolve'1 (_1 : Closure'0.m_ghost_set__ghost_map__qyClosure0) =
    resolve'3 _1
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset int32) (e : int32) =
    [%#sfset19] Fset.mem e self
  
  let rec contains_ghost'0 (self:Fset.fset int32) (value:int32) (return'  (ret:bool))= {[@expl:precondition] [%#sfset33] inv'5 value}
    any [ return' (result:bool)-> {[%#sfset34] result = contains'0 self value} (! return' {result}) ] 
  
  use set.Fset
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset int32) (a : int32) : Fset.fset int32 =
    [%#sfset40] Fset.remove a self
  
  let rec remove_ghost'0 (self:borrowed (Fset.fset int32)) (value:int32) (return'  (ret:bool))= {[@expl:precondition] [%#sfset30] inv'5 value}
    any
    [ return' (result:bool)-> {[%#sfset32] result = contains'0 self.current value}
      {[%#sfset31] self.final = remove'0 self.current value}
      (! return' {result}) ]
    
  
  let rec len_ghost'0 (self:Fset.fset int32) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sfset29] result = Fset.cardinal self} (! return' {result}) ]
    
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Fset.fset int32)) (return'  (ret:Fset.fset int32))= {[@expl:precondition] [%#sghost26] inv'3 self}
    any
    [ return' (result:Fset.fset int32)-> {[%#sghost28] inv'4 result}
      {[%#sghost27] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Fset.fset int32)) =
    [%#sresolve39] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Fset.fset int32)) =
    resolve'2 _1
  
  use set.Fset
  
  function insert'0 [@inline:trivial] (self : Fset.fset int32) (e : int32) : Fset.fset int32 =
    [%#sfset38] Fset.add e self
  
  let rec insert_ghost'0 (self:borrowed (Fset.fset int32)) (value:int32) (return'  (ret:bool))= {[@expl:precondition] [%#sfset23] inv'2 value}
    any
    [ return' (result:bool)-> {[%#sfset25] result = (not contains'0 self.current value)}
      {[%#sfset24] self.final = insert'0 self.current value}
      (! return' {result}) ]
    
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) (return'  (ret:borrowed (Fset.fset int32)))= {[@expl:precondition] [%#sghost20] inv'0 self}
    any
    [ return' (result:borrowed (Fset.fset int32))-> {[%#sghost22] inv'1 result}
      {[%#sghost21] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  function inner_logic'0 (self : GhostBox'0.t_GhostBox (Fset.fset int32)) : Fset.fset int32 =
    [%#sghost18] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  meta "compute_max_steps" 1000000
  
  let rec m_ghost_set__ghost_map__qyClosure0 (_1:Closure'0.m_ghost_set__ghost_map__qyClosure0) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set0] forall k : int32 . not contains'0 (inner_logic'0 (field_0'0 _1).current) k}
        s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_8 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_8} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_6 <- _ret' ] 
             [ &_7 <- { _7 with current = _ret'.final ; } ] 
            s1)
      | s1 = insert_ghost'0 {_6} {[%#sghost_set1] (1 : int32)} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_11 <- _ret' ] s2))
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = len_ghost'0 {_11} (fun (_ret':int) ->  [ &length1 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set2] contains'0 (inner_logic'0 (field_0'0 _1).current) (1 : int32)
        /\ not contains'0 (inner_logic'0 (field_0'0 _1).current) (2 : int32)}
        s1
      | s1 = {[@expl:assertion] [%#sghost_set3] length1 = 1} s2
      | s2 =  [ &_20 <- (([%#sghost_set4] (1 : int32)), ([%#sghost_set5] (2 : int32)), ([%#sghost_set6] (3 : int32))) ] 
        s3
      | s3 =  [ &x1 <- let (r'0, _, _) = _20 in r'0 ] s4
      | s4 =  [ &x2 <- let (_, r'1, _) = _20 in r'1 ] s5
      | s5 =  [ &x3 <- let (_, _, r'2) = _20 in r'2 ] s6
      | s6 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'3:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'3.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_24 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'3 with current = _ret'.final ; }) ] 
                s7))
      | s7 = deref_mut'0 {_24} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_23 <- _ret' ] s8)
      | s8 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_23.current} {Borrow.get_id _23}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_22 <- _ret' ] 
             [ &_23 <- { _23 with current = _ret'.final ; } ] 
            s1)
      | s1 = insert_ghost'0 {_22} {[%#sghost_set7] (2 : int32)} (fun (_ret':bool) ->  [ &inserted_true <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _23}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_28 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_28} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_27 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_27.current} {Borrow.get_id _27}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_26 <- _ret' ] 
             [ &_27 <- { _27 with current = _ret'.final ; } ] 
            s1)
      | s1 = insert_ghost'0 {_26} {[%#sghost_set8] (2 : int32)} (fun (_ret':bool) ->  [ &inserted_false <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 _27}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_31 <- _ret' ] s2))
      | s2 = bb9 ]
      
    | bb9 = s0 [ s0 = len_ghost'0 {_31} (fun (_ret':int) ->  [ &length2 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set9] inserted_true /\ not inserted_false} s1
      | s1 = {[@expl:assertion] [%#sghost_set10] length2 = 2} s2
      | s2 = {[@expl:assertion] [%#sghost_set11] contains'0 (inner_logic'0 (field_0'0 _1).current) (1 : int32)
        /\ contains'0 (inner_logic'0 (field_0'0 _1).current) (2 : int32)}
        s3
      | s3 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_42 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s4))
      | s4 = deref_mut'0 {_42} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_41 <- _ret' ] s5)
      | s5 = bb11 ]
      
    | bb11 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_41.current} {Borrow.get_id _41}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_40 <- _ret' ] 
             [ &_41 <- { _41 with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_44 <- x3 ] s2
      | s2 = remove_ghost'0 {_40} {_44} (fun (_ret':bool) ->  [ &remove_false1 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = -{resolve'0 _41}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_48 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_48} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_47 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_47.current} {Borrow.get_id _47}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_46 <- _ret' ] 
             [ &_47 <- { _47 with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_50 <- x2 ] s2
      | s2 = remove_ghost'0 {_46} {_50} (fun (_ret':bool) ->  [ &remove_true <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 = -{resolve'0 _47}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current} {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_54 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_54} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_53 <- _ret' ] s3)
      | s3 = bb15 ]
      
    | bb15 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_53.current} {Borrow.get_id _53}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_52 <- _ret' ] 
             [ &_53 <- { _53 with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_56 <- x2 ] s2
      | s2 = remove_ghost'0 {_52} {_56} (fun (_ret':bool) ->  [ &remove_false2 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = s0
      [ s0 = -{resolve'0 _53}- s1
      | s1 = {[@expl:assertion] [%#sghost_set12] not remove_false1 /\ remove_true /\ not remove_false2} s2
      | s2 = {[@expl:assertion] [%#sghost_set13] not contains'0 (inner_logic'0 (field_0'0 _1).current) (2 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_set14] Fset.cardinal (inner_logic'0 (field_0'0 _1).current) = 1} s4
      | s4 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_65 <- _ret' ] s5))
      | s5 = bb17 ]
      
    | bb17 = s0
      [ s0 =  [ &_68 <- x1 ] s1
      | s1 = contains_ghost'0 {_65} {_68} (fun (_ret':bool) ->  [ &contains1 <- _ret' ] s2)
      | s2 = bb18 ]
      
    | bb18 = s0
      [ s0 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_71 <- _ret' ] s1))
      | s1 = bb19 ]
      
    | bb19 = s0
      [ s0 =  [ &_74 <- x2 ] s1
      | s1 = contains_ghost'0 {_71} {_74} (fun (_ret':bool) ->  [ &contains2 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0
      [ s0 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_77 <- _ret' ] s1))
      | s1 = bb21 ]
      
    | bb21 = s0
      [ s0 =  [ &_80 <- x3 ] s1
      | s1 = contains_ghost'0 {_77} {_80} (fun (_ret':bool) ->  [ &contains3 <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = s0
      [ s0 = -{resolve'1 _1}- s1
      | s1 = {[@expl:assertion] [%#sghost_set15] contains1} s2
      | s2 = {[@expl:assertion] [%#sghost_set16] not contains2} s3
      | s3 = {[@expl:assertion] [%#sghost_set17] not contains3} s4
      | s4 = new'0 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb23 ]
      
    | bb23 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_ghost_set__ghost_map__qyClosure0 = _1
    | & _2 : () = any_l ()
    | & _5 : bool = any_l ()
    | & _6 : borrowed (Fset.fset int32) = any_l ()
    | & _7 : borrowed (Fset.fset int32) = any_l ()
    | & _8 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & length1 : int = any_l ()
    | & _11 : Fset.fset int32 = any_l ()
    | & x1 : int32 = any_l ()
    | & x2 : int32 = any_l ()
    | & x3 : int32 = any_l ()
    | & _20 : (int32, int32, int32) = any_l ()
    | & inserted_true : bool = any_l ()
    | & _22 : borrowed (Fset.fset int32) = any_l ()
    | & _23 : borrowed (Fset.fset int32) = any_l ()
    | & _24 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & inserted_false : bool = any_l ()
    | & _26 : borrowed (Fset.fset int32) = any_l ()
    | & _27 : borrowed (Fset.fset int32) = any_l ()
    | & _28 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & length2 : int = any_l ()
    | & _31 : Fset.fset int32 = any_l ()
    | & remove_false1 : bool = any_l ()
    | & _40 : borrowed (Fset.fset int32) = any_l ()
    | & _41 : borrowed (Fset.fset int32) = any_l ()
    | & _42 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & _44 : int32 = any_l ()
    | & remove_true : bool = any_l ()
    | & _46 : borrowed (Fset.fset int32) = any_l ()
    | & _47 : borrowed (Fset.fset int32) = any_l ()
    | & _48 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & _50 : int32 = any_l ()
    | & remove_false2 : bool = any_l ()
    | & _52 : borrowed (Fset.fset int32) = any_l ()
    | & _53 : borrowed (Fset.fset int32) = any_l ()
    | & _54 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & _56 : int32 = any_l ()
    | & contains1 : bool = any_l ()
    | & _65 : Fset.fset int32 = any_l ()
    | & _68 : int32 = any_l ()
    | & contains2 : bool = any_l ()
    | & _71 : Fset.fset int32 = any_l ()
    | & _74 : int32 = any_l ()
    | & contains3 : bool = any_l ()
    | & _77 : Fset.fset int32 = any_l ()
    | & _80 : int32 = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_ghost_set__ghost_map [#"ghost_set.rs" 4 0 4 18]
  let%span sghost_set0 = "ghost_set.rs" 5 18 5 36
  let%span sfset1 = "../../../../creusot-contracts/src/logic/fset.rs" 149 14 149 31
  let%span sghost_set2 = "ghost_set.rs" 7 22 7 53
  let%span sghost_set3 = "ghost_set.rs" 8 25 8 26
  let%span sghost_set4 = "ghost_set.rs" 10 22 10 63
  let%span sghost_set5 = "ghost_set.rs" 11 22 11 34
  let%span sghost_set6 = "ghost_set.rs" 12 28 12 29
  let%span sghost_set7 = "ghost_set.rs" 12 31 12 32
  let%span sghost_set8 = "ghost_set.rs" 12 34 12 35
  let%span sghost_set9 = "ghost_set.rs" 14 45 14 46
  let%span sghost_set10 = "ghost_set.rs" 15 46 15 47
  let%span sghost_set11 = "ghost_set.rs" 17 22 17 54
  let%span sghost_set12 = "ghost_set.rs" 18 22 18 34
  let%span sghost_set13 = "ghost_set.rs" 19 22 19 62
  let%span sghost_set14 = "ghost_set.rs" 24 22 24 69
  let%span sghost_set15 = "ghost_set.rs" 25 22 25 41
  let%span sghost_set16 = "ghost_set.rs" 26 22 26 36
  let%span sghost_set17 = "ghost_set.rs" 31 22 31 31
  let%span sghost_set18 = "ghost_set.rs" 32 22 32 32
  let%span sghost_set19 = "ghost_set.rs" 33 22 33 32
  let%span sghost20 = "../../../../creusot-contracts/src/ghost.rs" 184 9 184 15
  let%span sfset21 = "../../../../creusot-contracts/src/logic/fset.rs" 35 8 35 26
  let%span sghost22 = "../../../../creusot-contracts/src/ghost.rs" 68 22 68 26
  let%span sghost23 = "../../../../creusot-contracts/src/ghost.rs" 67 14 67 36
  let%span sghost24 = "../../../../creusot-contracts/src/ghost.rs" 68 4 68 48
  let%span sfset25 = "../../../../creusot-contracts/src/logic/fset.rs" 232 35 232 40
  let%span sfset26 = "../../../../creusot-contracts/src/logic/fset.rs" 230 14 230 44
  let%span sfset27 = "../../../../creusot-contracts/src/logic/fset.rs" 231 14 231 48
  let%span sghost28 = "../../../../creusot-contracts/src/ghost.rs" 52 14 52 18
  let%span sghost29 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 35
  let%span sghost30 = "../../../../creusot-contracts/src/ghost.rs" 52 4 52 36
  let%span sfset31 = "../../../../creusot-contracts/src/logic/fset.rs" 176 14 176 34
  let%span sfset32 = "../../../../creusot-contracts/src/logic/fset.rs" 268 35 268 40
  let%span sfset33 = "../../../../creusot-contracts/src/logic/fset.rs" 266 14 266 45
  let%span sfset34 = "../../../../creusot-contracts/src/logic/fset.rs" 267 14 267 48
  let%span sfset35 = "../../../../creusot-contracts/src/logic/fset.rs" 198 33 198 38
  let%span sfset36 = "../../../../creusot-contracts/src/logic/fset.rs" 197 14 197 45
  let%span sghost37 = "../../../../creusot-contracts/src/ghost.rs" 148 15 148 16
  let%span sghost38 = "../../../../creusot-contracts/src/ghost.rs" 146 14 146 28
  let%span sghost39 = "../../../../creusot-contracts/src/ghost.rs" 148 4 148 28
  let%span sfset40 = "../../../../creusot-contracts/src/logic/fset.rs" 51 8 51 26
  let%span sresolve41 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sfset42 = "../../../../creusot-contracts/src/logic/fset.rs" 75 8 75 26
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'7 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'7 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : ())
  
  axiom inv_axiom'6 [@rewrite] : forall x : () [inv'6 x] . inv'6 x = true
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use prelude.prelude.Borrow
  
  predicate inv'5 (_1 : int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : int32 [inv'5 x] . inv'5 x = true
  
  use set.Fset
  
  predicate inv'4 (_1 : Fset.fset int32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Fset.fset int32 [inv'4 x] . inv'4 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'3 (_1 : GhostBox'0.t_GhostBox (Fset.fset int32))
  
  axiom inv_axiom'3 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Fset.fset int32) [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : int32 [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : borrowed (Fset.fset int32))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Fset.fset int32) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) [inv'0 x] . inv'0 x
  = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost37] inv'6 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost39] inv'7 result}
      {[%#sghost38] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) =
    [%#sresolve41] self.final = self.current
  
  predicate resolve'4 (_1 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) =
    resolve'5 _1
  
  use T_ghost_set__ghost_map__qyClosure0 as Closure'0
  
  function field_0'0 [#"ghost_set.rs" 6 4 34 5] (self : Closure'0.m_ghost_set__ghost_map__qyClosure0) : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))
    
   =
    let Closure'0.M_ghost_set__ghost_map__qyClosure0 a = self in a
  
  predicate resolve'3 [#"ghost_set.rs" 6 4 34 5] (_1 : Closure'0.m_ghost_set__ghost_map__qyClosure0) =
    resolve'4 (field_0'0 _1)
  
  predicate resolve'1 (_1 : Closure'0.m_ghost_set__ghost_map__qyClosure0) =
    resolve'3 _1
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset int32) (e : int32) =
    [%#sfset21] Fset.mem e self
  
  let rec contains_ghost'0 (self:Fset.fset int32) (value:int32) (return'  (ret:bool))= {[@expl:precondition] [%#sfset35] inv'5 value}
    any [ return' (result:bool)-> {[%#sfset36] result = contains'0 self value} (! return' {result}) ] 
  
  use set.Fset
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset int32) (a : int32) : Fset.fset int32 =
    [%#sfset42] Fset.remove a self
  
  let rec remove_ghost'0 (self:borrowed (Fset.fset int32)) (value:int32) (return'  (ret:bool))= {[@expl:precondition] [%#sfset32] inv'5 value}
    any
    [ return' (result:bool)-> {[%#sfset34] result = contains'0 self.current value}
      {[%#sfset33] self.final = remove'0 self.current value}
      (! return' {result}) ]
    
  
  let rec len_ghost'0 (self:Fset.fset int32) (return'  (ret:int))= any
    [ return' (result:int)-> {[%#sfset31] result = Fset.cardinal self} (! return' {result}) ]
    
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Fset.fset int32)) (return'  (ret:Fset.fset int32))= {[@expl:precondition] [%#sghost28] inv'3 self}
    any
    [ return' (result:Fset.fset int32)-> {[%#sghost30] inv'4 result}
      {[%#sghost29] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (Fset.fset int32)) =
    [%#sresolve41] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Fset.fset int32)) =
    resolve'2 _1
  
  use set.Fset
  
  function insert'0 [@inline:trivial] (self : Fset.fset int32) (e : int32) : Fset.fset int32 =
    [%#sfset40] Fset.add e self
  
  let rec insert_ghost'0 (self:borrowed (Fset.fset int32)) (value:int32) (return'  (ret:bool))= {[@expl:precondition] [%#sfset25] inv'2 value}
    any
    [ return' (result:bool)-> {[%#sfset27] result = (not contains'0 self.current value)}
      {[%#sfset26] self.final = insert'0 self.current value}
      (! return' {result}) ]
    
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) (return'  (ret:borrowed (Fset.fset int32)))= {[@expl:precondition] [%#sghost22] inv'0 self}
    any
    [ return' (result:borrowed (Fset.fset int32))-> {[%#sghost24] inv'1 result}
      {[%#sghost23] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  function inner_logic'0 (self : GhostBox'0.t_GhostBox (Fset.fset int32)) : Fset.fset int32 =
    [%#sghost20] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  let rec closure0'0 (_1:Closure'0.m_ghost_set__ghost_map__qyClosure0) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set2] forall k : int32 . not contains'0 (inner_logic'0 (field_0'0 _1).current) k}
        s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_8 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_8} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_6 <- _ret' ] 
             [ &_7 <- { _7 with current = _ret'.final ; } ] 
            s1)
      | s1 = insert_ghost'0 {_6} {[%#sghost_set3] (1 : int32)} (fun (_ret':bool) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _7}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_11 <- _ret' ] s2))
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = len_ghost'0 {_11} (fun (_ret':int) ->  [ &length1 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set4] contains'0 (inner_logic'0 (field_0'0 _1).current) (1 : int32)
        /\ not contains'0 (inner_logic'0 (field_0'0 _1).current) (2 : int32)}
        s1
      | s1 = {[@expl:assertion] [%#sghost_set5] length1 = 1} s2
      | s2 =  [ &_20 <- (([%#sghost_set6] (1 : int32)), ([%#sghost_set7] (2 : int32)), ([%#sghost_set8] (3 : int32))) ] 
        s3
      | s3 =  [ &x1 <- let (r'0, _, _) = _20 in r'0 ] s4
      | s4 =  [ &x2 <- let (_, r'1, _) = _20 in r'1 ] s5
      | s5 =  [ &x3 <- let (_, _, r'2) = _20 in r'2 ] s6
      | s6 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'3:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'3.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_24 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'3 with current = _ret'.final ; }) ] 
                s7))
      | s7 = deref_mut'0 {_24} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_23 <- _ret' ] s8)
      | s8 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_23.current} {Borrow.get_id _23}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_22 <- _ret' ] 
             [ &_23 <- { _23 with current = _ret'.final ; } ] 
            s1)
      | s1 = insert_ghost'0 {_22} {[%#sghost_set9] (2 : int32)} (fun (_ret':bool) ->  [ &inserted_true <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _23}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_28 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_28} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_27 <- _ret' ] s3)
      | s3 = bb7 ]
      
    | bb7 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_27.current} {Borrow.get_id _27}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_26 <- _ret' ] 
             [ &_27 <- { _27 with current = _ret'.final ; } ] 
            s1)
      | s1 = insert_ghost'0 {_26} {[%#sghost_set10] (2 : int32)} (fun (_ret':bool) ->  [ &inserted_false <- _ret' ] s2)
      | s2 = bb8 ]
      
    | bb8 = s0
      [ s0 = -{resolve'0 _27}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_31 <- _ret' ] s2))
      | s2 = bb9 ]
      
    | bb9 = s0 [ s0 = len_ghost'0 {_31} (fun (_ret':int) ->  [ &length2 <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0
      [ s0 = {[@expl:assertion] [%#sghost_set11] inserted_true /\ not inserted_false} s1
      | s1 = {[@expl:assertion] [%#sghost_set12] length2 = 2} s2
      | s2 = {[@expl:assertion] [%#sghost_set13] contains'0 (inner_logic'0 (field_0'0 _1).current) (1 : int32)
        /\ contains'0 (inner_logic'0 (field_0'0 _1).current) (2 : int32)}
        s3
      | s3 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_42 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s4))
      | s4 = deref_mut'0 {_42} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_41 <- _ret' ] s5)
      | s5 = bb11 ]
      
    | bb11 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_41.current} {Borrow.get_id _41}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_40 <- _ret' ] 
             [ &_41 <- { _41 with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_44 <- x3 ] s2
      | s2 = remove_ghost'0 {_40} {_44} (fun (_ret':bool) ->  [ &remove_false1 <- _ret' ] s3)
      | s3 = bb12 ]
      
    | bb12 = s0
      [ s0 = -{resolve'0 _41}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_48 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_48} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_47 <- _ret' ] s3)
      | s3 = bb13 ]
      
    | bb13 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_47.current} {Borrow.get_id _47}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_46 <- _ret' ] 
             [ &_47 <- { _47 with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_50 <- x2 ] s2
      | s2 = remove_ghost'0 {_46} {_50} (fun (_ret':bool) ->  [ &remove_true <- _ret' ] s3)
      | s3 = bb14 ]
      
    | bb14 = s0
      [ s0 = -{resolve'0 _47}- s1
      | s1 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (Fset.fset int32)> {r'0.current} {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
                 [ &_54 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_54} (fun (_ret':borrowed (Fset.fset int32)) ->  [ &_53 <- _ret' ] s3)
      | s3 = bb15 ]
      
    | bb15 = s0
      [ s0 = Borrow.borrow_final <Fset.fset int32> {_53.current} {Borrow.get_id _53}
          (fun (_ret':borrowed (Fset.fset int32)) ->
             [ &_52 <- _ret' ] 
             [ &_53 <- { _53 with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_56 <- x2 ] s2
      | s2 = remove_ghost'0 {_52} {_56} (fun (_ret':bool) ->  [ &remove_false2 <- _ret' ] s3)
      | s3 = bb16 ]
      
    | bb16 = s0
      [ s0 = -{resolve'0 _53}- s1
      | s1 = {[@expl:assertion] [%#sghost_set14] not remove_false1 /\ remove_true /\ not remove_false2} s2
      | s2 = {[@expl:assertion] [%#sghost_set15] not contains'0 (inner_logic'0 (field_0'0 _1).current) (2 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_set16] Fset.cardinal (inner_logic'0 (field_0'0 _1).current) = 1} s4
      | s4 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_65 <- _ret' ] s5))
      | s5 = bb17 ]
      
    | bb17 = s0
      [ s0 =  [ &_68 <- x1 ] s1
      | s1 = contains_ghost'0 {_65} {_68} (fun (_ret':bool) ->  [ &contains1 <- _ret' ] s2)
      | s2 = bb18 ]
      
    | bb18 = s0
      [ s0 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_71 <- _ret' ] s1))
      | s1 = bb19 ]
      
    | bb19 = s0
      [ s0 =  [ &_74 <- x2 ] s1
      | s1 = contains_ghost'0 {_71} {_74} (fun (_ret':bool) ->  [ &contains2 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0
      [ s0 = Closure'0.m_ghost_set__ghost_map__qyClosure0 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
            deref'0 {r'0.current} (fun (_ret':Fset.fset int32) ->  [ &_77 <- _ret' ] s1))
      | s1 = bb21 ]
      
    | bb21 = s0
      [ s0 =  [ &_80 <- x3 ] s1
      | s1 = contains_ghost'0 {_77} {_80} (fun (_ret':bool) ->  [ &contains3 <- _ret' ] s2)
      | s2 = bb22 ]
      
    | bb22 = s0
      [ s0 = -{resolve'1 _1}- s1
      | s1 = {[@expl:assertion] [%#sghost_set17] contains1} s2
      | s2 = {[@expl:assertion] [%#sghost_set18] not contains2} s3
      | s3 = {[@expl:assertion] [%#sghost_set19] not contains3} s4
      | s4 = new'1 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s5)
      | s5 = bb23 ]
      
    | bb23 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_ghost_set__ghost_map__qyClosure0 = _1
    | & _2 : () = any_l ()
    | & _5 : bool = any_l ()
    | & _6 : borrowed (Fset.fset int32) = any_l ()
    | & _7 : borrowed (Fset.fset int32) = any_l ()
    | & _8 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & length1 : int = any_l ()
    | & _11 : Fset.fset int32 = any_l ()
    | & x1 : int32 = any_l ()
    | & x2 : int32 = any_l ()
    | & x3 : int32 = any_l ()
    | & _20 : (int32, int32, int32) = any_l ()
    | & inserted_true : bool = any_l ()
    | & _22 : borrowed (Fset.fset int32) = any_l ()
    | & _23 : borrowed (Fset.fset int32) = any_l ()
    | & _24 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & inserted_false : bool = any_l ()
    | & _26 : borrowed (Fset.fset int32) = any_l ()
    | & _27 : borrowed (Fset.fset int32) = any_l ()
    | & _28 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & length2 : int = any_l ()
    | & _31 : Fset.fset int32 = any_l ()
    | & remove_false1 : bool = any_l ()
    | & _40 : borrowed (Fset.fset int32) = any_l ()
    | & _41 : borrowed (Fset.fset int32) = any_l ()
    | & _42 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & _44 : int32 = any_l ()
    | & remove_true : bool = any_l ()
    | & _46 : borrowed (Fset.fset int32) = any_l ()
    | & _47 : borrowed (Fset.fset int32) = any_l ()
    | & _48 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & _50 : int32 = any_l ()
    | & remove_false2 : bool = any_l ()
    | & _52 : borrowed (Fset.fset int32) = any_l ()
    | & _53 : borrowed (Fset.fset int32) = any_l ()
    | & _54 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & _56 : int32 = any_l ()
    | & contains1 : bool = any_l ()
    | & _65 : Fset.fset int32 = any_l ()
    | & _68 : int32 = any_l ()
    | & contains2 : bool = any_l ()
    | & _71 : Fset.fset int32 = any_l ()
    | & _74 : int32 = any_l ()
    | & contains3 : bool = any_l ()
    | & _77 : Fset.fset int32 = any_l ()
    | & _80 : int32 = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  use set.Fset
  
  let rec new'0 (_1:()) (return'  (ret:GhostBox'0.t_GhostBox (Fset.fset int32)))= any
    [ return' (result:GhostBox'0.t_GhostBox (Fset.fset int32))-> {[%#sfset1] Fset.is_empty (inner_logic'0 result)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_map (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sghost_set0] ()} (fun (_ret':GhostBox'0.t_GhostBox (Fset.fset int32)) ->  [ &set <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Fset.fset int32)> {set}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Fset.fset int32))) ->
             [ &_4 <- _ret' ] 
             [ &set <- _ret'.final ] 
            s1)
      | s1 =  [ &_3 <- Closure'0.M_ghost_set__ghost_map__qyClosure0 _4 ] s2
      | s2 = closure0'0 {_3} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_2 <- _ret' ] s3)
      | s3 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & set : GhostBox'0.t_GhostBox (Fset.fset int32) = any_l ()
    | & _2 : GhostBox'0.t_GhostBox () = any_l ()
    | & _3 : Closure'0.m_ghost_set__ghost_map__qyClosure0 = any_l ()
    | & _4 : borrowed (GhostBox'0.t_GhostBox (Fset.fset int32)) = any_l ()
    | & _5 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
