
module T_creusot_contracts__ghost__GhostBox [#"../../../../creusot-contracts/src/ghost.rs" 27 0 27 22]
  type t_GhostBox 't =
    | C_GhostBox 't
  
  let rec t_GhostBox < 't > (input:t_GhostBox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0}) ]
    
  
  function t_GhostBox__0 (self : t_GhostBox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z_Type [#"ghost_vec.rs" 7 4 38 5]
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  type m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z  =
    | M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z (borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))
  
  let rec m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z (input:m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) (ret  (v:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))))= any
    [ good (v:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))-> {M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z v
      = input}
      (! ret {v}) ]
    
end
module M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z [#"ghost_vec.rs" 7 4 38 5]
  let%span sghost_vec0 = "ghost_vec.rs" 8 21 8 23
  let%span sghost_vec1 = "ghost_vec.rs" 9 22 9 35
  let%span sghost_vec2 = "ghost_vec.rs" 10 22 10 34
  let%span sghost_vec3 = "ghost_vec.rs" 12 21 12 23
  let%span sghost_vec4 = "ghost_vec.rs" 13 21 13 23
  let%span sghost_vec5 = "ghost_vec.rs" 15 22 15 30
  let%span sghost_vec6 = "ghost_vec.rs" 16 22 16 69
  let%span sghost_vec7 = "ghost_vec.rs" 18 41 18 42
  let%span sghost_vec8 = "ghost_vec.rs" 19 41 19 42
  let%span sghost_vec9 = "ghost_vec.rs" 20 22 20 42
  let%span sghost_vec10 = "ghost_vec.rs" 21 22 21 34
  let%span sghost_vec11 = "ghost_vec.rs" 23 45 23 46
  let%span sghost_vec12 = "ghost_vec.rs" 24 17 24 19
  let%span sghost_vec13 = "ghost_vec.rs" 26 22 26 35
  let%span sghost_vec14 = "ghost_vec.rs" 33 22 33 41
  let%span sghost_vec15 = "ghost_vec.rs" 34 22 34 41
  let%span sghost_vec16 = "ghost_vec.rs" 35 22 35 41
  let%span sghost_vec17 = "ghost_vec.rs" 36 22 36 34
  let%span sghost_vec18 = "ghost_vec.rs" 37 22 37 34
  let%span span19 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span20 = "../../../../creusot-contracts/src/logic/seq.rs" 402 8 402 97
  let%span span21 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span22 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span23 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span span24 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span span25 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  let%span span26 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span27 = "../../../../creusot-contracts/src/logic/seq.rs" 391 20 391 24
  let%span span28 = "../../../../creusot-contracts/src/logic/seq.rs" 383 4 390 7
  let%span span29 = "../../../../creusot-contracts/src/logic/seq.rs" 391 4 391 38
  let%span span30 = "../../../../creusot-contracts/src/logic/seq.rs" 63 4 63 12
  let%span span31 = "../../../../creusot-contracts/src/logic/seq.rs" 360 24 360 28
  let%span span32 = "../../../../creusot-contracts/src/logic/seq.rs" 350 4 357 7
  let%span span33 = "../../../../creusot-contracts/src/logic/seq.rs" 358 4 358 86
  let%span span34 = "../../../../creusot-contracts/src/logic/seq.rs" 359 14 359 44
  let%span span35 = "../../../../creusot-contracts/src/logic/seq.rs" 360 4 360 59
  let%span span36 = "../../../../creusot-contracts/src/logic/seq.rs" 325 22 325 26
  let%span span37 = "../../../../creusot-contracts/src/logic/seq.rs" 321 14 324 5
  let%span span38 = "../../../../creusot-contracts/src/logic/seq.rs" 325 4 325 53
  let%span span39 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 18
  let%span span40 = "../../../../creusot-contracts/src/ghost.rs" 50 14 50 35
  let%span span41 = "../../../../creusot-contracts/src/ghost.rs" 51 4 51 36
  let%span span42 = "../../../../creusot-contracts/src/ghost.rs" 179 14 179 31
  let%span span43 = "../../../../creusot-contracts/src/logic/int.rs" 28 14 28 31
  let%span span44 = "../../../../creusot-contracts/src/logic/seq.rs" 276 22 276 26
  let%span span45 = "../../../../creusot-contracts/src/logic/seq.rs" 275 14 275 34
  let%span span46 = "../../../../creusot-contracts/src/logic/seq.rs" 297 27 297 31
  let%span span47 = "../../../../creusot-contracts/src/logic/seq.rs" 297 33 297 34
  let%span span48 = "../../../../creusot-contracts/src/logic/seq.rs" 296 14 296 35
  let%span span49 = "../../../../creusot-contracts/src/ghost.rs" 66 22 66 26
  let%span span50 = "../../../../creusot-contracts/src/ghost.rs" 65 14 65 36
  let%span span51 = "../../../../creusot-contracts/src/ghost.rs" 66 4 66 48
  
  use prelude.prelude.Int32
  
  predicate inv'2 (_1 : int32)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'16 (self : int32) =
    [%#span19] inv'2 self
  
  predicate inv'16 (_1 : int32)
  
  axiom inv_axiom'16 [@rewrite] : forall x : int32 [inv'16 x] . inv'16 x = true
  
  use prelude.prelude.Int
  
  predicate inv'15 (_1 : int)
  
  axiom inv_axiom'15 [@rewrite] : forall x : int [inv'15 x] . inv'15 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'14 (_1 : GhostBox'0.t_GhostBox int)
  
  axiom inv_axiom'14 [@rewrite] : forall x : GhostBox'0.t_GhostBox int [inv'14 x] . inv'14 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'13 (self : Seq.seq int32) =
    [%#span20] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'16 (Seq.get self i)
  
  predicate inv'13 (_1 : Seq.seq int32)
  
  axiom inv_axiom'13 [@rewrite] : forall x : Seq.seq int32 [inv'13 x] . inv'13 x = true
  
  predicate inv'12 (_1 : GhostBox'0.t_GhostBox (Seq.seq int32))
  
  axiom inv_axiom'12 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Seq.seq int32) [inv'12 x] . inv'12 x = true
  
  predicate inv'11 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'11 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'11 x] . inv'11 x = true
  
  predicate inv'10 (_1 : ())
  
  axiom inv_axiom'10 [@rewrite] : forall x : () [inv'10 x] . inv'10 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'9 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'9 [@rewrite] : forall x : Option'0.t_Option int32 [inv'9 x] . inv'9 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'8 (_1 : Option'0.t_Option (borrowed int32))
  
  axiom inv_axiom'8 [@rewrite] : forall x : Option'0.t_Option (borrowed int32) [inv'8 x] . inv'8 x = true
  
  predicate inv'7 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Option'0.t_Option int32 [inv'7 x] . inv'7 x = true
  
  predicate invariant'6 (self : int) =
    [%#span21] inv'15 self
  
  predicate inv'6 (_1 : int)
  
  axiom inv_axiom'6 [@rewrite] : forall x : int [inv'6 x] . inv'6 x = true
  
  predicate invariant'5 (self : GhostBox'0.t_GhostBox int) =
    [%#span21] inv'14 self
  
  predicate inv'5 (_1 : GhostBox'0.t_GhostBox int)
  
  axiom inv_axiom'5 [@rewrite] : forall x : GhostBox'0.t_GhostBox int [inv'5 x] . inv'5 x = true
  
  predicate invariant'4 (self : Seq.seq int32) =
    [%#span21] inv'13 self
  
  predicate inv'4 (_1 : Seq.seq int32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq int32 [inv'4 x] . inv'4 x = true
  
  predicate invariant'3 (self : GhostBox'0.t_GhostBox (Seq.seq int32)) =
    [%#span21] inv'12 self
  
  predicate inv'3 (_1 : GhostBox'0.t_GhostBox (Seq.seq int32))
  
  axiom inv_axiom'3 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Seq.seq int32) [inv'3 x] . inv'3 x = true
  
  axiom inv_axiom'2 [@rewrite] : forall x : int32 [inv'2 x] . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (Seq.seq int32)) =
    [%#span22] inv'13 self.current /\ inv'13 self.final
  
  predicate inv'1 (_1 : borrowed (Seq.seq int32))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Seq.seq int32) [inv'1 x] . inv'1 x = true
  
  predicate invariant'0 (self : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    [%#span22] inv'12 self.current /\ inv'12 self.final
  
  predicate inv'0 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span23] inv'10 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span25] inv'11 result}
      {[%#span24] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    [%#span26] self.final = self.current
  
  predicate resolve'6 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    resolve'7 _1
  
  use M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  function field_0'0 [#"ghost_vec.rs" 7 4 38 5] (self : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))
    
   =
    let Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z a = self in a
  
  predicate resolve'5 [#"ghost_vec.rs" 7 4 38 5] (_1 : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) =
    resolve'6 (field_0'0 _1)
  
  predicate resolve'2 (_1 : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) =
    resolve'5 _1
  
  use seq.Seq
  
  let rec pop'0 (self:borrowed (Seq.seq int32)) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#span27] inv'1 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#span29] inv'9 result}
      {[%#span28] if Seq.length self.current = 0 then
        self.current = self.final /\ result = Option'0.C_None
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> self.current = Seq.snoc self.final r
          end
      }
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed int32) =
    [%#span26] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'4 _1
  
  use seq.Seq
  
  function get'0 (self : Seq.seq int32) (ix : int) : Option'0.t_Option int32 =
    [%#span30] if 0 <= ix /\ ix < Seq.length self then Option'0.C_Some (Seq.get self ix) else Option'0.C_None
  
  let rec get_mut'0 (self:borrowed (Seq.seq int32)) (index:int) (return'  (ret:Option'0.t_Option (borrowed int32)))= {[@expl:precondition] [%#span31] inv'1 self}
    any
    [ return' (result:Option'0.t_Option (borrowed int32))-> {[%#span35] inv'8 result}
      {[%#span34] Seq.length self.current = Seq.length self.final}
      {[%#span33] forall i : int . i <> index  -> get'0 self.current index = get'0 self.final index}
      {[%#span32] if get'0 self.current index = Option'0.C_None then
        result = Option'0.C_None /\ self.current = self.final
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> r.current = Seq.get self.current index /\ r.final = Seq.get self.final index
          end
      }
      (! return' {result}) ]
    
  
  let rec get_ghost'0 (self:Seq.seq int32) (index:int) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#span36] inv'4 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#span38] inv'7 result}
      {[%#span37] match get'0 self index with
        | Option'0.C_None -> result = Option'0.C_None
        | Option'0.C_Some v -> result = Option'0.C_Some v
        end}
      (! return' {result}) ]
    
  
  let rec deref'1 (self:GhostBox'0.t_GhostBox int) (return'  (ret:int))= {[@expl:precondition] [%#span39] inv'5 self}
    any
    [ return' (result:int)-> {[%#span41] inv'6 result}
      {[%#span40] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int128
  
  function inner_logic'1 (self : GhostBox'0.t_GhostBox int) : int
  
  axiom inner_logic'1_spec : forall self : GhostBox'0.t_GhostBox int . [%#span42] inner_logic'1 self
  = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  let rec new'0 (value:int128) (return'  (ret:GhostBox'0.t_GhostBox int))= any
    [ return' (result:GhostBox'0.t_GhostBox int)-> {[%#span43] inner_logic'1 result = Int128.to_int value}
      (! return' {result}) ]
    
  
  let rec len_ghost'0 (self:Seq.seq int32) (return'  (ret:int))= {[@expl:precondition] [%#span44] inv'4 self}
    any [ return' (result:int)-> {[%#span45] result = Seq.length self} (! return' {result}) ] 
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Seq.seq int32)) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [%#span39] inv'3 self}
    any
    [ return' (result:Seq.seq int32)-> {[%#span41] inv'4 result}
      {[%#span40] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  function inner_logic'0 (self : GhostBox'0.t_GhostBox (Seq.seq int32)) : Seq.seq int32
  
  axiom inner_logic'0_spec : forall self : GhostBox'0.t_GhostBox (Seq.seq int32) . [%#span42] inner_logic'0 self
  = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  predicate resolve'3 (self : borrowed (Seq.seq int32)) =
    [%#span26] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Seq.seq int32)) =
    resolve'3 _1
  
  let rec push_ghost'0 (self:borrowed (Seq.seq int32)) (x:int32) (return'  (ret:()))= {[@expl:precondition] [%#span47] inv'2 x}
    {[@expl:precondition] [%#span46] inv'1 self}
    any [ return' (result:())-> {[%#span48] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) (return'  (ret:borrowed (Seq.seq int32)))= {[@expl:precondition] [%#span49] inv'0 self}
    any
    [ return' (result:borrowed (Seq.seq int32))-> {[%#span51] inv'1 result}
      {[%#span50] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z (_1:Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_6 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s1))
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s1)
      | s1 = push_ghost'0 {_4} {[%#sghost_vec0] (21 : int32)} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec1] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec2] Seq.length (inner_logic'0 (field_0'0 _1).current) = 1} s3
      | s3 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_14 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s4))
      | s4 = deref_mut'0 {_14} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_13 <- _ret' ] s5)
      | s5 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_12} {[%#sghost_vec3] (10 : int32)} (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 _13}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_18 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_18} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_16 <- _ret' ] 
             [ &_17 <- { _17 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_16} {[%#sghost_vec4] (30 : int32)} (fun (_ret':()) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _17}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_21 <- _ret' ] s2))
      | s2 = bb7 ]
      
    | bb7 = s0 [ s0 = len_ghost'0 {_21} (fun (_ret':int) ->  [ &len <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec5] len = 3} s1
      | s1 = {[@expl:assertion] [%#sghost_vec6] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 1 = (10 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 2 = (30 : int32)}
        s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_29 <- _ret' ] s3))
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = new'0 {[%#sghost_vec7] (1 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_34 <- _ret' ] s1)
      | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = deref'1 {_34} (fun (_ret':int) ->  [ &_32 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = get_ghost'0 {_29} {_32} (fun (_ret':Option'0.t_Option int32) ->  [ &get1 <- _ret' ] s1) | s1 = bb12 ]
      
    | bb12 = bb13
    | bb13 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_37 <- _ret' ] s1))
      | s1 = bb14 ]
      
    | bb14 = s0
      [ s0 = new'0 {[%#sghost_vec8] (3 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_42 <- _ret' ] s1)
      | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = deref'1 {_42} (fun (_ret':int) ->  [ &_40 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = get_ghost'0 {_37} {_40} (fun (_ret':Option'0.t_Option int32) ->  [ &get2 <- _ret' ] s1) | s1 = bb17 ]
      
    | bb17 = bb18
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec9] get1 = Option'0.C_Some (10 : int32)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec10] get2 = Option'0.C_None} s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_51 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s3))
      | s3 = deref_mut'0 {_51} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_50 <- _ret' ] s4)
      | s4 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_50.current} {Borrow.get_id _50}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_49 <- _ret' ] 
             [ &_50 <- { _50 with current = _ret'.final ; } ] 
            s1)
      | s1 = new'0 {[%#sghost_vec11] (0 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_55 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0 [ s0 = deref'1 {_55} (fun (_ret':int) ->  [ &_53 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = s0
      [ s0 = get_mut'0 {_49} {_53} (fun (_ret':Option'0.t_Option (borrowed int32)) ->  [ &_48 <- _ret' ] s1)
      | s1 = bb22 ]
      
    | bb22 = any
      [ br0 -> {_48 = Option'0.C_None } (! bb25) | br1 (a:borrowed int32)-> {_48 = Option'0.C_Some a} (! bb23) ]
      
    | bb25 = s0
      [ s0 = -{match _48 with
          | Option'0.C_Some x'0 -> resolve'1 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _50}- s2
      | s2 = bb26 ]
      
    | bb23 = bb24
    | bb24 = s0
      [ s0 = Option'0.v_Some <borrowed int32> {_48} (fun (r0'0:borrowed int32) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#sghost_vec12] (42 : int32)) ; } ] s2
      | s2 = -{resolve'1 x}- s3
      | s3 = -{resolve'0 _50}- s4
      | s4 = bb26 ]
      
    | bb26 = bb27
    | bb27 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec13] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (42 : int32)} s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_63 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_63} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_62 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_62.current} {Borrow.get_id _62}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_61 <- _ret' ] 
             [ &_62 <- { _62 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_61} (fun (_ret':Option'0.t_Option int32) ->  [ &pop1 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0
      [ s0 = -{resolve'0 _62}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_67 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_67} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_66 <- _ret' ] s3)
      | s3 = bb30 ]
      
    | bb30 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_66.current} {Borrow.get_id _66}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_65 <- _ret' ] 
             [ &_66 <- { _66 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_65} (fun (_ret':Option'0.t_Option int32) ->  [ &pop2 <- _ret' ] s2)
      | s2 = bb31 ]
      
    | bb31 = s0
      [ s0 = -{resolve'0 _66}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_71 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_71} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_70 <- _ret' ] s3)
      | s3 = bb32 ]
      
    | bb32 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_70.current} {Borrow.get_id _70}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_69 <- _ret' ] 
             [ &_70 <- { _70 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_69} (fun (_ret':Option'0.t_Option int32) ->  [ &pop3 <- _ret' ] s2)
      | s2 = bb33 ]
      
    | bb33 = s0
      [ s0 = -{resolve'0 _70}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_75 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_75} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_74 <- _ret' ] s3)
      | s3 = bb34 ]
      
    | bb34 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_74.current} {Borrow.get_id _74}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_73 <- _ret' ] 
             [ &_74 <- { _74 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_73} (fun (_ret':Option'0.t_Option int32) ->  [ &pop4 <- _ret' ] s2)
      | s2 = bb35 ]
      
    | bb35 = s0
      [ s0 = -{resolve'0 _74}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current} {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_79 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_79} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_78 <- _ret' ] s3)
      | s3 = bb36 ]
      
    | bb36 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_78.current} {Borrow.get_id _78}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_77 <- _ret' ] 
             [ &_78 <- { _78 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_77} (fun (_ret':Option'0.t_Option int32) ->  [ &pop5 <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = s0
      [ s0 = -{resolve'0 _78}- s1
      | s1 = -{resolve'2 _1}- s2
      | s2 = {[@expl:assertion] [%#sghost_vec14] pop1 = Option'0.C_Some (30 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec15] pop2 = Option'0.C_Some (10 : int32)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec16] pop3 = Option'0.C_Some (42 : int32)} s5
      | s5 = {[@expl:assertion] [%#sghost_vec17] pop4 = Option'0.C_None} s6
      | s6 = {[@expl:assertion] [%#sghost_vec18] pop5 = Option'0.C_None} s7
      | s7 = new'1 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s8)
      | s8 = bb38 ]
      
    | bb38 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Seq.seq int32) = any_l ()
    | & _5 : borrowed (Seq.seq int32) = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (Seq.seq int32) = any_l ()
    | & _13 : borrowed (Seq.seq int32) = any_l ()
    | & _14 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _15 : () = any_l ()
    | & _16 : borrowed (Seq.seq int32) = any_l ()
    | & _17 : borrowed (Seq.seq int32) = any_l ()
    | & _18 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & len : int = any_l ()
    | & _21 : Seq.seq int32 = any_l ()
    | & get1 : Option'0.t_Option int32 = any_l ()
    | & _29 : Seq.seq int32 = any_l ()
    | & _32 : int = any_l ()
    | & _34 : GhostBox'0.t_GhostBox int = any_l ()
    | & get2 : Option'0.t_Option int32 = any_l ()
    | & _37 : Seq.seq int32 = any_l ()
    | & _40 : int = any_l ()
    | & _42 : GhostBox'0.t_GhostBox int = any_l ()
    | & _48 : Option'0.t_Option (borrowed int32) = any_l ()
    | & _49 : borrowed (Seq.seq int32) = any_l ()
    | & _50 : borrowed (Seq.seq int32) = any_l ()
    | & _51 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _53 : int = any_l ()
    | & _55 : GhostBox'0.t_GhostBox int = any_l ()
    | & x : borrowed int32 = any_l ()
    | & pop1 : Option'0.t_Option int32 = any_l ()
    | & _61 : borrowed (Seq.seq int32) = any_l ()
    | & _62 : borrowed (Seq.seq int32) = any_l ()
    | & _63 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop2 : Option'0.t_Option int32 = any_l ()
    | & _65 : borrowed (Seq.seq int32) = any_l ()
    | & _66 : borrowed (Seq.seq int32) = any_l ()
    | & _67 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop3 : Option'0.t_Option int32 = any_l ()
    | & _69 : borrowed (Seq.seq int32) = any_l ()
    | & _70 : borrowed (Seq.seq int32) = any_l ()
    | & _71 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop4 : Option'0.t_Option int32 = any_l ()
    | & _73 : borrowed (Seq.seq int32) = any_l ()
    | & _74 : borrowed (Seq.seq int32) = any_l ()
    | & _75 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop5 : Option'0.t_Option int32 = any_l ()
    | & _77 : borrowed (Seq.seq int32) = any_l ()
    | & _78 : borrowed (Seq.seq int32) = any_l ()
    | & _79 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_ghost_vec__ghost_vec [#"ghost_vec.rs" 4 0 4 18]
  let%span sghost_vec0 = "ghost_vec.rs" 5 16 5 26
  let%span sghost_vec1 = "ghost_vec.rs" 6 4 6 50
  let%span span2 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  let%span span3 = "../../../../creusot-contracts/src/logic/seq.rs" 402 8 402 97
  let%span span4 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span span5 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span span6 = "../../../../creusot-contracts/src/ghost.rs" 146 15 146 16
  let%span span7 = "../../../../creusot-contracts/src/ghost.rs" 144 14 144 28
  let%span span8 = "../../../../creusot-contracts/src/ghost.rs" 146 4 146 28
  let%span span9 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span span10 = "../../../../creusot-contracts/src/logic/seq.rs" 391 20 391 24
  let%span span11 = "../../../../creusot-contracts/src/logic/seq.rs" 383 4 390 7
  let%span span12 = "../../../../creusot-contracts/src/logic/seq.rs" 391 4 391 38
  let%span span13 = "../../../../creusot-contracts/src/logic/seq.rs" 63 4 63 12
  let%span span14 = "../../../../creusot-contracts/src/logic/seq.rs" 360 24 360 28
  let%span span15 = "../../../../creusot-contracts/src/logic/seq.rs" 350 4 357 7
  let%span span16 = "../../../../creusot-contracts/src/logic/seq.rs" 358 4 358 86
  let%span span17 = "../../../../creusot-contracts/src/logic/seq.rs" 359 14 359 44
  let%span span18 = "../../../../creusot-contracts/src/logic/seq.rs" 360 4 360 59
  let%span span19 = "../../../../creusot-contracts/src/logic/seq.rs" 325 22 325 26
  let%span span20 = "../../../../creusot-contracts/src/logic/seq.rs" 321 14 324 5
  let%span span21 = "../../../../creusot-contracts/src/logic/seq.rs" 325 4 325 53
  let%span span22 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 18
  let%span span23 = "../../../../creusot-contracts/src/ghost.rs" 50 14 50 35
  let%span span24 = "../../../../creusot-contracts/src/ghost.rs" 51 4 51 36
  let%span span25 = "../../../../creusot-contracts/src/ghost.rs" 179 14 179 31
  let%span span26 = "../../../../creusot-contracts/src/logic/int.rs" 28 14 28 31
  let%span span27 = "../../../../creusot-contracts/src/logic/seq.rs" 276 22 276 26
  let%span span28 = "../../../../creusot-contracts/src/logic/seq.rs" 275 14 275 34
  let%span span29 = "../../../../creusot-contracts/src/logic/seq.rs" 297 27 297 31
  let%span span30 = "../../../../creusot-contracts/src/logic/seq.rs" 297 33 297 34
  let%span span31 = "../../../../creusot-contracts/src/logic/seq.rs" 296 14 296 35
  let%span span32 = "../../../../creusot-contracts/src/ghost.rs" 66 22 66 26
  let%span span33 = "../../../../creusot-contracts/src/ghost.rs" 65 14 65 36
  let%span span34 = "../../../../creusot-contracts/src/ghost.rs" 66 4 66 48
  let%span span35 = "ghost_vec.rs" 8 21 8 23
  let%span span36 = "ghost_vec.rs" 9 22 9 35
  let%span span37 = "ghost_vec.rs" 10 22 10 34
  let%span span38 = "ghost_vec.rs" 12 21 12 23
  let%span span39 = "ghost_vec.rs" 13 21 13 23
  let%span span40 = "ghost_vec.rs" 15 22 15 30
  let%span span41 = "ghost_vec.rs" 16 22 16 69
  let%span span42 = "ghost_vec.rs" 18 41 18 42
  let%span span43 = "ghost_vec.rs" 19 41 19 42
  let%span span44 = "ghost_vec.rs" 20 22 20 42
  let%span span45 = "ghost_vec.rs" 21 22 21 34
  let%span span46 = "ghost_vec.rs" 23 45 23 46
  let%span span47 = "ghost_vec.rs" 24 17 24 19
  let%span span48 = "ghost_vec.rs" 26 22 26 35
  let%span span49 = "ghost_vec.rs" 33 22 33 41
  let%span span50 = "ghost_vec.rs" 34 22 34 41
  let%span span51 = "ghost_vec.rs" 35 22 35 41
  let%span span52 = "ghost_vec.rs" 36 22 36 34
  let%span span53 = "ghost_vec.rs" 37 22 37 34
  let%span span54 = "../../../../creusot-contracts/src/logic/seq.rs" 250 14 250 36
  let%span span55 = "../../../../creusot-contracts/src/logic/seq.rs" 252 4 252 34
  
  use prelude.prelude.Int32
  
  predicate inv'3 (_1 : int32)
  
  use T_alloc__alloc__Global as Global'0
  
  predicate invariant'16 (self : int32) =
    [%#span2] inv'3 self
  
  predicate inv'16 (_1 : int32)
  
  axiom inv_axiom'16 [@rewrite] : forall x : int32 [inv'16 x] . inv'16 x = true
  
  use prelude.prelude.Int
  
  predicate inv'15 (_1 : int)
  
  axiom inv_axiom'15 [@rewrite] : forall x : int [inv'15 x] . inv'15 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'14 (_1 : GhostBox'0.t_GhostBox int)
  
  axiom inv_axiom'14 [@rewrite] : forall x : GhostBox'0.t_GhostBox int [inv'14 x] . inv'14 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'13 (self : Seq.seq int32) =
    [%#span3] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'16 (Seq.get self i)
  
  predicate inv'13 (_1 : Seq.seq int32)
  
  axiom inv_axiom'13 [@rewrite] : forall x : Seq.seq int32 [inv'13 x] . inv'13 x = true
  
  predicate inv'12 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'12 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'12 x] . inv'12 x = true
  
  predicate inv'11 (_1 : ())
  
  axiom inv_axiom'11 [@rewrite] : forall x : () [inv'11 x] . inv'11 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'10 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'10 [@rewrite] : forall x : Option'0.t_Option int32 [inv'10 x] . inv'10 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'9 (_1 : Option'0.t_Option (borrowed int32))
  
  axiom inv_axiom'9 [@rewrite] : forall x : Option'0.t_Option (borrowed int32) [inv'9 x] . inv'9 x = true
  
  predicate inv'8 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'8 [@rewrite] : forall x : Option'0.t_Option int32 [inv'8 x] . inv'8 x = true
  
  predicate invariant'7 (self : int) =
    [%#span4] inv'15 self
  
  predicate inv'7 (_1 : int)
  
  axiom inv_axiom'7 [@rewrite] : forall x : int [inv'7 x] . inv'7 x = true
  
  predicate invariant'6 (self : GhostBox'0.t_GhostBox int) =
    [%#span4] inv'14 self
  
  predicate inv'6 (_1 : GhostBox'0.t_GhostBox int)
  
  axiom inv_axiom'6 [@rewrite] : forall x : GhostBox'0.t_GhostBox int [inv'6 x] . inv'6 x = true
  
  predicate invariant'5 (self : Seq.seq int32) =
    [%#span4] inv'13 self
  
  predicate inv'5 (_1 : Seq.seq int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq int32 [inv'5 x] . inv'5 x = true
  
  predicate inv'0 (_1 : GhostBox'0.t_GhostBox (Seq.seq int32))
  
  predicate invariant'4 (self : GhostBox'0.t_GhostBox (Seq.seq int32)) =
    [%#span4] inv'0 self
  
  predicate inv'4 (_1 : GhostBox'0.t_GhostBox (Seq.seq int32))
  
  axiom inv_axiom'4 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Seq.seq int32) [inv'4 x] . inv'4 x = true
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  predicate invariant'2 (self : borrowed (Seq.seq int32)) =
    [%#span5] inv'13 self.current /\ inv'13 self.final
  
  predicate inv'2 (_1 : borrowed (Seq.seq int32))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Seq.seq int32) [inv'2 x] . inv'2 x = true
  
  predicate invariant'1 (self : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    [%#span5] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) [inv'1 x] . inv'1 x = true
  
  axiom inv_axiom'0 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Seq.seq int32) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'2 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#span6] inv'11 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#span8] inv'12 result}
      {[%#span7] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    [%#span9] self.final = self.current
  
  predicate resolve'6 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    resolve'7 _1
  
  use M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z_Type as Closure'0
  
  function field_0'0 [#"ghost_vec.rs" 7 4 38 5] (self : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))
    
   =
    let Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z a = self in a
  
  predicate resolve'5 [#"ghost_vec.rs" 7 4 38 5] (_1 : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) =
    resolve'6 (field_0'0 _1)
  
  predicate resolve'2 (_1 : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) =
    resolve'5 _1
  
  use seq.Seq
  
  let rec pop'0 (self:borrowed (Seq.seq int32)) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#span10] inv'2 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#span12] inv'10 result}
      {[%#span11] if Seq.length self.current = 0 then
        self.current = self.final /\ result = Option'0.C_None
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> self.current = Seq.snoc self.final r
          end
      }
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed int32) =
    [%#span9] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'4 _1
  
  use seq.Seq
  
  function get'0 (self : Seq.seq int32) (ix : int) : Option'0.t_Option int32 =
    [%#span13] if 0 <= ix /\ ix < Seq.length self then Option'0.C_Some (Seq.get self ix) else Option'0.C_None
  
  let rec get_mut'0 (self:borrowed (Seq.seq int32)) (index:int) (return'  (ret:Option'0.t_Option (borrowed int32)))= {[@expl:precondition] [%#span14] inv'2 self}
    any
    [ return' (result:Option'0.t_Option (borrowed int32))-> {[%#span18] inv'9 result}
      {[%#span17] Seq.length self.current = Seq.length self.final}
      {[%#span16] forall i : int . i <> index  -> get'0 self.current index = get'0 self.final index}
      {[%#span15] if get'0 self.current index = Option'0.C_None then
        result = Option'0.C_None /\ self.current = self.final
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> r.current = Seq.get self.current index /\ r.final = Seq.get self.final index
          end
      }
      (! return' {result}) ]
    
  
  let rec get_ghost'0 (self:Seq.seq int32) (index:int) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#span19] inv'5 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#span21] inv'8 result}
      {[%#span20] match get'0 self index with
        | Option'0.C_None -> result = Option'0.C_None
        | Option'0.C_Some v -> result = Option'0.C_Some v
        end}
      (! return' {result}) ]
    
  
  let rec deref'1 (self:GhostBox'0.t_GhostBox int) (return'  (ret:int))= {[@expl:precondition] [%#span22] inv'6 self}
    any
    [ return' (result:int)-> {[%#span24] inv'7 result}
      {[%#span23] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int128
  
  function inner_logic'1 (self : GhostBox'0.t_GhostBox int) : int
  
  axiom inner_logic'1_spec : forall self : GhostBox'0.t_GhostBox int . [%#span25] inner_logic'1 self
  = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  let rec new'1 (value:int128) (return'  (ret:GhostBox'0.t_GhostBox int))= any
    [ return' (result:GhostBox'0.t_GhostBox int)-> {[%#span26] inner_logic'1 result = Int128.to_int value}
      (! return' {result}) ]
    
  
  let rec len_ghost'0 (self:Seq.seq int32) (return'  (ret:int))= {[@expl:precondition] [%#span27] inv'5 self}
    any [ return' (result:int)-> {[%#span28] result = Seq.length self} (! return' {result}) ] 
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Seq.seq int32)) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [%#span22] inv'4 self}
    any
    [ return' (result:Seq.seq int32)-> {[%#span24] inv'5 result}
      {[%#span23] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  function inner_logic'0 (self : GhostBox'0.t_GhostBox (Seq.seq int32)) : Seq.seq int32
  
  axiom inner_logic'0_spec : forall self : GhostBox'0.t_GhostBox (Seq.seq int32) . [%#span25] inner_logic'0 self
  = T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  predicate resolve'3 (self : borrowed (Seq.seq int32)) =
    [%#span9] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Seq.seq int32)) =
    resolve'3 _1
  
  let rec push_ghost'0 (self:borrowed (Seq.seq int32)) (x:int32) (return'  (ret:()))= {[@expl:precondition] [%#span30] inv'3 x}
    {[@expl:precondition] [%#span29] inv'2 self}
    any [ return' (result:())-> {[%#span31] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) (return'  (ret:borrowed (Seq.seq int32)))= {[@expl:precondition] [%#span32] inv'1 self}
    any
    [ return' (result:borrowed (Seq.seq int32))-> {[%#span34] inv'2 result}
      {[%#span33] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  let rec closure1'0 (_1:Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_6 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s1))
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s1)
      | s1 = push_ghost'0 {_4} {[%#span35] (21 : int32)} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = {[@expl:assertion] [%#span36] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)} s2
      | s2 = {[@expl:assertion] [%#span37] Seq.length (inner_logic'0 (field_0'0 _1).current) = 1} s3
      | s3 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_14 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s4))
      | s4 = deref_mut'0 {_14} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_13 <- _ret' ] s5)
      | s5 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_12} {[%#span38] (10 : int32)} (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 _13}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_18 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_18} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_16 <- _ret' ] 
             [ &_17 <- { _17 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_16} {[%#span39] (30 : int32)} (fun (_ret':()) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _17}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_21 <- _ret' ] s2))
      | s2 = bb7 ]
      
    | bb7 = s0 [ s0 = len_ghost'0 {_21} (fun (_ret':int) ->  [ &len <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#span40] len = 3} s1
      | s1 = {[@expl:assertion] [%#span41] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 1 = (10 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 2 = (30 : int32)}
        s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_29 <- _ret' ] s3))
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = new'1 {[%#span42] (1 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_34 <- _ret' ] s1)
      | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = deref'1 {_34} (fun (_ret':int) ->  [ &_32 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = get_ghost'0 {_29} {_32} (fun (_ret':Option'0.t_Option int32) ->  [ &get1 <- _ret' ] s1) | s1 = bb12 ]
      
    | bb12 = bb13
    | bb13 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_37 <- _ret' ] s1))
      | s1 = bb14 ]
      
    | bb14 = s0
      [ s0 = new'1 {[%#span43] (3 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_42 <- _ret' ] s1)
      | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = deref'1 {_42} (fun (_ret':int) ->  [ &_40 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = get_ghost'0 {_37} {_40} (fun (_ret':Option'0.t_Option int32) ->  [ &get2 <- _ret' ] s1) | s1 = bb17 ]
      
    | bb17 = bb18
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#span44] get1 = Option'0.C_Some (10 : int32)} s1
      | s1 = {[@expl:assertion] [%#span45] get2 = Option'0.C_None} s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_51 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s3))
      | s3 = deref_mut'0 {_51} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_50 <- _ret' ] s4)
      | s4 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_50.current} {Borrow.get_id _50}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_49 <- _ret' ] 
             [ &_50 <- { _50 with current = _ret'.final ; } ] 
            s1)
      | s1 = new'1 {[%#span46] (0 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_55 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0 [ s0 = deref'1 {_55} (fun (_ret':int) ->  [ &_53 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = s0
      [ s0 = get_mut'0 {_49} {_53} (fun (_ret':Option'0.t_Option (borrowed int32)) ->  [ &_48 <- _ret' ] s1)
      | s1 = bb22 ]
      
    | bb22 = any
      [ br0 -> {_48 = Option'0.C_None } (! bb25) | br1 (a:borrowed int32)-> {_48 = Option'0.C_Some a} (! bb23) ]
      
    | bb25 = s0
      [ s0 = -{match _48 with
          | Option'0.C_Some x'0 -> resolve'1 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _50}- s2
      | s2 = bb26 ]
      
    | bb23 = bb24
    | bb24 = s0
      [ s0 = Option'0.v_Some <borrowed int32> {_48} (fun (r0'0:borrowed int32) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#span47] (42 : int32)) ; } ] s2
      | s2 = -{resolve'1 x}- s3
      | s3 = -{resolve'0 _50}- s4
      | s4 = bb26 ]
      
    | bb26 = bb27
    | bb27 = s0
      [ s0 = {[@expl:assertion] [%#span48] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (42 : int32)} s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_63 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_63} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_62 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_62.current} {Borrow.get_id _62}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_61 <- _ret' ] 
             [ &_62 <- { _62 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_61} (fun (_ret':Option'0.t_Option int32) ->  [ &pop1 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0
      [ s0 = -{resolve'0 _62}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_67 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_67} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_66 <- _ret' ] s3)
      | s3 = bb30 ]
      
    | bb30 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_66.current} {Borrow.get_id _66}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_65 <- _ret' ] 
             [ &_66 <- { _66 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_65} (fun (_ret':Option'0.t_Option int32) ->  [ &pop2 <- _ret' ] s2)
      | s2 = bb31 ]
      
    | bb31 = s0
      [ s0 = -{resolve'0 _66}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_71 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_71} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_70 <- _ret' ] s3)
      | s3 = bb32 ]
      
    | bb32 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_70.current} {Borrow.get_id _70}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_69 <- _ret' ] 
             [ &_70 <- { _70 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_69} (fun (_ret':Option'0.t_Option int32) ->  [ &pop3 <- _ret' ] s2)
      | s2 = bb33 ]
      
    | bb33 = s0
      [ s0 = -{resolve'0 _70}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_75 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_75} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_74 <- _ret' ] s3)
      | s3 = bb34 ]
      
    | bb34 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_74.current} {Borrow.get_id _74}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_73 <- _ret' ] 
             [ &_74 <- { _74 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_73} (fun (_ret':Option'0.t_Option int32) ->  [ &pop4 <- _ret' ] s2)
      | s2 = bb35 ]
      
    | bb35 = s0
      [ s0 = -{resolve'0 _74}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current} {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_79 <- _ret' ] 
                
                [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z ({ r'0 with current = _ret'.final ; }) ]
                
                s2))
      | s2 = deref_mut'0 {_79} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_78 <- _ret' ] s3)
      | s3 = bb36 ]
      
    | bb36 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_78.current} {Borrow.get_id _78}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_77 <- _ret' ] 
             [ &_78 <- { _78 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop'0 {_77} (fun (_ret':Option'0.t_Option int32) ->  [ &pop5 <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = s0
      [ s0 = -{resolve'0 _78}- s1
      | s1 = -{resolve'2 _1}- s2
      | s2 = {[@expl:assertion] [%#span49] pop1 = Option'0.C_Some (30 : int32)} s3
      | s3 = {[@expl:assertion] [%#span50] pop2 = Option'0.C_Some (10 : int32)} s4
      | s4 = {[@expl:assertion] [%#span51] pop3 = Option'0.C_Some (42 : int32)} s5
      | s5 = {[@expl:assertion] [%#span52] pop4 = Option'0.C_None} s6
      | s6 = {[@expl:assertion] [%#span53] pop5 = Option'0.C_None} s7
      | s7 = new'2 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s8)
      | s8 = bb38 ]
      
    | bb38 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Seq.seq int32) = any_l ()
    | & _5 : borrowed (Seq.seq int32) = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (Seq.seq int32) = any_l ()
    | & _13 : borrowed (Seq.seq int32) = any_l ()
    | & _14 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _15 : () = any_l ()
    | & _16 : borrowed (Seq.seq int32) = any_l ()
    | & _17 : borrowed (Seq.seq int32) = any_l ()
    | & _18 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & len : int = any_l ()
    | & _21 : Seq.seq int32 = any_l ()
    | & get1 : Option'0.t_Option int32 = any_l ()
    | & _29 : Seq.seq int32 = any_l ()
    | & _32 : int = any_l ()
    | & _34 : GhostBox'0.t_GhostBox int = any_l ()
    | & get2 : Option'0.t_Option int32 = any_l ()
    | & _37 : Seq.seq int32 = any_l ()
    | & _40 : int = any_l ()
    | & _42 : GhostBox'0.t_GhostBox int = any_l ()
    | & _48 : Option'0.t_Option (borrowed int32) = any_l ()
    | & _49 : borrowed (Seq.seq int32) = any_l ()
    | & _50 : borrowed (Seq.seq int32) = any_l ()
    | & _51 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _53 : int = any_l ()
    | & _55 : GhostBox'0.t_GhostBox int = any_l ()
    | & x : borrowed int32 = any_l ()
    | & pop1 : Option'0.t_Option int32 = any_l ()
    | & _61 : borrowed (Seq.seq int32) = any_l ()
    | & _62 : borrowed (Seq.seq int32) = any_l ()
    | & _63 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop2 : Option'0.t_Option int32 = any_l ()
    | & _65 : borrowed (Seq.seq int32) = any_l ()
    | & _66 : borrowed (Seq.seq int32) = any_l ()
    | & _67 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop3 : Option'0.t_Option int32 = any_l ()
    | & _69 : borrowed (Seq.seq int32) = any_l ()
    | & _70 : borrowed (Seq.seq int32) = any_l ()
    | & _71 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop4 : Option'0.t_Option int32 = any_l ()
    | & _73 : borrowed (Seq.seq int32) = any_l ()
    | & _74 : borrowed (Seq.seq int32) = any_l ()
    | & _75 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop5 : Option'0.t_Option int32 = any_l ()
    | & _77 : borrowed (Seq.seq int32) = any_l ()
    | & _78 : borrowed (Seq.seq int32) = any_l ()
    | & _79 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  use seq.Seq
  
  let rec new'0 (_1:()) (return'  (ret:GhostBox'0.t_GhostBox (Seq.seq int32)))= any
    [ return' (result:GhostBox'0.t_GhostBox (Seq.seq int32))-> {[%#span55] inv'0 result}
      {[%#span54] inner_logic'0 result = (Seq.empty  : Seq.seq int32)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_vec (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sghost_vec0] ()} (fun (_ret':GhostBox'0.t_GhostBox (Seq.seq int32)) ->  [ &v <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec1] forall i : int . get'0 (inner_logic'0 v) i = Option'0.C_None} s1
      | s1 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {v}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->  [ &_6 <- _ret' ]  [ &v <- _ret'.final ] s2)
      | s2 =  [ &_5 <- Closure'0.M_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z _6 ] s3
      | s3 = closure1'0 {_5} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : GhostBox'0.t_GhostBox (Seq.seq int32) = any_l ()
    | & _4 : GhostBox'0.t_GhostBox () = any_l ()
    | & _5 : Closure'0.m_ghost_vec__ghost_vec__qy123zclosureqy35z1qy125z = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _7 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
