module T_creusot_contracts__ghost__GhostBox [#"../../../../creusot-contracts/src/ghost.rs" 27 0 27 22]
  type t_GhostBox 't =
    | C_GhostBox 't
  
  let rec t_GhostBox < 't > (input:t_GhostBox 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_GhostBox field_0 = input} (! ret {field_0}) ]
    
  
  function t_GhostBox__0 (self : t_GhostBox 't) : 't =
    match self with
      | C_GhostBox a -> a
      end
end
module T_core__option__Option
  type t_Option 't =
    | C_None
    | C_Some 't
  
  let rec v_None < 't > (input:t_Option 't) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't > (input:t_Option 't) (ret  (field_0:'t))= any
    [ good (field_0:'t)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't [C_Some field_0 : t_Option 't] . C_Some field_0 <> input} (! {false} any) ]
    
end
module T_ghost_vec__ghost_vec__qyClosure1 [#"ghost_vec.rs" 7 4 38 5]
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  use prelude.prelude.Borrow
  
  type m_ghost_vec__ghost_vec__qyClosure1  =
    | M_ghost_vec__ghost_vec__qyClosure1 (borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))
  
  let rec m_ghost_vec__ghost_vec__qyClosure1 (input:m_ghost_vec__ghost_vec__qyClosure1) (ret  (v:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))))= any
    [ good (v:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))-> {M_ghost_vec__ghost_vec__qyClosure1 v = input}
      (! ret {v}) ]
    
end
module M_ghost_vec__ghost_vec__qyClosure1 [#"ghost_vec.rs" 7 4 38 5]
  let%span sghost_vec0 = "ghost_vec.rs" 8 21 8 23
  let%span sghost_vec1 = "ghost_vec.rs" 9 22 9 35
  let%span sghost_vec2 = "ghost_vec.rs" 10 22 10 34
  let%span sghost_vec3 = "ghost_vec.rs" 12 21 12 23
  let%span sghost_vec4 = "ghost_vec.rs" 13 21 13 23
  let%span sghost_vec5 = "ghost_vec.rs" 15 22 15 30
  let%span sghost_vec6 = "ghost_vec.rs" 16 22 16 69
  let%span sghost_vec7 = "ghost_vec.rs" 18 41 18 42
  let%span sghost_vec8 = "ghost_vec.rs" 19 41 19 42
  let%span sghost_vec9 = "ghost_vec.rs" 20 22 20 42
  let%span sghost_vec10 = "ghost_vec.rs" 21 22 21 34
  let%span sghost_vec11 = "ghost_vec.rs" 23 51 23 52
  let%span sghost_vec12 = "ghost_vec.rs" 24 17 24 19
  let%span sghost_vec13 = "ghost_vec.rs" 26 22 26 35
  let%span sghost_vec14 = "ghost_vec.rs" 33 22 33 41
  let%span sghost_vec15 = "ghost_vec.rs" 34 22 34 41
  let%span sghost_vec16 = "ghost_vec.rs" 35 22 35 41
  let%span sghost_vec17 = "ghost_vec.rs" 36 22 36 34
  let%span sghost_vec18 = "ghost_vec.rs" 37 22 37 34
  let%span sghost19 = "../../../../creusot-contracts/src/ghost.rs" 68 22 68 26
  let%span sghost20 = "../../../../creusot-contracts/src/ghost.rs" 67 14 67 36
  let%span sghost21 = "../../../../creusot-contracts/src/ghost.rs" 68 4 68 48
  let%span sseq22 = "../../../../creusot-contracts/src/logic/seq.rs" 297 27 297 31
  let%span sseq23 = "../../../../creusot-contracts/src/logic/seq.rs" 297 33 297 34
  let%span sseq24 = "../../../../creusot-contracts/src/logic/seq.rs" 296 14 296 35
  let%span sghost25 = "../../../../creusot-contracts/src/ghost.rs" 184 9 184 15
  let%span sghost26 = "../../../../creusot-contracts/src/ghost.rs" 52 14 52 18
  let%span sghost27 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 35
  let%span sghost28 = "../../../../creusot-contracts/src/ghost.rs" 52 4 52 36
  let%span sseq29 = "../../../../creusot-contracts/src/logic/seq.rs" 276 22 276 26
  let%span sseq30 = "../../../../creusot-contracts/src/logic/seq.rs" 275 14 275 34
  let%span sint31 = "../../../../creusot-contracts/src/logic/int.rs" 28 14 28 31
  let%span sseq32 = "../../../../creusot-contracts/src/logic/seq.rs" 325 22 325 26
  let%span sseq33 = "../../../../creusot-contracts/src/logic/seq.rs" 321 14 324 5
  let%span sseq34 = "../../../../creusot-contracts/src/logic/seq.rs" 325 4 325 53
  let%span sseq35 = "../../../../creusot-contracts/src/logic/seq.rs" 360 30 360 34
  let%span sseq36 = "../../../../creusot-contracts/src/logic/seq.rs" 350 4 357 7
  let%span sseq37 = "../../../../creusot-contracts/src/logic/seq.rs" 358 4 358 86
  let%span sseq38 = "../../../../creusot-contracts/src/logic/seq.rs" 359 14 359 44
  let%span sseq39 = "../../../../creusot-contracts/src/logic/seq.rs" 360 4 360 65
  let%span sseq40 = "../../../../creusot-contracts/src/logic/seq.rs" 391 26 391 30
  let%span sseq41 = "../../../../creusot-contracts/src/logic/seq.rs" 383 4 390 7
  let%span sseq42 = "../../../../creusot-contracts/src/logic/seq.rs" 391 4 391 44
  let%span sghost43 = "../../../../creusot-contracts/src/ghost.rs" 148 15 148 16
  let%span sghost44 = "../../../../creusot-contracts/src/ghost.rs" 146 14 146 28
  let%span sghost45 = "../../../../creusot-contracts/src/ghost.rs" 148 4 148 28
  let%span sresolve46 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sseq47 = "../../../../creusot-contracts/src/logic/seq.rs" 63 4 63 12
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'11 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'11 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'11 x] . inv'11 x = true
  
  predicate inv'10 (_1 : ())
  
  axiom inv_axiom'10 [@rewrite] : forall x : () [inv'10 x] . inv'10 x = true
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  predicate inv'9 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'9 [@rewrite] : forall x : Option'0.t_Option int32 [inv'9 x] . inv'9 x = true
  
  use prelude.prelude.Borrow
  
  use T_core__option__Option as Option'0
  
  predicate inv'8 (_1 : Option'0.t_Option (borrowed int32))
  
  axiom inv_axiom'8 [@rewrite] : forall x : Option'0.t_Option (borrowed int32) [inv'8 x] . inv'8 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'7 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Option'0.t_Option int32 [inv'7 x] . inv'7 x = true
  
  predicate inv'6 (_1 : int)
  
  axiom inv_axiom'6 [@rewrite] : forall x : int [inv'6 x] . inv'6 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'5 (_1 : GhostBox'0.t_GhostBox int)
  
  axiom inv_axiom'5 [@rewrite] : forall x : GhostBox'0.t_GhostBox int [inv'5 x] . inv'5 x = true
  
  use seq.Seq
  
  predicate inv'4 (_1 : Seq.seq int32)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq int32 [inv'4 x] . inv'4 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'3 (_1 : GhostBox'0.t_GhostBox (Seq.seq int32))
  
  axiom inv_axiom'3 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Seq.seq int32) [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : int32)
  
  axiom inv_axiom'2 [@rewrite] : forall x : int32 [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : borrowed (Seq.seq int32))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Seq.seq int32) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'1 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost43] inv'10 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost45] inv'11 result}
      {[%#sghost44] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    [%#sresolve46] self.final = self.current
  
  predicate resolve'6 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    resolve'7 _1
  
  use T_ghost_vec__ghost_vec__qyClosure1 as Closure'0
  
  function field_0'0 [#"ghost_vec.rs" 7 4 38 5] (self : Closure'0.m_ghost_vec__ghost_vec__qyClosure1) : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))
    
   =
    let Closure'0.M_ghost_vec__ghost_vec__qyClosure1 a = self in a
  
  predicate resolve'5 [#"ghost_vec.rs" 7 4 38 5] (_1 : Closure'0.m_ghost_vec__ghost_vec__qyClosure1) =
    resolve'6 (field_0'0 _1)
  
  predicate resolve'2 (_1 : Closure'0.m_ghost_vec__ghost_vec__qyClosure1) =
    resolve'5 _1
  
  use seq.Seq
  
  use seq.Seq
  
  let rec pop_ghost'0 (self:borrowed (Seq.seq int32)) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#sseq40] inv'1 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#sseq42] inv'9 result}
      {[%#sseq41] if Seq.length self.current = 0 then
        self.current = self.final /\ result = Option'0.C_None
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> self.current = Seq.snoc self.final r
          end
      }
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed int32) =
    [%#sresolve46] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'4 _1
  
  use seq.Seq
  
  function get'0 (self : Seq.seq int32) (ix : int) : Option'0.t_Option int32 =
    [%#sseq47] if 0 <= ix /\ ix < Seq.length self then Option'0.C_Some (Seq.get self ix) else Option'0.C_None
  
  let rec get_mut_ghost'0 (self:borrowed (Seq.seq int32)) (index:int) (return'  (ret:Option'0.t_Option (borrowed int32)))= {[@expl:precondition] [%#sseq35] inv'1 self}
    any
    [ return' (result:Option'0.t_Option (borrowed int32))-> {[%#sseq39] inv'8 result}
      {[%#sseq38] Seq.length self.current = Seq.length self.final}
      {[%#sseq37] forall i : int . i <> index  -> get'0 self.current index = get'0 self.final index}
      {[%#sseq36] if get'0 self.current index = Option'0.C_None then
        result = Option'0.C_None /\ self.current = self.final
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> r.current = Seq.get self.current index /\ r.final = Seq.get self.final index
          end
      }
      (! return' {result}) ]
    
  
  let rec get_ghost'0 (self:Seq.seq int32) (index:int) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#sseq32] inv'4 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#sseq34] inv'7 result}
      {[%#sseq33] match get'0 self index with
        | Option'0.C_None -> result = Option'0.C_None
        | Option'0.C_Some v -> result = Option'0.C_Some v
        end}
      (! return' {result}) ]
    
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec deref'1 (self:GhostBox'0.t_GhostBox int) (return'  (ret:int))= {[@expl:precondition] [%#sghost26] inv'5 self}
    any
    [ return' (result:int)-> {[%#sghost28] inv'6 result}
      {[%#sghost27] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int128
  
  function inner_logic'1 (self : GhostBox'0.t_GhostBox int) : int =
    [%#sghost25] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  let rec new'0 (value:int128) (return'  (ret:GhostBox'0.t_GhostBox int))= any
    [ return' (result:GhostBox'0.t_GhostBox int)-> {[%#sint31] inner_logic'1 result = Int128.to_int value}
      (! return' {result}) ]
    
  
  let rec len_ghost'0 (self:Seq.seq int32) (return'  (ret:int))= {[@expl:precondition] [%#sseq29] inv'4 self}
    any [ return' (result:int)-> {[%#sseq30] result = Seq.length self} (! return' {result}) ] 
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Seq.seq int32)) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [%#sghost26] inv'3 self}
    any
    [ return' (result:Seq.seq int32)-> {[%#sghost28] inv'4 result}
      {[%#sghost27] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  function inner_logic'0 (self : GhostBox'0.t_GhostBox (Seq.seq int32)) : Seq.seq int32 =
    [%#sghost25] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  predicate resolve'3 (self : borrowed (Seq.seq int32)) =
    [%#sresolve46] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Seq.seq int32)) =
    resolve'3 _1
  
  let rec push_ghost'0 (self:borrowed (Seq.seq int32)) (x:int32) (return'  (ret:()))= {[@expl:precondition] [%#sseq23] inv'2 x}
    {[@expl:precondition] [%#sseq22] inv'1 self}
    any [ return' (result:())-> {[%#sseq24] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) (return'  (ret:borrowed (Seq.seq int32)))= {[@expl:precondition] [%#sghost19] inv'0 self}
    any
    [ return' (result:borrowed (Seq.seq int32))-> {[%#sghost21] inv'1 result}
      {[%#sghost20] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec m_ghost_vec__ghost_vec__qyClosure1 (_1:Closure'0.m_ghost_vec__ghost_vec__qyClosure1) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_6 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s1))
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s1)
      | s1 = push_ghost'0 {_4} {[%#sghost_vec0] (21 : int32)} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec1] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec2] Seq.length (inner_logic'0 (field_0'0 _1).current) = 1} s3
      | s3 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_14 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s4))
      | s4 = deref_mut'0 {_14} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_13 <- _ret' ] s5)
      | s5 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_12} {[%#sghost_vec3] (10 : int32)} (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 _13}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_18 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_18} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_16 <- _ret' ] 
             [ &_17 <- { _17 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_16} {[%#sghost_vec4] (30 : int32)} (fun (_ret':()) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _17}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_21 <- _ret' ] s2))
      | s2 = bb7 ]
      
    | bb7 = s0 [ s0 = len_ghost'0 {_21} (fun (_ret':int) ->  [ &len <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec5] len = 3} s1
      | s1 = {[@expl:assertion] [%#sghost_vec6] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 1 = (10 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 2 = (30 : int32)}
        s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_29 <- _ret' ] s3))
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = new'0 {[%#sghost_vec7] (1 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_34 <- _ret' ] s1)
      | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = deref'1 {_34} (fun (_ret':int) ->  [ &_32 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = get_ghost'0 {_29} {_32} (fun (_ret':Option'0.t_Option int32) ->  [ &get1 <- _ret' ] s1) | s1 = bb12 ]
      
    | bb12 = bb13
    | bb13 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_37 <- _ret' ] s1))
      | s1 = bb14 ]
      
    | bb14 = s0
      [ s0 = new'0 {[%#sghost_vec8] (3 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_42 <- _ret' ] s1)
      | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = deref'1 {_42} (fun (_ret':int) ->  [ &_40 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = get_ghost'0 {_37} {_40} (fun (_ret':Option'0.t_Option int32) ->  [ &get2 <- _ret' ] s1) | s1 = bb17 ]
      
    | bb17 = bb18
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec9] get1 = Option'0.C_Some (10 : int32)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec10] get2 = Option'0.C_None} s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_51 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s3))
      | s3 = deref_mut'0 {_51} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_50 <- _ret' ] s4)
      | s4 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_50.current} {Borrow.get_id _50}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_49 <- _ret' ] 
             [ &_50 <- { _50 with current = _ret'.final ; } ] 
            s1)
      | s1 = new'0 {[%#sghost_vec11] (0 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_55 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0 [ s0 = deref'1 {_55} (fun (_ret':int) ->  [ &_53 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = s0
      [ s0 = get_mut_ghost'0 {_49} {_53} (fun (_ret':Option'0.t_Option (borrowed int32)) ->  [ &_48 <- _ret' ] s1)
      | s1 = bb22 ]
      
    | bb22 = any
      [ br0 -> {_48 = Option'0.C_None } (! bb25) | br1 (a:borrowed int32)-> {_48 = Option'0.C_Some a} (! bb23) ]
      
    | bb25 = s0
      [ s0 = -{match _48 with
          | Option'0.C_Some x'0 -> resolve'1 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _50}- s2
      | s2 = bb26 ]
      
    | bb23 = bb24
    | bb24 = s0
      [ s0 = Option'0.v_Some <borrowed int32> {_48} (fun (r0'0:borrowed int32) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#sghost_vec12] (42 : int32)) ; } ] s2
      | s2 = -{resolve'1 x}- s3
      | s3 = -{resolve'0 _50}- s4
      | s4 = bb26 ]
      
    | bb26 = bb27
    | bb27 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec13] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (42 : int32)} s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_63 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_63} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_62 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_62.current} {Borrow.get_id _62}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_61 <- _ret' ] 
             [ &_62 <- { _62 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_61} (fun (_ret':Option'0.t_Option int32) ->  [ &pop1 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0
      [ s0 = -{resolve'0 _62}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_67 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_67} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_66 <- _ret' ] s3)
      | s3 = bb30 ]
      
    | bb30 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_66.current} {Borrow.get_id _66}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_65 <- _ret' ] 
             [ &_66 <- { _66 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_65} (fun (_ret':Option'0.t_Option int32) ->  [ &pop2 <- _ret' ] s2)
      | s2 = bb31 ]
      
    | bb31 = s0
      [ s0 = -{resolve'0 _66}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_71 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_71} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_70 <- _ret' ] s3)
      | s3 = bb32 ]
      
    | bb32 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_70.current} {Borrow.get_id _70}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_69 <- _ret' ] 
             [ &_70 <- { _70 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_69} (fun (_ret':Option'0.t_Option int32) ->  [ &pop3 <- _ret' ] s2)
      | s2 = bb33 ]
      
    | bb33 = s0
      [ s0 = -{resolve'0 _70}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_75 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_75} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_74 <- _ret' ] s3)
      | s3 = bb34 ]
      
    | bb34 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_74.current} {Borrow.get_id _74}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_73 <- _ret' ] 
             [ &_74 <- { _74 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_73} (fun (_ret':Option'0.t_Option int32) ->  [ &pop4 <- _ret' ] s2)
      | s2 = bb35 ]
      
    | bb35 = s0
      [ s0 = -{resolve'0 _74}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current} {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_79 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_79} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_78 <- _ret' ] s3)
      | s3 = bb36 ]
      
    | bb36 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_78.current} {Borrow.get_id _78}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_77 <- _ret' ] 
             [ &_78 <- { _78 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_77} (fun (_ret':Option'0.t_Option int32) ->  [ &pop5 <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = s0
      [ s0 = -{resolve'0 _78}- s1
      | s1 = -{resolve'2 _1}- s2
      | s2 = {[@expl:assertion] [%#sghost_vec14] pop1 = Option'0.C_Some (30 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec15] pop2 = Option'0.C_Some (10 : int32)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec16] pop3 = Option'0.C_Some (42 : int32)} s5
      | s5 = {[@expl:assertion] [%#sghost_vec17] pop4 = Option'0.C_None} s6
      | s6 = {[@expl:assertion] [%#sghost_vec18] pop5 = Option'0.C_None} s7
      | s7 = new'1 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s8)
      | s8 = bb38 ]
      
    | bb38 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_ghost_vec__ghost_vec__qyClosure1 = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Seq.seq int32) = any_l ()
    | & _5 : borrowed (Seq.seq int32) = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (Seq.seq int32) = any_l ()
    | & _13 : borrowed (Seq.seq int32) = any_l ()
    | & _14 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _15 : () = any_l ()
    | & _16 : borrowed (Seq.seq int32) = any_l ()
    | & _17 : borrowed (Seq.seq int32) = any_l ()
    | & _18 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & len : int = any_l ()
    | & _21 : Seq.seq int32 = any_l ()
    | & get1 : Option'0.t_Option int32 = any_l ()
    | & _29 : Seq.seq int32 = any_l ()
    | & _32 : int = any_l ()
    | & _34 : GhostBox'0.t_GhostBox int = any_l ()
    | & get2 : Option'0.t_Option int32 = any_l ()
    | & _37 : Seq.seq int32 = any_l ()
    | & _40 : int = any_l ()
    | & _42 : GhostBox'0.t_GhostBox int = any_l ()
    | & _48 : Option'0.t_Option (borrowed int32) = any_l ()
    | & _49 : borrowed (Seq.seq int32) = any_l ()
    | & _50 : borrowed (Seq.seq int32) = any_l ()
    | & _51 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _53 : int = any_l ()
    | & _55 : GhostBox'0.t_GhostBox int = any_l ()
    | & x : borrowed int32 = any_l ()
    | & pop1 : Option'0.t_Option int32 = any_l ()
    | & _61 : borrowed (Seq.seq int32) = any_l ()
    | & _62 : borrowed (Seq.seq int32) = any_l ()
    | & _63 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop2 : Option'0.t_Option int32 = any_l ()
    | & _65 : borrowed (Seq.seq int32) = any_l ()
    | & _66 : borrowed (Seq.seq int32) = any_l ()
    | & _67 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop3 : Option'0.t_Option int32 = any_l ()
    | & _69 : borrowed (Seq.seq int32) = any_l ()
    | & _70 : borrowed (Seq.seq int32) = any_l ()
    | & _71 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop4 : Option'0.t_Option int32 = any_l ()
    | & _73 : borrowed (Seq.seq int32) = any_l ()
    | & _74 : borrowed (Seq.seq int32) = any_l ()
    | & _75 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop5 : Option'0.t_Option int32 = any_l ()
    | & _77 : borrowed (Seq.seq int32) = any_l ()
    | & _78 : borrowed (Seq.seq int32) = any_l ()
    | & _79 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
end
module M_ghost_vec__ghost_vec [#"ghost_vec.rs" 4 0 4 18]
  let%span sghost_vec0 = "ghost_vec.rs" 5 16 5 26
  let%span sghost_vec1 = "ghost_vec.rs" 6 4 6 50
  let%span sseq2 = "../../../../creusot-contracts/src/logic/seq.rs" 250 14 250 36
  let%span sseq3 = "../../../../creusot-contracts/src/logic/seq.rs" 252 4 252 34
  let%span sghost4 = "../../../../creusot-contracts/src/ghost.rs" 184 9 184 15
  let%span sseq5 = "../../../../creusot-contracts/src/logic/seq.rs" 63 4 63 12
  let%span sghost_vec6 = "ghost_vec.rs" 8 21 8 23
  let%span sghost_vec7 = "ghost_vec.rs" 9 22 9 35
  let%span sghost_vec8 = "ghost_vec.rs" 10 22 10 34
  let%span sghost_vec9 = "ghost_vec.rs" 12 21 12 23
  let%span sghost_vec10 = "ghost_vec.rs" 13 21 13 23
  let%span sghost_vec11 = "ghost_vec.rs" 15 22 15 30
  let%span sghost_vec12 = "ghost_vec.rs" 16 22 16 69
  let%span sghost_vec13 = "ghost_vec.rs" 18 41 18 42
  let%span sghost_vec14 = "ghost_vec.rs" 19 41 19 42
  let%span sghost_vec15 = "ghost_vec.rs" 20 22 20 42
  let%span sghost_vec16 = "ghost_vec.rs" 21 22 21 34
  let%span sghost_vec17 = "ghost_vec.rs" 23 51 23 52
  let%span sghost_vec18 = "ghost_vec.rs" 24 17 24 19
  let%span sghost_vec19 = "ghost_vec.rs" 26 22 26 35
  let%span sghost_vec20 = "ghost_vec.rs" 33 22 33 41
  let%span sghost_vec21 = "ghost_vec.rs" 34 22 34 41
  let%span sghost_vec22 = "ghost_vec.rs" 35 22 35 41
  let%span sghost_vec23 = "ghost_vec.rs" 36 22 36 34
  let%span sghost_vec24 = "ghost_vec.rs" 37 22 37 34
  let%span sghost25 = "../../../../creusot-contracts/src/ghost.rs" 68 22 68 26
  let%span sghost26 = "../../../../creusot-contracts/src/ghost.rs" 67 14 67 36
  let%span sghost27 = "../../../../creusot-contracts/src/ghost.rs" 68 4 68 48
  let%span sseq28 = "../../../../creusot-contracts/src/logic/seq.rs" 297 27 297 31
  let%span sseq29 = "../../../../creusot-contracts/src/logic/seq.rs" 297 33 297 34
  let%span sseq30 = "../../../../creusot-contracts/src/logic/seq.rs" 296 14 296 35
  let%span sghost31 = "../../../../creusot-contracts/src/ghost.rs" 52 14 52 18
  let%span sghost32 = "../../../../creusot-contracts/src/ghost.rs" 51 14 51 35
  let%span sghost33 = "../../../../creusot-contracts/src/ghost.rs" 52 4 52 36
  let%span sseq34 = "../../../../creusot-contracts/src/logic/seq.rs" 276 22 276 26
  let%span sseq35 = "../../../../creusot-contracts/src/logic/seq.rs" 275 14 275 34
  let%span sint36 = "../../../../creusot-contracts/src/logic/int.rs" 28 14 28 31
  let%span sseq37 = "../../../../creusot-contracts/src/logic/seq.rs" 325 22 325 26
  let%span sseq38 = "../../../../creusot-contracts/src/logic/seq.rs" 321 14 324 5
  let%span sseq39 = "../../../../creusot-contracts/src/logic/seq.rs" 325 4 325 53
  let%span sseq40 = "../../../../creusot-contracts/src/logic/seq.rs" 360 30 360 34
  let%span sseq41 = "../../../../creusot-contracts/src/logic/seq.rs" 350 4 357 7
  let%span sseq42 = "../../../../creusot-contracts/src/logic/seq.rs" 358 4 358 86
  let%span sseq43 = "../../../../creusot-contracts/src/logic/seq.rs" 359 14 359 44
  let%span sseq44 = "../../../../creusot-contracts/src/logic/seq.rs" 360 4 360 65
  let%span sseq45 = "../../../../creusot-contracts/src/logic/seq.rs" 391 26 391 30
  let%span sseq46 = "../../../../creusot-contracts/src/logic/seq.rs" 383 4 390 7
  let%span sseq47 = "../../../../creusot-contracts/src/logic/seq.rs" 391 4 391 44
  let%span sghost48 = "../../../../creusot-contracts/src/ghost.rs" 148 15 148 16
  let%span sghost49 = "../../../../creusot-contracts/src/ghost.rs" 146 14 146 28
  let%span sghost50 = "../../../../creusot-contracts/src/ghost.rs" 148 4 148 28
  let%span sresolve51 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'12 (_1 : GhostBox'0.t_GhostBox ())
  
  axiom inv_axiom'12 [@rewrite] : forall x : GhostBox'0.t_GhostBox () [inv'12 x] . inv'12 x = true
  
  predicate inv'11 (_1 : ())
  
  axiom inv_axiom'11 [@rewrite] : forall x : () [inv'11 x] . inv'11 x = true
  
  use prelude.prelude.Int32
  
  use prelude.prelude.Int
  
  use T_core__option__Option as Option'0
  
  predicate inv'10 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'10 [@rewrite] : forall x : Option'0.t_Option int32 [inv'10 x] . inv'10 x = true
  
  use prelude.prelude.Borrow
  
  use T_core__option__Option as Option'0
  
  predicate inv'9 (_1 : Option'0.t_Option (borrowed int32))
  
  axiom inv_axiom'9 [@rewrite] : forall x : Option'0.t_Option (borrowed int32) [inv'9 x] . inv'9 x = true
  
  use T_core__option__Option as Option'0
  
  predicate inv'8 (_1 : Option'0.t_Option int32)
  
  axiom inv_axiom'8 [@rewrite] : forall x : Option'0.t_Option int32 [inv'8 x] . inv'8 x = true
  
  predicate inv'7 (_1 : int)
  
  axiom inv_axiom'7 [@rewrite] : forall x : int [inv'7 x] . inv'7 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'6 (_1 : GhostBox'0.t_GhostBox int)
  
  axiom inv_axiom'6 [@rewrite] : forall x : GhostBox'0.t_GhostBox int [inv'6 x] . inv'6 x = true
  
  use seq.Seq
  
  predicate inv'5 (_1 : Seq.seq int32)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq int32 [inv'5 x] . inv'5 x = true
  
  use T_creusot_contracts__ghost__GhostBox as GhostBox'0
  
  predicate inv'4 (_1 : GhostBox'0.t_GhostBox (Seq.seq int32))
  
  axiom inv_axiom'4 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Seq.seq int32) [inv'4 x] . inv'4 x = true
  
  predicate inv'3 (_1 : int32)
  
  axiom inv_axiom'3 [@rewrite] : forall x : int32 [inv'3 x] . inv'3 x = true
  
  predicate inv'2 (_1 : borrowed (Seq.seq int32))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (Seq.seq int32) [inv'2 x] . inv'2 x = true
  
  predicate inv'1 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) [inv'1 x] . inv'1 x = true
  
  predicate inv'0 (_1 : GhostBox'0.t_GhostBox (Seq.seq int32))
  
  axiom inv_axiom'0 [@rewrite] : forall x : GhostBox'0.t_GhostBox (Seq.seq int32) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Intrinsic
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec new'2 (x:()) (return'  (ret:GhostBox'0.t_GhostBox ()))= {[@expl:precondition] [%#sghost48] inv'11 x}
    any
    [ return' (result:GhostBox'0.t_GhostBox ())-> {[%#sghost50] inv'12 result}
      {[%#sghost49] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 result = x}
      (! return' {result}) ]
    
  
  predicate resolve'7 (self : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    [%#sresolve51] self.final = self.current
  
  predicate resolve'6 (_1 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) =
    resolve'7 _1
  
  use T_ghost_vec__ghost_vec__qyClosure1 as Closure'0
  
  function field_0'0 [#"ghost_vec.rs" 7 4 38 5] (self : Closure'0.m_ghost_vec__ghost_vec__qyClosure1) : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))
    
   =
    let Closure'0.M_ghost_vec__ghost_vec__qyClosure1 a = self in a
  
  predicate resolve'5 [#"ghost_vec.rs" 7 4 38 5] (_1 : Closure'0.m_ghost_vec__ghost_vec__qyClosure1) =
    resolve'6 (field_0'0 _1)
  
  predicate resolve'2 (_1 : Closure'0.m_ghost_vec__ghost_vec__qyClosure1) =
    resolve'5 _1
  
  use seq.Seq
  
  use seq.Seq
  
  let rec pop_ghost'0 (self:borrowed (Seq.seq int32)) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#sseq45] inv'2 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#sseq47] inv'10 result}
      {[%#sseq46] if Seq.length self.current = 0 then
        self.current = self.final /\ result = Option'0.C_None
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> self.current = Seq.snoc self.final r
          end
      }
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed int32) =
    [%#sresolve51] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed int32) =
    resolve'4 _1
  
  use seq.Seq
  
  function get'0 (self : Seq.seq int32) (ix : int) : Option'0.t_Option int32 =
    [%#sseq5] if 0 <= ix /\ ix < Seq.length self then Option'0.C_Some (Seq.get self ix) else Option'0.C_None
  
  let rec get_mut_ghost'0 (self:borrowed (Seq.seq int32)) (index:int) (return'  (ret:Option'0.t_Option (borrowed int32)))= {[@expl:precondition] [%#sseq40] inv'2 self}
    any
    [ return' (result:Option'0.t_Option (borrowed int32))-> {[%#sseq44] inv'9 result}
      {[%#sseq43] Seq.length self.current = Seq.length self.final}
      {[%#sseq42] forall i : int . i <> index  -> get'0 self.current index = get'0 self.final index}
      {[%#sseq41] if get'0 self.current index = Option'0.C_None then
        result = Option'0.C_None /\ self.current = self.final
      else
        match result with
          | Option'0.C_None -> false
          | Option'0.C_Some r -> r.current = Seq.get self.current index /\ r.final = Seq.get self.final index
          end
      }
      (! return' {result}) ]
    
  
  let rec get_ghost'0 (self:Seq.seq int32) (index:int) (return'  (ret:Option'0.t_Option int32))= {[@expl:precondition] [%#sseq37] inv'5 self}
    any
    [ return' (result:Option'0.t_Option int32)-> {[%#sseq39] inv'8 result}
      {[%#sseq38] match get'0 self index with
        | Option'0.C_None -> result = Option'0.C_None
        | Option'0.C_Some v -> result = Option'0.C_Some v
        end}
      (! return' {result}) ]
    
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec deref'1 (self:GhostBox'0.t_GhostBox int) (return'  (ret:int))= {[@expl:precondition] [%#sghost31] inv'6 self}
    any
    [ return' (result:int)-> {[%#sghost33] inv'7 result}
      {[%#sghost32] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Int128
  
  use prelude.prelude.Int128
  
  function inner_logic'1 (self : GhostBox'0.t_GhostBox int) : int =
    [%#sghost4] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  let rec new'1 (value:int128) (return'  (ret:GhostBox'0.t_GhostBox int))= any
    [ return' (result:GhostBox'0.t_GhostBox int)-> {[%#sint36] inner_logic'1 result = Int128.to_int value}
      (! return' {result}) ]
    
  
  let rec len_ghost'0 (self:Seq.seq int32) (return'  (ret:int))= {[@expl:precondition] [%#sseq34] inv'5 self}
    any [ return' (result:int)-> {[%#sseq35] result = Seq.length self} (! return' {result}) ] 
  
  use T_creusot_contracts__ghost__GhostBox as T_creusot_contracts__ghost__GhostBox
  
  let rec deref'0 (self:GhostBox'0.t_GhostBox (Seq.seq int32)) (return'  (ret:Seq.seq int32))= {[@expl:precondition] [%#sghost31] inv'4 self}
    any
    [ return' (result:Seq.seq int32)-> {[%#sghost33] inv'5 result}
      {[%#sghost32] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self = result}
      (! return' {result}) ]
    
  
  function inner_logic'0 (self : GhostBox'0.t_GhostBox (Seq.seq int32)) : Seq.seq int32 =
    [%#sghost4] T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self
  
  predicate resolve'3 (self : borrowed (Seq.seq int32)) =
    [%#sresolve51] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Seq.seq int32)) =
    resolve'3 _1
  
  let rec push_ghost'0 (self:borrowed (Seq.seq int32)) (x:int32) (return'  (ret:()))= {[@expl:precondition] [%#sseq29] inv'3 x}
    {[@expl:precondition] [%#sseq28] inv'2 self}
    any [ return' (result:())-> {[%#sseq30] self.final = Seq.snoc self.current x} (! return' {result}) ] 
  
  let rec deref_mut'0 (self:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) (return'  (ret:borrowed (Seq.seq int32)))= {[@expl:precondition] [%#sghost25] inv'1 self}
    any
    [ return' (result:borrowed (Seq.seq int32))-> {[%#sghost27] inv'2 result}
      {[%#sghost26] result
      = Borrow.borrow_logic (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.current) (T_creusot_contracts__ghost__GhostBox.t_GhostBox__0 self.final) (Borrow.inherit_id (Borrow.get_id self) 1)}
      (! return' {result}) ]
    
  
  let rec closure1'0 (_1:Closure'0.m_ghost_vec__ghost_vec__qyClosure1) (return'  (ret:GhostBox'0.t_GhostBox ()))= bb0
    [ bb0 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_6 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s1))
      | s1 = deref_mut'0 {_6} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_5.current} {Borrow.get_id _5}
          (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_4 <- _ret' ]  [ &_5 <- { _5 with current = _ret'.final ; } ] s1)
      | s1 = push_ghost'0 {_4} {[%#sghost_vec6] (21 : int32)} (fun (_ret':()) ->  [ &_3 <- _ret' ] s2)
      | s2 = bb2 ]
      
    | bb2 = s0
      [ s0 = -{resolve'0 _5}- s1
      | s1 = {[@expl:assertion] [%#sghost_vec7] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)} s2
      | s2 = {[@expl:assertion] [%#sghost_vec8] Seq.length (inner_logic'0 (field_0'0 _1).current) = 1} s3
      | s3 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_14 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s4))
      | s4 = deref_mut'0 {_14} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_13 <- _ret' ] s5)
      | s5 = bb3 ]
      
    | bb3 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_13.current} {Borrow.get_id _13}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_12 <- _ret' ] 
             [ &_13 <- { _13 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_12} {[%#sghost_vec9] (10 : int32)} (fun (_ret':()) ->  [ &_11 <- _ret' ] s2)
      | s2 = bb4 ]
      
    | bb4 = s0
      [ s0 = -{resolve'0 _13}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_18 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_18} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_17 <- _ret' ] s3)
      | s3 = bb5 ]
      
    | bb5 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_17.current} {Borrow.get_id _17}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_16 <- _ret' ] 
             [ &_17 <- { _17 with current = _ret'.final ; } ] 
            s1)
      | s1 = push_ghost'0 {_16} {[%#sghost_vec10] (30 : int32)} (fun (_ret':()) ->  [ &_15 <- _ret' ] s2)
      | s2 = bb6 ]
      
    | bb6 = s0
      [ s0 = -{resolve'0 _17}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_21 <- _ret' ] s2))
      | s2 = bb7 ]
      
    | bb7 = s0 [ s0 = len_ghost'0 {_21} (fun (_ret':int) ->  [ &len <- _ret' ] s1) | s1 = bb8 ] 
    | bb8 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec11] len = 3} s1
      | s1 = {[@expl:assertion] [%#sghost_vec12] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (21 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 1 = (10 : int32)
        /\ Seq.get (inner_logic'0 (field_0'0 _1).current) 2 = (30 : int32)}
        s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_29 <- _ret' ] s3))
      | s3 = bb9 ]
      
    | bb9 = s0
      [ s0 = new'1 {[%#sghost_vec13] (1 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_34 <- _ret' ] s1)
      | s1 = bb10 ]
      
    | bb10 = s0 [ s0 = deref'1 {_34} (fun (_ret':int) ->  [ &_32 <- _ret' ] s1) | s1 = bb11 ] 
    | bb11 = s0
      [ s0 = get_ghost'0 {_29} {_32} (fun (_ret':Option'0.t_Option int32) ->  [ &get1 <- _ret' ] s1) | s1 = bb12 ]
      
    | bb12 = bb13
    | bb13 = s0
      [ s0 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            deref'0 {r'0.current} (fun (_ret':Seq.seq int32) ->  [ &_37 <- _ret' ] s1))
      | s1 = bb14 ]
      
    | bb14 = s0
      [ s0 = new'1 {[%#sghost_vec14] (3 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_42 <- _ret' ] s1)
      | s1 = bb15 ]
      
    | bb15 = s0 [ s0 = deref'1 {_42} (fun (_ret':int) ->  [ &_40 <- _ret' ] s1) | s1 = bb16 ] 
    | bb16 = s0
      [ s0 = get_ghost'0 {_37} {_40} (fun (_ret':Option'0.t_Option int32) ->  [ &get2 <- _ret' ] s1) | s1 = bb17 ]
      
    | bb17 = bb18
    | bb18 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec15] get1 = Option'0.C_Some (10 : int32)} s1
      | s1 = {[@expl:assertion] [%#sghost_vec16] get2 = Option'0.C_None} s2
      | s2 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_51 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s3))
      | s3 = deref_mut'0 {_51} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_50 <- _ret' ] s4)
      | s4 = bb19 ]
      
    | bb19 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_50.current} {Borrow.get_id _50}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_49 <- _ret' ] 
             [ &_50 <- { _50 with current = _ret'.final ; } ] 
            s1)
      | s1 = new'1 {[%#sghost_vec17] (0 : int128)} (fun (_ret':GhostBox'0.t_GhostBox int) ->  [ &_55 <- _ret' ] s2)
      | s2 = bb20 ]
      
    | bb20 = s0 [ s0 = deref'1 {_55} (fun (_ret':int) ->  [ &_53 <- _ret' ] s1) | s1 = bb21 ] 
    | bb21 = s0
      [ s0 = get_mut_ghost'0 {_49} {_53} (fun (_ret':Option'0.t_Option (borrowed int32)) ->  [ &_48 <- _ret' ] s1)
      | s1 = bb22 ]
      
    | bb22 = any
      [ br0 -> {_48 = Option'0.C_None } (! bb25) | br1 (a:borrowed int32)-> {_48 = Option'0.C_Some a} (! bb23) ]
      
    | bb25 = s0
      [ s0 = -{match _48 with
          | Option'0.C_Some x'0 -> resolve'1 x'0
          | _ -> true
          end}-
        s1
      | s1 = -{resolve'0 _50}- s2
      | s2 = bb26 ]
      
    | bb23 = bb24
    | bb24 = s0
      [ s0 = Option'0.v_Some <borrowed int32> {_48} (fun (r0'0:borrowed int32) ->  [ &x <- r0'0 ] s1)
      | s1 =  [ &x <- { x with current = ([%#sghost_vec18] (42 : int32)) ; } ] s2
      | s2 = -{resolve'1 x}- s3
      | s3 = -{resolve'0 _50}- s4
      | s4 = bb26 ]
      
    | bb26 = bb27
    | bb27 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec19] Seq.get (inner_logic'0 (field_0'0 _1).current) 0 = (42 : int32)} s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_63 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_63} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_62 <- _ret' ] s3)
      | s3 = bb28 ]
      
    | bb28 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_62.current} {Borrow.get_id _62}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_61 <- _ret' ] 
             [ &_62 <- { _62 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_61} (fun (_ret':Option'0.t_Option int32) ->  [ &pop1 <- _ret' ] s2)
      | s2 = bb29 ]
      
    | bb29 = s0
      [ s0 = -{resolve'0 _62}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_67 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_67} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_66 <- _ret' ] s3)
      | s3 = bb30 ]
      
    | bb30 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_66.current} {Borrow.get_id _66}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_65 <- _ret' ] 
             [ &_66 <- { _66 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_65} (fun (_ret':Option'0.t_Option int32) ->  [ &pop2 <- _ret' ] s2)
      | s2 = bb31 ]
      
    | bb31 = s0
      [ s0 = -{resolve'0 _66}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_71 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_71} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_70 <- _ret' ] s3)
      | s3 = bb32 ]
      
    | bb32 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_70.current} {Borrow.get_id _70}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_69 <- _ret' ] 
             [ &_70 <- { _70 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_69} (fun (_ret':Option'0.t_Option int32) ->  [ &pop3 <- _ret' ] s2)
      | s2 = bb33 ]
      
    | bb33 = s0
      [ s0 = -{resolve'0 _70}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_75 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_75} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_74 <- _ret' ] s3)
      | s3 = bb34 ]
      
    | bb34 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_74.current} {Borrow.get_id _74}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_73 <- _ret' ] 
             [ &_74 <- { _74 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_73} (fun (_ret':Option'0.t_Option int32) ->  [ &pop4 <- _ret' ] s2)
      | s2 = bb35 ]
      
    | bb35 = s0
      [ s0 = -{resolve'0 _74}- s1
      | s1 = Closure'0.m_ghost_vec__ghost_vec__qyClosure1 {_1}
          (fun (r'0:borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
            Borrow.borrow_final <GhostBox'0.t_GhostBox (Seq.seq int32)> {r'0.current} {Borrow.get_id r'0}
              (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->
                 [ &_79 <- _ret' ] 
                 [ &_1 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 ({ r'0 with current = _ret'.final ; }) ] 
                s2))
      | s2 = deref_mut'0 {_79} (fun (_ret':borrowed (Seq.seq int32)) ->  [ &_78 <- _ret' ] s3)
      | s3 = bb36 ]
      
    | bb36 = s0
      [ s0 = Borrow.borrow_final <Seq.seq int32> {_78.current} {Borrow.get_id _78}
          (fun (_ret':borrowed (Seq.seq int32)) ->
             [ &_77 <- _ret' ] 
             [ &_78 <- { _78 with current = _ret'.final ; } ] 
            s1)
      | s1 = pop_ghost'0 {_77} (fun (_ret':Option'0.t_Option int32) ->  [ &pop5 <- _ret' ] s2)
      | s2 = bb37 ]
      
    | bb37 = s0
      [ s0 = -{resolve'0 _78}- s1
      | s1 = -{resolve'2 _1}- s2
      | s2 = {[@expl:assertion] [%#sghost_vec20] pop1 = Option'0.C_Some (30 : int32)} s3
      | s3 = {[@expl:assertion] [%#sghost_vec21] pop2 = Option'0.C_Some (10 : int32)} s4
      | s4 = {[@expl:assertion] [%#sghost_vec22] pop3 = Option'0.C_Some (42 : int32)} s5
      | s5 = {[@expl:assertion] [%#sghost_vec23] pop4 = Option'0.C_None} s6
      | s6 = {[@expl:assertion] [%#sghost_vec24] pop5 = Option'0.C_None} s7
      | s7 = new'2 {_2} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_0 <- _ret' ] s8)
      | s8 = bb38 ]
      
    | bb38 = return' {_0} ]
    
    [ & _0 : GhostBox'0.t_GhostBox () = any_l ()
    | & _1 : Closure'0.m_ghost_vec__ghost_vec__qyClosure1 = _1
    | & _2 : () = any_l ()
    | & _3 : () = any_l ()
    | & _4 : borrowed (Seq.seq int32) = any_l ()
    | & _5 : borrowed (Seq.seq int32) = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _11 : () = any_l ()
    | & _12 : borrowed (Seq.seq int32) = any_l ()
    | & _13 : borrowed (Seq.seq int32) = any_l ()
    | & _14 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _15 : () = any_l ()
    | & _16 : borrowed (Seq.seq int32) = any_l ()
    | & _17 : borrowed (Seq.seq int32) = any_l ()
    | & _18 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & len : int = any_l ()
    | & _21 : Seq.seq int32 = any_l ()
    | & get1 : Option'0.t_Option int32 = any_l ()
    | & _29 : Seq.seq int32 = any_l ()
    | & _32 : int = any_l ()
    | & _34 : GhostBox'0.t_GhostBox int = any_l ()
    | & get2 : Option'0.t_Option int32 = any_l ()
    | & _37 : Seq.seq int32 = any_l ()
    | & _40 : int = any_l ()
    | & _42 : GhostBox'0.t_GhostBox int = any_l ()
    | & _48 : Option'0.t_Option (borrowed int32) = any_l ()
    | & _49 : borrowed (Seq.seq int32) = any_l ()
    | & _50 : borrowed (Seq.seq int32) = any_l ()
    | & _51 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _53 : int = any_l ()
    | & _55 : GhostBox'0.t_GhostBox int = any_l ()
    | & x : borrowed int32 = any_l ()
    | & pop1 : Option'0.t_Option int32 = any_l ()
    | & _61 : borrowed (Seq.seq int32) = any_l ()
    | & _62 : borrowed (Seq.seq int32) = any_l ()
    | & _63 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop2 : Option'0.t_Option int32 = any_l ()
    | & _65 : borrowed (Seq.seq int32) = any_l ()
    | & _66 : borrowed (Seq.seq int32) = any_l ()
    | & _67 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop3 : Option'0.t_Option int32 = any_l ()
    | & _69 : borrowed (Seq.seq int32) = any_l ()
    | & _70 : borrowed (Seq.seq int32) = any_l ()
    | & _71 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop4 : Option'0.t_Option int32 = any_l ()
    | & _73 : borrowed (Seq.seq int32) = any_l ()
    | & _74 : borrowed (Seq.seq int32) = any_l ()
    | & _75 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & pop5 : Option'0.t_Option int32 = any_l ()
    | & _77 : borrowed (Seq.seq int32) = any_l ()
    | & _78 : borrowed (Seq.seq int32) = any_l ()
    | & _79 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l () ]
     [ return' (result:GhostBox'0.t_GhostBox ())-> return' {result} ] 
  
  use seq.Seq
  
  let rec new'0 (_1:()) (return'  (ret:GhostBox'0.t_GhostBox (Seq.seq int32)))= any
    [ return' (result:GhostBox'0.t_GhostBox (Seq.seq int32))-> {[%#sseq3] inv'0 result}
      {[%#sseq2] inner_logic'0 result = (Seq.empty  : Seq.seq int32)}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_vec (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sghost_vec0] ()} (fun (_ret':GhostBox'0.t_GhostBox (Seq.seq int32)) ->  [ &v <- _ret' ] s1)
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:assertion] [%#sghost_vec1] forall i : int . get'0 (inner_logic'0 v) i = Option'0.C_None} s1
      | s1 = Borrow.borrow_mut <GhostBox'0.t_GhostBox (Seq.seq int32)> {v}
          (fun (_ret':borrowed (GhostBox'0.t_GhostBox (Seq.seq int32))) ->  [ &_6 <- _ret' ]  [ &v <- _ret'.final ] s2)
      | s2 =  [ &_5 <- Closure'0.M_ghost_vec__ghost_vec__qyClosure1 _6 ] s3
      | s3 = closure1'0 {_5} (fun (_ret':GhostBox'0.t_GhostBox ()) ->  [ &_4 <- _ret' ] s4)
      | s4 = bb2 ]
      
    | bb2 = bb3
    | bb3 = bb4
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & v : GhostBox'0.t_GhostBox (Seq.seq int32) = any_l ()
    | & _4 : GhostBox'0.t_GhostBox () = any_l ()
    | & _5 : Closure'0.m_ghost_vec__ghost_vec__qyClosure1 = any_l ()
    | & _6 : borrowed (GhostBox'0.t_GhostBox (Seq.seq int32)) = any_l ()
    | & _7 : () = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
