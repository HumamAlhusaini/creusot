module M_arc_and_rc__rc [#"arc_and_rc.rs" 6 0 6 11]
  let%span sarc_and_rc0 = "arc_and_rc.rs" 7 21 7 22
  let%span sarc_and_rc1 = "arc_and_rc.rs" 8 18 8 29
  let%span sarc_and_rc2 = "arc_and_rc.rs" 10 18 10 29
  let%span src3 = "../../../creusot-contracts/src/std/rc.rs" 30 26 30 42
  let%span src4 = "../../../creusot-contracts/src/std/rc.rs" 35 26 35 45
  let%span smodel5 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  
  use creusot.int.Int32
  
  predicate inv'0 (_1 : Int32.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Int32.t [inv'0 x] . inv'0 x = true
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Rc'0  =
    { t_Rc__ptr'0: t_NonNull'0; t_Rc__phantom'0: (); t_Rc__alloc'0: () }
  
  function view'0 (self : t_Rc'0) : Int32.t
  
  let rec new'0 (value:Int32.t) (return'  (ret:t_Rc'0))= {[@expl:new 'value' type invariant] inv'0 value}
    any [ return' (result:t_Rc'0)-> {[%#src3] view'0 result = value} (! return' {result}) ] 
  
  predicate inv'1 (_1 : t_Rc'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Rc'0 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : Int32.t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Int32.t [inv'2 x] . inv'2 x = true
  
  let rec as_ref'0 (self:t_Rc'0) (return'  (ret:Int32.t))= {[@expl:as_ref 'self' type invariant] inv'1 self}
    any [ return' (result:Int32.t)-> {inv'2 result} {[%#src4] result = view'0 self} (! return' {result}) ] 
  
  use creusot.int.Int32
  
  function view'1 (self : Int32.t) : int =
    [%#smodel5] Int32.to_int self
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec rc'0[#"arc_and_rc.rs" 6 0 6 11] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 = new'0 {[%#sarc_and_rc0] (1 : Int32.t)} (fun (_ret':t_Rc'0) ->  [ &rc <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc1] view'0 rc = (1 : Int32.t)} s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = as_ref'0 {rc} (fun (_ret':Int32.t) ->  [ &inner <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc2] view'1 inner = 1} s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    ) [ & _0 : () = Intrinsic.any_l () | & rc : t_Rc'0 = Intrinsic.any_l () | & inner : Int32.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_arc_and_rc__arc [#"arc_and_rc.rs" 13 0 13 12]
  let%span sarc_and_rc0 = "arc_and_rc.rs" 14 23 14 24
  let%span sarc_and_rc1 = "arc_and_rc.rs" 15 18 15 30
  let%span sarc_and_rc2 = "arc_and_rc.rs" 17 18 17 29
  let%span ssync3 = "../../../creusot-contracts/src/std/sync.rs" 30 26 30 42
  let%span ssync4 = "../../../creusot-contracts/src/std/sync.rs" 35 26 35 45
  let%span smodel5 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  
  use creusot.int.Int32
  
  predicate inv'0 (_1 : Int32.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Int32.t [inv'0 x] . inv'0 x = true
  
  use creusot.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Arc'0  =
    { t_Arc__ptr'0: t_NonNull'0; t_Arc__phantom'0: (); t_Arc__alloc'0: () }
  
  function view'0 (self : t_Arc'0) : Int32.t
  
  let rec new'0 (data:Int32.t) (return'  (ret:t_Arc'0))= {[@expl:new 'data' type invariant] inv'0 data}
    any [ return' (result:t_Arc'0)-> {[%#ssync3] view'0 result = data} (! return' {result}) ] 
  
  predicate inv'1 (_1 : t_Arc'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Arc'0 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : Int32.t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Int32.t [inv'2 x] . inv'2 x = true
  
  let rec as_ref'0 (self:t_Arc'0) (return'  (ret:Int32.t))= {[@expl:as_ref 'self' type invariant] inv'1 self}
    any [ return' (result:Int32.t)-> {inv'2 result} {[%#ssync4] result = view'0 self} (! return' {result}) ] 
  
  use creusot.int.Int32
  
  function view'1 (self : Int32.t) : int =
    [%#smodel5] Int32.to_int self
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec arc'0[#"arc_and_rc.rs" 13 0 13 12] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = new'0 {[%#sarc_and_rc0] (2 : Int32.t)} (fun (_ret':t_Arc'0) ->  [ &arc <- _ret' ] s1) | s1 = bb1 ]
    
    | bb1 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc1] view'0 arc = (2 : Int32.t)} s1 | s1 = bb2 ] 
    | bb2 = s0 [ s0 = as_ref'0 {arc} (fun (_ret':Int32.t) ->  [ &inner <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0 [ s0 = {[@expl:assertion] [%#sarc_and_rc2] view'1 inner = 2} s1 | s1 = bb4 ] 
    | bb4 = return' {_0} ]
    )
    [ & _0 : () = Intrinsic.any_l () | & arc : t_Arc'0 = Intrinsic.any_l () | & inner : Int32.t = Intrinsic.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
