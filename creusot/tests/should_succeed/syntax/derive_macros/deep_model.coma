
module T_deep_model__UnitStruct [#"deep_model.rs" 7 0 7 21]
  type t_UnitStruct  =
    | C_UnitStruct
  
  let rec t_UnitStruct (input:t_UnitStruct) (ret  )= any [ good -> {C_UnitStruct  = input} (! ret) ] 
end
module T_deep_model__UnitStructDeepModel [#"deep_model.rs" 7 0 7 22]
  type t_UnitStructDeepModel  =
    | C_UnitStructDeepModel
  
  let rec t_UnitStructDeepModel (input:t_UnitStructDeepModel) (ret  )= any
    [ good -> {C_UnitStructDeepModel  = input} (! ret) ]
    
end
module T_deep_model__TupleStruct [#"deep_model.rs" 10 0 10 22]
  use prelude.prelude.Int32
  
  type t_TupleStruct  =
    | C_TupleStruct int32 bool
  
  let rec t_TupleStruct (input:t_TupleStruct) (ret  (field_0:int32) (field_1:bool))= any
    [ good (field_0:int32) (field_1:bool)-> {C_TupleStruct field_0 field_1 = input} (! ret {field_0} {field_1}) ]
    
end
module T_deep_model__TupleStructDeepModel [#"deep_model.rs" 10 0 10 34]
  use prelude.prelude.Int
  
  type t_TupleStructDeepModel  =
    | C_TupleStructDeepModel int bool
  
  let rec t_TupleStructDeepModel (input:t_TupleStructDeepModel) (ret  (field_0:int) (field_1:bool))= any
    [ good (field_0:int) (field_1:bool)-> {C_TupleStructDeepModel field_0 field_1 = input} (! ret {field_0} {field_1}) ]
    
end
module T_deep_model__Struct [#"deep_model.rs" 13 0 13 17]
  use prelude.prelude.Int32
  
  type t_Struct  =
    | C_Struct int32 bool
  
  let rec t_Struct (input:t_Struct) (ret  (x:int32) (b:bool))= any
    [ good (x:int32) (b:bool)-> {C_Struct x b = input} (! ret {x} {b}) ]
    
end
module T_deep_model__StructDeepModel [#"deep_model.rs" 12 9 12 18]
  use prelude.prelude.Int
  
  type t_StructDeepModel  =
    | C_StructDeepModel int bool
  
  let rec t_StructDeepModel (input:t_StructDeepModel) (ret  (x:int) (b:bool))= any
    [ good (x:int) (b:bool)-> {C_StructDeepModel x b = input} (! ret {x} {b}) ]
    
end
module T_deep_model__TupleStructGenerics [#"deep_model.rs" 19 0 19 47]
  use prelude.prelude.Int32
  
  type t_U'0
  
  type t_T'0
  
  type t_TupleStructGenerics 't_T'0 't_U'0 =
    | C_TupleStructGenerics int32 't_T'0 't_U'0
  
  let rec t_TupleStructGenerics < 't_T'0 > < 't_U'0 > (input:t_TupleStructGenerics 't_T'0 't_U'0) (ret  (field_0:int32) (field_1:'t_T'0) (field_2:'t_U'0))= any
    [ good (field_0:int32) (field_1:'t_T'0) (field_2:'t_U'0)-> {C_TupleStructGenerics field_0 field_1 field_2 = input}
      (! ret {field_0} {field_1} {field_2}) ]
    
end
module T_deep_model__TupleStructGenericsDeepModel [#"deep_model.rs" 19 0 21 17]
  use prelude.prelude.Int
  
  type t_U'0
  
  type t_T'0
  
  type t_TupleStructGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1 =
    | C_TupleStructGenericsDeepModel int 'proj0 'proj1
  
  let rec t_TupleStructGenericsDeepModel < 't_T'0 > < 't_U'0 > < 'proj0 > < 'proj1 > (input:t_TupleStructGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1) (ret  (field_0:int) (field_1:'proj0) (field_2:'proj1))= any
    [ good (field_0:int) (field_1:'proj0) (field_2:'proj1)-> {C_TupleStructGenericsDeepModel field_0 field_1 field_2
      = input}
      (! ret {field_0} {field_1} {field_2}) ]
    
end
module T_deep_model__StructGenerics [#"deep_model.rs" 24 0 24 42]
  use prelude.prelude.Int32
  
  type t_U'0
  
  type t_T'0
  
  type t_StructGenerics 't_T'0 't_U'0 =
    | C_StructGenerics int32 't_T'0 't_U'0
  
  let rec t_StructGenerics < 't_T'0 > < 't_U'0 > (input:t_StructGenerics 't_T'0 't_U'0) (ret  (x:int32) (t:'t_T'0) (u:'t_U'0))= any
    [ good (x:int32) (t:'t_T'0) (u:'t_U'0)-> {C_StructGenerics x t u = input} (! ret {x} {t} {u}) ]
    
end
module T_deep_model__StructGenericsDeepModel [#"deep_model.rs" 23 9 23 18]
  use prelude.prelude.Int
  
  type t_U'0
  
  type t_T'0
  
  type t_StructGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1 =
    | C_StructGenericsDeepModel int 'proj0 'proj1
  
  let rec t_StructGenericsDeepModel < 't_T'0 > < 't_U'0 > < 'proj0 > < 'proj1 > (input:t_StructGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1) (ret  (x:int) (t:'proj0) (u:'proj1))= any
    [ good (x:int) (t:'proj0) (u:'proj1)-> {C_StructGenericsDeepModel x t u = input} (! ret {x} {t} {u}) ]
    
end
module T_deep_model__UnitEnum [#"deep_model.rs" 38 0 38 17]
  type t_UnitEnum  =
    | C_A
    | C_B
  
  let rec v_A (input:t_UnitEnum) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} (! {false} any) ]
    
  
  let rec v_B (input:t_UnitEnum) (ret  )= any
    [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} (! {false} any) ]
    
end
module T_deep_model__UnitEnumDeepModel [#"deep_model.rs" 37 9 37 18]
  type t_UnitEnumDeepModel  =
    | C_A
    | C_B
  
  let rec v_A (input:t_UnitEnumDeepModel) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} (! {false} any) ]
    
  
  let rec v_B (input:t_UnitEnumDeepModel) (ret  )= any
    [ good -> {C_B  = input} (! ret) | bad -> {C_B  <> input} (! {false} any) ]
    
end
module T_deep_model__Enum [#"deep_model.rs" 44 0 44 13]
  use prelude.prelude.Int32
  
  type t_Enum  =
    | C_A
    | C_Int int32
    | C_Bool bool
  
  let rec v_A (input:t_Enum) (ret  )= any [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} (! {false} any) ] 
  
  let rec v_Int (input:t_Enum) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_Int field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : int32 [C_Int field_0 : t_Enum] . C_Int field_0 <> input} (! {false} any) ]
    
  
  let rec v_Bool (input:t_Enum) (ret  (b:bool))= any
    [ good (b:bool)-> {C_Bool b = input} (! ret {b})
    | bad -> {forall b : bool [C_Bool b : t_Enum] . C_Bool b <> input} (! {false} any) ]
    
end
module T_deep_model__EnumDeepModel [#"deep_model.rs" 43 9 43 18]
  use prelude.prelude.Int
  
  type t_EnumDeepModel  =
    | C_A
    | C_Int int
    | C_Bool bool
  
  let rec v_A (input:t_EnumDeepModel) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} (! {false} any) ]
    
  
  let rec v_Int (input:t_EnumDeepModel) (ret  (field_0:int))= any
    [ good (field_0:int)-> {C_Int field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : int [C_Int field_0 : t_EnumDeepModel] . C_Int field_0 <> input} (! {false} any) ]
    
  
  let rec v_Bool (input:t_EnumDeepModel) (ret  (b:bool))= any
    [ good (b:bool)-> {C_Bool b = input} (! ret {b})
    | bad -> {forall b : bool [C_Bool b : t_EnumDeepModel] . C_Bool b <> input} (! {false} any) ]
    
end
module T_deep_model__EnumGenerics [#"deep_model.rs" 51 0 51 38]
  use prelude.prelude.Int32
  
  type t_U'0
  
  type t_T'0
  
  type t_EnumGenerics 't_T'0 't_U'0 =
    | C_A
    | C_Int int32
    | C_T 't_T'0
    | C_U 't_U'0
  
  let rec v_A < 't_T'0 > < 't_U'0 > (input:t_EnumGenerics 't_T'0 't_U'0) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} (! {false} any) ]
    
  
  let rec v_Int < 't_T'0 > < 't_U'0 > (input:t_EnumGenerics 't_T'0 't_U'0) (ret  (field_0:int32))= any
    [ good (field_0:int32)-> {C_Int field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : int32 [C_Int field_0 : t_EnumGenerics 't_T'0 't_U'0] . C_Int field_0 <> input}
      (! {false}
      any) ]
    
  
  let rec v_T < 't_T'0 > < 't_U'0 > (input:t_EnumGenerics 't_T'0 't_U'0) (ret  (field_0:'t_T'0))= any
    [ good (field_0:'t_T'0)-> {C_T field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't_T'0 [C_T field_0 : t_EnumGenerics 't_T'0 't_U'0] . C_T field_0 <> input}
      (! {false}
      any) ]
    
  
  let rec v_U < 't_T'0 > < 't_U'0 > (input:t_EnumGenerics 't_T'0 't_U'0) (ret  (u:'t_U'0))= any
    [ good (u:'t_U'0)-> {C_U u = input} (! ret {u})
    | bad -> {forall u : 't_U'0 [C_U u : t_EnumGenerics 't_T'0 't_U'0] . C_U u <> input} (! {false} any) ]
    
end
module T_deep_model__EnumGenericsDeepModel [#"deep_model.rs" 50 9 50 18]
  use prelude.prelude.Int
  
  type t_U'0
  
  type t_T'0
  
  type t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1 =
    | C_A
    | C_Int int
    | C_T 'proj0
    | C_U 'proj1
  
  let rec v_A < 't_T'0 > < 't_U'0 > < 'proj0 > < 'proj1 > (input:t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1) (ret  )= any
    [ good -> {C_A  = input} (! ret) | bad -> {C_A  <> input} (! {false} any) ]
    
  
  let rec v_Int < 't_T'0 > < 't_U'0 > < 'proj0 > < 'proj1 > (input:t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1) (ret  (field_0:int))= any
    [ good (field_0:int)-> {C_Int field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : int [C_Int field_0 : t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1] . C_Int field_0
      <> input}
      (! {false}
      any) ]
    
  
  let rec v_T < 't_T'0 > < 't_U'0 > < 'proj0 > < 'proj1 > (input:t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1) (ret  (field_0:'proj0))= any
    [ good (field_0:'proj0)-> {C_T field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 'proj0 [C_T field_0 : t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1] . C_T field_0
      <> input}
      (! {false}
      any) ]
    
  
  let rec v_U < 't_T'0 > < 't_U'0 > < 'proj0 > < 'proj1 > (input:t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1) (ret  (u:'proj1))= any
    [ good (u:'proj1)-> {C_U u = input} (! ret {u})
    | bad -> {forall u : 'proj1 [C_U u : t_EnumGenericsDeepModel 't_T'0 't_U'0 'proj0 'proj1] . C_U u <> input}
      (! {false}
      any) ]
    
end
