module M_05_pearlite__has_len_3 [#"05_pearlite.rs" 11 0 11 35]
  let%span s05_pearlite0 = "05_pearlite.rs" 10 11 10 24
  let%span s05_pearlite1 = "05_pearlite.rs" 12 16 12 29
  let%span smodel2 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice3 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  
  use prelude.slice.Slice64
  
  use prelude.int.UInt32
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  use prelude.slice.Slice64
  
  function view'1 (self : Slice64.slice UInt32.t) : Seq.seq UInt32.t
  
  axiom view'1_spec : forall self : Slice64.slice UInt32.t . ([%#sslice3] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice4] view'1 self = Slice64.id self)
  
  function view'0 (self : Slice64.slice UInt32.t) : Seq.seq UInt32.t =
    [%#smodel2] view'1 self
  
  constant v  : Slice64.slice UInt32.t
  
  predicate has_len_3'0 [#"05_pearlite.rs" 11 0 11 35] (v : Slice64.slice UInt32.t)
  
  goal vc_has_len_3'0 : true
end
module M_05_pearlite__struct_in_pearlite [#"05_pearlite.rs" 26 0 26 31]
  let%span s05_pearlite0 = "05_pearlite.rs" 25 10 25 30
  
  use prelude.prelude.Intrinsic
  
  type t_A'0  =
    { t_A__a'0: bool }
  
  meta "compute_max_steps" 1000000
  
  let rec struct_in_pearlite'0[#"05_pearlite.rs" 26 0 26 31] (x:t_A'0) (return'  (ret:()))= (! bb0
    [ bb0 = return' {_0} ]
    ) [ & _0 : () = Intrinsic.any_l () ] 
    [ return' (result:())-> {[@expl:struct_in_pearlite ensures] [%#s05_pearlite0] x = { t_A__a'0 = false }}
      (! return' {result}) ]

end
module M_05_pearlite__struct_order [#"05_pearlite.rs" 34 0 34 25]
  let%span s05_pearlite0 = "05_pearlite.rs" 33 10 33 48
  
  use prelude.prelude.Intrinsic
  
  use prelude.int.UInt32
  
  type t_B'0  =
    { t_B__field1'0: bool; t_B__field2'0: UInt32.t }
  
  meta "compute_max_steps" 1000000
  
  let rec struct_order'0[#"05_pearlite.rs" 34 0 34 25] (x:t_B'0) (return'  (ret:()))= (! bb0 [ bb0 = return' {_0} ] )
    [ & _0 : () = Intrinsic.any_l () ]
    
    [ return' (result:())-> {[@expl:struct_order ensures] [%#s05_pearlite0] x
      = { t_B__field1'0 = false; t_B__field2'0 = (0 : UInt32.t) }}
      (! return' {result}) ]

end
module M_05_pearlite__ghost_closure [#"05_pearlite.rs" 50 0 50 22]
  let%span s05_pearlite0 = "05_pearlite.rs" 51 13 51 38
  
  use prelude.int.UInt32
  
  use prelude.prelude.Mapping
  
  use prelude.prelude.Intrinsic
  
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  let rec ghost_closure'0[#"05_pearlite.rs" 50 0 50 22] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_x <- [%#s05_pearlite0] Mapping.from_fn (fun (a : UInt32.t) -> a) ] s1 | s1 = bb1 ] 
    | bb1 = return' {_0} ]
    ) [ & _0 : () = Intrinsic.any_l () | & _x : Map.map UInt32.t UInt32.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_05_pearlite__pearlite_closure [#"05_pearlite.rs" 54 0 54 57]
  use prelude.prelude.Intrinsic
  
  use prelude.int.UInt32
  
  use map.Map
  
  meta "compute_max_steps" 1000000
  
  let rec pearlite_closure'0[#"05_pearlite.rs" 54 0 54 57] (_x:Map.map UInt32.t bool) (return'  (ret:()))= (! bb0
    [ bb0 = return' {_0} ]
    ) [ & _0 : () = Intrinsic.any_l () ]  [ return' (result:())-> (! return' {result}) ] 
end
module M_05_pearlite__caller [#"05_pearlite.rs" 56 0 56 15]
  let%span s05_pearlite0 = "05_pearlite.rs" 57 21 57 44
  
  use prelude.int.UInt32
  
  use prelude.prelude.Mapping
  
  use map.Map
  
  let rec pearlite_closure'0 (_x:Map.map UInt32.t bool) (return'  (ret:()))= any
    [ return' (result:())-> (! return' {result}) ]
  
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec caller'0[#"05_pearlite.rs" 56 0 56 15] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_2 <- [%#s05_pearlite0] Mapping.from_fn (fun (_a : UInt32.t) -> true) ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = pearlite_closure'0 {_2} (fun (_ret':()) ->  [ &_1 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = return' {_0} ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & _1 : () = Intrinsic.any_l ()
    | & _2 : Map.map UInt32.t bool = Intrinsic.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
