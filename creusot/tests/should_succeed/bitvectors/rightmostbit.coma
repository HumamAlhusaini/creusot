module M_rightmostbit__rightmost_bit_8 [#"rightmostbit.rs" 28 0 28 35]
  let%span srightmostbit0 = "rightmostbit.rs" 22 10 22 51
  let%span srightmostbit1 = "rightmostbit.rs" 23 10 23 69
  let%span srightmostbit2 = "rightmostbit.rs" 24 10 24 47
  let%span srightmostbit3 = "rightmostbit.rs" 25 10 25 62
  let%span srightmostbit4 = "rightmostbit.rs" 26 10 26 46
  let%span snum5 = "../../../../creusot-contracts/src/std/num.rs" 122 26 122 32
  let%span srightmostbit6 = "rightmostbit.rs" 12 4 19 50
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord18 = "../../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord19 = "../../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord20 = "../../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.Int8BW
  
  use creusot.int.Int8BW
  
  let rec wrapping_neg'0 (self:Int8BW.t) (return'  (ret:Int8BW.t))= any
    [ return' (result:Int8BW.t)-> {[%#snum5] result = Int8BW.neg self} (! return' {result}) ]
  
  
  use creusot.prelude.Intrinsic
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use creusot.int.Int8BW
  
  function cmp_log'0 (self : Int8BW.t) (o : Int8BW.t) : t_Ordering'0 =
    [%#sord20] if Int8BW.slt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : Int8BW.t) (y : Int8BW.t) : ()
  
  axiom eq_cmp'0_spec : forall x : Int8BW.t, y : Int8BW.t . [%#sord19] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : Int8BW.t) (y : Int8BW.t) : ()
  
  axiom antisym2'0_spec : forall x : Int8BW.t, y : Int8BW.t . ([%#sord17] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord18] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : Int8BW.t) (y : Int8BW.t) : ()
  
  axiom antisym1'0_spec : forall x : Int8BW.t, y : Int8BW.t . ([%#sord15] cmp_log'0 x y = C_Less'0)
   -> ([%#sord16] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : Int8BW.t) (y : Int8BW.t) (z : Int8BW.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : Int8BW.t, y : Int8BW.t, z : Int8BW.t, o : t_Ordering'0 . ([%#sord12] cmp_log'0 x y
  = o)  -> ([%#sord13] cmp_log'0 y z = o)  -> ([%#sord14] cmp_log'0 x z = o)
  
  function refl'0 (x : Int8BW.t) : ()
  
  axiom refl'0_spec : forall x : Int8BW.t . [%#sord11] cmp_log'0 x x = C_Equal'0
  
  use creusot.int.Int8BW
  
  function cmp_gt_log'0 (x : Int8BW.t) (y : Int8BW.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : Int8BW.t, y : Int8BW.t . [%#sord10] Int8BW.sgt x y
  = (cmp_log'0 x y = C_Greater'0)
  
  use creusot.int.Int8BW
  
  function cmp_ge_log'0 (x : Int8BW.t) (y : Int8BW.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : Int8BW.t, y : Int8BW.t . [%#sord9] Int8BW.sge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : Int8BW.t) (y : Int8BW.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : Int8BW.t, y : Int8BW.t . [%#sord8] Int8BW.slt x y = (cmp_log'0 x y = C_Less'0)
  
  use creusot.int.Int8BW
  
  function cmp_le_log'0 (x : Int8BW.t) (y : Int8BW.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : Int8BW.t, y : Int8BW.t . [%#sord7] Int8BW.sle x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  constant v_MIN'0 : Int8BW.t = (128 : Int8BW.t)
  
  use creusot.int.Int8BW
  
  use mach.int.Int
  
  function count8_log'0 [#"rightmostbit.rs" 11 0 11 27] (n : Int8BW.t) : int =
    [%#srightmostbit6] (if Int8BW.bw_and n (1 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
    + (if Int8BW.bw_and n (2 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
    + (if Int8BW.bw_and n (4 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
    + (if Int8BW.bw_and n (8 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
    + (if Int8BW.bw_and n (16 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
    + (if Int8BW.bw_and n (32 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
    + (if Int8BW.bw_and n (64 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
    + (if Int8BW.bw_and n (v_MIN'0 : Int8BW.t) = (0 : Int8BW.t) then 0 else 1)
  
  meta "compute_max_steps" 1000000
  
  let rec rightmost_bit_8'0[#"rightmostbit.rs" 28 0 28 35] (x:Int8BW.t) (return'  (ret:Int8BW.t))= (! bb0
    [ bb0 = s0 [ s0 = wrapping_neg'0 {x} (fun (_ret':Int8BW.t) ->  [ &_8 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = Int8BW.bw_and {x} {_8} (fun (_ret':Int8BW.t) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : Int8BW.t = Intrinsic.any_l () | & x : Int8BW.t = x | & _8 : Int8BW.t = Intrinsic.any_l () ] 
    [ return' (result:Int8BW.t)-> {[@expl:rightmost_bit_8 ensures #0] [%#srightmostbit0] Int8BW.sge x (0 : Int8BW.t)
       -> Int8BW.sle (0 : Int8BW.t) result /\ Int8BW.sle result x}
      {[@expl:rightmost_bit_8 ensures #1] [%#srightmostbit1] Int8BW.sle x (0 : Int8BW.t)
      /\ Int8BW.sgt x (v_MIN'0 : Int8BW.t)
       -> Int8BW.sle (0 : Int8BW.t) result /\ Int8BW.to_int result <= - Int8BW.to_int x}
      {[@expl:rightmost_bit_8 ensures #2] [%#srightmostbit2] (x = (v_MIN'0 : Int8BW.t))
      = (result = (v_MIN'0 : Int8BW.t))}
      {[@expl:rightmost_bit_8 ensures #3] [%#srightmostbit3] forall i : Int8BW.t . Int8BW.sle (0 : Int8BW.t) i
      /\ Int8BW.slt i result  -> Int8BW.bw_and i x = (0 : Int8BW.t)}
      {[@expl:rightmost_bit_8 ensures #4] [%#srightmostbit4] x <> (0 : Int8BW.t)  -> count8_log'0 result = 1}
      (! return' {result}) ]

end
module M_rightmostbit__rightmost_bit_64 [#"rightmostbit.rs" 37 0 37 38]
  let%span srightmostbit0 = "rightmostbit.rs" 32 10 32 53
  let%span srightmostbit1 = "rightmostbit.rs" 33 10 33 72
  let%span srightmostbit2 = "rightmostbit.rs" 34 10 34 49
  let%span srightmostbit3 = "rightmostbit.rs" 35 10 35 64
  let%span snum4 = "../../../../creusot-contracts/src/std/num.rs" 122 26 122 32
  let%span sord5 = "../../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord6 = "../../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord7 = "../../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord8 = "../../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord9 = "../../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord10 = "../../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord11 = "../../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord12 = "../../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord13 = "../../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord14 = "../../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord15 = "../../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord16 = "../../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord17 = "../../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord18 = "../../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use creusot.int.Int64BW
  
  use creusot.int.Int64BW
  
  let rec wrapping_neg'0 (self:Int64BW.t) (return'  (ret:Int64BW.t))= any
    [ return' (result:Int64BW.t)-> {[%#snum4] result = Int64BW.neg self} (! return' {result}) ]
  
  
  use creusot.prelude.Intrinsic
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use creusot.int.Int64BW
  
  function cmp_log'0 (self : Int64BW.t) (o : Int64BW.t) : t_Ordering'0 =
    [%#sord18] if Int64BW.slt self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : Int64BW.t) (y : Int64BW.t) : ()
  
  axiom eq_cmp'0_spec : forall x : Int64BW.t, y : Int64BW.t . [%#sord17] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : Int64BW.t) (y : Int64BW.t) : ()
  
  axiom antisym2'0_spec : forall x : Int64BW.t, y : Int64BW.t . ([%#sord15] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord16] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : Int64BW.t) (y : Int64BW.t) : ()
  
  axiom antisym1'0_spec : forall x : Int64BW.t, y : Int64BW.t . ([%#sord13] cmp_log'0 x y = C_Less'0)
   -> ([%#sord14] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : Int64BW.t) (y : Int64BW.t) (z : Int64BW.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : Int64BW.t, y : Int64BW.t, z : Int64BW.t, o : t_Ordering'0 . ([%#sord10] cmp_log'0 x y
  = o)  -> ([%#sord11] cmp_log'0 y z = o)  -> ([%#sord12] cmp_log'0 x z = o)
  
  function refl'0 (x : Int64BW.t) : ()
  
  axiom refl'0_spec : forall x : Int64BW.t . [%#sord9] cmp_log'0 x x = C_Equal'0
  
  use creusot.int.Int64BW
  
  function cmp_gt_log'0 (x : Int64BW.t) (y : Int64BW.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : Int64BW.t, y : Int64BW.t . [%#sord8] Int64BW.sgt x y
  = (cmp_log'0 x y = C_Greater'0)
  
  use creusot.int.Int64BW
  
  function cmp_ge_log'0 (x : Int64BW.t) (y : Int64BW.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : Int64BW.t, y : Int64BW.t . [%#sord7] Int64BW.sge x y
  = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : Int64BW.t) (y : Int64BW.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : Int64BW.t, y : Int64BW.t . [%#sord6] Int64BW.slt x y = (cmp_log'0 x y = C_Less'0)
  
  use creusot.int.Int64BW
  
  function cmp_le_log'0 (x : Int64BW.t) (y : Int64BW.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : Int64BW.t, y : Int64BW.t . [%#sord5] Int64BW.sle x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  constant v_MIN'0 : Int64BW.t = (9223372036854775808 : Int64BW.t)
  
  use creusot.int.Int64BW
  
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  let rec rightmost_bit_64'0[#"rightmostbit.rs" 37 0 37 38] (x:Int64BW.t) (return'  (ret:Int64BW.t))= (! bb0
    [ bb0 = s0 [ s0 = wrapping_neg'0 {x} (fun (_ret':Int64BW.t) ->  [ &_7 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = Int64BW.bw_and {x} {_7} (fun (_ret':Int64BW.t) ->  [ &_0 <- _ret' ] s1) | s1 = return' {_0} ]  ]
    ) [ & _0 : Int64BW.t = Intrinsic.any_l () | & x : Int64BW.t = x | & _7 : Int64BW.t = Intrinsic.any_l () ] 
    [ return' (result:Int64BW.t)-> {[@expl:rightmost_bit_64 ensures #0] [%#srightmostbit0] Int64BW.sge x (0 : Int64BW.t)
       -> Int64BW.sle (0 : Int64BW.t) result /\ Int64BW.sle result x}
      {[@expl:rightmost_bit_64 ensures #1] [%#srightmostbit1] Int64BW.sle x (0 : Int64BW.t)
      /\ Int64BW.sgt x (v_MIN'0 : Int64BW.t)
       -> Int64BW.sle (0 : Int64BW.t) result /\ Int64BW.to_int result <= - Int64BW.to_int x}
      {[@expl:rightmost_bit_64 ensures #2] [%#srightmostbit2] (x = (v_MIN'0 : Int64BW.t))
      = (result = (v_MIN'0 : Int64BW.t))}
      {[@expl:rightmost_bit_64 ensures #3] [%#srightmostbit3] forall i : Int64BW.t . Int64BW.sle (0 : Int64BW.t) i
      /\ Int64BW.slt i result  -> Int64BW.bw_and i x = (0 : Int64BW.t)}
      (! return' {result}) ]

end
