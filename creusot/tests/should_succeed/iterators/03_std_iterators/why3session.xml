<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="1" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="Z3" version="4.12.4" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="03_std_iterators.coma"/>
<theory name="M_03_std_iterators__slice_iter" proved="true">
 <goal name="vc_slice_iter" proved="true">
 <proof prover="2"><result status="valid" time="0.110609" steps="2153"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__vec_iter" proved="true">
 <goal name="vc_vec_iter" proved="true">
 <proof prover="2"><result status="valid" time="0.109873" steps="2116"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__all_zero" proved="true">
 <goal name="vc_all_zero" proved="true">
 <proof prover="2"><result status="valid" time="0.113376" steps="1919"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__skip_take" proved="true">
 <goal name="vc_skip_take" proved="true">
 <proof prover="2"><result status="valid" time="0.040673" steps="277"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__counter" proved="true">
 <goal name="vc_counter" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_counter.0" expl="deref &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.071451" steps="84439"/></proof>
  </goal>
  <goal name="vc_counter.1" expl="iter &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.058705" steps="8337"/></proof>
  </goal>
  <goal name="vc_counter.2" expl="map_inv &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.027072" steps="92661"/></proof>
  </goal>
  <goal name="vc_counter.3" expl="map_inv &#39;func&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.015260" steps="14"/></proof>
  </goal>
  <goal name="vc_counter.4" expl="map_inv requires #0" proved="true">
  <proof prover="2"><result status="valid" time="0.017393" steps="77"/></proof>
  </goal>
  <goal name="vc_counter.5" expl="map_inv requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.013632" steps="454"/></proof>
  </goal>
  <goal name="vc_counter.6" expl="map_inv requires #2" proved="true">
  <proof prover="2"><result status="valid" time="0.013694" steps="211"/></proof>
  </goal>
  <goal name="vc_counter.7" expl="collect &#39;self&#39; type invariant" proved="true">
  <proof prover="5"><result status="valid" time="0.088457" steps="8332"/></proof>
  </goal>
  <goal name="vc_counter.8" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.028716" steps="430"/></proof>
  </goal>
  <goal name="vc_counter.9" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.110145" steps="265238"/></proof>
  </goal>
  <goal name="vc_counter.10" expl="assertion" proved="true">
  <proof prover="5" timelimit="5"><result status="valid" time="0.120575" steps="391783"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__counter__qyClosure0" proved="true">
 <goal name="vc_m_03_std_iterators__counter__qyClosure0" proved="true">
 <proof prover="4"><result status="valid" time="0.084475" steps="10123"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__sum_range" proved="true">
 <goal name="vc_sum_range" proved="true">
 <proof prover="2"><result status="valid" time="0.358931" steps="2753"/></proof>
 </goal>
</theory>
<theory name="M_03_std_iterators__enumerate_range" proved="true">
 <goal name="vc_enumerate_range" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_enumerate_range.0" expl="enumerate &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.039798" steps="7841"/></proof>
  </goal>
  <goal name="vc_enumerate_range.1" expl="enumerate requires #0" proved="true">
  <proof prover="4"><result status="valid" time="0.018426" steps="10555"/></proof>
  </goal>
  <goal name="vc_enumerate_range.2" expl="enumerate requires #1" proved="true">
  <proof prover="4"><result status="valid" time="0.036495" steps="12382"/></proof>
  </goal>
  <goal name="vc_enumerate_range.3" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.014045" steps="7164"/></proof>
  </goal>
  <goal name="vc_enumerate_range.4" expl="into_iter requires" proved="true">
  <proof prover="4"><result status="valid" time="0.014189" steps="7163"/></proof>
  </goal>
  <goal name="vc_enumerate_range.5" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.022592" steps="8012"/></proof>
  </goal>
  <goal name="vc_enumerate_range.6" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.033681" steps="7256"/></proof>
  </goal>
  <goal name="vc_enumerate_range.7" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.032130" steps="8362"/></proof>
  </goal>
  <goal name="vc_enumerate_range.8" expl="loop invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.010382" steps="34"/></proof>
  </goal>
  <goal name="vc_enumerate_range.9" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.057671" steps="10401"/></proof>
  </goal>
  <goal name="vc_enumerate_range.10" proved="true">
  <proof prover="1"><result status="valid" time="0.051974" steps="16867"/></proof>
  </goal>
  <goal name="vc_enumerate_range.11" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.034465" steps="13346"/></proof>
  </goal>
  <goal name="vc_enumerate_range.12" expl="type invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.044430" steps="15135"/></proof>
  </goal>
  <goal name="vc_enumerate_range.13" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.021874" steps="13168"/></proof>
  </goal>
  <goal name="vc_enumerate_range.14" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.030398" steps="10701"/></proof>
  </goal>
  <goal name="vc_enumerate_range.15" expl="for invariant" proved="true">
  <proof prover="4"><result status="valid" time="0.030215" steps="13789"/></proof>
  </goal>
  <goal name="vc_enumerate_range.16" expl="loop invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.031808" steps="639"/></proof>
  </goal>
  <goal name="vc_enumerate_range.17" proved="true">
  <proof prover="4"><result status="valid" time="0.027799" steps="11229"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_03_std_iterators__my_reverse" proved="true">
 <goal name="vc_my_reverse" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_my_reverse.0" expl="len &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.026958" steps="9"/></proof>
  </goal>
  <goal name="vc_my_reverse.1" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.020352" steps="10"/></proof>
  </goal>
  <goal name="vc_my_reverse.2" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.012192" steps="10054"/></proof>
  </goal>
  <goal name="vc_my_reverse.3" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.021821" steps="33"/></proof>
  </goal>
  <goal name="vc_my_reverse.4" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.022519" steps="17"/></proof>
  </goal>
  <goal name="vc_my_reverse.5" expl="division by zero" proved="true">
  <proof prover="5"><result status="valid" time="0.012041" steps="10717"/></proof>
  </goal>
  <goal name="vc_my_reverse.6" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.022492" steps="31"/></proof>
  </goal>
  <goal name="vc_my_reverse.7" expl="zip &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022901" steps="37"/></proof>
  </goal>
  <goal name="vc_my_reverse.8" expl="zip &#39;other&#39; type invariant" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.011733" steps="41"/></proof>
  </goal>
  <goal name="vc_my_reverse.9" expl="zip requires" proved="true">
  <proof prover="2"><result status="valid" time="0.021634" steps="23"/></proof>
  </goal>
  <goal name="vc_my_reverse.10" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="1"><result status="valid" time="0.060152" steps="28336"/></proof>
  </goal>
  <goal name="vc_my_reverse.11" expl="into_iter requires" proved="true">
  <proof prover="2"><result status="valid" time="0.020027" steps="25"/></proof>
  </goal>
  <goal name="vc_my_reverse.12" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.025686" steps="45"/></proof>
  </goal>
  <goal name="vc_my_reverse.13" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.029814" steps="50"/></proof>
  </goal>
  <goal name="vc_my_reverse.14" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.037229" steps="33"/></proof>
  </goal>
  <goal name="vc_my_reverse.15" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.027823" steps="54"/></proof>
  </goal>
  <goal name="vc_my_reverse.16" expl="loop invariant #0" proved="true">
  <proof prover="1"><result status="valid" time="0.070140" steps="29482"/></proof>
  </goal>
  <goal name="vc_my_reverse.17" expl="loop invariant #1" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.089475" steps="25748"/></proof>
  </goal>
  <goal name="vc_my_reverse.18" expl="loop invariant #2" proved="true">
  <proof prover="1"><result status="valid" time="0.086940" steps="39262"/></proof>
  </goal>
  <goal name="vc_my_reverse.19" expl="loop invariant #3" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.016614" steps="126"/></proof>
  </goal>
  <goal name="vc_my_reverse.20" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.014470" steps="65"/></proof>
  </goal>
  <goal name="vc_my_reverse.21" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.210119" steps="2647"/></proof>
  </goal>
  <goal name="vc_my_reverse.22" expl="my_reverse ensures" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.154974" steps="3171"/></proof>
  </goal>
  <goal name="vc_my_reverse.23" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.212915" steps="3423"/></proof>
  </goal>
  <goal name="vc_my_reverse.24" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.175129" steps="260214"/></proof>
  </goal>
  <goal name="vc_my_reverse.25" expl="integer overflow" proved="true">
  <proof prover="5"><result status="valid" time="0.055993" steps="260541"/></proof>
  </goal>
  <goal name="vc_my_reverse.26" expl="swap &#39;self&#39; type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.022920" steps="103"/></proof>
  </goal>
  <goal name="vc_my_reverse.27" expl="swap requires #0" proved="true">
  <proof prover="5"><result status="valid" time="0.029755" steps="266211"/></proof>
  </goal>
  <goal name="vc_my_reverse.28" expl="swap requires #1" proved="true">
  <proof prover="2"><result status="valid" time="0.020454" steps="137"/></proof>
  </goal>
  <goal name="vc_my_reverse.29" expl="assertion" proved="true">
  <proof prover="1"><result status="valid" time="0.207597" steps="81613"/></proof>
  </goal>
  <goal name="vc_my_reverse.30" expl="mut invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.087417" steps="66"/></proof>
  </goal>
  <goal name="vc_my_reverse.31" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.032337" steps="117"/></proof>
  </goal>
  <goal name="vc_my_reverse.32" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.024318" steps="119"/></proof>
  </goal>
  <goal name="vc_my_reverse.33" expl="for invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.145202" steps="363"/></proof>
  </goal>
  <goal name="vc_my_reverse.34" expl="loop invariant #0" proved="true">
  <proof prover="2"><result status="valid" time="0.023344" steps="133"/></proof>
  </goal>
  <goal name="vc_my_reverse.35" expl="loop invariant #1" proved="true">
  <proof prover="1"><result status="valid" time="0.425939" steps="166013"/></proof>
  </goal>
  <goal name="vc_my_reverse.36" expl="loop invariant #2" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.561306" steps="119480"/></proof>
  </goal>
  <goal name="vc_my_reverse.37" expl="loop invariant #3" proved="true">
  <proof prover="1"><result status="valid" time="2.196289" steps="1129550"/></proof>
  </goal>
  <goal name="vc_my_reverse.38" proved="true">
  <proof prover="2" timelimit="5"><result status="valid" time="0.028494" steps="72"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
