
module T_02_iter_mut__IterMut [#"02_iter_mut.rs" 13 0 13 21]
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  type t_IterMut 't_T'0 =
    | C_IterMut (borrowed (slice 't_T'0))
  
  let rec t_IterMut < 't_T'0 > (input:t_IterMut 't_T'0) (ret  (inner:borrowed (slice 't_T'0)))= any
    [ good (inner:borrowed (slice 't_T'0))-> {C_IterMut inner = input} (! ret {inner}) ]
    
  
  function t_IterMut__inner (self : t_IterMut 't_T'0) : borrowed (slice 't_T'0) =
    match self with
      | C_IterMut a -> a
      end
end
module M_02_iter_mut__qyi4305820612590367313__produces_refl [#"02_iter_mut.rs" 51 4 51 26] (* <IterMut<'a, T> as common::Iterator> *)
  let%span s02_iter_mut0 = "02_iter_mut.rs" 49 15 49 24
  let%span s02_iter_mut1 = "02_iter_mut.rs" 50 14 50 45
  let%span s02_iter_mut2 = "02_iter_mut.rs" 39 12 43 13
  let%span smodel3 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 90 14 90 41
  let%span sslice5 = "../../../../creusot-contracts/src/std/slice.rs" 91 4 91 86
  let%span s02_iter_mut6 = "02_iter_mut.rs" 22 20 22 64
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sops9 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sinvariant10 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice11 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq12 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed13 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed13] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq12] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : slice t_T'0 . ([%#sslice8] view'1 self = Slice.id self)
  && ([%#sslice7] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sslice11] inv'3 (view'1 self)
  
  predicate inv'2 (_1 : slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (slice t_T'0)) =
    [%#sinvariant10] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'1 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'0 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut6] Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'0 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'1 inner
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops9] Seq.get (view'1 self) ix
  
  function view'0 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel3] view'1 self.current
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t_T'0)) : Seq.seq (borrowed t_T'0)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t_T'0) . ([%#sslice5] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)
   -> Seq.get (to_mut_seq'0 self) i
  = Borrow.borrow_logic (index_logic'0 self.current i) (index_logic'0 self.final i) (Borrow.inherit_id (Borrow.get_id self) i))
  && ([%#sslice4] Seq.length (to_mut_seq'0 self) = Seq.length (view'0 self))
  
  predicate produces'0 [#"02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_IterMut t_T'0) (visited : Seq.seq (borrowed t_T'0)) (tl : IterMut'0.t_IterMut t_T'0)
    
   =
    [%#s02_iter_mut2] Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
    = Seq.length visited + Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
     -> (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).current
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).current
    /\ (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).final
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).final)
  
  use seq.Seq
  
  constant self  : IterMut'0.t_IterMut t_T'0
  
  function produces_refl [#"02_iter_mut.rs" 51 4 51 26] (self : IterMut'0.t_IterMut t_T'0) : ()
  
  goal vc_produces_refl : ([%#s02_iter_mut0] inv'0 self)
   -> ([%#s02_iter_mut1] produces'0 self (Seq.empty  : Seq.seq (borrowed t_T'0)) self)
end
module M_02_iter_mut__qyi4305820612590367313__produces_trans [#"02_iter_mut.rs" 61 4 61 90] (* <IterMut<'a, T> as common::Iterator> *)
  let%span s02_iter_mut0 = "02_iter_mut.rs" 55 15 55 21
  let%span s02_iter_mut1 = "02_iter_mut.rs" 56 15 56 21
  let%span s02_iter_mut2 = "02_iter_mut.rs" 57 15 57 21
  let%span s02_iter_mut3 = "02_iter_mut.rs" 58 15 58 32
  let%span s02_iter_mut4 = "02_iter_mut.rs" 59 15 59 32
  let%span s02_iter_mut5 = "02_iter_mut.rs" 60 14 60 42
  let%span s02_iter_mut6 = "02_iter_mut.rs" 39 12 43 13
  let%span smodel7 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 90 14 90 41
  let%span sslice9 = "../../../../creusot-contracts/src/std/slice.rs" 91 4 91 86
  let%span s02_iter_mut10 = "02_iter_mut.rs" 22 20 22 64
  let%span sslice11 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sops13 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sinvariant14 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq16 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed17 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed17] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq16] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : slice t_T'0 . ([%#sslice12] view'1 self = Slice.id self)
  && ([%#sslice11] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sslice15] inv'3 (view'1 self)
  
  predicate inv'2 (_1 : slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (slice t_T'0)) =
    [%#sinvariant14] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'1 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'0 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut10] Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'0 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'1 inner
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops13] Seq.get (view'1 self) ix
  
  function view'0 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel7] view'1 self.current
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t_T'0)) : Seq.seq (borrowed t_T'0)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t_T'0) . ([%#sslice9] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)
   -> Seq.get (to_mut_seq'0 self) i
  = Borrow.borrow_logic (index_logic'0 self.current i) (index_logic'0 self.final i) (Borrow.inherit_id (Borrow.get_id self) i))
  && ([%#sslice8] Seq.length (to_mut_seq'0 self) = Seq.length (view'0 self))
  
  predicate produces'0 [#"02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_IterMut t_T'0) (visited : Seq.seq (borrowed t_T'0)) (tl : IterMut'0.t_IterMut t_T'0)
    
   =
    [%#s02_iter_mut6] Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
    = Seq.length visited + Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
     -> (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).current
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).current
    /\ (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).final
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).final)
  
  constant a  : IterMut'0.t_IterMut t_T'0
  
  constant ab  : Seq.seq (borrowed t_T'0)
  
  constant b  : IterMut'0.t_IterMut t_T'0
  
  constant bc  : Seq.seq (borrowed t_T'0)
  
  constant c  : IterMut'0.t_IterMut t_T'0
  
  function produces_trans [#"02_iter_mut.rs" 61 4 61 90] (a : IterMut'0.t_IterMut t_T'0) (ab : Seq.seq (borrowed t_T'0)) (b : IterMut'0.t_IterMut t_T'0) (bc : Seq.seq (borrowed t_T'0)) (c : IterMut'0.t_IterMut t_T'0) : ()
    
  
  goal vc_produces_trans : ([%#s02_iter_mut4] produces'0 b bc c)
   -> ([%#s02_iter_mut3] produces'0 a ab b)
   -> ([%#s02_iter_mut2] inv'0 c)
   -> ([%#s02_iter_mut1] inv'0 b)
   -> ([%#s02_iter_mut0] inv'0 a)  -> ([%#s02_iter_mut5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_T'0
  
  type t_Option 't_T'0 =
    | C_None
    | C_Some 't_T'0
  
  let rec v_None < 't_T'0 > (input:t_Option 't_T'0) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't_T'0 > (input:t_Option 't_T'0) (ret  (field_0:'t_T'0))= any
    [ good (field_0:'t_T'0)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't_T'0 [C_Some field_0 : t_Option 't_T'0] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_02_iter_mut__qyi4305820612590367313__next [#"02_iter_mut.rs" 67 4 67 44] (* <IterMut<'a, T> as common::Iterator> *)
  let%span s02_iter_mut0 = "02_iter_mut.rs" 67 17 67 21
  let%span s02_iter_mut1 = "02_iter_mut.rs" 63 14 66 5
  let%span s02_iter_mut2 = "02_iter_mut.rs" 67 26 67 44
  let%span sslice3 = "../../../../creusot-contracts/src/std/slice.rs" 295 18 302 9
  let%span s02_iter_mut4 = "02_iter_mut.rs" 32 8 32 76
  let%span s02_iter_mut5 = "02_iter_mut.rs" 39 12 43 13
  let%span sops6 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sseq9 = "../../../../creusot-contracts/src/logic/seq.rs" 65 8 65 39
  let%span sresolve10 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel11 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 90 14 90 41
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 91 4 91 86
  let%span sinvariant14 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span s02_iter_mut16 = "02_iter_mut.rs" 22 20 22 64
  let%span sseq17 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed18 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'7 (_1 : t_T'0)
  
  predicate invariant'7 (self : t_T'0) =
    [%#sboxed18] inv'7 self
  
  predicate inv'9 (_1 : t_T'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_T'0 [inv'9 x] . inv'9 x = invariant'7 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'6 (self : Seq.seq t_T'0) =
    [%#sseq17] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'9 (Seq.get self i)
  
  predicate inv'8 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : Seq.seq t_T'0 [inv'8 x] . inv'8 x = invariant'6 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  predicate inv'0 (_1 : borrowed (slice t_T'0))
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'0_spec : forall self : slice t_T'0 . ([%#sslice8] view'0 self = Slice.id self)
  && ([%#sslice7] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'5 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut16] Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'6 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'6 x] . inv'6 x
  = (invariant'5 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'0 inner
    end)
  
  predicate invariant'4 (self : slice t_T'0) =
    [%#sslice15] inv'8 (view'0 self)
  
  predicate inv'5 (_1 : slice t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : slice t_T'0 [inv'5 x] . inv'5 x = invariant'4 x
  
  predicate invariant'3 (self : borrowed t_T'0) =
    [%#sinvariant14] inv'7 self.current /\ inv'7 self.final
  
  predicate inv'4 (_1 : borrowed t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed t_T'0 [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate invariant'2 (self : borrowed (borrowed (slice t_T'0))) =
    [%#sinvariant14] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (borrowed (slice t_T'0)))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (borrowed (slice t_T'0)) [inv'3 x] . inv'3 x = invariant'2 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'2 (_1 : Option'0.t_Option (borrowed t_T'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : Option'0.t_Option (borrowed t_T'0) [inv'2 x] . inv'2 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'4 a_0
    end
  
  predicate invariant'1 (self : borrowed (IterMut'0.t_IterMut t_T'0)) =
    [%#sinvariant14] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'1 (_1 : borrowed (IterMut'0.t_IterMut t_T'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (IterMut'0.t_IterMut t_T'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate invariant'0 (self : borrowed (slice t_T'0)) =
    [%#sinvariant14] inv'5 self.current /\ inv'5 self.final
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops6] Seq.get (view'0 self) ix
  
  function view'1 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel11] view'0 self.current
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t_T'0)) : Seq.seq (borrowed t_T'0)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t_T'0) . ([%#sslice13] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)
   -> Seq.get (to_mut_seq'0 self) i
  = Borrow.borrow_logic (index_logic'0 self.current i) (index_logic'0 self.final i) (Borrow.inherit_id (Borrow.get_id self) i))
  && ([%#sslice12] Seq.length (to_mut_seq'0 self) = Seq.length (view'1 self))
  
  predicate produces'0 [#"02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_IterMut t_T'0) (visited : Seq.seq (borrowed t_T'0)) (tl : IterMut'0.t_IterMut t_T'0)
    
   =
    [%#s02_iter_mut5] Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self))
    = Seq.length visited + Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self))
     -> (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).current
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).current
    /\ (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).final
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).final)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve'2 (self : borrowed (slice t_T'0)) =
    [%#sresolve10] self.final = self.current
  
  predicate completed'0 [#"02_iter_mut.rs" 31 4 31 35] (self : borrowed (IterMut'0.t_IterMut t_T'0)) =
    [%#s02_iter_mut4] resolve'2 (T_02_iter_mut__IterMut.t_IterMut__inner self.current)
    /\ Seq.(==) (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self.current)) (Seq.empty  : Seq.seq t_T'0)
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (IterMut'0.t_IterMut t_T'0)) =
    [%#sresolve10] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (IterMut'0.t_IterMut t_T'0)) =
    resolve'1 _1
  
  use seq.Seq
  
  function tail'0 (self : Seq.seq t_T'0) : Seq.seq t_T'0 =
    [%#sseq9] Seq.([..]) self 1 (Seq.length self)
  
  let rec take_first_mut'0 (self:borrowed (borrowed (slice t_T'0))) (return'  (ret:Option'0.t_Option (borrowed t_T'0)))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:Option'0.t_Option (borrowed t_T'0))-> {inv'2 result}
      {[%#sslice3] match result with
        | Option'0.C_Some r -> r.current = index_logic'0 (self.current).current 0
        /\ r.final = index_logic'0 (self.current).final 0
        /\ Seq.length (view'0 (self.current).current) > 0
        /\ Seq.length (view'0 (self.current).final) > 0
        /\ view'0 (self.final).current = tail'0 (view'0 (self.current).current)
        /\ view'0 (self.final).final = tail'0 (view'0 (self.current).final)
        | Option'0.C_None -> view'0 (self.final).current = (Seq.empty  : Seq.seq t_T'0)
        /\ view'0 (self.current).final = (Seq.empty  : Seq.seq t_T'0)
        /\ view'0 (self.current).current = (Seq.empty  : Seq.seq t_T'0)
        /\ view'0 (self.final).final = (Seq.empty  : Seq.seq t_T'0)
        end}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (IterMut'0.t_IterMut t_T'0)) (return'  (ret:Option'0.t_Option (borrowed t_T'0)))= {[%#s02_iter_mut0] inv'1 self}
    (! bb0
    [ bb0 = s0
      [ s0 = IterMut'0.t_IterMut <t_T'0> {self.current}
          (fun (rinner'0:borrowed (slice t_T'0)) ->
            {inv'0 rinner'0}
            Borrow.borrow_final <borrowed (slice t_T'0)> {rinner'0} {Borrow.inherit_id (Borrow.get_id self) 1}
              (fun (_ret':borrowed (borrowed (slice t_T'0))) ->
                 [ &_3 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &self <- { self with current = IterMut'0.C_IterMut _ret'.final ; } ] 
                s1))
      | s1 = take_first_mut'0 {_3} (fun (_ret':Option'0.t_Option (borrowed t_T'0)) ->  [ &_0 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = {[@expl:type invariant] inv'1 self} s1 | s1 = -{resolve'0 self}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : Option'0.t_Option (borrowed t_T'0) = any_l ()
    | & self : borrowed (IterMut'0.t_IterMut t_T'0) = self
    | & _3 : borrowed (borrowed (slice t_T'0)) = any_l () ]
    
    [ return' (result:Option'0.t_Option (borrowed t_T'0))-> {[@expl:postcondition] [%#s02_iter_mut2] inv'2 result}
      {[@expl:postcondition] [%#s02_iter_mut1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_02_iter_mut__qyi7060081090368749043__into_iter [#"02_iter_mut.rs" 74 4 74 30] (* IterMut<'a, T> *)
  let%span s02_iter_mut0 = "02_iter_mut.rs" 74 17 74 21
  let%span s02_iter_mut1 = "02_iter_mut.rs" 73 14 73 28
  let%span s02_iter_mut2 = "02_iter_mut.rs" 74 26 74 30
  let%span s02_iter_mut3 = "02_iter_mut.rs" 22 20 22 64
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice5 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sinvariant6 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq8 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed9 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed9] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq8] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'0 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'0_spec : forall self : slice t_T'0 . ([%#sslice5] view'0 self = Slice.id self)
  && ([%#sslice4] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sslice7] inv'3 (view'0 self)
  
  predicate inv'2 (_1 : slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (slice t_T'0)) =
    [%#sinvariant6] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'1 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'0 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut3] Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'0 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'1 inner
    end)
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec into_iter (self:IterMut'0.t_IterMut t_T'0) (return'  (ret:IterMut'0.t_IterMut t_T'0))= {[%#s02_iter_mut0] inv'0 self}
    (! bb0 [ bb0 = s0 [ s0 =  [ &_0 <- self ] s1 | s1 = return' {_0} ]  ] )
    [ & _0 : IterMut'0.t_IterMut t_T'0 = any_l () | & self : IterMut'0.t_IterMut t_T'0 = self ]
    
    [ return' (result:IterMut'0.t_IterMut t_T'0)-> {[@expl:postcondition] [%#s02_iter_mut2] inv'0 result}
      {[@expl:postcondition] [%#s02_iter_mut1] result = self}
      (! return' {result}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_T'0
  
  type t_NonNull 't_T'0 =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't_T'0 > (input:t_NonNull 't_T'0) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__marker__PhantomData
  type t_T'0
  
  type t_PhantomData 't_T'0 =
    | C_PhantomData
  
  let rec t_PhantomData < 't_T'0 > (input:t_PhantomData 't_T'0) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) ]
    
end
module T_core__ptr__unique__Unique
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_T'0
  
  type t_Unique 't_T'0 =
    | C_Unique (NonNull'0.t_NonNull 't_T'0) (PhantomData'0.t_PhantomData 't_T'0)
  
  let rec t_Unique < 't_T'0 > (input:t_Unique 't_T'0) (ret  (pointer:NonNull'0.t_NonNull 't_T'0) (_marker:PhantomData'0.t_PhantomData 't_T'0))= any
    [ good (pointer:NonNull'0.t_NonNull 't_T'0) (_marker:PhantomData'0.t_PhantomData 't_T'0)-> {C_Unique pointer _marker
      = input}
      (! ret {pointer} {_marker}) ]
    
end
module T_alloc__raw_vec__Cap
  use prelude.prelude.UIntSize
  
  type t_Cap  =
    | C_Cap usize
  
  let rec t_Cap (input:t_Cap) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Cap field_0 = input} (! ret {field_0}) ]
    
end
module T_alloc__raw_vec__RawVec
  use T_alloc__raw_vec__Cap as Cap'0
  
  use T_core__ptr__unique__Unique as Unique'0
  
  type t_A'0
  
  type t_T'0
  
  type t_RawVec 't_T'0 't_A'0 =
    | C_RawVec (Unique'0.t_Unique 't_T'0) (Cap'0.t_Cap) 't_A'0
  
  let rec t_RawVec < 't_T'0 > < 't_A'0 > (input:t_RawVec 't_T'0 't_A'0) (ret  (ptr:Unique'0.t_Unique 't_T'0) (cap:Cap'0.t_Cap) (alloc:'t_A'0))= any
    [ good (ptr:Unique'0.t_Unique 't_T'0) (cap:Cap'0.t_Cap) (alloc:'t_A'0)-> {C_RawVec ptr cap alloc = input}
      (! ret {ptr} {cap} {alloc}) ]
    
end
module T_alloc__vec__Vec
  use prelude.prelude.UIntSize
  
  use T_alloc__raw_vec__RawVec as RawVec'0
  
  type t_A'0
  
  type t_T'0
  
  type t_Vec 't_T'0 't_A'0 =
    | C_Vec (RawVec'0.t_RawVec 't_T'0 't_A'0) usize
  
  let rec t_Vec < 't_T'0 > < 't_A'0 > (input:t_Vec 't_T'0 't_A'0) (ret  (buf:RawVec'0.t_RawVec 't_T'0 't_A'0) (len:usize))= any
    [ good (buf:RawVec'0.t_RawVec 't_T'0 't_A'0) (len:usize)-> {C_Vec buf len = input} (! ret {buf} {len}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module T_core__ops__range__RangeFull
  type t_RangeFull  =
    | C_RangeFull
  
  let rec t_RangeFull (input:t_RangeFull) (ret  )= any [ good -> {C_RangeFull  = input} (! ret) ] 
end
module M_02_iter_mut__iter_mut [#"02_iter_mut.rs" 82 0 82 55]
  let%span s02_iter_mut0 = "02_iter_mut.rs" 82 19 82 20
  let%span s02_iter_mut1 = "02_iter_mut.rs" 79 10 79 29
  let%span s02_iter_mut2 = "02_iter_mut.rs" 80 10 80 35
  let%span s02_iter_mut3 = "02_iter_mut.rs" 81 10 81 33
  let%span s02_iter_mut4 = "02_iter_mut.rs" 82 41 82 55
  let%span svec5 = "../../../../creusot-contracts/src/std/vec.rs" 155 27 155 46
  let%span svec6 = "../../../../creusot-contracts/src/std/vec.rs" 156 26 156 54
  let%span svec7 = "../../../../creusot-contracts/src/std/vec.rs" 157 26 157 57
  let%span svec8 = "../../../../creusot-contracts/src/std/vec.rs" 158 26 158 62
  let%span svec9 = "../../../../creusot-contracts/src/std/vec.rs" 159 26 159 55
  let%span smodel10 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice11 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span svec13 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span sslice14 = "../../../../creusot-contracts/src/std/slice.rs" 213 20 213 24
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 219 20 219 31
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 225 20 225 24
  let%span sresolve17 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 68 20 68 41
  let%span sslice19 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sinvariant20 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span s02_iter_mut21 = "02_iter_mut.rs" 22 20 22 64
  let%span sseq22 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed23 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'8 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed23] inv'8 self
  
  predicate inv'7 (_1 : t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_T'0 [inv'7 x] . inv'7 x = invariant'6 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'7 (Seq.get self i)
  
  predicate inv'6 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq t_T'0 [inv'6 x] . inv'6 x = invariant'5 x
  
  use T_core__ops__range__RangeFull as RangeFull'0
  
  predicate inv'5 (_1 : RangeFull'0.t_RangeFull)
  
  axiom inv_axiom'5 [@rewrite] : forall x : RangeFull'0.t_RangeFull [inv'5 x] . inv'5 x = true
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Borrow
  
  predicate inv'2 (_1 : borrowed (slice t_T'0))
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'2 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : slice t_T'0 . ([%#sslice12] view'2 self = Slice.id self)
  && ([%#sslice11] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'4 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut21] Seq.length (view'2 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'2 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'4 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'4 x] . inv'4 x
  = (invariant'4 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'2 inner
    end)
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'0 (_1 : Vec'0.t_Vec t_T'0 (Global'0.t_Global))
  
  predicate invariant'3 (self : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global))) =
    [%#sinvariant20] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'3 (_1 : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global)))
  
  axiom inv_axiom'3 [@rewrite] : forall x : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global)) [inv'3 x] . inv'3 x
  = invariant'3 x
  
  predicate inv'1 (_1 : slice t_T'0)
  
  predicate invariant'2 (self : borrowed (slice t_T'0)) =
    [%#sinvariant20] inv'1 self.current /\ inv'1 self.final
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : slice t_T'0) =
    [%#sslice19] inv'6 (view'2 self)
  
  axiom inv_axiom'1 [@rewrite] : forall x : slice t_T'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  function view'3 (self : Vec'0.t_Vec t_T'0 (Global'0.t_Global)) : Seq.seq t_T'0
  
  axiom view'3_spec : forall self : Vec'0.t_Vec t_T'0 (Global'0.t_Global) . [%#svec13] Seq.length (view'3 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate invariant'0 (self : Vec'0.t_Vec t_T'0 (Global'0.t_Global)) =
    [%#svec18] inv'6 (view'3 self)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Vec'0.t_Vec t_T'0 (Global'0.t_Global) [inv'0 x] . inv'0 x = invariant'0 x
  
  function view'1 (self : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global))) : Seq.seq t_T'0 =
    [%#smodel10] view'3 self.current
  
  function view'0 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel10] view'2 self.current
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global))) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global))) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed (slice t_T'0)) =
    [%#sresolve17] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (slice t_T'0)) =
    resolve'2 _1
  
  predicate resolve_elswhere'0 (self : RangeFull'0.t_RangeFull) (_old : Seq.seq t_T'0) (_fin : Seq.seq t_T'0) =
    [%#sslice16] true
  
  predicate has_value'0 (self : RangeFull'0.t_RangeFull) (seq : Seq.seq t_T'0) (out : slice t_T'0) =
    [%#sslice15] seq = view'2 out
  
  predicate in_bounds'0 (self : RangeFull'0.t_RangeFull) (_seq : Seq.seq t_T'0) =
    [%#sslice14] true
  
  let rec index_mut'0 (self:borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global))) (index:RangeFull'0.t_RangeFull) (return'  (ret:borrowed (slice t_T'0)))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [%#svec5] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:borrowed (slice t_T'0))-> {inv'2 result}
      {[%#svec9] Seq.length (view'3 self.final) = Seq.length (view'1 self)}
      {[%#svec8] resolve_elswhere'0 index (view'1 self) (view'3 self.final)}
      {[%#svec7] has_value'0 index (view'3 self.final) result.final}
      {[%#svec6] has_value'0 index (view'1 self) result.current}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec iter_mut (v:borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global))) (return'  (ret:IterMut'0.t_IterMut t_T'0))= {[%#s02_iter_mut0] inv'3 v}
    (! bb0
    [ bb0 = s0
      [ s0 = {inv'0 v.current}
        Borrow.borrow_final <Vec'0.t_Vec t_T'0 (Global'0.t_Global)> {v.current} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global))) ->
             [ &_8 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 =  [ &_9 <- RangeFull'0.C_RangeFull ] s2
      | s2 = index_mut'0 {_8} {_9} (fun (_ret':borrowed (slice t_T'0)) ->  [ &_7 <- _ret' ] s3)
      | s3 = bb1 ]
      
    | bb1 = s0
      [ s0 = {inv'1 _7.current}
        Borrow.borrow_final <slice t_T'0> {_7.current} {Borrow.get_id _7}
          (fun (_ret':borrowed (slice t_T'0)) ->
             [ &_6 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_7 <- { _7 with current = _ret'.final ; } ] 
            s1)
      | s1 = {inv'1 _6.current}
        Borrow.borrow_final <slice t_T'0> {_6.current} {Borrow.get_id _6}
          (fun (_ret':borrowed (slice t_T'0)) ->
             [ &_5 <- _ret' ] 
            -{inv'1 _ret'.final}-
             [ &_6 <- { _6 with current = _ret'.final ; } ] 
            s2)
      | s2 =  [ &_0 <- IterMut'0.C_IterMut _5 ] s3
      | s3 = {[@expl:type invariant] inv'2 _7} s4
      | s4 = -{resolve'0 _7}- s5
      | s5 = {[@expl:type invariant] inv'2 _6} s6
      | s6 = -{resolve'0 _6}- s7
      | s7 = {[@expl:type invariant] inv'3 v} s8
      | s8 = -{resolve'1 v}- s9
      | s9 = return' {_0} ]
       ]
    )
    [ & _0 : IterMut'0.t_IterMut t_T'0 = any_l ()
    | & v : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global)) = v
    | & _5 : borrowed (slice t_T'0) = any_l ()
    | & _6 : borrowed (slice t_T'0) = any_l ()
    | & _7 : borrowed (slice t_T'0) = any_l ()
    | & _8 : borrowed (Vec'0.t_Vec t_T'0 (Global'0.t_Global)) = any_l ()
    | & _9 : RangeFull'0.t_RangeFull = any_l () ]
    
    [ return' (result:IterMut'0.t_IterMut t_T'0)-> {[@expl:postcondition] [%#s02_iter_mut4] inv'4 result}
      {[@expl:postcondition] [%#s02_iter_mut3] Seq.length (view'3 v.final) = Seq.length (view'1 v)}
      {[@expl:postcondition] [%#s02_iter_mut2] view'2 (T_02_iter_mut__IterMut.t_IterMut__inner result).final
      = view'3 v.final}
      {[@expl:postcondition] [%#s02_iter_mut1] view'0 (T_02_iter_mut__IterMut.t_IterMut__inner result) = view'1 v}
      (! return' {result}) ]
    
end
module M_02_iter_mut__all_zero [#"02_iter_mut.rs" 88 0 88 35]
  let%span s02_iter_mut0 = "02_iter_mut.rs" 90 19 90 35
  let%span s02_iter_mut1 = "02_iter_mut.rs" 91 23 91 47
  let%span s02_iter_mut2 = "02_iter_mut.rs" 92 16 92 23
  let%span s02_iter_mut3 = "02_iter_mut.rs" 93 16 93 55
  let%span s02_iter_mut4 = "02_iter_mut.rs" 92 4 92 25
  let%span s02_iter_mut5 = "02_iter_mut.rs" 98 27 98 75
  let%span s02_iter_mut6 = "02_iter_mut.rs" 99 21 99 22
  let%span s02_iter_mut7 = "02_iter_mut.rs" 86 10 86 33
  let%span s02_iter_mut8 = "02_iter_mut.rs" 87 0 87 66
  let%span s02_iter_mut9 = "02_iter_mut.rs" 82 19 82 20
  let%span s02_iter_mut10 = "02_iter_mut.rs" 79 10 79 29
  let%span s02_iter_mut11 = "02_iter_mut.rs" 80 10 80 35
  let%span s02_iter_mut12 = "02_iter_mut.rs" 81 10 81 33
  let%span s02_iter_mut13 = "02_iter_mut.rs" 82 41 82 55
  let%span s02_iter_mut14 = "02_iter_mut.rs" 74 17 74 21
  let%span s02_iter_mut15 = "02_iter_mut.rs" 73 14 73 28
  let%span s02_iter_mut16 = "02_iter_mut.rs" 74 26 74 30
  let%span s02_iter_mut17 = "02_iter_mut.rs" 39 12 43 13
  let%span sops18 = "../../../../creusot-contracts/src/logic/ops.rs" 86 8 86 33
  let%span s02_iter_mut19 = "02_iter_mut.rs" 67 17 67 21
  let%span s02_iter_mut20 = "02_iter_mut.rs" 63 14 66 5
  let%span s02_iter_mut21 = "02_iter_mut.rs" 67 26 67 44
  let%span svec22 = "../../../../creusot-contracts/src/std/vec.rs" 19 14 19 41
  let%span smodel23 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sops24 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sslice25 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice26 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span s02_iter_mut27 = "02_iter_mut.rs" 49 15 49 24
  let%span s02_iter_mut28 = "02_iter_mut.rs" 50 14 50 45
  let%span s02_iter_mut29 = "02_iter_mut.rs" 47 4 47 10
  let%span s02_iter_mut30 = "02_iter_mut.rs" 55 15 55 21
  let%span s02_iter_mut31 = "02_iter_mut.rs" 56 15 56 21
  let%span s02_iter_mut32 = "02_iter_mut.rs" 57 15 57 21
  let%span s02_iter_mut33 = "02_iter_mut.rs" 58 15 58 32
  let%span s02_iter_mut34 = "02_iter_mut.rs" 59 15 59 32
  let%span s02_iter_mut35 = "02_iter_mut.rs" 60 14 60 42
  let%span s02_iter_mut36 = "02_iter_mut.rs" 53 4 53 10
  let%span sslice37 = "../../../../creusot-contracts/src/std/slice.rs" 90 14 90 41
  let%span sslice38 = "../../../../creusot-contracts/src/std/slice.rs" 91 4 91 86
  let%span s02_iter_mut39 = "02_iter_mut.rs" 32 8 32 76
  let%span sresolve40 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span s02_iter_mut41 = "02_iter_mut.rs" 22 20 22 64
  let%span sops42 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sinvariant43 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Borrow
  
  use T_core__option__Option as Option'0
  
  predicate inv'3 (_1 : Option'0.t_Option (borrowed usize))
  
  axiom inv_axiom'3 [@rewrite] : forall x : Option'0.t_Option (borrowed usize) [inv'3 x] . inv'3 x = true
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate inv'0 (_1 : IterMut'0.t_IterMut usize)
  
  predicate invariant'1 (self : borrowed (IterMut'0.t_IterMut usize)) =
    [%#sinvariant43] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'2 (_1 : borrowed (IterMut'0.t_IterMut usize))
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed (IterMut'0.t_IterMut usize) [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_alloc__alloc__Global as Global'0
  
  use T_alloc__vec__Vec as Vec'0
  
  predicate inv'1 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Int
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use seq.Seq
  
  function view'3 (self : slice usize) : Seq.seq usize
  
  axiom view'3_spec : forall self : slice usize . ([%#sslice26] view'3 self = Slice.id self)
  && ([%#sslice25] Seq.length (view'3 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  function index_logic'2 [@inline:trivial] (self : slice usize) (ix : int) : usize =
    [%#sops42] Seq.get (view'3 self) ix
  
  function view'2 (self : borrowed (slice usize)) : Seq.seq usize =
    [%#smodel23] view'3 self.current
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice usize)) : Seq.seq (borrowed usize)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice usize) . ([%#sslice38] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)
   -> Seq.get (to_mut_seq'0 self) i
  = Borrow.borrow_logic (index_logic'2 self.current i) (index_logic'2 self.final i) (Borrow.inherit_id (Borrow.get_id self) i))
  && ([%#sslice37] Seq.length (to_mut_seq'0 self) = Seq.length (view'2 self))
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  predicate produces'0 [#"02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_IterMut usize) (visited : Seq.seq (borrowed usize)) (tl : IterMut'0.t_IterMut usize)
    
   =
    [%#s02_iter_mut17] Seq.length (view'2 (T_02_iter_mut__IterMut.t_IterMut__inner self))
    = Seq.length visited + Seq.length (view'2 (T_02_iter_mut__IterMut.t_IterMut__inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'2 (T_02_iter_mut__IterMut.t_IterMut__inner self))
     -> (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).current
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).current
    /\ (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).final
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).final)
  
  function produces_trans'0 [#"02_iter_mut.rs" 61 4 61 90] (a : IterMut'0.t_IterMut usize) (ab : Seq.seq (borrowed usize)) (b : IterMut'0.t_IterMut usize) (bc : Seq.seq (borrowed usize)) (c : IterMut'0.t_IterMut usize) : ()
    
   =
    [%#s02_iter_mut36] ()
  
  axiom produces_trans'0_spec : forall a : IterMut'0.t_IterMut usize, ab : Seq.seq (borrowed usize), b : IterMut'0.t_IterMut usize, bc : Seq.seq (borrowed usize), c : IterMut'0.t_IterMut usize . ([%#s02_iter_mut30] inv'0 a)
   -> ([%#s02_iter_mut31] inv'0 b)
   -> ([%#s02_iter_mut32] inv'0 c)
   -> ([%#s02_iter_mut33] produces'0 a ab b)
   -> ([%#s02_iter_mut34] produces'0 b bc c)  -> ([%#s02_iter_mut35] produces'0 a (Seq.(++) ab bc) c)
  
  use seq.Seq
  
  function produces_refl'0 [#"02_iter_mut.rs" 51 4 51 26] (self : IterMut'0.t_IterMut usize) : () =
    [%#s02_iter_mut29] ()
  
  axiom produces_refl'0_spec : forall self : IterMut'0.t_IterMut usize . ([%#s02_iter_mut27] inv'0 self)
   -> ([%#s02_iter_mut28] produces'0 self (Seq.empty  : Seq.seq (borrowed usize)) self)
  
  predicate invariant'0 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut usize) =
    [%#s02_iter_mut41] Seq.length (view'3 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'3 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  axiom inv_axiom'0 [@rewrite] : forall x : IterMut'0.t_IterMut usize [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> true
    end)
  
  function view'0 (self : Vec'0.t_Vec usize (Global'0.t_Global)) : Seq.seq usize
  
  axiom view'0_spec : forall self : Vec'0.t_Vec usize (Global'0.t_Global) . [%#svec22] Seq.length (view'0 self)
  <= UIntSize.to_int (v_MAX'0 : usize)
  
  function index_logic'1 [@inline:trivial] (self : Vec'0.t_Vec usize (Global'0.t_Global)) (ix : int) : usize =
    [%#sops24] Seq.get (view'0 self) ix
  
  function view'1 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) : Seq.seq usize =
    [%#smodel23] view'0 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'3 (self : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    [%#sresolve40] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) =
    resolve'3 _1
  
  predicate resolve'2 (self : borrowed usize) =
    [%#sresolve40] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed usize) =
    resolve'2 _1
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve'4 (self : borrowed (slice usize)) =
    [%#sresolve40] self.final = self.current
  
  predicate completed'0 [#"02_iter_mut.rs" 31 4 31 35] (self : borrowed (IterMut'0.t_IterMut usize)) =
    [%#s02_iter_mut39] resolve'4 (T_02_iter_mut__IterMut.t_IterMut__inner self.current)
    /\ Seq.(==) (view'2 (T_02_iter_mut__IterMut.t_IterMut__inner self.current)) (Seq.empty  : Seq.seq usize)
  
  let rec next'0 (self:borrowed (IterMut'0.t_IterMut usize)) (return'  (ret:Option'0.t_Option (borrowed usize)))= {[@expl:precondition] [%#s02_iter_mut19] inv'2 self}
    any
    [ return' (result:Option'0.t_Option (borrowed usize))-> {[%#s02_iter_mut21] inv'3 result}
      {[%#s02_iter_mut20] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  function index_logic'0 [@inline:trivial] (self : Snapshot.snap_ty (Seq.seq (borrowed usize))) (ix : int) : borrowed usize
    
   =
    [%#sops18] Seq.get (Snapshot.inner self) ix
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  let rec into_iter'0 (self:IterMut'0.t_IterMut usize) (return'  (ret:IterMut'0.t_IterMut usize))= {[@expl:precondition] [%#s02_iter_mut14] inv'0 self}
    any
    [ return' (result:IterMut'0.t_IterMut usize)-> {[%#s02_iter_mut16] inv'0 result}
      {[%#s02_iter_mut15] result = self}
      (! return' {result}) ]
    
  
  let rec iter_mut'0 (v:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (return'  (ret:IterMut'0.t_IterMut usize))= {[@expl:precondition] [%#s02_iter_mut9] inv'1 v}
    any
    [ return' (result:IterMut'0.t_IterMut usize)-> {[%#s02_iter_mut13] inv'0 result}
      {[%#s02_iter_mut12] Seq.length (view'0 v.final) = Seq.length (view'1 v)}
      {[%#s02_iter_mut11] view'3 (T_02_iter_mut__IterMut.t_IterMut__inner result).final = view'0 v.final}
      {[%#s02_iter_mut10] view'2 (T_02_iter_mut__IterMut.t_IterMut__inner result) = view'1 v}
      (! return' {result}) ]
    
  
  meta "compute_max_steps" 1000000
  
  let rec all_zero (v:borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Borrow.borrow_final <Vec'0.t_Vec usize (Global'0.t_Global)> {v.current} {Borrow.get_id v}
          (fun (_ret':borrowed (Vec'0.t_Vec usize (Global'0.t_Global))) ->
             [ &_6 <- _ret' ] 
             [ &v <- { v with current = _ret'.final ; } ] 
            s1)
      | s1 = iter_mut'0 {_6} (fun (_ret':IterMut'0.t_IterMut usize) ->  [ &_5 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = into_iter'0 {_5} (fun (_ret':IterMut'0.t_IterMut usize) ->  [ &it <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s02_iter_mut0] Snapshot.new it ] s1 | s1 = bb3 ] 
    | bb3 = s0
      [ s0 =  [ &produced <- [%#s02_iter_mut1] Snapshot.new (Seq.empty  : Seq.seq (borrowed usize)) ] s1 | s1 = bb4 ]
      
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:loop invariant] [%#s02_iter_mut4] forall i : int . 0 <= i
        /\ i < Seq.length (Snapshot.inner produced)  -> UIntSize.to_int (index_logic'0 produced i).final = 0}
        {[@expl:loop invariant] [%#s02_iter_mut3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) it}
        {[@expl:loop invariant] [%#s02_iter_mut2] inv'0 it}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = s0
          [ s0 = {inv'0 it}
            Borrow.borrow_mut <IterMut'0.t_IterMut usize> {it}
              (fun (_ret':borrowed (IterMut'0.t_IterMut usize)) ->
                 [ &_16 <- _ret' ] 
                -{inv'0 _ret'.final}-
                 [ &it <- _ret'.final ] 
                s1)
          | s1 = next'0 {_16} (fun (_ret':Option'0.t_Option (borrowed usize)) ->  [ &_15 <- _ret' ] s2)
          | s2 = bb7 ]
          
        | bb7 = any
          [ br0 -> {_15 = Option'0.C_None } (! bb10) | br1 (a:borrowed usize)-> {_15 = Option'0.C_Some a} (! bb9) ]
          
        | bb9 = bb11
        | bb11 = s0
          [ s0 = Option'0.v_Some <borrowed usize> {_15} (fun (r0'0:borrowed usize) ->  [ &x <- r0'0 ] s1)
          | s1 =  [ &_19 <- [%#s02_iter_mut5] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton x)) ] s2
          | s2 = bb12 ]
          
        | bb12 = s0
          [ s0 =  [ &produced <- _19 ] s1
          | s1 =  [ &x <- { x with current = ([%#s02_iter_mut6] (0 : usize)) ; } ] s2
          | s2 = -{resolve'0 x}- s3
          | s3 = bb5 ]
           ]
         ]
      
    | bb10 = s0 [ s0 = {[@expl:type invariant] inv'0 it} s1 | s1 = -{resolve'1 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = v
    | & it : IterMut'0.t_IterMut usize = any_l ()
    | & _5 : IterMut'0.t_IterMut usize = any_l ()
    | & _6 : borrowed (Vec'0.t_Vec usize (Global'0.t_Global)) = any_l ()
    | & iter_old : Snapshot.snap_ty (IterMut'0.t_IterMut usize) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l ()
    | & _15 : Option'0.t_Option (borrowed usize) = any_l ()
    | & _16 : borrowed (IterMut'0.t_IterMut usize) = any_l ()
    | & x : borrowed usize = any_l ()
    | & _19 : Snapshot.snap_ty (Seq.seq (borrowed usize)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s02_iter_mut8] forall i : int . 0 <= i
      /\ i < Seq.length (view'1 v)  -> UIntSize.to_int (index_logic'1 v.final i) = 0}
      {[@expl:postcondition] [%#s02_iter_mut7] Seq.length (view'0 v.final) = Seq.length (view'1 v)}
      (! return' {result}) ]
    
end
module M_02_iter_mut__qyi4305820612590367313__produces_trans__refines [#"02_iter_mut.rs" 61 4 61 90] (* <IterMut<'a, T> as common::Iterator> *)
  let%span s02_iter_mut0 = "02_iter_mut.rs" 61 4 61 90
  let%span s02_iter_mut1 = "02_iter_mut.rs" 39 12 43 13
  let%span smodel2 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice3 = "../../../../creusot-contracts/src/std/slice.rs" 90 14 90 41
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 91 4 91 86
  let%span sslice5 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice6 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sops7 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span s02_iter_mut8 = "02_iter_mut.rs" 22 20 22 64
  let%span sinvariant9 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice10 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq11 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed12 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed12] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : slice t_T'0 . ([%#sslice6] view'1 self = Slice.id self)
  && ([%#sslice5] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sslice10] inv'3 (view'1 self)
  
  predicate inv'2 (_1 : slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (slice t_T'0)) =
    [%#sinvariant9] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'1 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'0 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut8] Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'0 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'1 inner
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops7] Seq.get (view'1 self) ix
  
  function view'0 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel2] view'1 self.current
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t_T'0)) : Seq.seq (borrowed t_T'0)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t_T'0) . ([%#sslice4] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)
   -> Seq.get (to_mut_seq'0 self) i
  = Borrow.borrow_logic (index_logic'0 self.current i) (index_logic'0 self.final i) (Borrow.inherit_id (Borrow.get_id self) i))
  && ([%#sslice3] Seq.length (to_mut_seq'0 self) = Seq.length (view'0 self))
  
  predicate produces'0 [#"02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_IterMut t_T'0) (visited : Seq.seq (borrowed t_T'0)) (tl : IterMut'0.t_IterMut t_T'0)
    
   =
    [%#s02_iter_mut1] Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
    = Seq.length visited + Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
     -> (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).current
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).current
    /\ (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).final
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).final)
  
  goal refines : [%#s02_iter_mut0] forall a : IterMut'0.t_IterMut t_T'0 . forall ab : Seq.seq (borrowed t_T'0) . forall b : IterMut'0.t_IterMut t_T'0 . forall bc : Seq.seq (borrowed t_T'0) . forall c : IterMut'0.t_IterMut t_T'0 . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_02_iter_mut__qyi4305820612590367313__produces_refl__refines [#"02_iter_mut.rs" 51 4 51 26] (* <IterMut<'a, T> as common::Iterator> *)
  let%span s02_iter_mut0 = "02_iter_mut.rs" 51 4 51 26
  let%span s02_iter_mut1 = "02_iter_mut.rs" 39 12 43 13
  let%span smodel2 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice3 = "../../../../creusot-contracts/src/std/slice.rs" 90 14 90 41
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 91 4 91 86
  let%span s02_iter_mut5 = "02_iter_mut.rs" 22 20 22 64
  let%span sslice6 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sops8 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span sinvariant9 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice10 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq11 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed12 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed12] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : slice t_T'0 . ([%#sslice7] view'1 self = Slice.id self)
  && ([%#sslice6] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'2 (self : slice t_T'0) =
    [%#sslice10] inv'3 (view'1 self)
  
  predicate inv'2 (_1 : slice t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : slice t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : borrowed (slice t_T'0)) =
    [%#sinvariant9] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'1 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'1 x] . inv'1 x = invariant'1 x
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'0 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut5] Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'0 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'1 inner
    end)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops8] Seq.get (view'1 self) ix
  
  function view'0 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel2] view'1 self.current
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t_T'0)) : Seq.seq (borrowed t_T'0)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t_T'0) . ([%#sslice4] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)
   -> Seq.get (to_mut_seq'0 self) i
  = Borrow.borrow_logic (index_logic'0 self.current i) (index_logic'0 self.final i) (Borrow.inherit_id (Borrow.get_id self) i))
  && ([%#sslice3] Seq.length (to_mut_seq'0 self) = Seq.length (view'0 self))
  
  predicate produces'0 [#"02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_IterMut t_T'0) (visited : Seq.seq (borrowed t_T'0)) (tl : IterMut'0.t_IterMut t_T'0)
    
   =
    [%#s02_iter_mut1] Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
    = Seq.length visited + Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
     -> (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).current
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).current
    /\ (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).final
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).final)
  
  use seq.Seq
  
  goal refines : [%#s02_iter_mut0] forall self : IterMut'0.t_IterMut t_T'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq (borrowed t_T'0)) self
   -> produces'0 self (Seq.empty  : Seq.seq (borrowed t_T'0)) self)
end
module M_02_iter_mut__qyi4305820612590367313__next__refines [#"02_iter_mut.rs" 67 4 67 44] (* <IterMut<'a, T> as common::Iterator> *)
  let%span s02_iter_mut0 = "02_iter_mut.rs" 67 4 67 44
  let%span s02_iter_mut1 = "02_iter_mut.rs" 32 8 32 76
  let%span s02_iter_mut2 = "02_iter_mut.rs" 39 12 43 13
  let%span sresolve3 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span smodel4 = "../../../../creusot-contracts/src/model.rs" 109 8 109 22
  let%span sslice5 = "../../../../creusot-contracts/src/std/slice.rs" 90 14 90 41
  let%span sslice6 = "../../../../creusot-contracts/src/std/slice.rs" 91 4 91 86
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 41
  let%span sslice9 = "../../../../creusot-contracts/src/std/slice.rs" 30 14 30 42
  let%span sops10 = "../../../../creusot-contracts/src/logic/ops.rs" 42 8 42 31
  let%span s02_iter_mut11 = "02_iter_mut.rs" 22 20 22 64
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sseq13 = "../../../../creusot-contracts/src/logic/seq.rs" 198 8 198 97
  let%span sboxed14 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed14] inv'5 self
  
  predicate inv'8 (_1 : t_T'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_T'0 [inv'8 x] . inv'8 x = invariant'6 x
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq13] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'8 (Seq.get self i)
  
  predicate inv'7 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : Seq.seq t_T'0 [inv'7 x] . inv'7 x = invariant'5 x
  
  use prelude.prelude.Slice
  
  use prelude.prelude.Slice
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UIntSize
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  function view'1 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : slice t_T'0 . ([%#sslice9] view'1 self = Slice.id self)
  && ([%#sslice8] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'4 (self : slice t_T'0) =
    [%#sslice12] inv'7 (view'1 self)
  
  predicate inv'6 (_1 : slice t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : slice t_T'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  use prelude.prelude.Borrow
  
  predicate invariant'3 (self : borrowed (slice t_T'0)) =
    [%#sinvariant7] inv'6 self.current /\ inv'6 self.final
  
  predicate inv'4 (_1 : borrowed (slice t_T'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'4 x] . inv'4 x = invariant'3 x
  
  use T_02_iter_mut__IterMut as T_02_iter_mut__IterMut
  
  use T_02_iter_mut__IterMut as IterMut'0
  
  predicate invariant'2 [#"02_iter_mut.rs" 20 4 20 30] (self : IterMut'0.t_IterMut t_T'0) =
    [%#s02_iter_mut11] Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).final)
    = Seq.length (view'1 (T_02_iter_mut__IterMut.t_IterMut__inner self).current)
  
  predicate inv'3 (_1 : IterMut'0.t_IterMut t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : IterMut'0.t_IterMut t_T'0 [inv'3 x] . inv'3 x
  = (invariant'2 x
  /\ match x with
    | IterMut'0.C_IterMut inner -> inv'4 inner
    end)
  
  predicate invariant'1 (self : borrowed t_T'0) =
    [%#sinvariant7] inv'5 self.current /\ inv'5 self.final
  
  predicate inv'2 (_1 : borrowed t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : borrowed t_T'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option (borrowed t_T'0))
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option (borrowed t_T'0) [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  predicate invariant'0 (self : borrowed (IterMut'0.t_IterMut t_T'0)) =
    [%#sinvariant7] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (IterMut'0.t_IterMut t_T'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (IterMut'0.t_IterMut t_T'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : slice t_T'0) (ix : int) : t_T'0 =
    [%#sops10] Seq.get (view'1 self) ix
  
  function view'0 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel4] view'1 self.current
  
  use seq.Seq
  
  function to_mut_seq'0 (self : borrowed (slice t_T'0)) : Seq.seq (borrowed t_T'0)
  
  axiom to_mut_seq'0_spec : forall self : borrowed (slice t_T'0) . ([%#sslice6] forall i : int . 0 <= i
  /\ i < Seq.length (to_mut_seq'0 self)
   -> Seq.get (to_mut_seq'0 self) i
  = Borrow.borrow_logic (index_logic'0 self.current i) (index_logic'0 self.final i) (Borrow.inherit_id (Borrow.get_id self) i))
  && ([%#sslice5] Seq.length (to_mut_seq'0 self) = Seq.length (view'0 self))
  
  predicate produces'0 [#"02_iter_mut.rs" 37 4 37 65] (self : IterMut'0.t_IterMut t_T'0) (visited : Seq.seq (borrowed t_T'0)) (tl : IterMut'0.t_IterMut t_T'0)
    
   =
    [%#s02_iter_mut2] Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
    = Seq.length visited + Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))
    /\ (forall i : int . 0 <= i /\ i < Seq.length (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self))
     -> (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).current
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).current
    /\ (Seq.get (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner self)) i).final
    = (Seq.get (Seq.(++) visited (to_mut_seq'0 (T_02_iter_mut__IterMut.t_IterMut__inner tl))) i).final)
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate resolve'0 (self : borrowed (slice t_T'0)) =
    [%#sresolve3] self.final = self.current
  
  predicate completed'0 [#"02_iter_mut.rs" 31 4 31 35] (self : borrowed (IterMut'0.t_IterMut t_T'0)) =
    [%#s02_iter_mut1] resolve'0 (T_02_iter_mut__IterMut.t_IterMut__inner self.current)
    /\ Seq.(==) (view'0 (T_02_iter_mut__IterMut.t_IterMut__inner self.current)) (Seq.empty  : Seq.seq t_T'0)
  
  goal refines : [%#s02_iter_mut0] forall self : borrowed (IterMut'0.t_IterMut t_T'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_Option (borrowed t_T'0) . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
end
