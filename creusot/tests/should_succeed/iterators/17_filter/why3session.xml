<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.12.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC5" version="1.0.5" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="coma" proved="true">
<path name=".."/><path name="17_filter.coma"/>
<theory name="M_17_filter__qyi17392541228996028033" proved="true">
 <goal name="next_refn" proved="true">
 <proof prover="3"><result status="valid" time="0.010954" steps="6188"/></proof>
 </goal>
 <goal name="produces_refl_refn" proved="true">
 <proof prover="3"><result status="valid" time="0.011372" steps="6188"/></proof>
 </goal>
 <goal name="produces_trans_refn" proved="true">
 <proof prover="3"><result status="valid" time="0.010792" steps="6188"/></proof>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__produces_refl" proved="true">
 <goal name="vc_produces_refl" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_produces_refl.0" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="vc_produces_refl.0.0" proved="true">
   <transf name="rewrite" proved="true" arg1="inv_axiom&#39;0" arg2="in" arg3="H">
    <goal name="vc_produces_refl.0.0.0" proved="true">
    <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
     <goal name="vc_produces_refl.0.0.0.0" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="vc_produces_refl.0.0.0.0.0" proved="true">
      <proof prover="3"><result status="valid" time="0.018539" steps="6342"/></proof>
      </goal>
      <goal name="vc_produces_refl.0.0.0.0.1" proved="true">
      <transf name="exists" proved="true" arg1="(empty : seq t_Item&#39;0)">
       <goal name="vc_produces_refl.0.0.0.0.1.0" proved="true">
       <proof prover="0" timelimit="1"><result status="valid" time="0.031251" steps="97182"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__produces_trans" proved="true">
 <goal name="vc_produces_trans" proved="true">
 <transf name="rewrite" proved="true" arg1="inv_axiom&#39;0">
  <goal name="vc_produces_trans.0" proved="true">
  <transf name="unfold" proved="true" arg1="produces&#39;0">
   <goal name="vc_produces_trans.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="vc_produces_trans.0.0.0" proved="true">
    <proof prover="3"><result status="valid" time="0.032610" steps="10343"/></proof>
    </goal>
    <goal name="vc_produces_trans.0.0.1" proved="true">
    <transf name="exists" proved="true" arg1="(s ++ s1)">
     <goal name="vc_produces_trans.0.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="(fun i -&gt; if i &lt; length ab then f i else (f1 (i - length ab) + length s))">
      <goal name="vc_produces_trans.0.0.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="vc_produces_trans.0.0.1.0.0.0" proved="true">
       <proof prover="3"><result status="valid" time="0.038305" steps="10826"/></proof>
       </goal>
       <goal name="vc_produces_trans.0.0.1.0.0.1" proved="true">
       <proof prover="3"><result status="valid" time="0.045566" steps="12338"/></proof>
       </goal>
       <goal name="vc_produces_trans.0.0.1.0.0.2" proved="true">
       <proof prover="3"><result status="valid" time="0.055358" steps="14133"/></proof>
       </goal>
       <goal name="vc_produces_trans.0.0.1.0.0.3" proved="true">
       <proof prover="3"><result status="valid" time="0.047014" steps="12665"/></proof>
       </goal>
       <goal name="vc_produces_trans.0.0.1.0.0.4" proved="true">
       <proof prover="3"><result status="valid" time="0.062241" steps="15255"/></proof>
       </goal>
       <goal name="vc_produces_trans.0.0.1.0.0.5" proved="true">
       <proof prover="3"><result status="valid" time="0.114275" steps="29187"/></proof>
       </goal>
       <goal name="vc_produces_trans.0.0.1.0.0.6" proved="true">
       <transf name="case" proved="true" arg1="(i &lt; length s)">
        <goal name="vc_produces_trans.0.0.1.0.0.6.0" expl="true case" proved="true">
        <proof prover="3"><result status="valid" time="0.137718" steps="23509"/></proof>
        </goal>
        <goal name="vc_produces_trans.0.0.1.0.0.6.1" expl="false case" proved="true">
        <transf name="instantiate" proved="true" arg1="H14" arg2="bor_f,(i - length s)">
         <goal name="vc_produces_trans.0.0.1.0.0.6.1.0" expl="false case" proved="true">
         <transf name="destruct_rec" proved="true" arg1="Hinst">
          <goal name="vc_produces_trans.0.0.1.0.0.6.1.0.0" expl="destruct premise" proved="true">
          <proof prover="3"><result status="valid" time="0.034611" steps="10954"/></proof>
          </goal>
          <goal name="vc_produces_trans.0.0.1.0.0.6.1.0.1" expl="destruct premise" proved="true">
          <proof prover="3"><result status="valid" time="0.041915" steps="11615"/></proof>
          </goal>
          <goal name="vc_produces_trans.0.0.1.0.0.6.1.0.2" expl="false case" proved="true">
          <proof prover="1" timelimit="1"><result status="valid" time="0.023711" steps="139"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_17_filter__qyi17392541228996028033__next" proved="true">
 <goal name="vc_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_next.0" expl="mut invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.015985" steps="7805"/></proof>
  </goal>
  <goal name="vc_next.1" expl="loop invariant #0" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.017444" steps="7020"/></proof>
  </goal>
  <goal name="vc_next.2" expl="loop invariant #1" proved="true">
  <proof prover="3"><result status="valid" time="0.025173" steps="7946"/></proof>
  </goal>
  <goal name="vc_next.3" expl="loop invariant #2" proved="true">
  <proof prover="3"><result status="valid" time="0.019116" steps="10840"/></proof>
  </goal>
  <goal name="vc_next.4" expl="loop invariant #3" proved="true">
  <transf name="assert" proved="true" arg1="(inv&#39;9 self.current)">
   <goal name="vc_next.4.0" expl="asserted formula" proved="true">
   <proof prover="3" timelimit="5"><result status="valid" time="0.038747" steps="11153"/></proof>
   </goal>
   <goal name="vc_next.4.1" expl="loop invariant #3" proved="true">
   <transf name="rewrite" proved="true" arg1="inv_axiom&#39;6" arg2="in" arg3="h">
    <goal name="vc_next.4.1.0" expl="loop invariant #3" proved="true">
    <transf name="revert" proved="true" arg1="h">
     <goal name="vc_next.4.1.0.0" expl="loop invariant #3" proved="true">
     <proof prover="3" timelimit="5"><result status="valid" time="0.033616" steps="11163"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next.5" expl="loop invariant #4" proved="true">
  <proof prover="3"><result status="valid" time="0.016191" steps="11079"/></proof>
  </goal>
  <goal name="vc_next.6" proved="true">
  <proof prover="3"><result status="valid" time="0.031052" steps="12255"/></proof>
  </goal>
  <goal name="vc_next.7" expl="next &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.031786" steps="11798"/></proof>
  </goal>
  <goal name="vc_next.8" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.019163" steps="9303"/></proof>
  </goal>
  <goal name="vc_next.9" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.135125" steps="12831"/></proof>
  </goal>
  <goal name="vc_next.10" expl="next result type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.019148" steps="9610"/></proof>
  </goal>
  <goal name="vc_next.11" expl="next ensures" proved="true">
  <proof prover="2"><result status="valid" time="0.051689" steps="23256"/></proof>
  </goal>
  <goal name="vc_next.12" expl="assertion" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="4.125007" steps="585937"/></proof>
  </goal>
  <goal name="vc_next.13" proved="true">
  <proof prover="3"><result status="valid" time="0.031208" steps="11936"/></proof>
  </goal>
  <goal name="vc_next.14" expl="call_mut &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.031061" steps="11678"/></proof>
  </goal>
  <goal name="vc_next.15" expl="call_mut &#39;args&#39; type invariant" proved="true">
  <proof prover="3" timelimit="5"><result status="valid" time="0.063385" steps="12008"/></proof>
  </goal>
  <goal name="vc_next.16" expl="call_mut requires" proved="true">
  <proof prover="3"><result status="valid" time="0.027236" steps="12149"/></proof>
  </goal>
  <goal name="vc_next.17" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.025367" steps="10451"/></proof>
  </goal>
  <goal name="vc_next.18" expl="mut invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.032395" steps="9240"/></proof>
  </goal>
  <goal name="vc_next.19" expl="loop invariant #0" proved="true">
  <proof prover="3"><result status="valid" time="0.026285" steps="12398"/></proof>
  </goal>
  <goal name="vc_next.20" expl="loop invariant #1" proved="true">
  <proof prover="3"><result status="valid" time="0.049348" steps="12434"/></proof>
  </goal>
  <goal name="vc_next.21" expl="loop invariant #2" proved="true">
  <proof prover="3"><result status="valid" time="0.035799" steps="14685"/></proof>
  </goal>
  <goal name="vc_next.22" expl="loop invariant #3" proved="true">
  <proof prover="3"><result status="valid" time="0.140911" steps="11051"/></proof>
  </goal>
  <goal name="vc_next.23" expl="loop invariant #4" proved="true">
  <proof prover="3"><result status="valid" time="0.018920" steps="9786"/></proof>
  </goal>
  <goal name="vc_next.24" expl="type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.033945" steps="12376"/></proof>
  </goal>
  <goal name="vc_next.25" expl="next result type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.060862" steps="26566"/></proof>
  </goal>
  <goal name="vc_next.26" expl="next ensures" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="vc_next.26.0" expl="next ensures" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="vc_next.26.0.0" expl="next ensures" proved="true">
    <proof prover="3" timelimit="5"><result status="valid" time="0.034599" steps="11293"/></proof>
    </goal>
    <goal name="vc_next.26.0.1" expl="next ensures" proved="true">
    <transf name="exists" proved="true" arg1="(snoc (inner produced) field_0)">
     <goal name="vc_next.26.0.1.0" proved="true">
     <transf name="exists" proved="true" arg1="(fun (_ : int) -&gt; length (inner produced))">
      <goal name="vc_next.26.0.1.0.0" proved="true">
      <transf name="split_vc" proved="true" >
       <goal name="vc_next.26.0.1.0.0.0" proved="true">
       <proof prover="0"><result status="valid" time="0.018634" steps="84044"/></proof>
       </goal>
       <goal name="vc_next.26.0.1.0.0.1" proved="true">
       <proof prover="1"><result status="valid" time="0.023256" steps="136"/></proof>
       </goal>
       <goal name="vc_next.26.0.1.0.0.2" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.055784" steps="13206"/></proof>
       </goal>
       <goal name="vc_next.26.0.1.0.0.3" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.044239" steps="13200"/></proof>
       </goal>
       <goal name="vc_next.26.0.1.0.0.4" proved="true">
       <proof prover="1"><result status="valid" time="0.022939" steps="80"/></proof>
       </goal>
       <goal name="vc_next.26.0.1.0.0.5" proved="true">
       <proof prover="3" timelimit="5"><result status="valid" time="0.067211" steps="15048"/></proof>
       </goal>
       <goal name="vc_next.26.0.1.0.0.6" proved="true">
       <transf name="exists" proved="true" arg1="0">
        <goal name="vc_next.26.0.1.0.0.6.0" proved="true">
        <proof prover="3" timelimit="5"><result status="valid" time="0.083083" steps="19747"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_next.27" proved="true">
  <proof prover="3"><result status="valid" time="0.029219" steps="9539"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_17_filter__filter" proved="true">
 <goal name="vc_filter" proved="true">
 <proof prover="3"><result status="valid" time="0.026229" steps="6316"/></proof>
 </goal>
</theory>
<theory name="M_17_filter__less_than" proved="true">
 <goal name="vc_less_than" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="vc_less_than.0" expl="into_iter &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.017634" steps="8963"/></proof>
  </goal>
  <goal name="vc_less_than.1" expl="into_iter requires" proved="true">
  <proof prover="3"><result status="valid" time="0.026326" steps="8358"/></proof>
  </goal>
  <goal name="vc_less_than.2" expl="filter &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.024106" steps="8392"/></proof>
  </goal>
  <goal name="vc_less_than.3" expl="filter &#39;predicate&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.026382" steps="9006"/></proof>
  </goal>
  <goal name="vc_less_than.4" expl="filter requires #0" proved="true">
  <proof prover="3"><result status="valid" time="0.016080" steps="9757"/></proof>
  </goal>
  <goal name="vc_less_than.5" expl="filter requires #1" proved="true">
  <proof prover="3"><result status="valid" time="0.021039" steps="9431"/></proof>
  </goal>
  <goal name="vc_less_than.6" expl="filter requires #2" proved="true">
  <proof prover="3"><result status="valid" time="0.016008" steps="10669"/></proof>
  </goal>
  <goal name="vc_less_than.7" expl="filter requires #3" proved="true">
  <proof prover="3"><result status="valid" time="0.023115" steps="10231"/></proof>
  </goal>
  <goal name="vc_less_than.8" expl="collect &#39;self&#39; type invariant" proved="true">
  <proof prover="3"><result status="valid" time="0.025616" steps="8425"/></proof>
  </goal>
  <goal name="vc_less_than.9" expl="less_than ensures #0" proved="true">
  <transf name="destruct_rec" proved="true" arg1="Assert">
   <goal name="vc_less_than.9.0" expl="less_than ensures #0" proved="true">
   <transf name="unfold" proved="true" arg1="produces&#39;0" arg2="in" arg3="Assert1">
    <goal name="vc_less_than.9.0.0" expl="less_than ensures #0" proved="true">
    <proof prover="3" timelimit="5"><result status="valid" time="0.368058" steps="88263"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="vc_less_than.10" expl="less_than ensures #1" proved="true">
  <transf name="destruct_rec" proved="true" arg1="Assert1">
   <goal name="vc_less_than.10.0" expl="less_than ensures #1" proved="true">
   <transf name="unfold" proved="true" arg1="produces&#39;0" arg2="in" arg3="Assert2">
    <goal name="vc_less_than.10.0.0" expl="less_than ensures #1" proved="true">
    <transf name="destruct_rec" proved="true" arg1="Assert2">
     <goal name="vc_less_than.10.0.0.0" expl="less_than ensures #1" proved="true">
     <transf name="assert" proved="true" arg1="(forall i . contains&#39;0 s i -&gt; contains&#39;0 (view&#39;0 v) i)">
      <goal name="vc_less_than.10.0.0.0.0" expl="asserted formula" proved="true">
      <transf name="use_th" proved="true" arg1="seq.FreeMonoid">
       <goal name="vc_less_than.10.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="1"><result status="valid" time="0.075272" steps="1650"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="vc_less_than.10.0.0.0.1" expl="less_than ensures #1" proved="true">
      <proof prover="3" timelimit="5"><result status="valid" time="0.084168" steps="20745"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="M_17_filter__less_than__qyClosure2" proved="true">
 <goal name="vc_m_17_filter__less_than__qyClosure2" proved="true">
 <proof prover="3"><result status="valid" time="0.010305" steps="1683"/></proof>
 </goal>
</theory>
</file>
</why3session>
