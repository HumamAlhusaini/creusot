
module T_11_repeat__Repeat [#"11_repeat.rs" 8 0 8 20]
  type t_A'0
  
  type t_Repeat 't_A'0 =
    | C_Repeat 't_A'0
  
  let rec t_Repeat < 't_A'0 > (input:t_Repeat 't_A'0) (ret  (element:'t_A'0))= any
    [ good (element:'t_A'0)-> {C_Repeat element = input} (! ret {element}) ]
    
  
  function t_Repeat__element (self : t_Repeat 't_A'0) : 't_A'0 =
    match self with
      | C_Repeat a -> a
      end
end
module M_11_repeat__qyi12237267952628538149__produces_refl [#"11_repeat.rs" 34 4 34 26] (* <Repeat<A> as common::Iterator> *)
  let%span s11_repeat0 = "11_repeat.rs" 32 15 32 24
  let%span s11_repeat1 = "11_repeat.rs" 33 14 33 45
  let%span s11_repeat2 = "11_repeat.rs" 24 8 27 9
  
  type t_A'0
  
  predicate inv'1 (_1 : t_A'0)
  
  use T_11_repeat__Repeat as Repeat'0
  
  predicate inv'0 (_1 : Repeat'0.t_Repeat t_A'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Repeat'0.t_Repeat t_A'0 [inv'0 x] . inv'0 x
  = match x with
    | Repeat'0.C_Repeat element -> inv'1 element
    end
  
  use T_11_repeat__Repeat as T_11_repeat__Repeat
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate produces'0 [#"11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_Repeat t_A'0) (visited : Seq.seq t_A'0) (o : Repeat'0.t_Repeat t_A'0)
    
   =
    [%#s11_repeat2] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = T_11_repeat__Repeat.t_Repeat__element self)
  
  use seq.Seq
  
  constant self  : Repeat'0.t_Repeat t_A'0
  
  function produces_refl [#"11_repeat.rs" 34 4 34 26] (self : Repeat'0.t_Repeat t_A'0) : ()
  
  goal vc_produces_refl : ([%#s11_repeat0] inv'0 self)
   -> ([%#s11_repeat1] produces'0 self (Seq.empty  : Seq.seq t_A'0) self)
end
module M_11_repeat__qyi12237267952628538149__produces_trans [#"11_repeat.rs" 44 4 44 90] (* <Repeat<A> as common::Iterator> *)
  let%span s11_repeat0 = "11_repeat.rs" 38 15 38 21
  let%span s11_repeat1 = "11_repeat.rs" 39 15 39 21
  let%span s11_repeat2 = "11_repeat.rs" 40 15 40 21
  let%span s11_repeat3 = "11_repeat.rs" 41 15 41 32
  let%span s11_repeat4 = "11_repeat.rs" 42 15 42 32
  let%span s11_repeat5 = "11_repeat.rs" 43 14 43 42
  let%span s11_repeat6 = "11_repeat.rs" 24 8 27 9
  
  type t_A'0
  
  predicate inv'1 (_1 : t_A'0)
  
  use T_11_repeat__Repeat as Repeat'0
  
  predicate inv'0 (_1 : Repeat'0.t_Repeat t_A'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Repeat'0.t_Repeat t_A'0 [inv'0 x] . inv'0 x
  = match x with
    | Repeat'0.C_Repeat element -> inv'1 element
    end
  
  use seq.Seq
  
  use seq.Seq
  
  use T_11_repeat__Repeat as T_11_repeat__Repeat
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  predicate produces'0 [#"11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_Repeat t_A'0) (visited : Seq.seq t_A'0) (o : Repeat'0.t_Repeat t_A'0)
    
   =
    [%#s11_repeat6] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = T_11_repeat__Repeat.t_Repeat__element self)
  
  constant a  : Repeat'0.t_Repeat t_A'0
  
  constant ab  : Seq.seq t_A'0
  
  constant b  : Repeat'0.t_Repeat t_A'0
  
  constant bc  : Seq.seq t_A'0
  
  constant c  : Repeat'0.t_Repeat t_A'0
  
  function produces_trans [#"11_repeat.rs" 44 4 44 90] (a : Repeat'0.t_Repeat t_A'0) (ab : Seq.seq t_A'0) (b : Repeat'0.t_Repeat t_A'0) (bc : Seq.seq t_A'0) (c : Repeat'0.t_Repeat t_A'0) : ()
    
  
  goal vc_produces_trans : ([%#s11_repeat4] produces'0 b bc c)
   -> ([%#s11_repeat3] produces'0 a ab b)
   -> ([%#s11_repeat2] inv'0 c)
   -> ([%#s11_repeat1] inv'0 b)  -> ([%#s11_repeat0] inv'0 a)  -> ([%#s11_repeat5] produces'0 a (Seq.(++) ab bc) c)
end
module T_core__option__Option
  type t_T'0
  
  type t_Option 't_T'0 =
    | C_None
    | C_Some 't_T'0
  
  let rec v_None < 't_T'0 > (input:t_Option 't_T'0) (ret  )= any
    [ good -> {C_None  = input} (! ret) | bad -> {C_None  <> input} (! {false} any) ]
    
  
  let rec v_Some < 't_T'0 > (input:t_Option 't_T'0) (ret  (field_0:'t_T'0))= any
    [ good (field_0:'t_T'0)-> {C_Some field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : 't_T'0 [C_Some field_0 : t_Option 't_T'0] . C_Some field_0 <> input} (! {false} any) ]
    
end
module M_11_repeat__qyi12237267952628538149__next [#"11_repeat.rs" 50 4 50 35] (* <Repeat<A> as common::Iterator> *)
  let%span s11_repeat0 = "11_repeat.rs" 50 17 50 21
  let%span s11_repeat1 = "11_repeat.rs" 46 14 49 5
  let%span s11_repeat2 = "11_repeat.rs" 50 26 50 35
  let%span sclone3 = "../../../../creusot-contracts/src/std/clone.rs" 7 0 20 1
  let%span s11_repeat4 = "11_repeat.rs" 18 20 18 25
  let%span s11_repeat5 = "11_repeat.rs" 24 8 27 9
  let%span sresolve6 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sinvariant7 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant8 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  
  type t_A'0
  
  predicate inv'3 (_1 : t_A'0)
  
  use T_11_repeat__Repeat as Repeat'0
  
  predicate inv'4 (_1 : Repeat'0.t_Repeat t_A'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Repeat'0.t_Repeat t_A'0 [inv'4 x] . inv'4 x
  = match x with
    | Repeat'0.C_Repeat element -> inv'3 element
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'1 (self : t_A'0) =
    [%#sinvariant8] inv'3 self
  
  predicate inv'2 (_1 : t_A'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_A'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option t_A'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t_A'0 [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'3 a_0
    end
  
  predicate invariant'0 (self : borrowed (Repeat'0.t_Repeat t_A'0)) =
    [%#sinvariant7] inv'4 self.current /\ inv'4 self.final
  
  predicate inv'0 (_1 : borrowed (Repeat'0.t_Repeat t_A'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Repeat'0.t_Repeat t_A'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use T_11_repeat__Repeat as T_11_repeat__Repeat
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate produces'0 [#"11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_Repeat t_A'0) (visited : Seq.seq t_A'0) (o : Repeat'0.t_Repeat t_A'0)
    
   =
    [%#s11_repeat5] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = T_11_repeat__Repeat.t_Repeat__element self)
  
  use seq.Seq
  
  predicate completed'0 [#"11_repeat.rs" 17 4 17 35] (self : borrowed (Repeat'0.t_Repeat t_A'0)) =
    [%#s11_repeat4] false
  
  use prelude.prelude.Intrinsic
  
  predicate resolve'1 (self : borrowed (Repeat'0.t_Repeat t_A'0)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (Repeat'0.t_Repeat t_A'0)) =
    resolve'1 _1
  
  let rec clone'0 (self:t_A'0) (return'  (ret:t_A'0))= {[@expl:precondition] inv'2 self}
    any [ return' (result:t_A'0)-> {inv'3 result} {[%#sclone3] result = self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec next (self:borrowed (Repeat'0.t_Repeat t_A'0)) (return'  (ret:Option'0.t_Option t_A'0))= {[%#s11_repeat0] inv'0 self}
    (! bb0
    [ bb0 = s0
      [ s0 = Repeat'0.t_Repeat <t_A'0> {self.current}
          (fun (relement'0:t_A'0) -> clone'0 {relement'0} (fun (_ret':t_A'0) ->  [ &_3 <- _ret' ] s1))
      | s1 = bb1 ]
      
    | bb1 = s0
      [ s0 = {[@expl:type invariant] inv'0 self} s1
      | s1 = -{resolve'0 self}- s2
      | s2 =  [ &_0 <- Option'0.C_Some _3 ] s3
      | s3 = bb2 ]
      
    | bb2 = return' {_0} ]
    )
    [ & _0 : Option'0.t_Option t_A'0 = any_l ()
    | & self : borrowed (Repeat'0.t_Repeat t_A'0) = self
    | & _3 : t_A'0 = any_l () ]
    
    [ return' (result:Option'0.t_Option t_A'0)-> {[@expl:postcondition] [%#s11_repeat2] inv'1 result}
      {[@expl:postcondition] [%#s11_repeat1] match result with
        | Option'0.C_None -> completed'0 self
        | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
end
module M_11_repeat__qyi12237267952628538149__produces_refl__refines [#"11_repeat.rs" 34 4 34 26] (* <Repeat<A> as common::Iterator> *)
  let%span s11_repeat0 = "11_repeat.rs" 34 4 34 26
  let%span s11_repeat1 = "11_repeat.rs" 24 8 27 9
  
  type t_A'0
  
  predicate inv'1 (_1 : t_A'0)
  
  use T_11_repeat__Repeat as Repeat'0
  
  predicate inv'0 (_1 : Repeat'0.t_Repeat t_A'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Repeat'0.t_Repeat t_A'0 [inv'0 x] . inv'0 x
  = match x with
    | Repeat'0.C_Repeat element -> inv'1 element
    end
  
  use T_11_repeat__Repeat as T_11_repeat__Repeat
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate produces'0 [#"11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_Repeat t_A'0) (visited : Seq.seq t_A'0) (o : Repeat'0.t_Repeat t_A'0)
    
   =
    [%#s11_repeat1] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = T_11_repeat__Repeat.t_Repeat__element self)
  
  use seq.Seq
  
  goal refines : [%#s11_repeat0] forall self : Repeat'0.t_Repeat t_A'0 . inv'0 self
   -> inv'0 self
  /\ (forall result : () . produces'0 self (Seq.empty  : Seq.seq t_A'0) self
   -> produces'0 self (Seq.empty  : Seq.seq t_A'0) self)
end
module M_11_repeat__qyi12237267952628538149__produces_trans__refines [#"11_repeat.rs" 44 4 44 90] (* <Repeat<A> as common::Iterator> *)
  let%span s11_repeat0 = "11_repeat.rs" 44 4 44 90
  let%span s11_repeat1 = "11_repeat.rs" 24 8 27 9
  
  type t_A'0
  
  predicate inv'1 (_1 : t_A'0)
  
  use T_11_repeat__Repeat as Repeat'0
  
  predicate inv'0 (_1 : Repeat'0.t_Repeat t_A'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Repeat'0.t_Repeat t_A'0 [inv'0 x] . inv'0 x
  = match x with
    | Repeat'0.C_Repeat element -> inv'1 element
    end
  
  use seq.Seq
  
  use T_11_repeat__Repeat as T_11_repeat__Repeat
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate produces'0 [#"11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_Repeat t_A'0) (visited : Seq.seq t_A'0) (o : Repeat'0.t_Repeat t_A'0)
    
   =
    [%#s11_repeat1] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = T_11_repeat__Repeat.t_Repeat__element self)
  
  goal refines : [%#s11_repeat0] forall a : Repeat'0.t_Repeat t_A'0 . forall ab : Seq.seq t_A'0 . forall b : Repeat'0.t_Repeat t_A'0 . forall bc : Seq.seq t_A'0 . forall c : Repeat'0.t_Repeat t_A'0 . produces'0 b bc c
  /\ produces'0 a ab b /\ inv'0 c /\ inv'0 b /\ inv'0 a
   -> produces'0 b bc c
  /\ produces'0 a ab b
  /\ inv'0 c
  /\ inv'0 b /\ inv'0 a /\ (forall result : () . produces'0 a (Seq.(++) ab bc) c  -> produces'0 a (Seq.(++) ab bc) c)
end
module M_11_repeat__qyi12237267952628538149__next__refines [#"11_repeat.rs" 50 4 50 35] (* <Repeat<A> as common::Iterator> *)
  let%span s11_repeat0 = "11_repeat.rs" 50 4 50 35
  let%span s11_repeat1 = "11_repeat.rs" 18 20 18 25
  let%span s11_repeat2 = "11_repeat.rs" 24 8 27 9
  let%span sinvariant3 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  type t_A'0
  
  predicate inv'2 (_1 : t_A'0)
  
  use T_11_repeat__Repeat as Repeat'0
  
  predicate inv'3 (_1 : Repeat'0.t_Repeat t_A'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Repeat'0.t_Repeat t_A'0 [inv'3 x] . inv'3 x
  = match x with
    | Repeat'0.C_Repeat element -> inv'2 element
    end
  
  use T_core__option__Option as Option'0
  
  predicate inv'1 (_1 : Option'0.t_Option t_A'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Option'0.t_Option t_A'0 [inv'1 x] . inv'1 x
  = match x with
    | Option'0.C_None -> true
    | Option'0.C_Some a_0 -> inv'2 a_0
    end
  
  use prelude.prelude.Borrow
  
  predicate invariant'0 (self : borrowed (Repeat'0.t_Repeat t_A'0)) =
    [%#sinvariant3] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'0 (_1 : borrowed (Repeat'0.t_Repeat t_A'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (Repeat'0.t_Repeat t_A'0) [inv'0 x] . inv'0 x = invariant'0 x
  
  use T_11_repeat__Repeat as T_11_repeat__Repeat
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  predicate produces'0 [#"11_repeat.rs" 23 4 23 64] (self : Repeat'0.t_Repeat t_A'0) (visited : Seq.seq t_A'0) (o : Repeat'0.t_Repeat t_A'0)
    
   =
    [%#s11_repeat2] self = o
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> Seq.get visited i = T_11_repeat__Repeat.t_Repeat__element self)
  
  use seq.Seq
  
  predicate completed'0 [#"11_repeat.rs" 17 4 17 35] (self : borrowed (Repeat'0.t_Repeat t_A'0)) =
    [%#s11_repeat1] false
  
  goal refines : [%#s11_repeat0] forall self : borrowed (Repeat'0.t_Repeat t_A'0) . inv'0 self
   -> inv'0 self
  /\ (forall result : Option'0.t_Option t_A'0 . inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end
   -> inv'1 result
  /\ match result with
    | Option'0.C_None -> completed'0 self
    | Option'0.C_Some v -> produces'0 self.current (Seq.singleton v) self.final
    end)
end
