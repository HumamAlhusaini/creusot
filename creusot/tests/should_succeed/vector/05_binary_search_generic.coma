module M_05_binary_search_generic__binary_search [#"05_binary_search_generic.rs" 27 0 29 29]
  let%span s05_binary_search_generic0 = "05_binary_search_generic.rs" 31 20 31 21
  let%span s05_binary_search_generic1 = "05_binary_search_generic.rs" 32 19 32 20
  let%span s05_binary_search_generic2 = "05_binary_search_generic.rs" 35 26 35 27
  let%span s05_binary_search_generic3 = "05_binary_search_generic.rs" 39 16 39 117
  let%span s05_binary_search_generic4 = "05_binary_search_generic.rs" 38 16 38 88
  let%span s05_binary_search_generic5 = "05_binary_search_generic.rs" 37 16 37 56
  let%span s05_binary_search_generic6 = "05_binary_search_generic.rs" 40 17 40 18
  let%span s05_binary_search_generic7 = "05_binary_search_generic.rs" 41 26 41 27
  let%span s05_binary_search_generic8 = "05_binary_search_generic.rs" 41 19 41 27
  let%span s05_binary_search_generic9 = "05_binary_search_generic.rs" 53 37 53 38
  let%span s05_binary_search_generic10 = "05_binary_search_generic.rs" 27 41 27 44
  let%span s05_binary_search_generic11 = "05_binary_search_generic.rs" 27 55 27 59
  let%span s05_binary_search_generic12 = "05_binary_search_generic.rs" 20 11 20 36
  let%span s05_binary_search_generic13 = "05_binary_search_generic.rs" 21 11 21 35
  let%span s05_binary_search_generic14 = "05_binary_search_generic.rs" 22 10 22 87
  let%span s05_binary_search_generic15 = "05_binary_search_generic.rs" 23 10 24 72
  let%span s05_binary_search_generic16 = "05_binary_search_generic.rs" 25 10 26 90
  let%span smod17 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2682 22 2682 26
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span smodel19 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span smodel20 = "../../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span smod21 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3359 14 3359 18
  let%span smod22 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3359 20 3359 25
  let%span svec23 = "../../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span smod24 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3359 4 3359 46
  let%span svec25 = "../../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span scmp26 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs" 1371 11 1371 15
  let%span scmp27 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs" 1371 17 1371 22
  let%span scmp28 = "../../../../creusot-contracts/src/std/cmp.rs" 51 26 51 76
  let%span scmp29 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs" 964 12 964 16
  let%span scmp30 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs" 964 18 964 23
  let%span scmp31 = "../../../../creusot-contracts/src/std/cmp.rs" 72 26 72 85
  let%span suint_macros32 = "../../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27
  let%span s05_binary_search_generic33 = "05_binary_search_generic.rs" 17 4 17 31
  let%span svec34 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span svec35 = "../../../../creusot-contracts/src/std/vec.rs" 29 14 29 47
  let%span svec36 = "../../../../creusot-contracts/src/std/vec.rs" 30 14 31 51
  let%span sord37 = "../../../../creusot-contracts/src/logic/ord.rs" 29 14 29 64
  let%span sord38 = "../../../../creusot-contracts/src/logic/ord.rs" 40 14 40 61
  let%span sord39 = "../../../../creusot-contracts/src/logic/ord.rs" 51 14 51 61
  let%span sord40 = "../../../../creusot-contracts/src/logic/ord.rs" 62 14 62 64
  let%span sord41 = "../../../../creusot-contracts/src/logic/ord.rs" 67 14 67 45
  let%span sord42 = "../../../../creusot-contracts/src/logic/ord.rs" 72 15 72 32
  let%span sord43 = "../../../../creusot-contracts/src/logic/ord.rs" 73 15 73 32
  let%span sord44 = "../../../../creusot-contracts/src/logic/ord.rs" 74 14 74 31
  let%span sord45 = "../../../../creusot-contracts/src/logic/ord.rs" 81 15 81 45
  let%span sord46 = "../../../../creusot-contracts/src/logic/ord.rs" 82 14 82 47
  let%span sord47 = "../../../../creusot-contracts/src/logic/ord.rs" 89 15 89 48
  let%span sord48 = "../../../../creusot-contracts/src/logic/ord.rs" 90 14 90 44
  let%span sord49 = "../../../../creusot-contracts/src/logic/ord.rs" 95 14 95 59
  let%span sslice50 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice51 = "../../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span s05_binary_search_generic52 = "05_binary_search_generic.rs" 11 8 11 75
  let%span sindex53 = "../../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span sinvariant54 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span svec55 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq56 = "../../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed57 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: usize }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  constant v_MAX'0 : usize = [%#suint_macros32] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec34] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  predicate inv'0 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed57] inv'0 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq56] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_T'0 [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec55] inv'5 (view'1 self)
  
  predicate inv'4 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#sinvariant54] inv'4 self
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x = invariant'0 x
  
  function view'0 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel19] view'1 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:len 'self' type invariant] [%#smod17] inv'1 self}
    any
    [ return' (result:usize)-> {[%#svec18] UIntSize.to_int result = Seq.length (view'0 self)} (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : t_T'0)
  
  type t_Result'0  =
    | C_Ok'0 usize
    | C_Err'0 usize
  
  type t_DeepModelTy'0
  
  function deep_model'0 (self : t_T'0) : t_DeepModelTy'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex53] Seq.get (view'1 self) ix
  
  function deep_model'2 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0
  
  axiom deep_model'2_spec : forall self : t_Vec'0 . ([%#svec35] Seq.length (view'1 self)
  = Seq.length (deep_model'2 self))
  && ([%#svec36] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)
   -> Seq.get (deep_model'2 self) i = deep_model'0 (index_logic'0 self i))
  
  function deep_model'1 (self : t_Vec'0) : Seq.seq t_DeepModelTy'0 =
    [%#smodel20] deep_model'2 self
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  function cmp_log'0 (self : t_DeepModelTy'0) (other : t_DeepModelTy'0) : t_Ordering'0
  
  function eq_cmp'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom eq_cmp'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord49] (x = y)
  = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym2'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord47] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord48] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom antisym1'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . ([%#sord45] cmp_log'0 x y = C_Less'0)
   -> ([%#sord46] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) (z : t_DeepModelTy'0) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0, z : t_DeepModelTy'0, o : t_Ordering'0 . ([%#sord42] cmp_log'0 x y
  = o)  -> ([%#sord43] cmp_log'0 y z = o)  -> ([%#sord44] cmp_log'0 x z = o)
  
  function refl'0 (x : t_DeepModelTy'0) : ()
  
  axiom refl'0_spec : forall x : t_DeepModelTy'0 . [%#sord41] cmp_log'0 x x = C_Equal'0
  
  function gt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_gt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_gt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord40] gt_log'0 x y
  = (cmp_log'0 x y = C_Greater'0)
  
  function ge_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_ge_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_ge_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord39] ge_log'0 x y
  = (cmp_log'0 x y <> C_Less'0)
  
  function lt_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_lt_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_lt_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord38] lt_log'0 x y
  = (cmp_log'0 x y = C_Less'0)
  
  function le_log'0 (self : t_DeepModelTy'0) (o : t_DeepModelTy'0) : bool
  
  function cmp_le_log'0 (x : t_DeepModelTy'0) (y : t_DeepModelTy'0) : ()
  
  axiom cmp_le_log'0_spec : forall x : t_DeepModelTy'0, y : t_DeepModelTy'0 . [%#sord37] le_log'0 x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  predicate inv'2 (_1 : usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : usize [inv'2 x] . inv'2 x = true
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq t_T'0) =
    [%#sslice50] UIntSize.to_int self < Seq.length seq
  
  predicate invariant'1 (self : t_T'0) =
    [%#sinvariant54] inv'0 self
  
  predicate inv'3 (_1 : t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_T'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice51] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] [%#smod21] inv'1 self}
    {[@expl:index 'index' type invariant] [%#smod22] inv'2 index}
    {[@expl:index requires] [%#svec23] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:t_T'0)-> {[%#smod24] inv'3 result}
      {[%#svec25] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
    
  
  function deep_model'3 (self : t_T'0) : t_DeepModelTy'0 =
    [%#smodel20] deep_model'0 self
  
  let rec gt'0 (self:t_T'0) (other:t_T'0) (return'  (ret:bool))= {[@expl:gt 'self' type invariant] [%#scmp26] inv'3 self}
    {[@expl:gt 'other' type invariant] [%#scmp27] inv'3 other}
    any
    [ return' (result:bool)-> {[%#scmp28] result = gt_log'0 (deep_model'3 self) (deep_model'3 other)}
      (! return' {result}) ]
    
  
  let rec cmp'0 (self:t_T'0) (other:t_T'0) (return'  (ret:t_Ordering'0))= {[@expl:cmp 'self' type invariant] [%#scmp29] inv'3 self}
    {[@expl:cmp 'other' type invariant] [%#scmp30] inv'3 other}
    any
    [ return' (result:t_Ordering'0)-> {[%#scmp31] result = cmp_log'0 (deep_model'0 self) (deep_model'0 other)}
      (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  predicate sorted_range'0 [#"05_binary_search_generic.rs" 9 0 9 63] (s : Seq.seq t_DeepModelTy'0) (l : int) (u : int) =
    [%#s05_binary_search_generic52] forall i : int, j : int . l <= i /\ i <= j /\ j < u
     -> le_log'0 (Seq.get s i) (Seq.get s j)
  
  predicate sorted'0 [#"05_binary_search_generic.rs" 16 0 16 41] (s : Seq.seq t_DeepModelTy'0) =
    [%#s05_binary_search_generic33] sorted_range'0 s 0 (Seq.length s)
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search'0 (arr:t_Vec'0) (elem:t_T'0) (return'  (ret:t_Result'0))= {[@expl:binary_search 'arr' type invariant] [%#s05_binary_search_generic10] inv'1 arr}
    {[@expl:binary_search 'elem' type invariant] [%#s05_binary_search_generic11] inv'0 elem}
    {[@expl:binary_search requires #0] [%#s05_binary_search_generic12] Seq.length (view'0 arr)
    <= UIntSize.to_int (v_MAX'0 : usize)}
    {[@expl:binary_search requires #1] [%#s05_binary_search_generic13] sorted'0 (deep_model'1 arr)}
    (! bb0
    [ bb0 = bb1
    | bb1 = bb2
    | bb2 = bb3
    | bb3 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &_10 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 = UIntSize.eq {_10} {[%#s05_binary_search_generic0] (0 : usize)} (fun (_ret':bool) ->  [ &_9 <- _ret' ] s1)
      | s1 = any [ br0 -> {_9 = false} (! bb6) | br1 -> {_9} (! bb5) ]  ]
      
    | bb5 = s0
      [ s0 = {[@expl:type invariant] inv'0 elem} s1
      | s1 = -{resolve'0 elem}- s2
      | s2 =  [ &_0 <- C_Err'0 ([%#s05_binary_search_generic1] (0 : usize)) ] s3
      | s3 = bb29 ]
      
    | bb6 = s0 [ s0 = len'0 {arr} (fun (_ret':usize) ->  [ &size <- _ret' ] s1) | s1 = bb7 ] 
    | bb7 = s0 [ s0 =  [ &base <- [%#s05_binary_search_generic2] (0 : usize) ] s1 | s1 = bb8 ] 
    | bb8 = bb8
      [ bb8 = {[@expl:loop invariant #0] [%#s05_binary_search_generic5] 0 < UIntSize.to_int size
        /\ UIntSize.to_int size + UIntSize.to_int base <= Seq.length (view'0 arr)}
        {[@expl:loop invariant #1] [%#s05_binary_search_generic4] forall i : usize . i < base
         -> le_log'0 (Seq.get (deep_model'1 arr) (UIntSize.to_int i)) (deep_model'0 elem)}
        {[@expl:loop invariant #2] [%#s05_binary_search_generic3] forall i : usize . UIntSize.to_int base
        + UIntSize.to_int size
        <= UIntSize.to_int i
        /\ UIntSize.to_int i < Seq.length (view'0 arr)
         -> lt_log'0 (deep_model'0 elem) (Seq.get (deep_model'1 arr) (UIntSize.to_int i))}
        (! s0) [ s0 = bb9 ] 
        [ bb9 = bb10
        | bb10 = bb11
        | bb11 = s0
          [ s0 = UIntSize.gt {size} {[%#s05_binary_search_generic6] (1 : usize)}
              (fun (_ret':bool) ->  [ &_22 <- _ret' ] s1)
          | s1 = any [ br0 -> {_22 = false} (! bb19) | br1 -> {_22} (! bb12) ]  ]
          
        | bb12 = s0
          [ s0 = UIntSize.eq {[%#s05_binary_search_generic7] (2 : usize)} {[%#s05_binary_search_generic8] (0 : usize)}
              (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1)
          | s1 = {[@expl:division by zero] [%#s05_binary_search_generic8] not _26} s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 = UIntSize.div {size} {[%#s05_binary_search_generic7] (2 : usize)}
              (fun (_ret':usize) ->  [ &half <- _ret' ] s1)
          | s1 = UIntSize.add {base} {half} (fun (_ret':usize) ->  [ &mid <- _ret' ] s2)
          | s2 = index'0 {arr} {mid} (fun (_ret':t_T'0) ->  [ &_33 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0 [ s0 = gt'0 {_33} {elem} (fun (_ret':bool) ->  [ &_31 <- _ret' ] s1) | s1 = bb15 ] 
        | bb15 = any [ br0 -> {_31 = false} (! bb17) | br1 -> {_31} (! bb16) ] 
        | bb16 = s0 [ s0 =  [ &_30 <- base ] s1 | s1 = bb18 ] 
        | bb17 = s0 [ s0 =  [ &_30 <- mid ] s1 | s1 = bb18 ] 
        | bb18 = s0
          [ s0 =  [ &base <- _30 ] s1
          | s1 = UIntSize.sub {size} {half} (fun (_ret':usize) ->  [ &size <- _ret' ] s2)
          | s2 = bb8 ]
           ]
         ]
      
    | bb19 = s0 [ s0 = index'0 {arr} {base} (fun (_ret':t_T'0) ->  [ &_40 <- _ret' ] s1) | s1 = bb20 ] 
    | bb20 = s0
      [ s0 =  [ &cmp <- _40 ] s1
      | s1 =  [ &_46 <- elem ] s2
      | s2 = cmp'0 {cmp} {_46} (fun (_ret':t_Ordering'0) ->  [ &_43 <- _ret' ] s3)
      | s3 = bb21 ]
      
    | bb21 = s0
      [ s0 = {[@expl:type invariant] inv'0 elem} s1
      | s1 = -{resolve'0 elem}- s2
      | s2 = any
        [ br0 -> {_43 = C_Less'0 } (! bb24)
        | br1 -> {_43 = C_Equal'0 } (! bb23)
        | br2 -> {_43 = C_Greater'0 } (! bb25) ]
         ]
      
    | bb25 = s0 [ s0 =  [ &_0 <- C_Err'0 base ] s1 | s1 = bb28 ] 
    | bb23 = bb27
    | bb27 = s0 [ s0 =  [ &_0 <- C_Ok'0 base ] s1 | s1 = bb28 ] 
    | bb24 = bb26
    | bb26 = s0
      [ s0 = UIntSize.add {base} {[%#s05_binary_search_generic9] (1 : usize)}
          (fun (_ret':usize) ->  [ &_49 <- _ret' ] s1)
      | s1 =  [ &_0 <- C_Err'0 _49 ] s2
      | s2 = bb28 ]
      
    | bb28 = bb29
    | bb29 = return' {_0} ]
    )
    [ & _0 : t_Result'0 = any_l ()
    | & arr : t_Vec'0 = arr
    | & elem : t_T'0 = elem
    | & _9 : bool = any_l ()
    | & _10 : usize = any_l ()
    | & size : usize = any_l ()
    | & base : usize = any_l ()
    | & _22 : bool = any_l ()
    | & half : usize = any_l ()
    | & _26 : bool = any_l ()
    | & mid : usize = any_l ()
    | & _30 : usize = any_l ()
    | & _31 : bool = any_l ()
    | & _33 : t_T'0 = any_l ()
    | & cmp : t_T'0 = any_l ()
    | & _40 : t_T'0 = any_l ()
    | & _43 : t_Ordering'0 = any_l ()
    | & _46 : t_T'0 = any_l ()
    | & _49 : usize = any_l () ]
    
    [ return' (result:t_Result'0)-> {[@expl:binary_search ensures #0] [%#s05_binary_search_generic14] forall x : usize . result
      = C_Ok'0 x  -> Seq.get (deep_model'1 arr) (UIntSize.to_int x) = deep_model'0 elem}
      {[@expl:binary_search ensures #1] [%#s05_binary_search_generic15] forall x : usize . result = C_Err'0 x
       -> (forall i : usize . i < x  -> le_log'0 (Seq.get (deep_model'1 arr) (UIntSize.to_int i)) (deep_model'0 elem))}
      {[@expl:binary_search ensures #2] [%#s05_binary_search_generic16] forall x : usize . result = C_Err'0 x
       -> (forall i : usize . x <= i /\ UIntSize.to_int i < Seq.length (view'0 arr)
       -> lt_log'0 (deep_model'0 elem) (Seq.get (deep_model'1 arr) (UIntSize.to_int i)))}
      (! return' {result}) ]
    
end
