
module M_08_haystack__search [#"08_haystack.rs" 21 0 21 60]
  let%span s08_haystack0 = "08_haystack.rs" 23 17 23 18
  let%span s08_haystack1 = "08_haystack.rs" 22 4 22 112
  let%span s08_haystack2 = "08_haystack.rs" 22 4 22 112
  let%span s08_haystack3 = "08_haystack.rs" 22 4 22 112
  let%span s08_haystack4 = "08_haystack.rs" 22 4 22 112
  let%span s08_haystack5 = "08_haystack.rs" 25 17 25 18
  let%span s08_haystack6 = "08_haystack.rs" 24 8 24 68
  let%span s08_haystack7 = "08_haystack.rs" 24 8 24 68
  let%span s08_haystack8 = "08_haystack.rs" 24 8 24 68
  let%span s08_haystack9 = "08_haystack.rs" 24 20 24 66
  let%span s08_haystack10 = "08_haystack.rs" 24 8 24 68
  let%span s08_haystack11 = "08_haystack.rs" 15 11 15 65
  let%span s08_haystack12 = "08_haystack.rs" 16 10 16 85
  let%span s08_haystack13 = "08_haystack.rs" 17 0 19 108
  let%span s08_haystack14 = "08_haystack.rs" 20 0 20 139
  let%span svec15 = "../../../../creusot-contracts/src/std/vec.rs" 84 26 84 48
  let%span sops16 = "../../../../creusot-contracts/src/std/ops.rs" 212 26 212 53
  let%span sops17 = "../../../../creusot-contracts/src/std/ops.rs" 213 26 213 49
  let%span sops18 = "../../../../creusot-contracts/src/std/ops.rs" 214 16 214 93
  let%span siter19 = "../../../../creusot-contracts/src/std/iter.rs" 99 0 212 1
  let%span srange20 = "../../../../creusot-contracts/src/std/iter/range.rs" 70 8 76 9
  let%span smodel21 = "../../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span s08_haystack22 = "08_haystack.rs" 8 4 12 5
  let%span siter23 = "../../../../creusot-contracts/src/std/iter.rs" 105 26 108 17
  let%span srange24 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span svec25 = "../../../../creusot-contracts/src/std/vec.rs" 163 27 163 46
  let%span svec26 = "../../../../creusot-contracts/src/std/vec.rs" 164 26 164 54
  let%span snum27 = "../../../../creusot-contracts/src/std/num.rs" 21 16 21 35
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 198 4 198 88
  let%span siter29 = "../../../../creusot-contracts/src/std/iter.rs" 84 20 84 24
  let%span siter30 = "../../../../creusot-contracts/src/std/iter.rs" 90 8 90 19
  let%span srange31 = "../../../../creusot-contracts/src/std/iter/range.rs" 81 14 81 45
  let%span srange32 = "../../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  let%span srange33 = "../../../../creusot-contracts/src/std/iter/range.rs" 86 15 86 32
  let%span srange34 = "../../../../creusot-contracts/src/std/iter/range.rs" 87 15 87 32
  let%span srange35 = "../../../../creusot-contracts/src/std/iter/range.rs" 88 14 88 42
  let%span srange36 = "../../../../creusot-contracts/src/std/iter/range.rs" 84 4 84 10
  let%span srange37 = "../../../../creusot-contracts/src/std/iter/range.rs" 50 10 50 43
  let%span srange38 = "../../../../creusot-contracts/src/std/iter/range.rs" 52 4 55 5
  let%span svec39 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sops40 = "../../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span srange41 = "../../../../creusot-contracts/src/std/iter/range.rs" 63 12 63 57
  let%span sresolve42 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span srange43 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange44 = "../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange45 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange46 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange47 = "../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange48 = "../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange49 = "../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange50 = "../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span srange51 = "../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sslice52 = "../../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice53 = "../../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'3 (_1 : t_Vec'0)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.UInt8
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Int
  
  function view'1 (self : t_Vec'0) : Seq.seq uint8
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec39] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'0 (self : t_Vec'0) : Seq.seq uint8 =
    [%#smodel21] view'1 self
  
  use seq.Seq
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  type t_RangeInclusive'0  =
    { t_RangeInclusive__start'0: usize; t_RangeInclusive__end'0: usize; t_RangeInclusive__exhausted'0: bool }
  
  predicate inv'1 (_1 : t_RangeInclusive'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_RangeInclusive'0 [inv'1 x] . inv'1 x = true
  
  type t_Range'0  =
    { t_Range__start'0: usize; t_Range__end'0: usize }
  
  predicate inv'2 (_1 : t_Range'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Range'0 [inv'2 x] . inv'2 x = true
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : usize)
  
  axiom inv_axiom'4 [@rewrite] : forall x : usize [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : borrowed (t_RangeInclusive'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (t_RangeInclusive'0) [inv'5 x] . inv'5 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 usize
  
  predicate inv'6 (_1 : t_Option'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'0 [inv'6 x] . inv'6 x = true
  
  predicate inv'7 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (t_Range'0) [inv'7 x] . inv'7 x = true
  
  predicate inv'8 (_1 : uint8)
  
  axiom inv_axiom'8 [@rewrite] : forall x : uint8 [inv'8 x] . inv'8 x = true
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:precondition] inv'3 self}
    any
    [ return' (result:usize)-> {[%#svec15] UIntSize.to_int result = Seq.length (view'0 self)} (! return' {result}) ]
    
  
  function start_log'0 (self : t_RangeInclusive'0) : usize
  
  function end_log'0 (self : t_RangeInclusive'0) : usize
  
  function deep_model'0 (self : usize) : int =
    [%#snum27] UIntSize.to_int self
  
  function is_empty_log'0 (self : t_RangeInclusive'0) : bool
  
  axiom is_empty_log'0_spec : forall self : t_RangeInclusive'0 . [%#sops28] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  let rec new'0 (start:usize) (end':usize) (return'  (ret:t_RangeInclusive'0))= {[@expl:precondition] inv'4 end'}
    {[@expl:precondition] inv'4 start}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'1 result}
      {[%#sops18] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      {[%#sops17] end_log'0 result = end'}
      {[%#sops16] start_log'0 result = start}
      (! return' {result}) ]
    
  
  predicate into_iter_pre'0 (self : t_RangeInclusive'0) =
    [%#siter29] true
  
  predicate into_iter_post'0 (self : t_RangeInclusive'0) (res : t_RangeInclusive'0) =
    [%#siter30] self = res
  
  let rec into_iter'0 (self:t_RangeInclusive'0) (return'  (ret:t_RangeInclusive'0))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter19] into_iter_pre'0 self}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'1 result}
      {[%#siter19] into_iter_post'0 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function range_inclusive_len'0 (r : t_RangeInclusive'0) : int =
    [%#srange38] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : t_RangeInclusive'0 . [%#srange37] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  use seq.Seq
  
  predicate produces'0 (self : t_RangeInclusive'0) (visited : Seq.seq usize) (o : t_RangeInclusive'0) =
    [%#srange20] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : uint8 =
    [%#sops40] Seq.get (view'1 self) ix
  
  predicate match_at'0 [#"08_haystack.rs" 7 0 7 77] (needle : t_Vec'0) (haystack : t_Vec'0) (pos : int) (len : int) =
    [%#s08_haystack22] len <= Seq.length (view'0 needle)
    /\ pos <= Seq.length (view'0 haystack) - len
    /\ (forall i : int . 0 <= i /\ i < len  -> index_logic'0 needle i = index_logic'0 haystack (pos + i))
  
  predicate completed'0 (self : borrowed (t_RangeInclusive'0)) =
    [%#srange41] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_RangeInclusive'0)) (return'  (ret:t_Option'0))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:t_Option'0)-> {inv'6 result}
      {[%#siter23] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'2 (self : borrowed (t_RangeInclusive'0)) =
    [%#sresolve42] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_RangeInclusive'0)) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : usize [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use seq.Seq
  
  predicate into_iter_pre'1 (self : t_Range'0) =
    [%#siter29] true
  
  predicate into_iter_post'1 (self : t_Range'0) (res : t_Range'0) =
    [%#siter30] self = res
  
  let rec into_iter'1 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#siter19] into_iter_pre'1 self}
    any [ return' (result:t_Range'0)-> {inv'2 result} {[%#siter19] into_iter_post'1 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  predicate produces'1 (self : t_Range'0) (visited : Seq.seq usize) (o : t_Range'0) =
    [%#srange24] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  predicate resolve'3 (self : borrowed (t_Range'0)) =
    [%#sresolve42] self.final = self.current
  
  predicate completed'1 (self : borrowed (t_Range'0)) =
    [%#srange51] resolve'3 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  let rec next'1 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:precondition] inv'7 self}
    any
    [ return' (result:t_Option'0)-> {inv'6 result}
      {[%#siter23] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'1 (_1 : borrowed (t_Range'0)) =
    resolve'3 _1
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint8) =
    [%#sslice52] UIntSize.to_int self < Seq.length seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq uint8) (out : uint8) =
    [%#sslice53] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:uint8))= {[@expl:precondition] inv'4 index}
    {[@expl:precondition] inv'3 self}
    {[@expl:precondition] [%#svec25] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:uint8)-> {inv'8 result} {[%#svec26] has_value'0 index (view'0 self) result} (! return' {result}) ]
    
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function produces_refl'0 (self : t_RangeInclusive'0) : () =
    [%#srange32] ()
  
  axiom produces_refl'0_spec : forall self : t_RangeInclusive'0 . [%#srange31] produces'0 self (Seq.empty  : Seq.seq usize) self
  
  function produces_trans'0 (a : t_RangeInclusive'0) (ab : Seq.seq usize) (b : t_RangeInclusive'0) (bc : Seq.seq usize) (c : t_RangeInclusive'0) : ()
    
   =
    [%#srange36] ()
  
  axiom produces_trans'0_spec : forall a : t_RangeInclusive'0, ab : Seq.seq usize, b : t_RangeInclusive'0, bc : Seq.seq usize, c : t_RangeInclusive'0 . ([%#srange33] produces'0 a ab b)
   -> ([%#srange34] produces'0 b bc c)  -> ([%#srange35] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_Range'0) : ()
  
  axiom produces_refl'1_spec : forall self : t_Range'0 . ([%#srange43] inv'2 self)
   -> ([%#srange44] produces'1 self (Seq.empty  : Seq.seq usize) self)
  
  function produces_trans'1 (a : t_Range'0) (ab : Seq.seq usize) (b : t_Range'0) (bc : Seq.seq usize) (c : t_Range'0) : ()
    
  
  axiom produces_trans'1_spec : forall a : t_Range'0, ab : Seq.seq usize, b : t_Range'0, bc : Seq.seq usize, c : t_Range'0 . ([%#srange45] inv'2 a)
   -> ([%#srange46] inv'2 b)
   -> ([%#srange47] inv'2 c)
   -> ([%#srange48] produces'1 a ab b)
   -> ([%#srange49] produces'1 b bc c)  -> ([%#srange50] produces'1 a (Seq.(++) ab bc) c)
  
  meta "compute_max_steps" 1000000
  
  let rec search'0 (needle:t_Vec'0) (haystack:t_Vec'0) (return'  (ret:usize))= {[%#s08_haystack11] Seq.length (view'0 needle)
    >= 1
    /\ Seq.length (view'0 needle) <= Seq.length (view'0 haystack)}
    (! bb0
    [ bb0 = s0 [ s0 = len'0 {haystack} (fun (_ret':usize) ->  [ &_12 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {needle} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.sub {_12} {_14} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1)
      | s1 = new'0 {[%#s08_haystack0] (0 : usize)} {_11} (fun (_ret':t_RangeInclusive'0) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = into_iter'0 {_10} (fun (_ret':t_RangeInclusive'0) ->  [ &iter <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0 [ s0 =  [ &iter_old <- [%#s08_haystack1] Snapshot.new iter ] s1 | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &produced <- [%#s08_haystack2] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb6 ] 
    | bb6 = bb7
    | bb7 = bb7
      [ bb7 = {[@expl:loop invariant] [%#s08_haystack3] forall k : int . 0 <= k
        /\ k < Seq.length (Snapshot.inner produced)  -> not match_at'0 needle haystack k (Seq.length (view'0 needle))}
        {[@expl:loop invariant] [%#s08_haystack3] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s08_haystack3] inv'1 iter}
        {[@expl:loop invariant] [%#s08_haystack3] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb8 ] 
        [ bb8 = s0
          [ s0 = Borrow.borrow_mut <t_RangeInclusive'0> {iter}
              (fun (_ret':borrowed (t_RangeInclusive'0)) ->  [ &_27 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_RangeInclusive'0> {_27.current} {Borrow.get_id _27}
              (fun (_ret':borrowed (t_RangeInclusive'0)) ->
                 [ &_26 <- _ret' ] 
                 [ &_27 <- { _27 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_26} (fun (_ret':t_Option'0) ->  [ &_25 <- _ret' ] s3)
          | s3 = bb9 ]
          
        | bb9 = s0
          [ s0 = -{resolve'0 _27}- s1
          | s1 = any [ br0 -> {_25 = C_None'0 } (! bb12) | br1 (x0:usize)-> {_25 = C_Some'0 x0} (! bb11) ]  ]
          
        | bb11 = bb13
        | bb13 = s0
          [ s0 = v_Some'0 {_25} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_30 <- [%#s08_haystack4] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb14 ]
          
        | bb14 = s0
          [ s0 =  [ &produced <- _30 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 {needle} (fun (_ret':usize) ->  [ &_37 <- _ret' ] s3)
          | s3 = bb15 ]
          
        | bb15 = s0
          [ s0 =  [ &_36 <- { t_Range__start'0 = ([%#s08_haystack5] (0 : usize)); t_Range__end'0 = _37 } ] s1
          | s1 = into_iter'1 {_36} (fun (_ret':t_Range'0) ->  [ &iter1 <- _ret' ] s2)
          | s2 = bb16 ]
          
        | bb16 = s0 [ s0 =  [ &iter_old1 <- [%#s08_haystack6] Snapshot.new iter1 ] s1 | s1 = bb17 ] 
        | bb17 = s0
          [ s0 =  [ &produced1 <- [%#s08_haystack7] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb18 ]
          
        | bb18 = bb19
        | bb19 = bb19
          [ bb19 = {[@expl:loop invariant] [%#s08_haystack9] match_at'0 needle haystack (UIntSize.to_int i) (Seq.length (Snapshot.inner produced1))}
            {[@expl:loop invariant] [%#s08_haystack8] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#s08_haystack8] inv'2 iter1}
            {[@expl:loop invariant] [%#s08_haystack8] inv'0 (Snapshot.inner produced1)}
            (! s0) [ s0 = bb20 ] 
            [ bb20 = s0
              [ s0 = Borrow.borrow_mut <t_Range'0> {iter1}
                  (fun (_ret':borrowed (t_Range'0)) ->  [ &_49 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
              | s1 = Borrow.borrow_final <t_Range'0> {_49.current} {Borrow.get_id _49}
                  (fun (_ret':borrowed (t_Range'0)) ->
                     [ &_48 <- _ret' ] 
                     [ &_49 <- { _49 with current = _ret'.final } ] 
                    s2)
              | s2 = next'1 {_48} (fun (_ret':t_Option'0) ->  [ &_47 <- _ret' ] s3)
              | s3 = bb21 ]
              
            | bb21 = s0
              [ s0 = -{resolve'1 _49}- s1
              | s1 = any [ br0 -> {_47 = C_None'0 } (! bb24) | br1 (x0:usize)-> {_47 = C_Some'0 x0} (! bb23) ]  ]
              
            | bb23 = bb25
            | bb25 = s0
              [ s0 = v_Some'0 {_47} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_52 <- [%#s08_haystack10] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb26 ]
              
            | bb26 = s0
              [ s0 =  [ &produced1 <- _52 ] s1
              | s1 =  [ &j <- __creusot_proc_iter_elem1 ] s2
              | s2 = index'0 {needle} {j} (fun (_ret':uint8) ->  [ &_57 <- _ret' ] s3)
              | s3 = bb27 ]
              
            | bb27 = s0
              [ s0 = UIntSize.add {i} {j} (fun (_ret':usize) ->  [ &_63 <- _ret' ] s1)
              | s1 = index'0 {haystack} {_63} (fun (_ret':uint8) ->  [ &_61 <- _ret' ] s2)
              | s2 = bb28 ]
              
            | bb28 = s0
              [ s0 = UInt8.ne {_57} {_61} (fun (_ret':bool) ->  [ &_55 <- _ret' ] s1)
              | s1 = any [ br0 -> {_55 = false} (! bb30) | br1 -> {_55} (! bb29) ]  ]
              
            | bb30 = bb19 ]
             ]
          
        | bb29 = bb7 ]
         ]
      
    | bb24 = s0 [ s0 =  [ &_0 <- i ] s1 | s1 = bb32 ] 
    | bb12 = s0 [ s0 = len'0 {haystack} (fun (_ret':usize) ->  [ &_0 <- _ret' ] s1) | s1 = bb31 ] 
    | bb31 = bb32
    | bb32 = return' {_0} ]
    )
    [ & _0 : usize = any_l ()
    | & needle : t_Vec'0 = needle
    | & haystack : t_Vec'0 = haystack
    | & iter : t_RangeInclusive'0 = any_l ()
    | & _10 : t_RangeInclusive'0 = any_l ()
    | & _11 : usize = any_l ()
    | & _12 : usize = any_l ()
    | & _14 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (t_RangeInclusive'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _25 : t_Option'0 = any_l ()
    | & _26 : borrowed (t_RangeInclusive'0) = any_l ()
    | & _27 : borrowed (t_RangeInclusive'0) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _30 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & iter1 : t_Range'0 = any_l ()
    | & _36 : t_Range'0 = any_l ()
    | & _37 : usize = any_l ()
    | & iter_old1 : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _47 : t_Option'0 = any_l ()
    | & _48 : borrowed (t_Range'0) = any_l ()
    | & _49 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _52 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & j : usize = any_l ()
    | & _55 : bool = any_l ()
    | & _57 : uint8 = any_l ()
    | & _61 : uint8 = any_l ()
    | & _63 : usize = any_l () ]
    
    [ return' (result:usize)-> {[@expl:postcondition] [%#s08_haystack14] UIntSize.to_int result
      = Seq.length (view'0 haystack)
       -> (forall i : int . 0 <= i /\ i < Seq.length (view'0 haystack)
       -> not match_at'0 needle haystack i (Seq.length (view'0 needle)))}
      {[@expl:postcondition] [%#s08_haystack13] UIntSize.to_int result < Seq.length (view'0 haystack)
       -> match_at'0 needle haystack (UIntSize.to_int result) (Seq.length (view'0 needle))
      /\ (forall i : int . 0 <= i /\ i < UIntSize.to_int result
       -> not match_at'0 needle haystack i (Seq.length (view'0 needle)))}
      {[@expl:postcondition] [%#s08_haystack12] UIntSize.to_int result = Seq.length (view'0 haystack)
      \/ UIntSize.to_int result < Seq.length (view'0 haystack) - Seq.length (view'0 needle) + 1}
      (! return' {result}) ]
    
end
