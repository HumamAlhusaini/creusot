
module M_03_knuth_shuffle__knuth_shuffle [#"03_knuth_shuffle.rs" 13 0 13 39]
  let%span s03_knuth_shuffle0 = "03_knuth_shuffle.rs" 14 16 14 31
  let%span s03_knuth_shuffle1 = "03_knuth_shuffle.rs" 17 13 17 14
  let%span s03_knuth_shuffle2 = "03_knuth_shuffle.rs" 16 4 16 43
  let%span s03_knuth_shuffle3 = "03_knuth_shuffle.rs" 16 4 16 43
  let%span s03_knuth_shuffle4 = "03_knuth_shuffle.rs" 16 4 16 43
  let%span s03_knuth_shuffle5 = "03_knuth_shuffle.rs" 16 4 16 43
  let%span s03_knuth_shuffle6 = "03_knuth_shuffle.rs" 21 30 21 31
  let%span s03_knuth_shuffle7 = "03_knuth_shuffle.rs" 22 26 22 27
  let%span s03_knuth_shuffle8 = "03_knuth_shuffle.rs" 13 24 13 25
  let%span s03_knuth_shuffle9 = "03_knuth_shuffle.rs" 12 0 12 36
  let%span svec10 = "../../../../creusot-contracts/src/std/vec.rs" 84 26 84 48
  let%span siter11 = "../../../../creusot-contracts/src/std/iter.rs" 99 0 212 1
  let%span srange12 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span smodel13 = "../../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span ssnapshot14 = "../../../../creusot-contracts/src/snapshot.rs" 26 20 26 39
  let%span sseq15 = "../../../../creusot-contracts/src/logic/seq.rs" 110 8 110 37
  let%span siter16 = "../../../../creusot-contracts/src/std/iter.rs" 105 26 108 17
  let%span s03_knuth_shuffle17 = "03_knuth_shuffle.rs" 6 11 6 19
  let%span s03_knuth_shuffle18 = "03_knuth_shuffle.rs" 7 10 7 40
  let%span svec19 = "../../../../creusot-contracts/src/std/vec.rs" 176 26 176 42
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 177 26 177 48
  let%span sslice21 = "../../../../creusot-contracts/src/std/slice.rs" 257 19 257 35
  let%span sslice22 = "../../../../creusot-contracts/src/std/slice.rs" 258 19 258 35
  let%span sslice23 = "../../../../creusot-contracts/src/std/slice.rs" 259 8 259 52
  let%span svec24 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel25 = "../../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span siter26 = "../../../../creusot-contracts/src/std/iter.rs" 84 20 84 24
  let%span siter27 = "../../../../creusot-contracts/src/std/iter.rs" 90 8 90 19
  let%span srange28 = "../../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange29 = "../../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange30 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange31 = "../../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange32 = "../../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange33 = "../../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange34 = "../../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange35 = "../../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum36 = "../../../../creusot-contracts/src/std/num.rs" 21 16 21 35
  let%span srange37 = "../../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sresolve38 = "../../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sslice39 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice40 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span svec41 = "../../../../creusot-contracts/src/std/vec.rs" 66 20 66 41
  let%span sslice42 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sinvariant43 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant44 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq45 = "../../../../creusot-contracts/src/logic/seq.rs" 184 8 184 97
  let%span sboxed46 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'6 (_1 : t_Vec'0)
  
  use prelude.prelude.UIntSize
  
  type t_T'0
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.Int
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec24] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'3 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel25] view'2 self
  
  use seq.Seq
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  type t_Range'0  =
    { t_Range__start'0: usize; t_Range__end'0: usize }
  
  predicate inv'1 (_1 : t_Range'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Range'0 [inv'1 x] . inv'1 x = true
  
  predicate inv'2 (_1 : t_Vec'0)
  
  predicate inv'9 (_1 : Seq.seq t_T'0)
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec41] inv'9 (view'2 self)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'0 x
  
  use prelude.prelude.Slice
  
  predicate inv'3 (_1 : slice t_T'0)
  
  use prelude.prelude.Slice
  
  function view'6 (self : slice t_T'0) : Seq.seq t_T'0
  
  axiom view'6_spec : forall self : slice t_T'0 . ([%#sslice40] view'6 self = Slice.id self)
  && ([%#sslice39] Seq.length (view'6 self) <= UIntSize.to_int (v_MAX'0 : usize))
  
  predicate invariant'1 (self : slice t_T'0) =
    [%#sslice42] inv'9 (view'6 self)
  
  axiom inv_axiom'3 [@rewrite] : forall x : slice t_T'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate inv'4 (_1 : borrowed (slice t_T'0))
  
  predicate invariant'2 (self : borrowed (slice t_T'0)) =
    [%#sinvariant43] inv'3 self.current /\ inv'3 self.final
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (slice t_T'0) [inv'4 x] . inv'4 x = invariant'2 x
  
  predicate inv'5 (_1 : borrowed (t_Vec'0))
  
  predicate invariant'3 (self : borrowed (t_Vec'0)) =
    [%#sinvariant43] inv'2 self.current /\ inv'2 self.final
  
  axiom inv_axiom'5 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'5 x] . inv'5 x = invariant'3 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant44] inv'2 self
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  predicate inv'7 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'7 [@rewrite] : forall x : borrowed (t_Range'0) [inv'7 x] . inv'7 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 usize
  
  predicate inv'8 (_1 : t_Option'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Option'0 [inv'8 x] . inv'8 x = true
  
  use seq.Seq
  
  predicate inv'10 (_1 : t_T'0)
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq45] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  axiom inv_axiom'9 [@rewrite] : forall x : Seq.seq t_T'0 [inv'9 x] . inv'9 x = invariant'5 x
  
  predicate inv'11 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed46] inv'11 self
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_T'0 [inv'10 x] . inv'10 x = invariant'6 x
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:usize))= {[@expl:precondition] inv'6 self}
    any
    [ return' (result:usize)-> {[%#svec10] UIntSize.to_int result = Seq.length (view'3 self)} (! return' {result}) ]
    
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter26] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter27] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter11] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'1 result} {[%#siter11] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function deep_model'0 (self : usize) : int =
    [%#snum36] UIntSize.to_int self
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq usize) (o : t_Range'0) =
    [%#srange12] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function view'0 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel13] view'2 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'4 (self : borrowed (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel25] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (borrowed (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot14] view'4 (Snapshot.inner self)
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t_T'0) (o : Seq.seq t_T'0) =
    [%#sseq15] Permut.permut self o 0 (Seq.length self)
  
  predicate resolve'3 (self : borrowed (t_Range'0)) =
    [%#sresolve38] self.final = self.current
  
  predicate completed'0 (self : borrowed (t_Range'0)) =
    [%#srange37] resolve'3 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:precondition] inv'7 self}
    any
    [ return' (result:t_Option'0)-> {inv'8 result}
      {[%#siter16] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Range'0)) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : usize [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use seq.Seq
  
  let rec rand_in_range'0 (l:usize) (u:usize) (return'  (ret:usize))= {[@expl:precondition] [%#s03_knuth_shuffle17] UIntSize.to_int l
    <= UIntSize.to_int u}
    any
    [ return' (result:usize)-> {[%#s03_knuth_shuffle18] UIntSize.to_int l <= UIntSize.to_int result
      /\ UIntSize.to_int result < UIntSize.to_int u}
      (! return' {result}) ]
    
  
  function view'5 (self : borrowed (slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel13] view'6 self.current
  
  let rec deref_mut'0 (self:borrowed (t_Vec'0)) (return'  (ret:borrowed (slice t_T'0)))= {[@expl:precondition] inv'5 self}
    any
    [ return' (result:borrowed (slice t_T'0))-> {inv'4 result}
      {[%#svec20] view'6 result.final = view'2 self.final}
      {[%#svec19] view'5 result = view'0 self}
      (! return' {result}) ]
    
  
  use seq.Permut
  
  let rec swap'0 (self:borrowed (slice t_T'0)) (a:usize) (b:usize) (return'  (ret:()))= {[@expl:precondition] inv'4 self}
    {[@expl:precondition] [%#sslice22] UIntSize.to_int b < Seq.length (view'5 self)}
    {[@expl:precondition] [%#sslice21] UIntSize.to_int a < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice23] Permut.exchange (view'6 self.final) (view'5 self) (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  predicate resolve'4 (self : borrowed (slice t_T'0)) =
    [%#sresolve38] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (slice t_T'0)) =
    resolve'4 _1
  
  predicate resolve'5 (self : borrowed (t_Vec'0)) =
    [%#sresolve38] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed (t_Vec'0)) =
    resolve'5 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . ([%#srange28] inv'1 self)
   -> ([%#srange29] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq usize) (b : t_Range'0) (bc : Seq.seq usize) (c : t_Range'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq usize, b : t_Range'0, bc : Seq.seq usize, c : t_Range'0 . ([%#srange30] inv'1 a)
   -> ([%#srange31] inv'1 b)
   -> ([%#srange32] inv'1 c)
   -> ([%#srange33] produces'0 a ab b)
   -> ([%#srange34] produces'0 b bc c)  -> ([%#srange35] produces'0 a (Seq.(++) ab bc) c)
  
  meta "compute_max_steps" 1000000
  
  let rec knuth_shuffle'0 (v:borrowed (t_Vec'0)) (return'  (ret:()))= {[%#s03_knuth_shuffle8] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s03_knuth_shuffle0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {v.current} (fun (_ret':usize) ->  [ &_7 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_6 <- { t_Range__start'0 = ([%#s03_knuth_shuffle1] (0 : usize)); t_Range__end'0 = _7 } ] s1
      | s1 = into_iter'0 {_6} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s03_knuth_shuffle2] Snapshot.new iter ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#s03_knuth_shuffle3] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new v ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:loop invariant] (Snapshot.inner old_6_0).final = v.final}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] permutation_of'0 (view'0 v) (view'1 old_v)}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] inv'1 iter}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = Borrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':borrowed (t_Range'0)) ->  [ &_20 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Range'0> {_20.current} {Borrow.get_id _20}
              (fun (_ret':borrowed (t_Range'0)) ->
                 [ &_19 <- _ret' ] 
                 [ &_20 <- { _20 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_19} (fun (_ret':t_Option'0) ->  [ &_18 <- _ret' ] s3)
          | s3 = bb8 ]
          
        | bb8 = s0
          [ s0 = -{resolve'0 _20}- s1
          | s1 = any [ br0 -> {_18 = C_None'0 } (! bb11) | br1 (x0:usize)-> {_18 = C_Some'0 x0} (! bb10) ]  ]
          
        | bb10 = bb12
        | bb12 = s0
          [ s0 = v_Some'0 {_18} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_23 <- [%#s03_knuth_shuffle5] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
          
        | bb13 = s0
          [ s0 =  [ &produced <- _23 ] s1
          | s1 =  [ &n <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 {v.current} (fun (_ret':usize) ->  [ &_27 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = UIntSize.sub {_27} {n} (fun (_ret':usize) ->  [ &upper <- _ret' ] s1)
          | s1 = rand_in_range'0 {[%#s03_knuth_shuffle6] (0 : usize)} {upper} (fun (_ret':usize) ->  [ &i <- _ret' ] s2)
          | s2 = bb15 ]
          
        | bb15 = s0
          [ s0 = {inv'2 v.current}
            Borrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':borrowed (t_Vec'0)) ->
                 [ &_35 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s1)
          | s1 = deref_mut'0 {_35} (fun (_ret':borrowed (slice t_T'0)) ->  [ &_34 <- _ret' ] s2)
          | s2 = bb16 ]
          
        | bb16 = s0
          [ s0 = {inv'3 _34.current}
            Borrow.borrow_final <slice t_T'0> {_34.current} {Borrow.get_id _34}
              (fun (_ret':borrowed (slice t_T'0)) ->
                 [ &_33 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_34 <- { _34 with current = _ret'.final } ] 
                s1)
          | s1 = UIntSize.sub {upper} {[%#s03_knuth_shuffle7] (1 : usize)} (fun (_ret':usize) ->  [ &_37 <- _ret' ] s2)
          | s2 = swap'0 {_33} {i} {_37} (fun (_ret':()) ->  [ &_32 <- _ret' ] s3)
          | s3 = bb17 ]
          
        | bb17 = s0 [ s0 = {[@expl:type invariant] inv'4 _34} s1 | s1 = -{resolve'1 _34}- s2 | s2 = bb6 ]  ]
         ]
      
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'5 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = any_l ()
    | & v : borrowed (t_Vec'0) = v
    | & old_v : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l ()
    | & iter : t_Range'0 = any_l ()
    | & _6 : t_Range'0 = any_l ()
    | & _7 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _18 : t_Option'0 = any_l ()
    | & _19 : borrowed (t_Range'0) = any_l ()
    | & _20 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _23 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & n : usize = any_l ()
    | & upper : usize = any_l ()
    | & _27 : usize = any_l ()
    | & i : usize = any_l ()
    | & _32 : () = any_l ()
    | & _33 : borrowed (slice t_T'0) = any_l ()
    | & _34 : borrowed (slice t_T'0) = any_l ()
    | & _35 : borrowed (t_Vec'0) = any_l ()
    | & _37 : usize = any_l ()
    | & old_6_0 : Snapshot.snap_ty (borrowed (t_Vec'0)) = any_l () ]
    
    [ return' (result:())-> {[@expl:postcondition] [%#s03_knuth_shuffle9] permutation_of'0 (view'2 v.final) (view'0 v)}
      (! return' {result}) ]
    
end
