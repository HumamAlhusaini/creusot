module M_03_knuth_shuffle__knuth_shuffle [#"03_knuth_shuffle.rs" 13 0 13 39]
  let%span s03_knuth_shuffle0 = "03_knuth_shuffle.rs" 14 16 14 31
  let%span s03_knuth_shuffle1 = "03_knuth_shuffle.rs" 17 13 17 14
  let%span s03_knuth_shuffle2 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle3 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle4 = "03_knuth_shuffle.rs" 16 16 16 41
  let%span s03_knuth_shuffle5 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle6 = "03_knuth_shuffle.rs" 17 4 17 7
  let%span s03_knuth_shuffle7 = "03_knuth_shuffle.rs" 21 30 21 31
  let%span s03_knuth_shuffle8 = "03_knuth_shuffle.rs" 22 26 22 27
  let%span s03_knuth_shuffle9 = "03_knuth_shuffle.rs" 13 24 13 25
  let%span s03_knuth_shuffle10 = "03_knuth_shuffle.rs" 12 10 12 34
  let%span svec11 = "../../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span siter12 = "../../../../creusot-contracts/src/std/iter.rs" 116 0 245 1
  let%span smodel13 = "../../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span ssnapshot14 = "../../../../creusot-contracts/src/snapshot.rs" 52 20 52 39
  let%span sseq15 = "../../../../creusot-contracts/src/logic/seq.rs" 316 8 316 41
  let%span srange16 = "../../../../creusot-contracts/src/std/iter/range.rs" 22 12 26 70
  let%span siter17 = "../../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span s03_knuth_shuffle18 = "03_knuth_shuffle.rs" 6 11 6 19
  let%span s03_knuth_shuffle19 = "03_knuth_shuffle.rs" 7 10 7 40
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 175 26 175 42
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 176 26 176 48
  let%span sslice22 = "../../../../creusot-contracts/src/std/slice.rs" 259 19 259 35
  let%span sslice23 = "../../../../creusot-contracts/src/std/slice.rs" 260 19 260 35
  let%span sslice24 = "../../../../creusot-contracts/src/std/slice.rs" 261 18 261 50
  let%span svec25 = "../../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel26 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span siter27 = "../../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter28 = "../../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange29 = "../../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  let%span srange30 = "../../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  let%span srange31 = "../../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span srange32 = "../../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  let%span snum33 = "../../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span srange34 = "../../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  let%span sresolve35 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span sslice36 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice37 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span svec38 = "../../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sslice39 = "../../../../creusot-contracts/src/std/slice.rs" 18 20 18 30
  let%span sinvariant40 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sinvariant41 = "../../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sseq42 = "../../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed43 = "../../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec25] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  predicate inv'11 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed43] inv'11 self
  
  predicate inv'10 (_1 : t_T'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_T'0 [inv'10 x] . inv'10 x = invariant'6 x
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq42] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'10 (Seq.get self i)
  
  predicate inv'9 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : Seq.seq t_T'0 [inv'9 x] . inv'9 x = invariant'5 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec38] inv'9 (view'2 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'0 x
  
  predicate invariant'4 (self : t_Vec'0) =
    [%#sinvariant41] inv'2 self
  
  predicate inv'6 (_1 : t_Vec'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'0 [inv'6 x] . inv'6 x = invariant'4 x
  
  function view'3 (self : t_Vec'0) : Seq.seq t_T'0 =
    [%#smodel26] view'2 self
  
  let rec len'0 (self:t_Vec'0) (return'  (ret:UInt64.t))= {[@expl:len 'self' type invariant] inv'6 self}
    any
    [ return' (result:UInt64.t)-> {[%#svec11] UInt64.t'int result = Seq.length (view'3 self)} (! return' {result}) ]
  
  
  type t_Range'0  =
    { t_Range__start'0: UInt64.t; t_Range__end'0: UInt64.t }
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter27] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter28] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] inv'0 self}
    {[@expl:into_iter requires] [%#siter12] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'0 result} {[%#siter12] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.MutBorrow
  
  function view'0 (self : MutBorrow.t (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel13] view'2 self.current
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function view'4 (self : MutBorrow.t (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel26] view'0 self
  
  function view'1 (self : Snapshot.snap_ty (MutBorrow.t (t_Vec'0))) : Seq.seq t_T'0 =
    [%#ssnapshot14] view'4 (Snapshot.inner self)
  
  use seq.Permut
  
  predicate permutation_of'0 (self : Seq.seq t_T'0) (other : Seq.seq t_T'0) =
    [%#sseq15] Permut.permut self other 0 (Seq.length self)
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function deep_model'0 (self : UInt64.t) : int =
    [%#snum33] UInt64.t'int self
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq UInt64.t) (o : t_Range'0) =
    [%#srange16] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq UInt64.t) (b : t_Range'0) (bc : Seq.seq UInt64.t) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq UInt64.t, b : t_Range'0, bc : Seq.seq UInt64.t, c : t_Range'0 . ([%#srange30] produces'0 a ab b)
   -> ([%#srange31] produces'0 b bc c)  -> ([%#srange32] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange29] produces'0 self (Seq.empty : Seq.seq UInt64.t) self
  
  use prelude.prelude.Snapshot
  
  predicate inv'1 (_1 : Seq.seq UInt64.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq UInt64.t [inv'1 x] . inv'1 x = true
  
  predicate inv'7 (_1 : MutBorrow.t (t_Range'0))
  
  axiom inv_axiom'7 [@rewrite] : forall x : MutBorrow.t (t_Range'0) [inv'7 x] . inv'7 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 UInt64.t
  
  predicate inv'8 (_1 : t_Option'0)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Option'0 [inv'8 x] . inv'8 x = true
  
  predicate resolve'3 (self : MutBorrow.t (t_Range'0)) =
    [%#sresolve35] self.final = self.current
  
  predicate completed'0 (self : MutBorrow.t (t_Range'0)) =
    [%#srange34] resolve'3 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'7 self}
    any
    [ return' (result:t_Option'0)-> {inv'8 result}
      {[%#siter17] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t (t_Range'0)) =
    resolve'3 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:UInt64.t))= any
    [ good (field_0:UInt64.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : UInt64.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  let rec rand_in_range'0 (l:UInt64.t) (u:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:rand_in_range requires] [%#s03_knuth_shuffle18] UInt64.t'int l
    <= UInt64.t'int u}
    any
    [ return' (result:UInt64.t)-> {[%#s03_knuth_shuffle19] UInt64.t'int l <= UInt64.t'int result
      /\ UInt64.t'int result < UInt64.t'int u}
      (! return' {result}) ]
  
  
  predicate invariant'3 (self : MutBorrow.t (t_Vec'0)) =
    [%#sinvariant40] inv'2 self.current /\ inv'2 self.final
  
  predicate inv'5 (_1 : MutBorrow.t (t_Vec'0))
  
  axiom inv_axiom'5 [@rewrite] : forall x : MutBorrow.t (t_Vec'0) [inv'5 x] . inv'5 x = invariant'3 x
  
  use prelude.slice.Slice64
  
  use prelude.slice.Slice64
  
  function view'6 (self : Slice64.slice t_T'0) : Seq.seq t_T'0
  
  axiom view'6_spec : forall self : Slice64.slice t_T'0 . ([%#sslice36] Seq.length (view'6 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice37] view'6 self = Slice64.id self)
  
  predicate invariant'1 (self : Slice64.slice t_T'0) =
    [%#sslice39] inv'9 (view'6 self)
  
  predicate inv'3 (_1 : Slice64.slice t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Slice64.slice t_T'0 [inv'3 x] . inv'3 x = invariant'1 x
  
  predicate invariant'2 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sinvariant40] inv'3 self.current /\ inv'3 self.final
  
  predicate inv'4 (_1 : MutBorrow.t (Slice64.slice t_T'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t (Slice64.slice t_T'0) [inv'4 x] . inv'4 x = invariant'2 x
  
  function view'5 (self : MutBorrow.t (Slice64.slice t_T'0)) : Seq.seq t_T'0 =
    [%#smodel13] view'6 self.current
  
  let rec deref_mut'0 (self:MutBorrow.t (t_Vec'0)) (return'  (ret:MutBorrow.t (Slice64.slice t_T'0)))= {[@expl:deref_mut 'self' type invariant] inv'5 self}
    any
    [ return' (result:MutBorrow.t (Slice64.slice t_T'0))-> {inv'4 result}
      {[%#svec20] view'5 result = view'0 self}
      {[%#svec21] view'6 result.final = view'2 self.final}
      (! return' {result}) ]
  
  
  use seq.Permut
  
  let rec swap'0 (self:MutBorrow.t (Slice64.slice t_T'0)) (a:UInt64.t) (b:UInt64.t) (return'  (ret:()))= {[@expl:swap 'self' type invariant] inv'4 self}
    {[@expl:swap requires #0] [%#sslice22] UInt64.t'int a < Seq.length (view'5 self)}
    {[@expl:swap requires #1] [%#sslice23] UInt64.t'int b < Seq.length (view'5 self)}
    any
    [ return' (result:())-> {[%#sslice24] Permut.exchange (view'6 self.final) (view'5 self) (UInt64.t'int a) (UInt64.t'int b)}
      (! return' {result}) ]
  
  
  predicate resolve'4 (self : MutBorrow.t (Slice64.slice t_T'0)) =
    [%#sresolve35] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t (Slice64.slice t_T'0)) =
    resolve'4 _1
  
  predicate resolve'5 (self : MutBorrow.t (t_Vec'0)) =
    [%#sresolve35] self.final = self.current
  
  predicate resolve'2 (_1 : MutBorrow.t (t_Vec'0)) =
    resolve'5 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec knuth_shuffle'0[#"03_knuth_shuffle.rs" 13 0 13 39] (v:MutBorrow.t (t_Vec'0)) (return'  (ret:()))= {[@expl:knuth_shuffle 'v' type invariant] [%#s03_knuth_shuffle9] inv'5 v}
    (! bb0
    [ bb0 = s0 [ s0 =  [ &old_v <- [%#s03_knuth_shuffle0] Snapshot.new v ] s1 | s1 = bb1 ] 
    | bb1 = s0 [ s0 = len'0 {v.current} (fun (_ret':UInt64.t) ->  [ &_7 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 =  [ &_6 <- { t_Range__start'0 = ([%#s03_knuth_shuffle1] (0 : UInt64.t)); t_Range__end'0 = _7 } ] s1
      | s1 = into_iter'0 {_6} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb3 ]
    
    | bb3 = s0 [ s0 =  [ &iter_old <- [%#s03_knuth_shuffle2] Snapshot.new iter ] s1 | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &produced <- [%#s03_knuth_shuffle3] Snapshot.new (Seq.empty : Seq.seq UInt64.t) ] s1 | s1 = bb5 ]
    
    | bb5 = s0 [ s0 =  [ &old_6_0 <- Snapshot.new v ] s1 | s1 = bb6 ] 
    | bb6 = bb6
      [ bb6 = {[@expl:mut invariant] (Snapshot.inner old_6_0).final = v.final}
        {[@expl:for invariant] [%#s03_knuth_shuffle5] inv'1 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#s03_knuth_shuffle5] inv'0 iter}
        {[@expl:for invariant] [%#s03_knuth_shuffle5] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s03_knuth_shuffle4] permutation_of'0 (view'0 v) (view'1 old_v)}
        (! s0) [ s0 = bb7 ] 
        [ bb7 = s0
          [ s0 = MutBorrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':MutBorrow.t (t_Range'0)) ->  [ &_21 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = MutBorrow.borrow_final <t_Range'0> {_21.current} {MutBorrow.get_id _21}
              (fun (_ret':MutBorrow.t (t_Range'0)) ->
                 [ &_20 <- _ret' ] 
                 [ &_21 <- { _21 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_20} (fun (_ret':t_Option'0) ->  [ &_19 <- _ret' ] s3)
          | s3 = bb8 ]
        
        | bb8 = s0
          [ s0 = -{resolve'0 _21}- s1
          | s1 = any [ br0 -> {_19 = C_None'0 } (! bb11) | br1 (x0:UInt64.t)-> {_19 = C_Some'0 x0} (! bb10) ]  ]
        
        | bb10 = bb12
        | bb12 = s0
          [ s0 = v_Some'0 {_19} (fun (r0'0:UInt64.t) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_24 <- [%#s03_knuth_shuffle6] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 =  [ &produced <- _24 ] s1
          | s1 =  [ &n <- __creusot_proc_iter_elem ] s2
          | s2 = len'0 {v.current} (fun (_ret':UInt64.t) ->  [ &_28 <- _ret' ] s3)
          | s3 = bb14 ]
        
        | bb14 = s0
          [ s0 = UInt64.sub {_28} {n} (fun (_ret':UInt64.t) ->  [ &upper <- _ret' ] s1)
          | s1 = rand_in_range'0 {[%#s03_knuth_shuffle7] (0 : UInt64.t)} {upper}
              (fun (_ret':UInt64.t) ->  [ &i <- _ret' ] s2)
          | s2 = bb15 ]
        
        | bb15 = s0
          [ s0 = {inv'2 v.current}
            MutBorrow.borrow_mut <t_Vec'0> {v.current}
              (fun (_ret':MutBorrow.t (t_Vec'0)) ->
                 [ &_36 <- _ret' ] 
                -{inv'2 _ret'.final}-
                 [ &v <- { v with current = _ret'.final } ] 
                s1)
          | s1 = deref_mut'0 {_36} (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->  [ &_35 <- _ret' ] s2)
          | s2 = bb16 ]
        
        | bb16 = s0
          [ s0 = {inv'3 _35.current}
            MutBorrow.borrow_final <Slice64.slice t_T'0> {_35.current} {MutBorrow.get_id _35}
              (fun (_ret':MutBorrow.t (Slice64.slice t_T'0)) ->
                 [ &_34 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &_35 <- { _35 with current = _ret'.final } ] 
                s1)
          | s1 = UInt64.sub {upper} {[%#s03_knuth_shuffle8] (1 : UInt64.t)}
              (fun (_ret':UInt64.t) ->  [ &_38 <- _ret' ] s2)
          | s2 = swap'0 {_34} {i} {_38} (fun (_ret':()) ->  [ &_33 <- _ret' ] s3)
          | s3 = bb17 ]
        
        | bb17 = s0 [ s0 = {[@expl:type invariant] inv'4 _35} s1 | s1 = -{resolve'1 _35}- s2 | s2 = bb6 ]  ]
       ]
    
    | bb11 = s0 [ s0 = {[@expl:type invariant] inv'5 v} s1 | s1 = -{resolve'2 v}- s2 | s2 = return' {_0} ]  ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & v : MutBorrow.t (t_Vec'0) = v
    | & old_v : Snapshot.snap_ty (MutBorrow.t (t_Vec'0)) = Intrinsic.any_l ()
    | & iter : t_Range'0 = Intrinsic.any_l ()
    | & _6 : t_Range'0 = Intrinsic.any_l ()
    | & _7 : UInt64.t = Intrinsic.any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = Intrinsic.any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq UInt64.t) = Intrinsic.any_l ()
    | & _19 : t_Option'0 = Intrinsic.any_l ()
    | & _20 : MutBorrow.t (t_Range'0) = Intrinsic.any_l ()
    | & _21 : MutBorrow.t (t_Range'0) = Intrinsic.any_l ()
    | & __creusot_proc_iter_elem : UInt64.t = Intrinsic.any_l ()
    | & _24 : Snapshot.snap_ty (Seq.seq UInt64.t) = Intrinsic.any_l ()
    | & n : UInt64.t = Intrinsic.any_l ()
    | & upper : UInt64.t = Intrinsic.any_l ()
    | & _28 : UInt64.t = Intrinsic.any_l ()
    | & i : UInt64.t = Intrinsic.any_l ()
    | & _33 : () = Intrinsic.any_l ()
    | & _34 : MutBorrow.t (Slice64.slice t_T'0) = Intrinsic.any_l ()
    | & _35 : MutBorrow.t (Slice64.slice t_T'0) = Intrinsic.any_l ()
    | & _36 : MutBorrow.t (t_Vec'0) = Intrinsic.any_l ()
    | & _38 : UInt64.t = Intrinsic.any_l ()
    | & old_6_0 : Snapshot.snap_ty (MutBorrow.t (t_Vec'0)) = Intrinsic.any_l () ]
    
    [ return' (result:())-> {[@expl:knuth_shuffle ensures] [%#s03_knuth_shuffle10] permutation_of'0 (view'2 v.final) (view'0 v)}
      (! return' {result}) ]

end
