module M_sparse_array__qyi1509881402265219485__resolve_coherence [#"sparse_array.rs" 60 4 60 31] (* <Sparse<T> as creusot_contracts::Resolve> *)
  let%span ssparse_array0 = "sparse_array.rs" 57 15 57 24
  let%span ssparse_array1 = "sparse_array.rs" 58 15 58 39
  let%span ssparse_array2 = "sparse_array.rs" 59 14 59 31
  let%span ssparse_array3 = "sparse_array.rs" 56 4 56 23
  let%span ssparse_array4 = "sparse_array.rs" 51 12 51 72
  let%span ssparse_array5 = "sparse_array.rs" 40 12 41 82
  let%span sinvariant6 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span svec7 = "../../../creusot-contracts/src/std/vec.rs" 49 20 49 83
  let%span ssparse_array8 = "sparse_array.rs" 87 20 87 75
  let%span sindex9 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span sresolve10 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span svec11 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span ssparse_array12 = "sparse_array.rs" 68 12 74 68
  let%span svec13 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq14 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed15 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.int.UInt64
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'0;
      t_Sparse__idx'0: t_Vec'1;
      t_Sparse__back'0: t_Vec'1 }
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  type t_T'0
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec11] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  use seq.Seq
  
  function view'1 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'1_spec : forall self : t_Vec'1 . [%#svec11] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
    [%#sindex9] Seq.get (view'1 self) ix
  
  predicate invariant'1 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array12] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'2 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'1 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'1 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'1 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed15] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq14] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec13] inv'3 (view'2 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate inv'1 (_1 : t_Sparse'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Sparse'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> inv'2 values
    end)
  
  predicate invariant'0 (self : t_Sparse'0) =
    [%#sinvariant6] inv'1 self
  
  predicate inv'0 (_1 : t_Sparse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sparse'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  predicate resolve'3 (_1 : UInt64.t) =
    true
  
  predicate resolve'5 (self : t_Vec'1) =
    [%#svec7] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> resolve'3 (index_logic'1 self i)
  
  predicate resolve'1 (_1 : t_Vec'1) =
    resolve'5 _1
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex9] Seq.get (view'2 self) ix
  
  predicate resolve'8 (_1 : t_T'0)
  
  predicate resolve'6 (self : t_Vec'0) =
    [%#svec7] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> resolve'8 (index_logic'0 self i)
  
  predicate resolve'2 (_1 : t_Vec'0) =
    resolve'6 _1
  
  predicate structural_resolve'0 (_1 : t_Sparse'0) =
    match _1 with
      | {t_Sparse__size'0 = x0 ; t_Sparse__n'0 = x1 ; t_Sparse__values'0 = x2 ; t_Sparse__idx'0 = x3 ; t_Sparse__back'0 = x4} -> resolve'1 x4
      /\ resolve'1 x3 /\ resolve'2 x2 /\ resolve'3 x1 /\ resolve'3 x0
      end
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  use seq.Seq
  
  function is_elt'0 [#"sparse_array.rs" 86 4 86 36] (self : t_Sparse'0) (i : int) : bool =
    [%#ssparse_array8] UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i))) = i
  
  use seq.Seq
  
  function view'0 [#"sparse_array.rs" 38 4 38 33] (self : t_Sparse'0) : Seq.seq (t_Option'0) =
    [%#ssparse_array5] Seq.create (UInt64.t'int self.t_Sparse__size'0) (fun (i : int) -> if is_elt'0 self i then
      C_Some'0 (index_logic'0 self.t_Sparse__values'0 i)
    else
      C_None'0
    )
  
  use seq.Seq
  
  predicate resolve'7 (self : t_Option'0) =
    [%#sresolve10] match self with
      | C_Some'0 x -> resolve'8 x
      | C_None'0 -> true
      end
  
  predicate resolve'4 (_1 : t_Option'0) =
    resolve'7 _1
  
  predicate resolve'0 [#"sparse_array.rs" 49 4 49 28] (self : t_Sparse'0) =
    [%#ssparse_array4] forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__size'0
     -> resolve'4 (Seq.get (view'0 self) i)
  
  constant self  : t_Sparse'0
  
  function resolve_coherence'0 [#"sparse_array.rs" 60 4 60 31] (self : t_Sparse'0) : ()
  
  goal vc_resolve_coherence'0 : ([%#ssparse_array1] structural_resolve'0 self)
   -> ([%#ssparse_array0] inv'0 self)  -> ([%#ssparse_array2] resolve'0 self)
end
module M_sparse_array__qyi16402981711463100202__get [#"sparse_array.rs" 101 4 101 45] (* Sparse<T> *)
  let%span ssparse_array0 = "sparse_array.rs" 101 16 101 20
  let%span ssparse_array1 = "sparse_array.rs" 92 15 92 31
  let%span ssparse_array2 = "sparse_array.rs" 101 35 101 45
  let%span ssparse_array3 = "sparse_array.rs" 93 14 96 5
  let%span ssparse_array4 = "sparse_array.rs" 97 14 100 5
  let%span svec5 = "../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec6 = "../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span smodel7 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice8 = "../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  let%span sslice9 = "../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  let%span ssparse_array10 = "sparse_array.rs" 40 12 41 82
  let%span svec11 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sinvariant12 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span ssparse_array13 = "sparse_array.rs" 87 20 87 75
  let%span sindex14 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span ssparse_array15 = "sparse_array.rs" 68 12 74 68
  let%span svec16 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq17 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed18 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.int.UInt64
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'1;
      t_Sparse__idx'0: t_Vec'0;
      t_Sparse__back'0: t_Vec'0 }
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = true
  
  predicate inv'3 (_1 : UInt64.t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : UInt64.t [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  function view'4 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'4_spec : forall self : t_Vec'0 . [%#svec11] Seq.length (view'4 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'1 (self : t_Vec'0) : Seq.seq UInt64.t =
    [%#smodel7] view'4 self
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice8] UInt64.t'int self < Seq.length seq
  
  predicate inv'4 (_1 : UInt64.t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : UInt64.t [inv'4 x] . inv'4 x = true
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice9] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index 'self' type invariant] inv'2 self}
    {[@expl:index 'index' type invariant] inv'3 index}
    {[@expl:index requires] [%#svec5] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:UInt64.t)-> {inv'4 result}
      {[%#svec6] has_value'0 index (view'1 self) result}
      (! return' {result}) ]
  
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  function view'5 (self : t_Vec'1) : Seq.seq t_T'0
  
  axiom view'5_spec : forall self : t_Vec'1 . [%#svec11] Seq.length (view'5 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  predicate inv'9 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed18] inv'9 self
  
  predicate inv'11 (_1 : t_T'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_T'0 [inv'11 x] . inv'11 x = invariant'6 x
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq17] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'11 (Seq.get self i)
  
  predicate inv'10 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : Seq.seq t_T'0 [inv'10 x] . inv'10 x = invariant'5 x
  
  predicate invariant'4 (self : t_Vec'1) =
    [%#svec16] inv'10 (view'5 self)
  
  predicate inv'8 (_1 : t_Vec'1)
  
  axiom inv_axiom'8 [@rewrite] : forall x : t_Vec'1 [inv'8 x] . inv'8 x = invariant'4 x
  
  predicate invariant'1 (self : t_Vec'1) =
    [%#sinvariant12] inv'8 self
  
  predicate inv'5 (_1 : t_Vec'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Vec'1 [inv'5 x] . inv'5 x = invariant'1 x
  
  function view'2 (self : t_Vec'1) : Seq.seq t_T'0 =
    [%#smodel7] view'5 self
  
  predicate in_bounds'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) =
    [%#sslice8] UInt64.t'int self < Seq.length seq
  
  predicate invariant'2 (self : t_T'0) =
    [%#sinvariant12] inv'9 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'2 x
  
  use seq.Seq
  
  predicate has_value'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice9] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'1 (self:t_Vec'1) (index:UInt64.t) (return'  (ret:t_T'0))= {[@expl:index 'self' type invariant] inv'5 self}
    {[@expl:index 'index' type invariant] inv'3 index}
    {[@expl:index requires] [%#svec5] in_bounds'1 index (view'2 self)}
    any
    [ return' (result:t_T'0)-> {inv'6 result} {[%#svec6] has_value'1 index (view'2 self) result} (! return' {result}) ]
  
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  use prelude.prelude.Any
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt64.t =
    [%#sindex14] Seq.get (view'4 self) ix
  
  predicate invariant'3 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array15] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'5 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'4 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'4 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'1 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  predicate inv'7 (_1 : t_Sparse'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Sparse'0 [inv'7 x] . inv'7 x
  = (invariant'3 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> inv'8 values
    end)
  
  predicate invariant'0 (self : t_Sparse'0) =
    [%#sinvariant12] inv'7 self
  
  predicate inv'0 (_1 : t_Sparse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sparse'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 t_T'0
  
  use seq.Seq
  
  function is_elt'0 [#"sparse_array.rs" 86 4 86 36] (self : t_Sparse'0) (i : int) : bool =
    [%#ssparse_array13] UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i))) = i
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : t_T'0 =
    [%#sindex14] Seq.get (view'5 self) ix
  
  use seq.Seq
  
  function view'3 [#"sparse_array.rs" 38 4 38 33] (self : t_Sparse'0) : Seq.seq (t_Option'1) =
    [%#ssparse_array10] Seq.create (UInt64.t'int self.t_Sparse__size'0) (fun (i : int) -> if is_elt'0 self i then
      C_Some'1 (index_logic'0 self.t_Sparse__values'0 i)
    else
      C_None'1
    )
  
  function view'0 (self : t_Sparse'0) : Seq.seq (t_Option'1) =
    [%#smodel7] view'3 self
  
  use seq.Seq
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x
  = match x with
    | C_None'0 -> true
    | C_Some'0 a_0 -> inv'6 a_0
    end
  
  use seq.Seq
  
  meta "compute_max_steps" 1000000
  
  let rec get'0[#"sparse_array.rs" 101 4 101 45] (self:t_Sparse'0) (i:UInt64.t) (return'  (ret:t_Option'0))= {[@expl:get 'self' type invariant] [%#ssparse_array0] inv'0 self}
    {[@expl:get requires] [%#ssparse_array1] UInt64.t'int i < Seq.length (view'0 self)}
    (! bb0
    [ bb0 = s0 [ s0 = index'0 {self.t_Sparse__idx'0} {i} (fun (_ret':UInt64.t) ->  [ &_7 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 =  [ &index <- _7 ] s1
      | s1 =  [ &_10 <- UInt64.lt index self.t_Sparse__n'0 ] s2
      | s2 = any [ br0 -> {_10 = false} (! bb7) | br1 -> {_10} (! bb2) ]  ]
    
    | bb2 = s0
      [ s0 = index'0 {self.t_Sparse__back'0} {index} (fun (_ret':UInt64.t) ->  [ &_15 <- _ret' ] s1) | s1 = bb3 ]
    
    | bb3 = s0 [ s0 =  [ &_13 <- _15 = i ] s1 | s1 = any [ br0 -> {_13 = false} (! bb6) | br1 -> {_13} (! bb4) ]  ] 
    | bb4 = s0 [ s0 = index'1 {self.t_Sparse__values'0} {i} (fun (_ret':t_T'0) ->  [ &_21 <- _ret' ] s1) | s1 = bb5 ] 
    | bb5 = s0 [ s0 =  [ &_20 <- _21 ] s1 | s1 =  [ &_0 <- C_Some'0 _20 ] s2 | s2 = bb9 ] 
    | bb6 = bb8
    | bb7 = bb8
    | bb8 = s0 [ s0 =  [ &_0 <- C_None'0 ] s1 | s1 = bb9 ] 
    | bb9 = return' {_0} ]
    )
    [ & _0 : t_Option'0 = Any.any_l ()
    | & self : t_Sparse'0 = self
    | & i : UInt64.t = i
    | & index : UInt64.t = Any.any_l ()
    | & _7 : UInt64.t = Any.any_l ()
    | & _10 : bool = Any.any_l ()
    | & _13 : bool = Any.any_l ()
    | & _15 : UInt64.t = Any.any_l ()
    | & _20 : t_T'0 = Any.any_l ()
    | & _21 : t_T'0 = Any.any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:get result type invariant] [%#ssparse_array2] inv'1 result}
      {[@expl:get ensures #0] [%#ssparse_array3] match result with
        | C_None'0 -> Seq.get (view'0 self) (UInt64.t'int i) = C_None'1
        | C_Some'0 x -> Seq.get (view'0 self) (UInt64.t'int i) = C_Some'1 x
        end}
      {[@expl:get ensures #1] [%#ssparse_array4] match Seq.get (view'0 self) (UInt64.t'int i) with
        | C_None'1 -> result = C_None'0
        | C_Some'1 _ -> true
        end}
      (! return' {result}) ]

end
module M_sparse_array__qyi16402981711463100202__lemma_permutation [#"sparse_array.rs" 117 4 117 38] (* Sparse<T> *)
  let%span ssparse_array0 = "sparse_array.rs" 113 15 113 24
  let%span ssparse_array1 = "sparse_array.rs" 114 15 114 34
  let%span ssparse_array2 = "sparse_array.rs" 115 15 115 39
  let%span ssparse_array3 = "sparse_array.rs" 116 14 116 28
  let%span ssparse_array4 = "sparse_array.rs" 123 15 123 24
  let%span ssparse_array5 = "sparse_array.rs" 124 15 124 34
  let%span ssparse_array6 = "sparse_array.rs" 125 15 125 43
  let%span ssparse_array7 = "sparse_array.rs" 126 15 128 47
  let%span ssparse_array8 = "sparse_array.rs" 129 15 129 78
  let%span ssparse_array9 = "sparse_array.rs" 130 15 130 34
  let%span ssparse_array10 = "sparse_array.rs" 131 14 131 48
  let%span ssparse_array11 = "sparse_array.rs" 132 14 132 37
  let%span ssparse_array12 = "sparse_array.rs" 122 14 122 37
  let%span ssparse_array13 = "sparse_array.rs" 118 8 118 53
  let%span ssparse_array14 = "sparse_array.rs" 87 20 87 75
  let%span ssparse_array15 = "sparse_array.rs" 134 8 141 9
  let%span sfset16 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  let%span sindex17 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span ssparse_array18 = "sparse_array.rs" 146 15 146 65
  let%span ssparse_array19 = "sparse_array.rs" 147 15 147 23
  let%span ssparse_array20 = "sparse_array.rs" 148 14 148 28
  let%span ssparse_array21 = "sparse_array.rs" 145 14 145 17
  let%span ssparse_array22 = "sparse_array.rs" 150 8 152 9
  let%span sfset23 = "../../../creusot-contracts/src/logic/fset.rs" 66 8 66 26
  let%span svec24 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span ssparse_array25 = "sparse_array.rs" 68 12 74 68
  let%span sfset26 = "../../../creusot-contracts/src/logic/fset.rs" 93 8 93 26
  let%span svec27 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq28 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed29 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.int.UInt64
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'0;
      t_Sparse__idx'0: t_Vec'1;
      t_Sparse__back'0: t_Vec'1 }
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  type t_T'0
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec24] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  use seq.Seq
  
  function view'0 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'1 . [%#svec24] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
    [%#sindex17] Seq.get (view'0 self) ix
  
  predicate invariant'0 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array25] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'1 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'0 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'0 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'0 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate invariant'3 (self : t_T'0) =
    [%#sboxed29] inv'4 self
  
  predicate inv'3 (_1 : t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_T'0) =
    [%#sseq28] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : t_Vec'0) =
    [%#svec27] inv'2 (view'1 self)
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'0 (_1 : t_Sparse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sparse'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> inv'1 values
    end)
  
  function is_elt'0 [#"sparse_array.rs" 86 4 86 36] (self : t_Sparse'0) (i : int) : bool =
    [%#ssparse_array14] UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'0 self.t_Sparse__back'0 (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 i))) = i
  
  use set.Fset
  
  use set.Fset
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) =
    [%#sfset16] Fset.mem e self
  
  use set.Fset
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) : Fset.fset (int) =
    [%#sfset26] Fset.remove e self
  
  function bounded_fset_len'0 [#"sparse_array.rs" 149 4 149 47] (s : Fset.fset (int)) (bnd : int) : ()
  
  axiom bounded_fset_len'0_def : forall s : Fset.fset (int), bnd : int . ([%#ssparse_array18] forall x : int . contains'0 s x
   -> 0 <= x /\ x < bnd)
   -> ([%#ssparse_array19] bnd >= 0)
   -> bounded_fset_len'0 s bnd
  = ([%#ssparse_array22] if bnd > 0 then bounded_fset_len'0 (remove'0 s (bnd - 1)) (bnd - 1) else ())
  
  axiom bounded_fset_len'0_spec : forall s : Fset.fset (int), bnd : int . ([%#ssparse_array18] forall x : int . contains'0 s x
   -> 0 <= x /\ x < bnd)  -> ([%#ssparse_array19] bnd >= 0)  -> ([%#ssparse_array20] Fset.cardinal s <= bnd)
  
  use set.Fset
  
  function insert'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) : Fset.fset (int) =
    [%#sfset23] Fset.add e self
  
  function lemma_permutation_aux'0 [#"sparse_array.rs" 133 4 133 76] (self : t_Sparse'0) (seen : Fset.fset (int)) (i : int) (cur : int) : int
  
  
  axiom lemma_permutation_aux'0_def : forall self : t_Sparse'0, seen : Fset.fset (int), i : int, cur : int . ([%#ssparse_array4] inv'0 self)
   -> ([%#ssparse_array5] self.t_Sparse__n'0 = self.t_Sparse__size'0)
   -> ([%#ssparse_array6] 0 <= cur /\ cur < UInt64.t'int self.t_Sparse__size'0)
   -> ([%#ssparse_array7] forall k : int . contains'0 seen k
   -> 0 <= k
  /\ k < UInt64.t'int self.t_Sparse__size'0
  /\ (k = i \/ contains'0 seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 k))))
   -> ([%#ssparse_array8] i = cur
  \/ contains'0 seen i /\ contains'0 seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 cur)))
   -> ([%#ssparse_array9] not contains'0 seen cur)
   -> lemma_permutation_aux'0 self seen i cur
  = ([%#ssparse_array15] if UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur) = i then
    cur
  else
    let _ = bounded_fset_len'0 seen (UInt64.t'int self.t_Sparse__size'0) in lemma_permutation_aux'0 self (insert'0 seen cur) i (UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur))
  )
  
  axiom lemma_permutation_aux'0_spec : forall self : t_Sparse'0, seen : Fset.fset (int), i : int, cur : int . ([%#ssparse_array4] inv'0 self)
   -> ([%#ssparse_array5] self.t_Sparse__n'0 = self.t_Sparse__size'0)
   -> ([%#ssparse_array6] 0 <= cur /\ cur < UInt64.t'int self.t_Sparse__size'0)
   -> ([%#ssparse_array7] forall k : int . contains'0 seen k
   -> 0 <= k
  /\ k < UInt64.t'int self.t_Sparse__size'0
  /\ (k = i \/ contains'0 seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 k))))
   -> ([%#ssparse_array8] i = cur
  \/ contains'0 seen i /\ contains'0 seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 cur)))
   -> ([%#ssparse_array9] not contains'0 seen cur)
   -> ([%#ssparse_array10] 0 <= lemma_permutation_aux'0 self seen i cur
  /\ lemma_permutation_aux'0 self seen i cur < UInt64.t'int self.t_Sparse__size'0)
  && ([%#ssparse_array11] UInt64.t'int (index_logic'0 self.t_Sparse__back'0 (lemma_permutation_aux'0 self seen i cur))
  = i)
  
  constant self  : t_Sparse'0
  
  constant i  : int
  
  function lemma_permutation'0 [#"sparse_array.rs" 117 4 117 38] (self : t_Sparse'0) (i : int) : ()
  
  goal vc_lemma_permutation'0 : ([%#ssparse_array2] 0 <= i /\ i < UInt64.t'int self.t_Sparse__size'0)
   -> ([%#ssparse_array1] self.t_Sparse__n'0 = self.t_Sparse__size'0)
   -> ([%#ssparse_array0] inv'0 self)
   -> (([@expl:lemma_permutation_aux requires #0] [%#ssparse_array4] inv'0 self)
  && ([@expl:lemma_permutation_aux requires #1] [%#ssparse_array5] self.t_Sparse__n'0 = self.t_Sparse__size'0)
  && ([@expl:lemma_permutation_aux requires #2] [%#ssparse_array6] 0 <= i /\ i < UInt64.t'int self.t_Sparse__size'0)
  && ([@expl:lemma_permutation_aux requires #3] [%#ssparse_array7] forall k : int . contains'0 (Fset.empty : Fset.fset (int)) k
   -> 0 <= k
  /\ k < UInt64.t'int self.t_Sparse__size'0
  /\ (k = i \/ contains'0 (Fset.empty : Fset.fset (int)) (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 k))))
  && ([@expl:lemma_permutation_aux requires #4] [%#ssparse_array8] i = i
  \/ contains'0 (Fset.empty : Fset.fset (int)) i
  /\ contains'0 (Fset.empty : Fset.fset (int)) (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 i)))
  && ([@expl:lemma_permutation_aux requires #5] [%#ssparse_array9] not contains'0 (Fset.empty : Fset.fset (int)) i))
  /\ (([%#ssparse_array10] 0 <= lemma_permutation_aux'0 self (Fset.empty : Fset.fset (int)) i i
  /\ lemma_permutation_aux'0 self (Fset.empty : Fset.fset (int)) i i < UInt64.t'int self.t_Sparse__size'0)
  && ([%#ssparse_array11] UInt64.t'int (index_logic'0 self.t_Sparse__back'0 (lemma_permutation_aux'0 self (Fset.empty : Fset.fset (int)) i i))
  = i)
   -> (let _ = lemma_permutation_aux'0 self (Fset.empty : Fset.fset (int)) i i in [%#ssparse_array3] is_elt'0 self i))
end
module M_sparse_array__qyi16402981711463100202__lemma_permutation_aux [#"sparse_array.rs" 133 4 133 76] (* Sparse<T> *)
  let%span ssparse_array0 = "sparse_array.rs" 123 15 123 24
  let%span ssparse_array1 = "sparse_array.rs" 124 15 124 34
  let%span ssparse_array2 = "sparse_array.rs" 125 15 125 43
  let%span ssparse_array3 = "sparse_array.rs" 126 15 128 47
  let%span ssparse_array4 = "sparse_array.rs" 129 15 129 78
  let%span ssparse_array5 = "sparse_array.rs" 130 15 130 34
  let%span ssparse_array6 = "sparse_array.rs" 131 14 131 48
  let%span ssparse_array7 = "sparse_array.rs" 132 14 132 37
  let%span ssparse_array8 = "sparse_array.rs" 122 14 122 37
  let%span ssparse_array9 = "sparse_array.rs" 146 15 146 65
  let%span ssparse_array10 = "sparse_array.rs" 147 15 147 23
  let%span ssparse_array11 = "sparse_array.rs" 148 14 148 28
  let%span ssparse_array12 = "sparse_array.rs" 145 14 145 17
  let%span ssparse_array13 = "sparse_array.rs" 134 8 141 9
  let%span sfset14 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  let%span sindex15 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span ssparse_array16 = "sparse_array.rs" 150 8 152 9
  let%span sfset17 = "../../../creusot-contracts/src/logic/fset.rs" 66 8 66 26
  let%span svec18 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sfset19 = "../../../creusot-contracts/src/logic/fset.rs" 93 8 93 26
  let%span ssparse_array20 = "sparse_array.rs" 68 12 74 68
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq22 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed23 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.int.UInt64
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'1;
      t_Sparse__idx'0: t_Vec'0;
      t_Sparse__back'0: t_Vec'0 }
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  type t_T'0
  
  use seq.Seq
  
  function view'1 (self : t_Vec'1) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : t_Vec'1 . [%#svec18] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq UInt64.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec18] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : UInt64.t =
    [%#sindex15] Seq.get (view'0 self) ix
  
  predicate invariant'0 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array20] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'1 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'0 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'0 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'0 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  use seq.Seq
  
  predicate inv'4 (_1 : t_T'0)
  
  predicate invariant'3 (self : t_T'0) =
    [%#sboxed23] inv'4 self
  
  predicate inv'3 (_1 : t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_T'0) =
    [%#sseq22] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'3 (Seq.get self i)
  
  predicate inv'2 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Seq.seq t_T'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate invariant'1 (self : t_Vec'1) =
    [%#svec21] inv'2 (view'1 self)
  
  predicate inv'1 (_1 : t_Vec'1)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'1 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'0 (_1 : t_Sparse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sparse'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> inv'1 values
    end)
  
  use set.Fset
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) =
    [%#sfset14] Fset.mem e self
  
  use set.Fset
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) : Fset.fset (int) =
    [%#sfset19] Fset.remove e self
  
  function bounded_fset_len'0 [#"sparse_array.rs" 149 4 149 47] (s : Fset.fset (int)) (bnd : int) : ()
  
  axiom bounded_fset_len'0_def : forall s : Fset.fset (int), bnd : int . ([%#ssparse_array9] forall x : int . contains'0 s x
   -> 0 <= x /\ x < bnd)
   -> ([%#ssparse_array10] bnd >= 0)
   -> bounded_fset_len'0 s bnd
  = ([%#ssparse_array16] if bnd > 0 then bounded_fset_len'0 (remove'0 s (bnd - 1)) (bnd - 1) else ())
  
  axiom bounded_fset_len'0_spec : forall s : Fset.fset (int), bnd : int . ([%#ssparse_array9] forall x : int . contains'0 s x
   -> 0 <= x /\ x < bnd)  -> ([%#ssparse_array10] bnd >= 0)  -> ([%#ssparse_array11] Fset.cardinal s <= bnd)
  
  use set.Fset
  
  function insert'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) : Fset.fset (int) =
    [%#sfset17] Fset.add e self
  
  constant self  : t_Sparse'0
  
  constant seen  : Fset.fset (int)
  
  constant i  : int
  
  constant cur  : int
  
  function lemma_permutation_aux'0 [#"sparse_array.rs" 133 4 133 76] (self : t_Sparse'0) (seen : Fset.fset (int)) (i : int) (cur : int) : int
  
  
  goal vc_lemma_permutation_aux'0 : ([%#ssparse_array5] not contains'0 seen cur)
   -> ([%#ssparse_array4] i = cur
  \/ contains'0 seen i /\ contains'0 seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 cur)))
   -> ([%#ssparse_array3] forall k : int . contains'0 seen k
   -> 0 <= k
  /\ k < UInt64.t'int self.t_Sparse__size'0
  /\ (k = i \/ contains'0 seen (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 k))))
   -> ([%#ssparse_array2] 0 <= cur /\ cur < UInt64.t'int self.t_Sparse__size'0)
   -> ([%#ssparse_array1] self.t_Sparse__n'0 = self.t_Sparse__size'0)
   -> ([%#ssparse_array0] inv'0 self)
   -> (if UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur) = i then
    let result = cur in ([%#ssparse_array6] 0 <= result /\ result < UInt64.t'int self.t_Sparse__size'0)
    && ([%#ssparse_array7] UInt64.t'int (index_logic'0 self.t_Sparse__back'0 result) = i)
  else
    (([@expl:bounded_fset_len requires #0] [%#ssparse_array9] forall x : int . contains'0 seen x
     -> 0 <= x /\ x < UInt64.t'int self.t_Sparse__size'0)
    && ([@expl:bounded_fset_len requires #1] [%#ssparse_array10] UInt64.t'int self.t_Sparse__size'0 >= 0))
    /\ (([%#ssparse_array11] Fset.cardinal seen <= UInt64.t'int self.t_Sparse__size'0)
     -> (let _ = bounded_fset_len'0 seen (UInt64.t'int self.t_Sparse__size'0) in ((([@expl:lemma_permutation_aux requires #0] [%#ssparse_array0] inv'0 self)
    && ([@expl:lemma_permutation_aux requires #1] [%#ssparse_array1] self.t_Sparse__n'0 = self.t_Sparse__size'0)
    && ([@expl:lemma_permutation_aux requires #2] [%#ssparse_array2] 0
    <= UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur)
    /\ UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur) < UInt64.t'int self.t_Sparse__size'0)
    && ([@expl:lemma_permutation_aux requires #3] [%#ssparse_array3] forall k : int . contains'0 (insert'0 seen cur) k
     -> 0 <= k
    /\ k < UInt64.t'int self.t_Sparse__size'0
    /\ (k = i \/ contains'0 (insert'0 seen cur) (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 k))))
    && ([@expl:lemma_permutation_aux requires #4] [%#ssparse_array4] i
    = UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur)
    \/ contains'0 (insert'0 seen cur) i
    /\ contains'0 (insert'0 seen cur) (UInt64.t'int (index_logic'0 self.t_Sparse__idx'0 (UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur)))))
    && ([@expl:lemma_permutation_aux requires #5] [%#ssparse_array5] not contains'0 (insert'0 seen cur) (UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur))))
    /\ 0 <= ([%#ssparse_array8] UInt64.t'int self.t_Sparse__size'0 - Fset.cardinal seen)
    /\ ([%#ssparse_array8] UInt64.t'int self.t_Sparse__size'0 - Fset.cardinal (insert'0 seen cur))
    < ([%#ssparse_array8] UInt64.t'int self.t_Sparse__size'0 - Fset.cardinal seen))
    /\ (([%#ssparse_array6] 0
    <= lemma_permutation_aux'0 self (insert'0 seen cur) i (UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur))
    /\ lemma_permutation_aux'0 self (insert'0 seen cur) i (UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur))
    < UInt64.t'int self.t_Sparse__size'0)
    && ([%#ssparse_array7] UInt64.t'int (index_logic'0 self.t_Sparse__back'0 (lemma_permutation_aux'0 self (insert'0 seen cur) i (UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur))))
    = i)
     -> (let result = lemma_permutation_aux'0 self (insert'0 seen cur) i (UInt64.t'int (index_logic'0 self.t_Sparse__back'0 cur)) in ([%#ssparse_array6] 0
    <= result
    /\ result < UInt64.t'int self.t_Sparse__size'0)
    && ([%#ssparse_array7] UInt64.t'int (index_logic'0 self.t_Sparse__back'0 result) = i)))))
  )
end
module M_sparse_array__qyi16402981711463100202__bounded_fset_len [#"sparse_array.rs" 149 4 149 47] (* Sparse<T> *)
  let%span ssparse_array0 = "sparse_array.rs" 146 15 146 65
  let%span ssparse_array1 = "sparse_array.rs" 147 15 147 23
  let%span ssparse_array2 = "sparse_array.rs" 148 14 148 28
  let%span ssparse_array3 = "sparse_array.rs" 145 14 145 17
  let%span ssparse_array4 = "sparse_array.rs" 150 8 152 9
  let%span sfset5 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  let%span sfset6 = "../../../creusot-contracts/src/logic/fset.rs" 93 8 93 26
  
  use set.Fset
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) =
    [%#sfset5] Fset.mem e self
  
  use mach.int.Int
  
  use set.Fset
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) : Fset.fset (int) =
    [%#sfset6] Fset.remove e self
  
  constant s  : Fset.fset (int)
  
  constant bnd  : int
  
  function bounded_fset_len'0 [#"sparse_array.rs" 149 4 149 47] (s : Fset.fset (int)) (bnd : int) : ()
  
  goal vc_bounded_fset_len'0 : ([%#ssparse_array1] bnd >= 0)
   -> ([%#ssparse_array0] forall x : int . contains'0 s x  -> 0 <= x /\ x < bnd)
   -> (if bnd > 0 then
    ((([@expl:bounded_fset_len requires #0] [%#ssparse_array0] forall x : int . contains'0 (remove'0 s (bnd - 1)) x
     -> 0 <= x /\ x < bnd - 1)
    && ([@expl:bounded_fset_len requires #1] [%#ssparse_array1] bnd - 1 >= 0))
    /\ 0 <= ([%#ssparse_array3] bnd) /\ ([%#ssparse_array3] bnd - 1) < ([%#ssparse_array3] bnd))
    /\ (([%#ssparse_array2] Fset.cardinal (remove'0 s (bnd - 1)) <= bnd - 1)
     -> ([%#ssparse_array2] Fset.cardinal s <= bnd))
  else
    [%#ssparse_array2] Fset.cardinal s <= bnd
  )
end
module M_sparse_array__qyi16402981711463100202__set [#"sparse_array.rs" 161 4 161 41] (* Sparse<T> *)
  let%span ssparse_array0 = "sparse_array.rs" 166 12 166 46
  let%span ssparse_array1 = "sparse_array.rs" 167 26 167 46
  let%span ssparse_array2 = "sparse_array.rs" 171 22 171 23
  let%span ssparse_array3 = "sparse_array.rs" 161 20 161 24
  let%span ssparse_array4 = "sparse_array.rs" 161 36 161 37
  let%span ssparse_array5 = "sparse_array.rs" 157 15 157 31
  let%span ssparse_array6 = "sparse_array.rs" 158 14 158 43
  let%span ssparse_array7 = "sparse_array.rs" 159 14 159 93
  let%span ssparse_array8 = "sparse_array.rs" 160 14 160 37
  let%span svec9 = "../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span svec10 = "../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec11 = "../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec12 = "../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec13 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec15 = "../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span ssparse_array16 = "sparse_array.rs" 113 15 113 24
  let%span ssparse_array17 = "sparse_array.rs" 114 15 114 34
  let%span ssparse_array18 = "sparse_array.rs" 115 15 115 39
  let%span ssparse_array19 = "sparse_array.rs" 116 14 116 28
  let%span ssparse_array20 = "sparse_array.rs" 118 8 118 53
  let%span smodel21 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span ssparse_array22 = "sparse_array.rs" 40 12 41 82
  let%span sslice23 = "../../../creusot-contracts/src/std/slice.rs" 124 20 124 37
  let%span sslice24 = "../../../creusot-contracts/src/std/slice.rs" 131 20 131 37
  let%span svec25 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sslice26 = "../../../creusot-contracts/src/std/slice.rs" 138 20 138 94
  let%span sresolve27 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel28 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span ssparse_array29 = "sparse_array.rs" 87 20 87 75
  let%span ssparse_array30 = "sparse_array.rs" 123 15 123 24
  let%span ssparse_array31 = "sparse_array.rs" 124 15 124 34
  let%span ssparse_array32 = "sparse_array.rs" 125 15 125 43
  let%span ssparse_array33 = "sparse_array.rs" 126 15 128 47
  let%span ssparse_array34 = "sparse_array.rs" 129 15 129 78
  let%span ssparse_array35 = "sparse_array.rs" 130 15 130 34
  let%span ssparse_array36 = "sparse_array.rs" 131 14 131 48
  let%span ssparse_array37 = "sparse_array.rs" 132 14 132 37
  let%span ssparse_array38 = "sparse_array.rs" 122 14 122 37
  let%span ssparse_array39 = "sparse_array.rs" 134 8 141 9
  let%span sindex40 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span svec41 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant42 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sfset43 = "../../../creusot-contracts/src/logic/fset.rs" 47 8 47 26
  let%span ssparse_array44 = "sparse_array.rs" 146 15 146 65
  let%span ssparse_array45 = "sparse_array.rs" 147 15 147 23
  let%span ssparse_array46 = "sparse_array.rs" 148 14 148 28
  let%span ssparse_array47 = "sparse_array.rs" 145 14 145 17
  let%span ssparse_array48 = "sparse_array.rs" 150 8 152 9
  let%span sfset49 = "../../../creusot-contracts/src/logic/fset.rs" 66 8 66 26
  let%span ssparse_array50 = "sparse_array.rs" 68 12 74 68
  let%span sfset51 = "../../../creusot-contracts/src/logic/fset.rs" 93 8 93 26
  let%span sseq52 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed53 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.MutBorrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  type t_T'0
  
  use seq.Seq
  
  function view'3 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'3_spec : forall self : t_Vec'0 . [%#svec25] Seq.length (view'3 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  predicate inv'1 (_1 : t_T'0)
  
  predicate invariant'6 (self : t_T'0) =
    [%#sboxed53] inv'1 self
  
  predicate inv'12 (_1 : t_T'0)
  
  axiom inv_axiom'11 [@rewrite] : forall x : t_T'0 [inv'12 x] . inv'12 x = invariant'6 x
  
  predicate invariant'5 (self : Seq.seq t_T'0) =
    [%#sseq52] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'12 (Seq.get self i)
  
  predicate inv'11 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'10 [@rewrite] : forall x : Seq.seq t_T'0 [inv'11 x] . inv'11 x = invariant'5 x
  
  predicate invariant'0 (self : t_Vec'0) =
    [%#svec41] inv'11 (view'3 self)
  
  predicate inv'0 (_1 : t_Vec'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Vec'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'0;
      t_Sparse__idx'0: t_Vec'1;
      t_Sparse__back'0: t_Vec'1 }
  
  predicate invariant'3 (self : MutBorrow.t (t_Vec'0)) =
    [%#sinvariant42] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : MutBorrow.t (t_Vec'0))
  
  axiom inv_axiom'3 [@rewrite] : forall x : MutBorrow.t (t_Vec'0) [inv'4 x] . inv'4 x = invariant'3 x
  
  predicate inv'5 (_1 : UInt64.t)
  
  axiom inv_axiom'4 [@rewrite] : forall x : UInt64.t [inv'5 x] . inv'5 x = true
  
  function view'2 (self : MutBorrow.t (t_Vec'0)) : Seq.seq t_T'0 =
    [%#smodel21] view'3 self.current
  
  predicate in_bounds'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) =
    [%#sslice23] UInt64.t'int self < Seq.length seq
  
  predicate invariant'1 (self : MutBorrow.t t_T'0) =
    [%#sinvariant42] inv'1 self.current /\ inv'1 self.final
  
  predicate inv'2 (_1 : MutBorrow.t t_T'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_T'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  predicate has_value'0 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq t_T'0) (out : t_T'0) =
    [%#sslice24] Seq.get seq (UInt64.t'int self) = out
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq t_T'0) (fin : Seq.seq t_T'0) =
    [%#sslice26] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:MutBorrow.t (t_Vec'0)) (index:UInt64.t) (return'  (ret:MutBorrow.t t_T'0))= {[@expl:index_mut 'self' type invariant] inv'4 self}
    {[@expl:index_mut 'index' type invariant] inv'5 index}
    {[@expl:index_mut requires] [%#svec9] in_bounds'0 index (view'2 self)}
    any
    [ return' (result:MutBorrow.t t_T'0)-> {inv'2 result}
      {[%#svec10] has_value'0 index (view'2 self) result.current}
      {[%#svec11] has_value'0 index (view'3 self.final) result.final}
      {[%#svec12] resolve_elswhere'0 index (view'2 self) (view'3 self.final)}
      {[%#svec13] Seq.length (view'3 self.final) = Seq.length (view'2 self)}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : t_T'0)
  
  predicate resolve'4 (self : MutBorrow.t t_T'0) =
    [%#sresolve27] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t t_T'0) =
    resolve'4 _1
  
  predicate inv'6 (_1 : t_Vec'1)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Vec'1 [inv'6 x] . inv'6 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'6 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'6_spec : forall self : t_Vec'1 . [%#svec25] Seq.length (view'6 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  function view'4 (self : t_Vec'1) : Seq.seq UInt64.t =
    [%#smodel28] view'6 self
  
  predicate in_bounds'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) =
    [%#sslice23] UInt64.t'int self < Seq.length seq
  
  predicate inv'7 (_1 : UInt64.t)
  
  axiom inv_axiom'6 [@rewrite] : forall x : UInt64.t [inv'7 x] . inv'7 x = true
  
  use seq.Seq
  
  predicate has_value'1 [@inline:trivial] (self : UInt64.t) (seq : Seq.seq UInt64.t) (out : UInt64.t) =
    [%#sslice24] Seq.get seq (UInt64.t'int self) = out
  
  let rec index'0 (self:t_Vec'1) (index:UInt64.t) (return'  (ret:UInt64.t))= {[@expl:index 'self' type invariant] inv'6 self}
    {[@expl:index 'index' type invariant] inv'5 index}
    {[@expl:index requires] [%#svec14] in_bounds'1 index (view'4 self)}
    any
    [ return' (result:UInt64.t)-> {inv'7 result}
      {[%#svec15] has_value'1 index (view'4 self) result}
      (! return' {result}) ]
  
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
    [%#sindex40] Seq.get (view'6 self) ix
  
  predicate invariant'4 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array50] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'3 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'6 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'6 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'1 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  predicate inv'8 (_1 : t_Sparse'0)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Sparse'0 [inv'8 x] . inv'8 x
  = (invariant'4 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> inv'0 values
    end)
  
  predicate invariant'2 (self : MutBorrow.t (t_Sparse'0)) =
    [%#sinvariant42] inv'8 self.current /\ inv'8 self.final
  
  predicate inv'3 (_1 : MutBorrow.t (t_Sparse'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t (t_Sparse'0) [inv'3 x] . inv'3 x = invariant'2 x
  
  predicate resolve'5 (self : MutBorrow.t (t_Sparse'0)) =
    [%#sresolve27] self.final = self.current
  
  predicate resolve'2 (_1 : MutBorrow.t (t_Sparse'0)) =
    resolve'5 _1
  
  function is_elt'0 [#"sparse_array.rs" 86 4 86 36] (self : t_Sparse'0) (i : int) : bool =
    [%#ssparse_array29] UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i))) = i
  
  use set.Fset
  
  use set.Fset
  
  use set.Fset
  
  predicate contains'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) =
    [%#sfset43] Fset.mem e self
  
  use set.Fset
  
  use set.Fset
  
  function remove'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) : Fset.fset (int) =
    [%#sfset51] Fset.remove e self
  
  function bounded_fset_len'0 [#"sparse_array.rs" 149 4 149 47] (s : Fset.fset (int)) (bnd : int) : ()
  
  axiom bounded_fset_len'0_def : forall s : Fset.fset (int), bnd : int . ([%#ssparse_array44] forall x : int . contains'0 s x
   -> 0 <= x /\ x < bnd)
   -> ([%#ssparse_array45] bnd >= 0)
   -> bounded_fset_len'0 s bnd
  = ([%#ssparse_array48] if bnd > 0 then bounded_fset_len'0 (remove'0 s (bnd - 1)) (bnd - 1) else ())
  
  axiom bounded_fset_len'0_spec : forall s : Fset.fset (int), bnd : int . ([%#ssparse_array44] forall x : int . contains'0 s x
   -> 0 <= x /\ x < bnd)  -> ([%#ssparse_array45] bnd >= 0)  -> ([%#ssparse_array46] Fset.cardinal s <= bnd)
  
  use set.Fset
  
  function insert'0 [@inline:trivial] (self : Fset.fset (int)) (e : int) : Fset.fset (int) =
    [%#sfset49] Fset.add e self
  
  function lemma_permutation_aux'0 [#"sparse_array.rs" 133 4 133 76] (self : t_Sparse'0) (seen : Fset.fset (int)) (i : int) (cur : int) : int
  
  
  axiom lemma_permutation_aux'0_def : forall self : t_Sparse'0, seen : Fset.fset (int), i : int, cur : int . ([%#ssparse_array30] inv'8 self)
   -> ([%#ssparse_array31] self.t_Sparse__n'0 = self.t_Sparse__size'0)
   -> ([%#ssparse_array32] 0 <= cur /\ cur < UInt64.t'int self.t_Sparse__size'0)
   -> ([%#ssparse_array33] forall k : int . contains'0 seen k
   -> 0 <= k
  /\ k < UInt64.t'int self.t_Sparse__size'0
  /\ (k = i \/ contains'0 seen (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 k))))
   -> ([%#ssparse_array34] i = cur
  \/ contains'0 seen i /\ contains'0 seen (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 cur)))
   -> ([%#ssparse_array35] not contains'0 seen cur)
   -> lemma_permutation_aux'0 self seen i cur
  = ([%#ssparse_array39] if UInt64.t'int (index_logic'1 self.t_Sparse__back'0 cur) = i then
    cur
  else
    let _ = bounded_fset_len'0 seen (UInt64.t'int self.t_Sparse__size'0) in lemma_permutation_aux'0 self (insert'0 seen cur) i (UInt64.t'int (index_logic'1 self.t_Sparse__back'0 cur))
  )
  
  axiom lemma_permutation_aux'0_spec : forall self : t_Sparse'0, seen : Fset.fset (int), i : int, cur : int . ([%#ssparse_array30] inv'8 self)
   -> ([%#ssparse_array31] self.t_Sparse__n'0 = self.t_Sparse__size'0)
   -> ([%#ssparse_array32] 0 <= cur /\ cur < UInt64.t'int self.t_Sparse__size'0)
   -> ([%#ssparse_array33] forall k : int . contains'0 seen k
   -> 0 <= k
  /\ k < UInt64.t'int self.t_Sparse__size'0
  /\ (k = i \/ contains'0 seen (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 k))))
   -> ([%#ssparse_array34] i = cur
  \/ contains'0 seen i /\ contains'0 seen (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 cur)))
   -> ([%#ssparse_array35] not contains'0 seen cur)
   -> ([%#ssparse_array36] 0 <= lemma_permutation_aux'0 self seen i cur
  /\ lemma_permutation_aux'0 self seen i cur < UInt64.t'int self.t_Sparse__size'0)
  && ([%#ssparse_array37] UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (lemma_permutation_aux'0 self seen i cur))
  = i)
  
  function lemma_permutation'0 [#"sparse_array.rs" 117 4 117 38] (self : t_Sparse'0) (i : int) : () =
    [%#ssparse_array20] let _ = lemma_permutation_aux'0 self (Fset.empty : Fset.fset (int)) i i in ()
  
  axiom lemma_permutation'0_spec : forall self : t_Sparse'0, i : int . ([%#ssparse_array16] inv'8 self)
   -> ([%#ssparse_array17] self.t_Sparse__n'0 = self.t_Sparse__size'0)
   -> ([%#ssparse_array18] 0 <= i /\ i < UInt64.t'int self.t_Sparse__size'0)  -> ([%#ssparse_array19] is_elt'0 self i)
  
  predicate inv'9 (_1 : MutBorrow.t (t_Vec'1))
  
  axiom inv_axiom'8 [@rewrite] : forall x : MutBorrow.t (t_Vec'1) [inv'9 x] . inv'9 x = true
  
  function view'5 (self : MutBorrow.t (t_Vec'1)) : Seq.seq UInt64.t =
    [%#smodel21] view'6 self.current
  
  predicate inv'10 (_1 : MutBorrow.t UInt64.t)
  
  axiom inv_axiom'9 [@rewrite] : forall x : MutBorrow.t UInt64.t [inv'10 x] . inv'10 x = true
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : UInt64.t) (old' : Seq.seq UInt64.t) (fin : Seq.seq UInt64.t) =
    [%#sslice26] forall i : int . 0 <= i /\ i <> UInt64.t'int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'1 (self:MutBorrow.t (t_Vec'1)) (index:UInt64.t) (return'  (ret:MutBorrow.t UInt64.t))= {[@expl:index_mut 'self' type invariant] inv'9 self}
    {[@expl:index_mut 'index' type invariant] inv'5 index}
    {[@expl:index_mut requires] [%#svec9] in_bounds'1 index (view'5 self)}
    any
    [ return' (result:MutBorrow.t UInt64.t)-> {inv'10 result}
      {[%#svec10] has_value'1 index (view'5 self) result.current}
      {[%#svec11] has_value'1 index (view'6 self.final) result.final}
      {[%#svec12] resolve_elswhere'1 index (view'5 self) (view'6 self.final)}
      {[%#svec13] Seq.length (view'6 self.final) = Seq.length (view'5 self)}
      (! return' {result}) ]
  
  
  predicate resolve'6 (self : MutBorrow.t UInt64.t) =
    [%#sresolve27] self.final = self.current
  
  predicate resolve'3 (_1 : MutBorrow.t UInt64.t) =
    resolve'6 _1
  
  use prelude.prelude.Any
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex40] Seq.get (view'3 self) ix
  
  use seq.Seq
  
  function view'1 [#"sparse_array.rs" 38 4 38 33] (self : t_Sparse'0) : Seq.seq (t_Option'0) =
    [%#ssparse_array22] Seq.create (UInt64.t'int self.t_Sparse__size'0) (fun (i : int) -> if is_elt'0 self i then
      C_Some'0 (index_logic'0 self.t_Sparse__values'0 i)
    else
      C_None'0
    )
  
  function view'0 (self : MutBorrow.t (t_Sparse'0)) : Seq.seq (t_Option'0) =
    [%#smodel21] view'1 self.current
  
  use seq.Seq
  
  use seq.Seq
  
  meta "compute_max_steps" 1000000
  
  let rec set'0[#"sparse_array.rs" 161 4 161 41] (self:MutBorrow.t (t_Sparse'0)) (i:UInt64.t) (v:t_T'0) (return'  (ret:()))= {[@expl:set 'self' type invariant] [%#ssparse_array3] inv'3 self}
    {[@expl:set 'v' type invariant] [%#ssparse_array4] inv'1 v}
    {[@expl:set requires] [%#ssparse_array5] UInt64.t'int i < Seq.length (view'0 self)}
    (! bb0
    [ bb0 = bb1
    | bb1 = s0
      [ s0 = {inv'0 (self.current).t_Sparse__values'0}
        MutBorrow.borrow_final
          <t_Vec'0>
          {(self.current).t_Sparse__values'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 3}
          (fun (_ret':MutBorrow.t (t_Vec'0)) ->
             [ &_10 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &self <- { self with current = { self.current with t_Sparse__values'0 = _ret'.final } } ] 
            s1)
      | s1 = index_mut'0 {_10} {i} (fun (_ret':MutBorrow.t t_T'0) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = bb3
    | bb3 = s0
      [ s0 = {[@expl:type invariant] match _9 with
          | {current = x'0} -> inv'1 x'0
          | _ -> true
          end}
        s1
      | s1 = -{match _9 with
          | {current = x'1} -> resolve'0 x'1
          | _ -> true
          end}-
        s2
      | s2 =  [ &_9 <- { _9 with current = v } ] s3
      | s3 = {[@expl:type invariant] inv'2 _9} s4
      | s4 = -{resolve'1 _9}- s5
      | s5 = bb5 ]
    
    | bb5 = s0
      [ s0 = index'0 {(self.current).t_Sparse__idx'0} {i} (fun (_ret':UInt64.t) ->  [ &_13 <- _ret' ] s1) | s1 = bb6 ]
    
    | bb6 = s0
      [ s0 =  [ &index <- _13 ] s1
      | s1 =  [ &_16 <- UInt64.lt index (self.current).t_Sparse__n'0 ] s2
      | s2 = any [ br0 -> {_16 = false} (! bb11) | br1 -> {_16} (! bb7) ]  ]
    
    | bb7 = s0
      [ s0 = index'0 {(self.current).t_Sparse__back'0} {index} (fun (_ret':UInt64.t) ->  [ &_21 <- _ret' ] s1)
      | s1 = bb8 ]
    
    | bb8 = s0 [ s0 =  [ &_19 <- _21 = i ] s1 | s1 = any [ br0 -> {_19 = false} (! bb10) | br1 -> {_19} (! bb9) ]  ] 
    | bb9 = s0 [ s0 = {[@expl:type invariant] inv'3 self} s1 | s1 = -{resolve'2 self}- s2 | s2 = bb16 ] 
    | bb10 = bb12
    | bb11 = bb12
    | bb12 = s0 [ s0 =  [ &_25 <- [%#ssparse_array0] () ] s1 | s1 = bb13 ] 
    | bb13 = s0
      [ s0 = {[@expl:assertion] [%#ssparse_array1] UInt64.t'int (self.current).t_Sparse__n'0
        < UInt64.t'int (self.current).t_Sparse__size'0}
        s1
      | s1 = MutBorrow.borrow_final
          <t_Vec'1>
          {(self.current).t_Sparse__idx'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 4}
          (fun (_ret':MutBorrow.t (t_Vec'1)) ->
             [ &_31 <- _ret' ] 
             [ &self <- { self with current = { self.current with t_Sparse__idx'0 = _ret'.final } } ] 
            s2)
      | s2 = index_mut'1 {_31} {i} (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_30 <- _ret' ] s3)
      | s3 = bb14 ]
    
    | bb14 = s0
      [ s0 =  [ &_30 <- { _30 with current = (self.current).t_Sparse__n'0 } ] s1
      | s1 = -{resolve'3 _30}- s2
      | s2 = MutBorrow.borrow_final
          <t_Vec'1>
          {(self.current).t_Sparse__back'0}
          {MutBorrow.inherit_id (MutBorrow.get_id self) 5}
          (fun (_ret':MutBorrow.t (t_Vec'1)) ->
             [ &_35 <- _ret' ] 
             [ &self <- { self with current = { self.current with t_Sparse__back'0 = _ret'.final } } ] 
            s3)
      | s3 = index_mut'1 {_35} {(self.current).t_Sparse__n'0}
          (fun (_ret':MutBorrow.t UInt64.t) ->  [ &_34 <- _ret' ] s4)
      | s4 = bb15 ]
    
    | bb15 = s0
      [ s0 =  [ &_34 <- { _34 with current = i } ] s1
      | s1 = -{resolve'3 _34}- s2
      | s2 = UInt64.add {(self.current).t_Sparse__n'0} {[%#ssparse_array2] (1 : UInt64.t)}
          (fun (_ret':UInt64.t) ->  [ &self <- { self with current = { self.current with t_Sparse__n'0 = _ret' } } ] s3)
      | s3 = {[@expl:type invariant] inv'3 self} s4
      | s4 = -{resolve'2 self}- s5
      | s5 = bb16 ]
    
    | bb16 = bb17
    | bb17 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & self : MutBorrow.t (t_Sparse'0) = self
    | & i : UInt64.t = i
    | & v : t_T'0 = v
    | & _9 : MutBorrow.t t_T'0 = Any.any_l ()
    | & _10 : MutBorrow.t (t_Vec'0) = Any.any_l ()
    | & index : UInt64.t = Any.any_l ()
    | & _13 : UInt64.t = Any.any_l ()
    | & _16 : bool = Any.any_l ()
    | & _19 : bool = Any.any_l ()
    | & _21 : UInt64.t = Any.any_l ()
    | & _25 : () = Any.any_l ()
    | & _30 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _31 : MutBorrow.t (t_Vec'1) = Any.any_l ()
    | & _34 : MutBorrow.t UInt64.t = Any.any_l ()
    | & _35 : MutBorrow.t (t_Vec'1) = Any.any_l () ]
    
    [ return' (result:())-> {[@expl:set ensures #0] [%#ssparse_array6] Seq.length (view'1 self.final)
      = Seq.length (view'0 self)}
      {[@expl:set ensures #1] [%#ssparse_array7] forall j : int . 0 <= j
      /\ j < Seq.length (view'0 self) /\ j <> UInt64.t'int i
       -> Seq.get (view'1 self.final) j = Seq.get (view'0 self) j}
      {[@expl:set ensures #2] [%#ssparse_array8] Seq.get (view'1 self.final) (UInt64.t'int i) = C_Some'0 v}
      (! return' {result}) ]

end
module M_sparse_array__create [#"sparse_array.rs" 183 0 183 56]
  let%span ssparse_array0 = "sparse_array.rs" 184 64 184 65
  let%span ssparse_array1 = "sparse_array.rs" 184 83 184 84
  let%span ssparse_array2 = "sparse_array.rs" 184 26 184 27
  let%span ssparse_array3 = "sparse_array.rs" 183 34 183 39
  let%span ssparse_array4 = "sparse_array.rs" 183 47 183 56
  let%span ssparse_array5 = "sparse_array.rs" 181 10 181 27
  let%span ssparse_array6 = "sparse_array.rs" 182 10 182 65
  let%span svec7 = "../../../creusot-contracts/src/std/vec.rs" 180 22 180 41
  let%span svec8 = "../../../creusot-contracts/src/std/vec.rs" 181 22 181 76
  let%span ssparse_array9 = "sparse_array.rs" 40 12 41 82
  let%span svec10 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sindex11 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span ssparse_array12 = "sparse_array.rs" 87 20 87 75
  let%span ssparse_array13 = "sparse_array.rs" 68 12 74 68
  let%span svec14 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq15 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed16 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  type t_T'0
  
  predicate inv'0 (_1 : t_T'0)
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  use seq.Seq
  
  function view'1 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'1_spec : forall self : t_Vec'0 . [%#svec10] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  predicate invariant'3 (self : t_T'0) =
    [%#sboxed16] inv'0 self
  
  predicate inv'6 (_1 : t_T'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_T'0 [inv'6 x] . inv'6 x = invariant'3 x
  
  predicate invariant'2 (self : Seq.seq t_T'0) =
    [%#sseq15] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'6 (Seq.get self i)
  
  predicate inv'5 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : Seq.seq t_T'0 [inv'5 x] . inv'5 x = invariant'2 x
  
  predicate invariant'1 (self : t_Vec'0) =
    [%#svec14] inv'5 (view'1 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex11] Seq.get (view'1 self) ix
  
  let rec from_elem'0 (elem:t_T'0) (n:UInt64.t) (return'  (ret:t_Vec'0))= {[@expl:from_elem 'elem' type invariant] inv'0 elem}
    any
    [ return' (result:t_Vec'0)-> {inv'2 result}
      {[%#svec7] Seq.length (view'1 result) = UInt64.t'int n}
      {[%#svec8] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'0 result i = elem}
      (! return' {result}) ]
  
  
  predicate inv'3 (_1 : UInt64.t)
  
  axiom inv_axiom'2 [@rewrite] : forall x : UInt64.t [inv'3 x] . inv'3 x = true
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  predicate inv'4 (_1 : t_Vec'1)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'1 [inv'4 x] . inv'4 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  function view'2 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'2_spec : forall self : t_Vec'1 . [%#svec10] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
    [%#sindex11] Seq.get (view'2 self) ix
  
  let rec from_elem'1 (elem:UInt64.t) (n:UInt64.t) (return'  (ret:t_Vec'1))= {[@expl:from_elem 'elem' type invariant] inv'3 elem}
    any
    [ return' (result:t_Vec'1)-> {inv'4 result}
      {[%#svec7] Seq.length (view'2 result) = UInt64.t'int n}
      {[%#svec8] forall i : int . 0 <= i /\ i < UInt64.t'int n  -> index_logic'1 result i = elem}
      (! return' {result}) ]
  
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'0;
      t_Sparse__idx'0: t_Vec'1;
      t_Sparse__back'0: t_Vec'1 }
  
  use prelude.prelude.Any
  
  predicate invariant'0 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array13] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'1 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'2 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'2 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'1 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  predicate inv'1 (_1 : t_Sparse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sparse'0 [inv'1 x] . inv'1 x
  = (invariant'0 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> inv'2 values
    end)
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  use seq.Seq
  
  function is_elt'0 [#"sparse_array.rs" 86 4 86 36] (self : t_Sparse'0) (i : int) : bool =
    [%#ssparse_array12] UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i))) = i
  
  use seq.Seq
  
  function view'0 [#"sparse_array.rs" 38 4 38 33] (self : t_Sparse'0) : Seq.seq (t_Option'0) =
    [%#ssparse_array9] Seq.create (UInt64.t'int self.t_Sparse__size'0) (fun (i : int) -> if is_elt'0 self i then
      C_Some'0 (index_logic'0 self.t_Sparse__values'0 i)
    else
      C_None'0
    )
  
  use seq.Seq
  
  meta "compute_max_steps" 1000000
  
  let rec create'0[#"sparse_array.rs" 183 0 183 56] (sz:UInt64.t) (dummy:t_T'0) (return'  (ret:t_Sparse'0))= {[@expl:create 'dummy' type invariant] [%#ssparse_array3] inv'0 dummy}
    (! bb0
    [ bb0 = s0 [ s0 = from_elem'0 {dummy} {sz} (fun (_ret':t_Vec'0) ->  [ &_6 <- _ret' ] s1) | s1 = bb1 ] 
    | bb1 = s0
      [ s0 = from_elem'1 {[%#ssparse_array0] (0 : UInt64.t)} {sz} (fun (_ret':t_Vec'1) ->  [ &_9 <- _ret' ] s1)
      | s1 = bb2 ]
    
    | bb2 = s0
      [ s0 = from_elem'1 {[%#ssparse_array1] (0 : UInt64.t)} {sz} (fun (_ret':t_Vec'1) ->  [ &_11 <- _ret' ] s1)
      | s1 = bb3 ]
    
    | bb3 = s0
      [ s0 = 
        [ &_0 <- { t_Sparse__size'0 = sz;
                   t_Sparse__n'0 = ([%#ssparse_array2] (0 : UInt64.t));
                   t_Sparse__values'0 = _6;
                   t_Sparse__idx'0 = _9;
                   t_Sparse__back'0 = _11 } ]
        
        s1
      | s1 = bb4 ]
    
    | bb4 = bb5
    | bb5 = bb6
    | bb6 = return' {_0} ]
    )
    [ & _0 : t_Sparse'0 = Any.any_l ()
    | & sz : UInt64.t = sz
    | & dummy : t_T'0 = dummy
    | & _6 : t_Vec'0 = Any.any_l ()
    | & _9 : t_Vec'1 = Any.any_l ()
    | & _11 : t_Vec'1 = Any.any_l () ]
    
    [ return' (result:t_Sparse'0)-> {[@expl:create result type invariant] [%#ssparse_array4] inv'1 result}
      {[@expl:create ensures #0] [%#ssparse_array5] result.t_Sparse__size'0 = sz}
      {[@expl:create ensures #1] [%#ssparse_array6] forall i : int . 0 <= i /\ i < UInt64.t'int sz
       -> Seq.get (view'0 result) i = C_None'0}
      (! return' {result}) ]

end
module M_sparse_array__f [#"sparse_array.rs" 189 0 189 10]
  let%span ssparse_array0 = "sparse_array.rs" 190 18 190 19
  let%span ssparse_array1 = "sparse_array.rs" 191 23 191 25
  let%span ssparse_array2 = "sparse_array.rs" 192 23 192 25
  let%span ssparse_array3 = "sparse_array.rs" 193 22 193 23
  let%span ssparse_array4 = "sparse_array.rs" 194 22 194 23
  let%span ssparse_array5 = "sparse_array.rs" 195 18 195 40
  let%span ssparse_array6 = "sparse_array.rs" 197 10 197 11
  let%span ssparse_array7 = "sparse_array.rs" 197 13 197 14
  let%span ssparse_array8 = "sparse_array.rs" 198 10 198 11
  let%span ssparse_array9 = "sparse_array.rs" 198 13 198 14
  let%span ssparse_array10 = "sparse_array.rs" 199 14 199 15
  let%span ssparse_array11 = "sparse_array.rs" 200 14 200 15
  let%span ssparse_array12 = "sparse_array.rs" 201 18 204 5
  let%span ssparse_array13 = "sparse_array.rs" 205 18 208 5
  let%span ssparse_array14 = "sparse_array.rs" 210 14 210 15
  let%span ssparse_array15 = "sparse_array.rs" 211 14 211 15
  let%span ssparse_array16 = "sparse_array.rs" 212 18 212 40
  let%span ssparse_array17 = "sparse_array.rs" 214 14 214 15
  let%span ssparse_array18 = "sparse_array.rs" 215 14 215 15
  let%span ssparse_array19 = "sparse_array.rs" 216 18 216 40
  let%span ssparse_array20 = "sparse_array.rs" 218 14 218 15
  let%span ssparse_array21 = "sparse_array.rs" 219 14 219 15
  let%span ssparse_array22 = "sparse_array.rs" 220 18 220 40
  let%span ssparse_array23 = "sparse_array.rs" 183 34 183 39
  let%span ssparse_array24 = "sparse_array.rs" 183 47 183 56
  let%span ssparse_array25 = "sparse_array.rs" 181 10 181 27
  let%span ssparse_array26 = "sparse_array.rs" 182 10 182 65
  let%span ssparse_array27 = "sparse_array.rs" 101 16 101 20
  let%span ssparse_array28 = "sparse_array.rs" 92 15 92 31
  let%span ssparse_array29 = "sparse_array.rs" 101 35 101 45
  let%span ssparse_array30 = "sparse_array.rs" 93 14 96 5
  let%span ssparse_array31 = "sparse_array.rs" 97 14 100 5
  let%span ssparse_array32 = "sparse_array.rs" 161 20 161 24
  let%span ssparse_array33 = "sparse_array.rs" 161 36 161 37
  let%span ssparse_array34 = "sparse_array.rs" 157 15 157 31
  let%span ssparse_array35 = "sparse_array.rs" 158 14 158 43
  let%span ssparse_array36 = "sparse_array.rs" 159 14 159 93
  let%span ssparse_array37 = "sparse_array.rs" 160 14 160 37
  let%span smodel38 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span ssparse_array39 = "sparse_array.rs" 40 12 41 82
  let%span smodel40 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span ssparse_array41 = "sparse_array.rs" 87 20 87 75
  let%span sindex42 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span ssparse_array43 = "sparse_array.rs" 68 12 74 68
  let%span svec44 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sinvariant45 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sinvariant46 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  
  use prelude.int.Int32
  
  use prelude.int.UInt64
  
  predicate inv'1 (_1 : Int32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Int32.t [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'0;
      t_Sparse__idx'0: t_Vec'1;
      t_Sparse__back'0: t_Vec'1 }
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use seq.Seq
  
  function view'4 (self : t_Vec'0) : Seq.seq Int32.t
  
  axiom view'4_spec : forall self : t_Vec'0 . [%#svec44] Seq.length (view'4 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  use seq.Seq
  
  function view'5 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'5_spec : forall self : t_Vec'1 . [%#svec44] Seq.length (view'5 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
    [%#sindex42] Seq.get (view'5 self) ix
  
  predicate invariant'0 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array43] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'4 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'5 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'5 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'1 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  predicate inv'0 (_1 : t_Sparse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sparse'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> true
    end)
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 Int32.t
  
  use seq.Seq
  
  function is_elt'0 [#"sparse_array.rs" 86 4 86 36] (self : t_Sparse'0) (i : int) : bool =
    [%#ssparse_array41] UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i))) = i
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : Int32.t =
    [%#sindex42] Seq.get (view'4 self) ix
  
  use seq.Seq
  
  function view'1 [#"sparse_array.rs" 38 4 38 33] (self : t_Sparse'0) : Seq.seq (t_Option'1) =
    [%#ssparse_array39] Seq.create (UInt64.t'int self.t_Sparse__size'0) (fun (i : int) -> if is_elt'0 self i then
      C_Some'1 (index_logic'0 self.t_Sparse__values'0 i)
    else
      C_None'1
    )
  
  use seq.Seq
  
  let rec create'0 (sz:UInt64.t) (dummy:Int32.t) (return'  (ret:t_Sparse'0))= {[@expl:create 'dummy' type invariant] [%#ssparse_array23] inv'1 dummy}
    any
    [ return' (result:t_Sparse'0)-> {[%#ssparse_array24] inv'0 result}
      {[%#ssparse_array25] result.t_Sparse__size'0 = sz}
      {[%#ssparse_array26] forall i : int . 0 <= i /\ i < UInt64.t'int sz  -> Seq.get (view'1 result) i = C_None'1}
      (! return' {result}) ]
  
  
  predicate invariant'1 (self : t_Sparse'0) =
    [%#sinvariant45] inv'0 self
  
  predicate inv'2 (_1 : t_Sparse'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Sparse'0 [inv'2 x] . inv'2 x = invariant'1 x
  
  function view'2 (self : t_Sparse'0) : Seq.seq (t_Option'1) =
    [%#smodel38] view'1 self
  
  use seq.Seq
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 Int32.t
  
  predicate inv'3 (_1 : t_Option'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Option'0 [inv'3 x] . inv'3 x = true
  
  let rec get'0 (self:t_Sparse'0) (i:UInt64.t) (return'  (ret:t_Option'0))= {[@expl:get 'self' type invariant] [%#ssparse_array27] inv'2 self}
    {[@expl:get requires] [%#ssparse_array28] UInt64.t'int i < Seq.length (view'2 self)}
    any
    [ return' (result:t_Option'0)-> {[%#ssparse_array29] inv'3 result}
      {[%#ssparse_array30] match result with
        | C_None'0 -> Seq.get (view'2 self) (UInt64.t'int i) = C_None'1
        | C_Some'0 x -> Seq.get (view'2 self) (UInt64.t'int i) = C_Some'1 x
        end}
      {[%#ssparse_array31] match Seq.get (view'2 self) (UInt64.t'int i) with
        | C_None'1 -> result = C_None'0
        | C_Some'1 _ -> true
        end}
      (! return' {result}) ]
  
  
  use prelude.prelude.MutBorrow
  
  predicate invariant'2 (self : MutBorrow.t (t_Sparse'0)) =
    [%#sinvariant46] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'4 (_1 : MutBorrow.t (t_Sparse'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t (t_Sparse'0) [inv'4 x] . inv'4 x = invariant'2 x
  
  function view'3 (self : MutBorrow.t (t_Sparse'0)) : Seq.seq (t_Option'1) =
    [%#smodel40] view'1 self.current
  
  let rec set'0 (self:MutBorrow.t (t_Sparse'0)) (i:UInt64.t) (v:Int32.t) (return'  (ret:()))= {[@expl:set 'self' type invariant] [%#ssparse_array32] inv'4 self}
    {[@expl:set 'v' type invariant] [%#ssparse_array33] inv'1 v}
    {[@expl:set requires] [%#ssparse_array34] UInt64.t'int i < Seq.length (view'3 self)}
    any
    [ return' (result:())-> {[%#ssparse_array35] Seq.length (view'1 self.final) = Seq.length (view'3 self)}
      {[%#ssparse_array36] forall j : int . 0 <= j /\ j < Seq.length (view'3 self) /\ j <> UInt64.t'int i
       -> Seq.get (view'1 self.final) j = Seq.get (view'3 self) j}
      {[%#ssparse_array37] Seq.get (view'1 self.final) (UInt64.t'int i) = C_Some'1 v}
      (! return' {result}) ]
  
  
  use prelude.int.Int32
  
  function view'0 (self : Int32.t) : int =
    [%#smodel38] Int32.to_int self
  
  use prelude.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec f'0[#"sparse_array.rs" 189 0 189 10] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 =  [ &default <- [%#ssparse_array0] (0 : Int32.t) ] s1
      | s1 = create'0 {[%#ssparse_array1] (10 : UInt64.t)} {default} (fun (_ret':t_Sparse'0) ->  [ &a <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = create'0 {[%#ssparse_array2] (20 : UInt64.t)} {default} (fun (_ret':t_Sparse'0) ->  [ &b <- _ret' ] s1)
      | s1 = bb2 ]
    
    | bb2 = s0
      [ s0 = get'0 {a} {[%#ssparse_array3] (5 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &x <- _ret' ] s1) | s1 = bb3 ]
    
    | bb3 = s0
      [ s0 = get'0 {b} {[%#ssparse_array4] (7 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &y <- _ret' ] s1) | s1 = bb4 ]
    
    | bb4 = s0
      [ s0 = {[@expl:assertion] [%#ssparse_array5] x = C_None'0 /\ y = C_None'0} s1
      | s1 = {inv'0 a}
        MutBorrow.borrow_mut <t_Sparse'0> {a}
          (fun (_ret':MutBorrow.t (t_Sparse'0)) ->  [ &_13 <- _ret' ] -{inv'0 _ret'.final}-  [ &a <- _ret'.final ] s2)
      | s2 = set'0 {_13} {[%#ssparse_array6] (5 : UInt64.t)} {[%#ssparse_array7] (1 : Int32.t)}
          (fun (_ret':()) ->  [ &_12 <- _ret' ] s3)
      | s3 = bb5 ]
    
    | bb5 = s0
      [ s0 = {inv'0 b}
        MutBorrow.borrow_mut <t_Sparse'0> {b}
          (fun (_ret':MutBorrow.t (t_Sparse'0)) ->  [ &_15 <- _ret' ] -{inv'0 _ret'.final}-  [ &b <- _ret'.final ] s1)
      | s1 = set'0 {_15} {[%#ssparse_array8] (7 : UInt64.t)} {[%#ssparse_array9] (2 : Int32.t)}
          (fun (_ret':()) ->  [ &_14 <- _ret' ] s2)
      | s2 = bb6 ]
    
    | bb6 = s0
      [ s0 = get'0 {a} {[%#ssparse_array10] (5 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_16 <- _ret' ] s1)
      | s1 = bb7 ]
    
    | bb7 = s0
      [ s0 =  [ &x <- _16 ] s1
      | s1 = get'0 {b} {[%#ssparse_array11] (7 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_18 <- _ret' ] s2)
      | s2 = bb8 ]
    
    | bb8 = s0
      [ s0 =  [ &y <- _18 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array12] match x with
          | C_None'0 -> false
          | C_Some'0 z -> view'0 z = 1
          end}
        s2
      | s2 = {[@expl:assertion] [%#ssparse_array13] match y with
          | C_None'0 -> false
          | C_Some'0 z -> view'0 z = 2
          end}
        s3
      | s3 = get'0 {a} {[%#ssparse_array14] (7 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_24 <- _ret' ] s4)
      | s4 = bb9 ]
    
    | bb9 = s0
      [ s0 =  [ &x <- _24 ] s1
      | s1 = get'0 {b} {[%#ssparse_array15] (5 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_26 <- _ret' ] s2)
      | s2 = bb10 ]
    
    | bb10 = s0
      [ s0 =  [ &y <- _26 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array16] x = C_None'0 /\ y = C_None'0} s2
      | s2 = get'0 {a} {[%#ssparse_array17] (0 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_30 <- _ret' ] s3)
      | s3 = bb11 ]
    
    | bb11 = s0
      [ s0 =  [ &x <- _30 ] s1
      | s1 = get'0 {b} {[%#ssparse_array18] (0 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_32 <- _ret' ] s2)
      | s2 = bb12 ]
    
    | bb12 = s0
      [ s0 =  [ &y <- _32 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array19] x = C_None'0 /\ y = C_None'0} s2
      | s2 = get'0 {a} {[%#ssparse_array20] (9 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_36 <- _ret' ] s3)
      | s3 = bb13 ]
    
    | bb13 = s0
      [ s0 =  [ &x <- _36 ] s1
      | s1 = get'0 {b} {[%#ssparse_array21] (9 : UInt64.t)} (fun (_ret':t_Option'0) ->  [ &_38 <- _ret' ] s2)
      | s2 = bb14 ]
    
    | bb14 = s0
      [ s0 =  [ &y <- _38 ] s1
      | s1 = {[@expl:assertion] [%#ssparse_array22] x = C_None'0 /\ y = C_None'0} s2
      | s2 = bb15 ]
    
    | bb15 = bb16
    | bb16 = return' {_0} ]
    )
    [ & _0 : () = Any.any_l ()
    | & default : Int32.t = Any.any_l ()
    | & a : t_Sparse'0 = Any.any_l ()
    | & b : t_Sparse'0 = Any.any_l ()
    | & x : t_Option'0 = Any.any_l ()
    | & y : t_Option'0 = Any.any_l ()
    | & _12 : () = Any.any_l ()
    | & _13 : MutBorrow.t (t_Sparse'0) = Any.any_l ()
    | & _14 : () = Any.any_l ()
    | & _15 : MutBorrow.t (t_Sparse'0) = Any.any_l ()
    | & _16 : t_Option'0 = Any.any_l ()
    | & _18 : t_Option'0 = Any.any_l ()
    | & _24 : t_Option'0 = Any.any_l ()
    | & _26 : t_Option'0 = Any.any_l ()
    | & _30 : t_Option'0 = Any.any_l ()
    | & _32 : t_Option'0 = Any.any_l ()
    | & _36 : t_Option'0 = Any.any_l ()
    | & _38 : t_Option'0 = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_sparse_array__qyi1509881402265219485__resolve_coherence__refines [#"sparse_array.rs" 60 4 60 31] (* <Sparse<T> as creusot_contracts::Resolve> *)
  let%span ssparse_array0 = "sparse_array.rs" 60 4 60 31
  let%span ssparse_array1 = "sparse_array.rs" 51 12 51 72
  let%span ssparse_array2 = "sparse_array.rs" 40 12 41 82
  let%span svec3 = "../../../creusot-contracts/src/std/vec.rs" 49 20 49 83
  let%span sinvariant4 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span ssparse_array5 = "sparse_array.rs" 87 20 87 75
  let%span sindex6 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span sresolve7 = "../../../creusot-contracts/src/resolve.rs" 82 8 85 9
  let%span svec8 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span ssparse_array9 = "sparse_array.rs" 68 12 74 68
  let%span svec10 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sseq11 = "../../../creusot-contracts/src/logic/seq.rs" 633 20 633 95
  let%span sboxed12 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.int.UInt64
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  type t_RawVec'1  =
    { t_RawVec__inner'1: t_RawVecInner'0; t_RawVec__qy95zmarker'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: UInt64.t }
  
  type t_Sparse'0  =
    { t_Sparse__size'0: UInt64.t;
      t_Sparse__n'0: UInt64.t;
      t_Sparse__values'0: t_Vec'0;
      t_Sparse__idx'0: t_Vec'1;
      t_Sparse__back'0: t_Vec'1 }
  
  use mach.int.Int
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use seq.Seq
  
  function view'1 (self : t_Vec'1) : Seq.seq UInt64.t
  
  axiom view'1_spec : forall self : t_Vec'1 . [%#svec8] Seq.length (view'1 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'1) (ix : int) : UInt64.t =
    [%#sindex6] Seq.get (view'1 self) ix
  
  predicate resolve'3 (_1 : UInt64.t) =
    true
  
  predicate resolve'5 (self : t_Vec'1) =
    [%#svec3] forall i : int . 0 <= i /\ i < Seq.length (view'1 self)  -> resolve'3 (index_logic'1 self i)
  
  predicate resolve'1 (_1 : t_Vec'1) =
    resolve'5 _1
  
  use seq.Seq
  
  type t_T'0
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq t_T'0
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec8] Seq.length (view'2 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : t_T'0 =
    [%#sindex6] Seq.get (view'2 self) ix
  
  predicate resolve'8 (_1 : t_T'0)
  
  predicate resolve'6 (self : t_Vec'0) =
    [%#svec3] forall i : int . 0 <= i /\ i < Seq.length (view'2 self)  -> resolve'8 (index_logic'0 self i)
  
  predicate resolve'2 (_1 : t_Vec'0) =
    resolve'6 _1
  
  predicate structural_resolve'0 (_1 : t_Sparse'0) =
    match _1 with
      | {t_Sparse__size'0 = x0 ; t_Sparse__n'0 = x1 ; t_Sparse__values'0 = x2 ; t_Sparse__idx'0 = x3 ; t_Sparse__back'0 = x4} -> resolve'1 x4
      /\ resolve'1 x3 /\ resolve'2 x2 /\ resolve'3 x1 /\ resolve'3 x0
      end
  
  predicate invariant'1 [#"sparse_array.rs" 66 4 66 30] (self : t_Sparse'0) =
    [%#ssparse_array9] UInt64.t'int self.t_Sparse__n'0 <= UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'2 self.t_Sparse__values'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'1 self.t_Sparse__idx'0) = UInt64.t'int self.t_Sparse__size'0
    /\ Seq.length (view'1 self.t_Sparse__back'0) = UInt64.t'int self.t_Sparse__size'0
    /\ (forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__n'0
     -> (let j = index_logic'1 self.t_Sparse__back'0 i in 0 <= UInt64.t'int j
    /\ UInt64.t'int j < UInt64.t'int self.t_Sparse__size'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 (UInt64.t'int j)) = i))
  
  use seq.Seq
  
  predicate inv'5 (_1 : t_T'0)
  
  predicate invariant'4 (self : t_T'0) =
    [%#sboxed12] inv'5 self
  
  predicate inv'4 (_1 : t_T'0)
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_T'0 [inv'4 x] . inv'4 x = invariant'4 x
  
  predicate invariant'3 (self : Seq.seq t_T'0) =
    [%#sseq11] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'4 (Seq.get self i)
  
  predicate inv'3 (_1 : Seq.seq t_T'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : Seq.seq t_T'0 [inv'3 x] . inv'3 x = invariant'3 x
  
  predicate invariant'2 (self : t_Vec'0) =
    [%#svec10] inv'3 (view'2 self)
  
  predicate inv'2 (_1 : t_Vec'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Vec'0 [inv'2 x] . inv'2 x = invariant'2 x
  
  predicate inv'1 (_1 : t_Sparse'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Sparse'0 [inv'1 x] . inv'1 x
  = (invariant'1 x
  /\ match x with
    | {t_Sparse__size'0 = size ; t_Sparse__n'0 = n ; t_Sparse__values'0 = values ; t_Sparse__idx'0 = idx ; t_Sparse__back'0 = back} -> inv'2 values
    end)
  
  predicate invariant'0 (self : t_Sparse'0) =
    [%#sinvariant4] inv'1 self
  
  predicate inv'0 (_1 : t_Sparse'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Sparse'0 [inv'0 x] . inv'0 x = invariant'0 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 t_T'0
  
  use seq.Seq
  
  function is_elt'0 [#"sparse_array.rs" 86 4 86 36] (self : t_Sparse'0) (i : int) : bool =
    [%#ssparse_array5] UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i) < UInt64.t'int self.t_Sparse__n'0
    /\ UInt64.t'int (index_logic'1 self.t_Sparse__back'0 (UInt64.t'int (index_logic'1 self.t_Sparse__idx'0 i))) = i
  
  use seq.Seq
  
  function view'0 [#"sparse_array.rs" 38 4 38 33] (self : t_Sparse'0) : Seq.seq (t_Option'0) =
    [%#ssparse_array2] Seq.create (UInt64.t'int self.t_Sparse__size'0) (fun (i : int) -> if is_elt'0 self i then
      C_Some'0 (index_logic'0 self.t_Sparse__values'0 i)
    else
      C_None'0
    )
  
  use seq.Seq
  
  predicate resolve'7 (self : t_Option'0) =
    [%#sresolve7] match self with
      | C_Some'0 x -> resolve'8 x
      | C_None'0 -> true
      end
  
  predicate resolve'4 (_1 : t_Option'0) =
    resolve'7 _1
  
  predicate resolve'0 [#"sparse_array.rs" 49 4 49 28] (self : t_Sparse'0) =
    [%#ssparse_array1] forall i : int . 0 <= i /\ i < UInt64.t'int self.t_Sparse__size'0
     -> resolve'4 (Seq.get (view'0 self) i)
  
  goal refines : [%#ssparse_array0] forall self : t_Sparse'0 . structural_resolve'0 self /\ inv'0 self
   -> structural_resolve'0 self /\ inv'0 self /\ (forall result : () . resolve'0 self  -> resolve'0 self)
end
