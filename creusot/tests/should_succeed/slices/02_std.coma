module M_02_std__binary_search [#"02_std.rs" 8 0 8 40]
  let%span s02_std0 = "02_std.rs" 11 20 11 27
  let%span s02_std1 = "02_std.rs" 6 11 6 62
  let%span s02_std2 = "02_std.rs" 7 11 7 24
  let%span s02_std3 = "02_std.rs" 9 30 9 31
  let%span sslice4 = "../../../../creusot-contracts/src/std/slice.rs" 246 0 355 1
  let%span sslice5 = "../../../../creusot-contracts/src/std/slice.rs" 322 18 322 116
  let%span sslice6 = "../../../../creusot-contracts/src/std/slice.rs" 323 18 324 94
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 325 18 326 76
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 327 18 328 97
  let%span sresult9 = "../../../../creusot-contracts/src/std/result.rs" 53 27 53 53
  let%span sresult10 = "../../../../creusot-contracts/src/std/result.rs" 18 0 135 1
  let%span smodel11 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex12 = "../../../../creusot-contracts/src/logic/ops/index.rs" 52 8 52 31
  let%span smodel13 = "../../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sseq14 = "../../../../creusot-contracts/src/logic/seq.rs" 377 8 377 40
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 39 14 39 44
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 40 14 40 96
  let%span sslice17 = "../../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice18 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span sseq19 = "../../../../creusot-contracts/src/logic/seq.rs" 366 12 366 91
  let%span snum20 = "../../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  let%span sord21 = "../../../../creusot-contracts/src/logic/ord.rs" 129 39 129 89
  let%span sord22 = "../../../../creusot-contracts/src/logic/ord.rs" 134 39 134 86
  let%span sord23 = "../../../../creusot-contracts/src/logic/ord.rs" 139 39 139 86
  let%span sord24 = "../../../../creusot-contracts/src/logic/ord.rs" 144 39 144 89
  let%span sord25 = "../../../../creusot-contracts/src/logic/ord.rs" 149 39 149 70
  let%span sord26 = "../../../../creusot-contracts/src/logic/ord.rs" 154 40 154 57
  let%span sord27 = "../../../../creusot-contracts/src/logic/ord.rs" 155 40 155 57
  let%span sord28 = "../../../../creusot-contracts/src/logic/ord.rs" 156 39 156 56
  let%span sord29 = "../../../../creusot-contracts/src/logic/ord.rs" 161 40 161 70
  let%span sord30 = "../../../../creusot-contracts/src/logic/ord.rs" 162 39 162 72
  let%span sord31 = "../../../../creusot-contracts/src/logic/ord.rs" 167 40 167 73
  let%span sord32 = "../../../../creusot-contracts/src/logic/ord.rs" 168 39 168 69
  let%span sord33 = "../../../../creusot-contracts/src/logic/ord.rs" 173 39 173 84
  let%span sord34 = "../../../../creusot-contracts/src/logic/ord.rs" 230 16 236 17
  
  use prelude.int.UInt32
  
  use prelude.prelude.Intrinsic
  
  let rec promoted0__binary_search'0 (return'  (ret:UInt32.t))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#s02_std3] (2 : UInt32.t) ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : UInt32.t = Intrinsic.any_l () ]  [ return' (result:UInt32.t)-> return' {result} ] 
  
  use prelude.slice.Slice64
  
  predicate inv'0 (_1 : Slice64.slice UInt32.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Slice64.slice UInt32.t [inv'0 x] . inv'0 x = true
  
  predicate inv'1 (_1 : UInt32.t)
  
  axiom inv_axiom'1 [@rewrite] : forall x : UInt32.t [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  use prelude.slice.Slice64
  
  function view'1 (self : Slice64.slice UInt32.t) : Seq.seq UInt32.t
  
  axiom view'1_spec : forall self : Slice64.slice UInt32.t . ([%#sslice17] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice18] view'1 self = Slice64.id self)
  
  function view'0 (self : Slice64.slice UInt32.t) : Seq.seq UInt32.t =
    [%#smodel11] view'1 self
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Slice64.slice UInt32.t) (ix : int) : UInt32.t =
    [%#sindex12] Seq.get (view'1 self) ix
  
  use prelude.int.UInt32
  
  function deep_model'3 (self : UInt32.t) : int =
    [%#snum20] UInt32.t'int self
  
  function deep_model'1 (self : Slice64.slice UInt32.t) : Seq.seq (int)
  
  axiom deep_model'1_spec : forall self : Slice64.slice UInt32.t . ([%#sslice15] Seq.length (view'0 self)
  = Seq.length (deep_model'1 self))
  && ([%#sslice16] forall i : int . 0 <= i /\ i < Seq.length (deep_model'1 self)
   -> Seq.get (deep_model'1 self) i = deep_model'3 (index_logic'0 self i))
  
  function deep_model'0 (self : Slice64.slice UInt32.t) : Seq.seq (int) =
    [%#smodel13] deep_model'1 self
  
  predicate sorted_range'0 (self : Seq.seq (int)) (start : int) (end' : int) =
    [%#sseq19] forall i : int, j : int . start <= i /\ i <= j /\ j < end'  -> Seq.get self i <= Seq.get self j
  
  predicate sorted'0 (self : Seq.seq (int)) =
    [%#sseq14] sorted_range'0 self 0 (Seq.length self)
  
  type t_Result'0  =
    | C_Ok'0 UInt64.t
    | C_Err'0 UInt64.t
  
  function deep_model'2 (self : UInt32.t) : int =
    [%#smodel13] deep_model'3 self
  
  type t_Ordering'0  =
    | C_Less'0
    | C_Equal'0
    | C_Greater'0
  
  use prelude.int.UInt64
  
  function cmp_log'0 (self : UInt64.t) (o : UInt64.t) : t_Ordering'0 =
    [%#sord34] if UInt64.ult self o then C_Less'0 else if self = o then C_Equal'0 else C_Greater'0
  
  function eq_cmp'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom eq_cmp'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord33] (x = y) = (cmp_log'0 x y = C_Equal'0)
  
  function antisym2'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym2'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord31] cmp_log'0 x y = C_Greater'0)
   -> ([%#sord32] cmp_log'0 y x = C_Less'0)
  
  function antisym1'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom antisym1'0_spec : forall x : UInt64.t, y : UInt64.t . ([%#sord29] cmp_log'0 x y = C_Less'0)
   -> ([%#sord30] cmp_log'0 y x = C_Greater'0)
  
  function trans'0 (x : UInt64.t) (y : UInt64.t) (z : UInt64.t) (o : t_Ordering'0) : ()
  
  axiom trans'0_spec : forall x : UInt64.t, y : UInt64.t, z : UInt64.t, o : t_Ordering'0 . ([%#sord26] cmp_log'0 x y
  = o)  -> ([%#sord27] cmp_log'0 y z = o)  -> ([%#sord28] cmp_log'0 x z = o)
  
  function refl'0 (x : UInt64.t) : ()
  
  axiom refl'0_spec : forall x : UInt64.t . [%#sord25] cmp_log'0 x x = C_Equal'0
  
  use prelude.int.UInt64
  
  function cmp_gt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_gt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord24] UInt64.ugt x y
  = (cmp_log'0 x y = C_Greater'0)
  
  use prelude.int.UInt64
  
  function cmp_ge_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_ge_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord23] UInt64.uge x y = (cmp_log'0 x y <> C_Less'0)
  
  function cmp_lt_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_lt_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord22] UInt64.ult x y = (cmp_log'0 x y = C_Less'0)
  
  use prelude.int.UInt64
  
  function cmp_le_log'0 (x : UInt64.t) (y : UInt64.t) : ()
  
  axiom cmp_le_log'0_spec : forall x : UInt64.t, y : UInt64.t . [%#sord21] UInt64.ule x y
  = (cmp_log'0 x y <> C_Greater'0)
  
  let rec binary_search'1 (self:Slice64.slice UInt32.t) (x:UInt32.t) (return'  (ret:t_Result'0))= {[@expl:binary_search 'self' type invariant] inv'0 self}
    {[@expl:binary_search 'x' type invariant] inv'1 x}
    {[@expl:binary_search requires] [%#sslice4] sorted'0 (deep_model'0 self)}
    any
    [ return' (result:t_Result'0)-> {[%#sslice5] forall i : UInt64.t . result = C_Ok'0 i
       -> UInt64.t'int i < Seq.length (view'0 self) /\ Seq.get (deep_model'1 self) (UInt64.t'int i) = deep_model'2 x}
      {[%#sslice6] forall i : UInt64.t . result = C_Err'0 i
       -> UInt64.t'int i <= Seq.length (view'0 self)
      /\ (forall j : int . 0 <= j /\ j < Seq.length (view'0 self)  -> Seq.get (deep_model'0 self) j <> deep_model'2 x)}
      {[%#sslice7] forall i : UInt64.t . result = C_Err'0 i
       -> (forall j : UInt64.t . UInt64.ult j i  -> Seq.get (deep_model'0 self) (UInt64.t'int j) < deep_model'2 x)}
      {[%#sslice8] forall i : UInt64.t . result = C_Err'0 i
       -> (forall j : UInt64.t . UInt64.ule i j /\ UInt64.t'int j < Seq.length (view'0 self)
       -> deep_model'2 x < Seq.get (deep_model'0 self) (UInt64.t'int j))}
      (! return' {result}) ]
  
  
  predicate inv'2 (_1 : t_Result'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Result'0 [inv'2 x] . inv'2 x = true
  
  predicate inv'3 (_1 : UInt64.t)
  
  axiom inv_axiom'3 [@rewrite] : forall x : UInt64.t [inv'3 x] . inv'3 x = true
  
  let rec unwrap'0 (self:t_Result'0) (return'  (ret:UInt64.t))= {[@expl:unwrap 'self' type invariant] inv'2 self}
    {[@expl:unwrap requires] [%#sresult9] exists t : UInt64.t . self = C_Ok'0 t}
    any [ return' (result:UInt64.t)-> {inv'3 result} {[%#sresult10] C_Ok'0 result = self} (! return' {result}) ] 
  
  meta "compute_max_steps" 1000000
  
  let rec binary_search'0[#"02_std.rs" 8 0 8 40] (s:Slice64.slice UInt32.t) (return'  (ret:UInt64.t))= {[@expl:binary_search requires #0] [%#s02_std1] forall i : int . 0
    <= i
    /\ i < Seq.length (view'0 s)  -> UInt32.t'int (index_logic'0 s i) = i}
    {[@expl:binary_search requires #1] [%#s02_std2] Seq.length (view'0 s) = 5}
    (! bb0
    [ bb0 = s0
      [ s0 = promoted0__binary_search'0 (fun (pr0:UInt32.t) ->  [ &_12 <- pr0 ] s1)
      | s1 =  [ &_8 <- _12 ] s2
      | s2 = binary_search'1 {s} {_8} (fun (_ret':t_Result'0) ->  [ &_5 <- _ret' ] s3)
      | s3 = bb1 ]
    
    | bb1 = s0 [ s0 = unwrap'0 {_5} (fun (_ret':UInt64.t) ->  [ &ix <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = {[@expl:assertion] [%#s02_std0] UInt64.t'int ix < 5} s1 | s1 =  [ &_0 <- ix ] s2 | s2 = return' {_0} ]
     ]
    )
    [ & _0 : UInt64.t = Intrinsic.any_l ()
    | & s : Slice64.slice UInt32.t = s
    | & ix : UInt64.t = Intrinsic.any_l ()
    | & _5 : t_Result'0 = Intrinsic.any_l ()
    | & _8 : UInt32.t = Intrinsic.any_l ()
    | & _12 : UInt32.t = Intrinsic.any_l () ]
     [ return' (result:UInt64.t)-> (! return' {result}) ] 
end
