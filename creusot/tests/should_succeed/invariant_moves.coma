module M_invariant_moves__test_invariant_move [#"invariant_moves.rs" 5 0 5 43]
  let%span sinvariant_moves0 = "invariant_moves.rs" 6 16 6 22
  let%span smod1 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2503 20 2503 24
  let%span smod2 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 2503 4 2503 38
  let%span svec3 = "../../../creusot-contracts/src/std/vec.rs" 91 26 96 17
  let%span svec4 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span smodel5 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sresolve6 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span suint_macros7 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27
  
  use prelude.prelude.Borrow
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  use prelude.prelude.UIntSize
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: usize }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'0 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'0 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.UInt32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 uint32
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  constant v_MAX'0 : usize = [%#suint_macros7] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq uint32
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec4] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  function view'1 (self : borrowed (t_Vec'0)) : Seq.seq uint32 =
    [%#smodel5] view'0 self.current
  
  use seq.Seq
  
  use seq.Seq
  
  let rec pop'0 (self:borrowed (t_Vec'0)) (return'  (ret:t_Option'0))= {[@expl:pop 'self' type invariant] [%#smod1] inv'0 self}
    any
    [ return' (result:t_Option'0)-> {[%#smod2] inv'1 result}
      {[%#svec3] match result with
        | C_Some'0 t -> view'0 self.final = Seq.([..]) (view'1 self) 0 (Seq.length (view'1 self) - 1)
        /\ view'1 self = Seq.snoc (view'0 self.final) t
        | C_None'0 -> self.current = self.final /\ Seq.length (view'1 self) = 0
        end}
      (! return' {result}) ]
  
  
  predicate resolve'1 (self : borrowed (t_Vec'0)) =
    [%#sresolve6] self.final = self.current
  
  predicate resolve'0 (_1 : borrowed (t_Vec'0)) =
    resolve'1 _1
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_invariant_move'0 (x:t_Vec'0) (return'  (ret:()))= (! bb0
    [ bb0 = bb1
    | bb1 = bb1
      [ bb1 = {[@expl:loop invariant] [%#sinvariant_moves0] x = x}
        (! s0) [ s0 = bb2 ] 
        [ bb2 = bb3
        | bb3 = s0
          [ s0 = Borrow.borrow_mut <t_Vec'0> {x}
              (fun (_ret':borrowed (t_Vec'0)) ->  [ &_7 <- _ret' ]  [ &x <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Vec'0> {_7.current} {Borrow.get_id _7}
              (fun (_ret':borrowed (t_Vec'0)) ->  [ &_6 <- _ret' ]  [ &_7 <- { _7 with current = _ret'.final } ] s2)
          | s2 = pop'0 {_6} (fun (_ret':t_Option'0) ->  [ &_5 <- _ret' ] s3)
          | s3 = bb4 ]
        
        | bb4 = s0
          [ s0 = -{resolve'0 _7}- s1
          | s1 = any [ br0 -> {_5 = C_None'0 } (! bb7) | br1 (x0:uint32)-> {_5 = C_Some'0 x0} (! bb5) ]  ]
        
        | bb5 = bb6
        | bb6 = bb1 ]
       ]
    
    | bb7 = bb8
    | bb8 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & x : t_Vec'0 = x
    | & _5 : t_Option'0 = any_l ()
    | & _6 : borrowed (t_Vec'0) = any_l ()
    | & _7 : borrowed (t_Vec'0) = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
