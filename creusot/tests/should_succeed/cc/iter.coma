module M_iter__test_mut_ref [#"iter.rs" 5 0 5 21]
  let%span siter0 = "iter.rs" 6 17 6 18
  let%span siter1 = "iter.rs" 6 20 6 21
  let%span sslice2 = "../../../../creusot-contracts/src/std/slice.rs" 247 0 356 1
  let%span siter3 = "../../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span siter4 = "iter.rs" 7 38 7 39
  let%span soption5 = "../../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span siter6 = "iter.rs" 8 38 8 39
  let%span sslice7 = "../../../../creusot-contracts/src/std/slice.rs" 400 20 400 61
  let%span sslice8 = "../../../../creusot-contracts/src/std/slice.rs" 407 12 407 66
  let%span sresolve9 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel10 = "../../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sslice11 = "../../../../creusot-contracts/src/std/slice.rs" 413 14 413 45
  let%span sslice12 = "../../../../creusot-contracts/src/std/slice.rs" 411 4 411 10
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 418 15 418 32
  let%span sslice14 = "../../../../creusot-contracts/src/std/slice.rs" 419 15 419 32
  let%span sslice15 = "../../../../creusot-contracts/src/std/slice.rs" 420 14 420 42
  let%span sslice16 = "../../../../creusot-contracts/src/std/slice.rs" 416 4 416 10
  let%span sslice17 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice18 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span smodel19 = "../../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice20 = "../../../../creusot-contracts/src/std/slice.rs" 98 14 98 41
  let%span sslice21 = "../../../../creusot-contracts/src/std/slice.rs" 99 14 99 80
  let%span soption22 = "../../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span smodel23 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex24 = "../../../../creusot-contracts/src/logic/ops/index.rs" 49 8 49 31
  let%span snum25 = "../../../../creusot-contracts/src/std/num.rs" 24 28 24 33
  
  use prelude.slice.Slice64
  
  use prelude.int.Int32
  
  use prelude.prelude.Any
  
  let rec promoted3__test_mut_ref'0 (return'  (ret:Slice64.array Int32.t))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.elts 0 = ([%#siter0] (1 : Int32.t))
          /\ Seq.get __arr_temp.elts 1 = ([%#siter1] (2 : Int32.t)) /\ Seq.length __arr_temp.elts = 2}-
           [ &_1 <- __arr_temp ] 
          s1) ]
      
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
     ]
     [ & _0 : Slice64.array Int32.t = Any.any_l () | & _1 : Slice64.array Int32.t = Any.any_l () ] 
    [ return' (result:Slice64.array Int32.t)-> return' {result} ]
  
  
  predicate inv'0 (_1 : Slice64.slice Int32.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Slice64.slice Int32.t [inv'0 x] . inv'0 x = true
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: Opaque.ptr; t_Iter__qy95zmarker'0: () }
  
  function view'0 (self : t_Iter'0) : Slice64.slice Int32.t
  
  let rec iter'0 (self:Slice64.slice Int32.t) (return'  (ret:t_Iter'0))= {[@expl:iter 'self' type invariant] inv'0 self}
    any [ return' (result:t_Iter'0)-> {[%#sslice2] view'0 result = self} (! return' {result}) ] 
  
  use prelude.prelude.MutBorrow
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 Int32.t
  
  predicate inv'1 (_1 : t_Option'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Option'0 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.int.UInt64
  
  use prelude.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use prelude.slice.Slice64
  
  function view'1 (self : Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view'1_spec : forall self : Slice64.slice Int32.t . ([%#sslice17] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice18] view'1 self = Slice64.id self)
  
  function view'3 (self : Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#smodel23] view'1 self
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Slice64.slice Int32.t) (ix : int) : Int32.t =
    [%#sindex24] Seq.get (view'1 self) ix
  
  function to_ref_seq'0 (self : Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom to_ref_seq'0_spec : forall self : Slice64.slice Int32.t . ([%#sslice20] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'3 self))
  && ([%#sslice21] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_Iter'0) (visited : Seq.seq Int32.t) (tl : t_Iter'0) =
    [%#sslice8] to_ref_seq'0 (view'0 self) = Seq.(++) visited (to_ref_seq'0 (view'0 tl))
  
  function produces_trans'0 (a : t_Iter'0) (ab : Seq.seq Int32.t) (b : t_Iter'0) (bc : Seq.seq Int32.t) (c : t_Iter'0) : ()
  
   =
    [%#sslice16] ()
  
  axiom produces_trans'0_spec : forall a : t_Iter'0, ab : Seq.seq Int32.t, b : t_Iter'0, bc : Seq.seq Int32.t, c : t_Iter'0 . ([%#sslice13] produces'0 a ab b)
   -> ([%#sslice14] produces'0 b bc c)  -> ([%#sslice15] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Iter'0) : () =
    [%#sslice12] ()
  
  axiom produces_refl'0_spec : forall self : t_Iter'0 . [%#sslice11] produces'0 self (Seq.empty : Seq.seq Int32.t) self
  
  predicate resolve'1 (self : MutBorrow.t t_Iter'0) =
    [%#sresolve9] self.final = self.current
  
  function view'2 (self : MutBorrow.t t_Iter'0) : Slice64.slice Int32.t =
    [%#smodel19] view'0 self.current
  
  use seq.Seq
  
  predicate completed'0 (self : MutBorrow.t t_Iter'0) =
    [%#sslice7] resolve'1 self /\ view'1 (view'2 self) = (Seq.empty : Seq.seq Int32.t)
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_Iter'0) (return'  (ret:t_Option'0))= any
    [ return' (result:t_Option'0)-> {inv'1 result}
      {[%#siter3] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : MutBorrow.t t_Iter'0) =
    resolve'1 _1
  
  let rec promoted2__test_mut_ref'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#siter4] (1 : Int32.t)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
     ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  predicate inv'2 (_1 : t_Option'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_Option'0 [inv'2 x] . inv'2 x = true
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 int
  
  use prelude.int.Int32
  
  function deep_model'3 (self : Int32.t) : int =
    [%#snum25] Int32.to_int self
  
  function deep_model'2 (self : Int32.t) : int =
    [%#smodel10] deep_model'3 self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption22] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel10] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'2 self}
    {[@expl:eq 'other' type invariant] inv'2 other}
    any
    [ return' (result:bool)-> {[%#soption5] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
  
  
  let rec promoted1__test_mut_ref'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0
      [ s0 =  [ &_1 <- C_Some'0 ([%#siter6] (2 : Int32.t)) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]
     ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  let rec promoted0__test_mut_ref'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  type t_AssertKind'0  =
    | C_Eq'0
    | C_Ne'0
    | C_Match'0
  
  meta "compute_max_steps" 1000000
  
  let rec test_mut_ref'0[#"iter.rs" 5 0 5 21] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted3__test_mut_ref'0 (fun (pr3:Slice64.array Int32.t) ->  [ &_78 <- pr3 ] s1)
      | s1 = iter'0 {_78} (fun (_ret':t_Iter'0) ->  [ &a <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 = MutBorrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':MutBorrow.t t_Iter'0) ->  [ &_10 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = MutBorrow.borrow_final <t_Iter'0> {_10.current} {MutBorrow.get_id _10}
          (fun (_ret':MutBorrow.t t_Iter'0) ->  [ &_9 <- _ret' ]  [ &_10 <- { _10 with current = _ret'.final } ] s2)
      | s2 = next'0 {_9} (fun (_ret':t_Option'0) ->  [ &_8 <- _ret' ] s3)
      | s3 = bb2 ]
    
    | bb2 = s0
      [ s0 = -{resolve'0 _10}- s1
      | s1 = promoted2__test_mut_ref'0 (fun (pr2:t_Option'0) ->  [ &_77 <- pr2 ] s2)
      | s2 =  [ &_6 <- (_8, _77) ] s3
      | s3 =  [ &left_val <- let (r'0, _) = _6 in r'0 ] s4
      | s4 =  [ &right_val <- let (_, r'1) = _6 in r'1 ] s5
      | s5 = eq'0 {left_val} {right_val} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s6)
      | s6 = bb3 ]
    
    | bb3 = any [ br0 -> {_17 = false} (! bb5) | br1 -> {_17} (! bb4) ] 
    | bb4 = s0
      [ s0 = MutBorrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':MutBorrow.t t_Iter'0) ->  [ &_34 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = MutBorrow.borrow_final <t_Iter'0> {_34.current} {MutBorrow.get_id _34}
          (fun (_ret':MutBorrow.t t_Iter'0) ->  [ &_33 <- _ret' ]  [ &_34 <- { _34 with current = _ret'.final } ] s2)
      | s2 = next'0 {_33} (fun (_ret':t_Option'0) ->  [ &_32 <- _ret' ] s3)
      | s3 = bb6 ]
    
    | bb6 = s0
      [ s0 = -{resolve'0 _34}- s1
      | s1 = promoted1__test_mut_ref'0 (fun (pr1:t_Option'0) ->  [ &_76 <- pr1 ] s2)
      | s2 =  [ &_30 <- (_32, _76) ] s3
      | s3 =  [ &left_val1 <- let (r'0, _) = _30 in r'0 ] s4
      | s4 =  [ &right_val1 <- let (_, r'1) = _30 in r'1 ] s5
      | s5 = eq'0 {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_41 <- _ret' ] s6)
      | s6 = bb7 ]
    
    | bb7 = any [ br0 -> {_41 = false} (! bb9) | br1 -> {_41} (! bb8) ] 
    | bb8 = s0
      [ s0 = MutBorrow.borrow_mut <t_Iter'0> {a}
          (fun (_ret':MutBorrow.t t_Iter'0) ->  [ &_58 <- _ret' ]  [ &a <- _ret'.final ] s1)
      | s1 = MutBorrow.borrow_final <t_Iter'0> {_58.current} {MutBorrow.get_id _58}
          (fun (_ret':MutBorrow.t t_Iter'0) ->  [ &_57 <- _ret' ]  [ &_58 <- { _58 with current = _ret'.final } ] s2)
      | s2 = next'0 {_57} (fun (_ret':t_Option'0) ->  [ &_56 <- _ret' ] s3)
      | s3 = bb10 ]
    
    | bb10 = s0
      [ s0 = -{resolve'0 _58}- s1
      | s1 = promoted0__test_mut_ref'0 (fun (pr0:t_Option'0) ->  [ &_75 <- pr0 ] s2)
      | s2 =  [ &_54 <- (_56, _75) ] s3
      | s3 =  [ &left_val2 <- let (r'0, _) = _54 in r'0 ] s4
      | s4 =  [ &right_val2 <- let (_, r'1) = _54 in r'1 ] s5
      | s5 = eq'0 {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_63 <- _ret' ] s6)
      | s6 = bb11 ]
    
    | bb11 = any [ br0 -> {_63 = false} (! bb13) | br1 -> {_63} (! bb12) ] 
    | bb12 = return' {_0}
    | bb13 = s0
      [ s0 =  [ &kind2 <- C_Eq'0 ] s1
      | s1 =  [ &_71 <- left_val2 ] s2
      | s2 =  [ &_73 <- right_val2 ] s3
      | s3 = {false} any ]
    
    | bb9 = s0
      [ s0 =  [ &kind1 <- C_Eq'0 ] s1
      | s1 =  [ &_49 <- left_val1 ] s2
      | s2 =  [ &_51 <- right_val1 ] s3
      | s3 = {false} any ]
    
    | bb5 = s0
      [ s0 =  [ &kind <- C_Eq'0 ] s1
      | s1 =  [ &_25 <- left_val ] s2
      | s2 =  [ &_27 <- right_val ] s3
      | s3 = {false} any ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : t_Iter'0 = Any.any_l ()
    | & _6 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _8 : t_Option'0 = Any.any_l ()
    | & _9 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & _10 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & left_val : t_Option'0 = Any.any_l ()
    | & right_val : t_Option'0 = Any.any_l ()
    | & _17 : bool = Any.any_l ()
    | & kind : t_AssertKind'0 = Any.any_l ()
    | & _25 : t_Option'0 = Any.any_l ()
    | & _27 : t_Option'0 = Any.any_l ()
    | & _30 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _32 : t_Option'0 = Any.any_l ()
    | & _33 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & _34 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & left_val1 : t_Option'0 = Any.any_l ()
    | & right_val1 : t_Option'0 = Any.any_l ()
    | & _41 : bool = Any.any_l ()
    | & kind1 : t_AssertKind'0 = Any.any_l ()
    | & _49 : t_Option'0 = Any.any_l ()
    | & _51 : t_Option'0 = Any.any_l ()
    | & _54 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _56 : t_Option'0 = Any.any_l ()
    | & _57 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & _58 : MutBorrow.t t_Iter'0 = Any.any_l ()
    | & left_val2 : t_Option'0 = Any.any_l ()
    | & right_val2 : t_Option'0 = Any.any_l ()
    | & _63 : bool = Any.any_l ()
    | & kind2 : t_AssertKind'0 = Any.any_l ()
    | & _71 : t_Option'0 = Any.any_l ()
    | & _73 : t_Option'0 = Any.any_l ()
    | & _75 : t_Option'0 = Any.any_l ()
    | & _76 : t_Option'0 = Any.any_l ()
    | & _77 : t_Option'0 = Any.any_l ()
    | & _78 : Slice64.array Int32.t = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_iter__test_filter [#"iter.rs" 12 0 12 20]
  let%span siter0 = "iter.rs" 13 17 13 21
  let%span siter1 = "iter.rs" 13 23 13 28
  let%span siter2 = "iter.rs" 13 30 13 34
  let%span sslice3 = "../../../../creusot-contracts/src/std/slice.rs" 247 0 356 1
  let%span siter4 = "iter.rs" 14 18 14 31
  let%span siter5 = "../../../../creusot-contracts/src/std/iter.rs" 159 27 159 47
  let%span siter6 = "../../../../creusot-contracts/src/std/iter.rs" 160 27 160 53
  let%span siter7 = "../../../../creusot-contracts/src/std/iter.rs" 161 27 161 45
  let%span siter8 = "../../../../creusot-contracts/src/std/iter.rs" 116 0 245 1
  let%span siter9 = "../../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span siter10 = "iter.rs" 17 38 17 42
  let%span soption11 = "../../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span siter12 = "iter.rs" 18 38 18 42
  let%span sfilter13 = "../../../../creusot-contracts/src/std/iter/filter.rs" 58 16 58 59
  let%span sfilter14 = "../../../../creusot-contracts/src/std/iter/filter.rs" 50 16 50 57
  let%span sfilter15 = "../../../../creusot-contracts/src/std/iter/filter.rs" 65 16 65 126
  let%span sfilter16 = "../../../../creusot-contracts/src/std/iter/filter.rs" 15 14 15 39
  let%span sfilter17 = "../../../../creusot-contracts/src/std/iter/filter.rs" 22 14 22 39
  let%span sfilter18 = "../../../../creusot-contracts/src/std/iter/filter.rs" 77 12 79 47
  let%span sfilter19 = "../../../../creusot-contracts/src/std/iter/filter.rs" 87 12 98 143
  let%span sresolve20 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel21 = "../../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sops22 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span sfilter29 = "../../../../creusot-contracts/src/std/iter/filter.rs" 104 14 104 45
  let%span sfilter30 = "../../../../creusot-contracts/src/std/iter/filter.rs" 109 15 109 32
  let%span sfilter31 = "../../../../creusot-contracts/src/std/iter/filter.rs" 110 15 110 32
  let%span sfilter32 = "../../../../creusot-contracts/src/std/iter/filter.rs" 111 14 111 42
  let%span sslice33 = "../../../../creusot-contracts/src/std/slice.rs" 407 12 407 66
  let%span sslice34 = "../../../../creusot-contracts/src/std/slice.rs" 400 20 400 61
  let%span sinvariant35 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span soption36 = "../../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span sslice37 = "../../../../creusot-contracts/src/std/slice.rs" 413 14 413 45
  let%span sslice38 = "../../../../creusot-contracts/src/std/slice.rs" 411 4 411 10
  let%span sslice39 = "../../../../creusot-contracts/src/std/slice.rs" 418 15 418 32
  let%span sslice40 = "../../../../creusot-contracts/src/std/slice.rs" 419 15 419 32
  let%span sslice41 = "../../../../creusot-contracts/src/std/slice.rs" 420 14 420 42
  let%span sslice42 = "../../../../creusot-contracts/src/std/slice.rs" 416 4 416 10
  let%span sslice43 = "../../../../creusot-contracts/src/std/slice.rs" 98 14 98 41
  let%span sslice44 = "../../../../creusot-contracts/src/std/slice.rs" 99 14 99 80
  let%span sslice45 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice46 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span smodel47 = "../../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel48 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex49 = "../../../../creusot-contracts/src/logic/ops/index.rs" 49 8 49 31
  let%span smodel50 = "../../../../creusot-contracts/src/model.rs" 82 8 82 12
  
  use prelude.slice.Slice64
  
  use prelude.prelude.Any
  
  let rec promoted3__test_filter'0 (return'  (ret:Slice64.array bool))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array bool)-> (! -{Seq.get __arr_temp.elts 0
          /\ Seq.get __arr_temp.elts 1 = ([%#siter1] false)
          /\ Seq.get __arr_temp.elts 2 /\ Seq.length __arr_temp.elts = 3}-
           [ &_1 <- __arr_temp ] 
          s1) ]
      
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
     ]
     [ & _0 : Slice64.array bool = Any.any_l () | & _1 : Slice64.array bool = Any.any_l () ] 
    [ return' (result:Slice64.array bool)-> return' {result} ]
  
  
  predicate inv'2 (_1 : Slice64.slice bool)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Slice64.slice bool [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: Opaque.ptr; t_Iter__qy95zmarker'0: () }
  
  function view'0 (self : t_Iter'0) : Slice64.slice bool
  
  let rec iter'0 (self:Slice64.slice bool) (return'  (ret:t_Iter'0))= {[@expl:iter 'self' type invariant] inv'2 self}
    any [ return' (result:t_Iter'0)-> {[%#sslice3] view'0 result = self} (! return' {result}) ] 
  
  use prelude.prelude.MutBorrow
  
  predicate resolve'3 (self : MutBorrow.t ()) =
    [%#sresolve20] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t ()) =
    resolve'3 _1
  
  predicate postcondition_once'0 (self : ()) (args : bool) (result : bool) =
    [%#siter4] let (b) = args in result = b
  
  predicate resolve'4 (_1 : ()) =
    true
  
  predicate unnest'0 (self : ()) (_2 : ()) =
    true
  
  predicate postcondition_mut'1 (self : ()) (args : bool) (result_state : ()) (result : bool) =
    (let (b) = args in result = b) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : ()) (args : bool) (res : bool) : ()
  
  axiom fn_mut_once'0_spec : forall self : (), args : bool, res : bool . [%#sops28] postcondition_once'0 self args res
  = (exists res_state : () . postcondition_mut'1 self args res_state res /\ resolve'4 res_state)
  
  function unnest_trans'0 (self : ()) (b : ()) (c : ()) : ()
  
  axiom unnest_trans'0_spec : forall self : (), b : (), c : () . ([%#sops25] unnest'0 self b)
   -> ([%#sops26] unnest'0 b c)  -> ([%#sops27] unnest'0 self c)
  
  function unnest_refl'0 (self : ()) : ()
  
  axiom unnest_refl'0_spec : forall self : () . [%#sops24] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : ()) (args : bool) (res_state : ()) (res : bool) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : (), args : bool, res_state : (), res : bool . ([%#sops22] postcondition_mut'1 self args res_state res)
   -> ([%#sops23] unnest'0 self res_state)
  
  let rec closure0'0[#"iter.rs" 14 8 14 33] (_1:MutBorrow.t ()) (b:bool) (return'  (ret:bool))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'1 _1}- s1 | s1 =  [ &res <- b ] s2 | s2 =  [ &_0 <- res ] s3 | s3 = return' {_0} ]  ]
    ) [ & _0 : bool = Any.any_l () | & _1 : MutBorrow.t () = _1 | & b : bool = b | & res : bool = Any.any_l () ] 
    [ return' (result:bool)-> {[@expl:closure ensures] [%#siter4] result = b}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
  
  
  predicate inv'3 (_1 : t_Iter'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Iter'0 [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate postcondition_once'1 (self : ()) (args : bool) (result : bool) =
    [%#siter4] let (b) = args in result = b
  
  predicate postcondition_mut'0 (self : ()) (args : bool) (result_state : ()) (result : bool) =
    (let (b) = args in result = b) /\ unnest'0 self result_state
  
  function fn_mut_once'1 (self : ()) (args : bool) (res : bool) : ()
  
  axiom fn_mut_once'1_spec : forall self : (), args : bool, res : bool . [%#sops28] postcondition_once'1 self args res
  = (exists res_state : () . postcondition_mut'0 self args res_state res /\ resolve'4 res_state)
  
  predicate unnest'1 (self : ()) (_2 : ()) =
    true
  
  function unnest_trans'1 (self : ()) (b : ()) (c : ()) : ()
  
  axiom unnest_trans'1_spec : forall self : (), b : (), c : () . ([%#sops25] unnest'1 self b)
   -> ([%#sops26] unnest'1 b c)  -> ([%#sops27] unnest'1 self c)
  
  function unnest_refl'1 (self : ()) : ()
  
  axiom unnest_refl'1_spec : forall self : () . [%#sops24] unnest'1 self self
  
  function postcondition_mut_unnest'1 (self : ()) (args : bool) (res_state : ()) (res : bool) : ()
  
  axiom postcondition_mut_unnest'1_spec : forall self : (), args : bool, res_state : (), res : bool . ([%#sops22] postcondition_mut'0 self args res_state res)
   -> ([%#sops23] unnest'1 self res_state)
  
  predicate immutable'0 (_1 : ()) =
    [%#sfilter13] forall f : (), g : () . unnest'1 f g  -> f = g
  
  predicate precondition'0 (self : ()) (args : bool) =
    let (b) = args in true
  
  predicate no_precondition'0 (_1 : ()) =
    [%#sfilter14] forall f : (), i : bool . precondition'0 f (i)
  
  predicate precise'0 (_1 : ()) =
    [%#sfilter15] forall f1 : (), f2 : (), i : bool . not (postcondition_mut'0 f1 (i) f2 true
    /\ postcondition_mut'0 f1 (i) f2 false)
  
  type t_Filter'0  =
    { t_Filter__iter'0: t_Iter'0; t_Filter__predicate'0: () }
  
  predicate invariant'0 (self : t_Filter'0)
  
  predicate inv'0 (_1 : t_Filter'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Filter'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_Filter__iter'0 = iter ; t_Filter__predicate'0 = predicate'} -> true
    end)
  
  function iter'1 (self : t_Filter'0) : t_Iter'0
  
  axiom iter'1_spec : forall self : t_Filter'0 . [%#sfilter16] inv'0 self  -> inv'3 (iter'1 self)
  
  function func'0 (self : t_Filter'0) : ()
  
  axiom func'0_spec : forall self : t_Filter'0 . [%#sfilter17] inv'0 self  -> inv'4 (func'0 self)
  
  let rec filter'0 (self:t_Iter'0) (predicate':()) (return'  (ret:t_Filter'0))= {[@expl:filter 'self' type invariant] inv'3 self}
    {[@expl:filter 'predicate' type invariant] inv'4 predicate'}
    {[@expl:filter requires #0] [%#siter5] immutable'0 predicate'}
    {[@expl:filter requires #1] [%#siter6] no_precondition'0 predicate'}
    {[@expl:filter requires #2] [%#siter7] precise'0 predicate'}
    any
    [ return' (result:t_Filter'0)-> {inv'0 result}
      {[%#siter8] iter'1 result = self /\ func'0 result = predicate'}
      (! return' {result}) ]
  
  
  predicate invariant'1 (self : MutBorrow.t t_Filter'0) =
    [%#sinvariant35] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_Filter'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_Filter'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 bool
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x = true
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.int.UInt64
  
  use prelude.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use prelude.slice.Slice64
  
  function view'1 (self : Slice64.slice bool) : Seq.seq bool
  
  axiom view'1_spec : forall self : Slice64.slice bool . ([%#sslice45] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice46] view'1 self = Slice64.id self)
  
  function view'3 (self : Slice64.slice bool) : Seq.seq bool =
    [%#smodel48] view'1 self
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Slice64.slice bool) (ix : int) : bool =
    [%#sindex49] Seq.get (view'1 self) ix
  
  function to_ref_seq'0 (self : Slice64.slice bool) : Seq.seq bool
  
  axiom to_ref_seq'0_spec : forall self : Slice64.slice bool . ([%#sslice43] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'3 self))
  && ([%#sslice44] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  
  predicate produces'1 (self : t_Iter'0) (visited : Seq.seq bool) (tl : t_Iter'0) =
    [%#sslice33] to_ref_seq'0 (view'0 self) = Seq.(++) visited (to_ref_seq'0 (view'0 tl))
  
  function produces_trans'1 (a : t_Iter'0) (ab : Seq.seq bool) (b : t_Iter'0) (bc : Seq.seq bool) (c : t_Iter'0) : () =
    [%#sslice42] ()
  
  axiom produces_trans'1_spec : forall a : t_Iter'0, ab : Seq.seq bool, b : t_Iter'0, bc : Seq.seq bool, c : t_Iter'0 . ([%#sslice39] produces'1 a ab b)
   -> ([%#sslice40] produces'1 b bc c)  -> ([%#sslice41] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_Iter'0) : () =
    [%#sslice38] ()
  
  axiom produces_refl'1_spec : forall self : t_Iter'0 . [%#sslice37] produces'1 self (Seq.empty : Seq.seq bool) self
  
  use map.Map
  
  predicate produces'0 (self : t_Filter'0) (visited : Seq.seq bool) (succ : t_Filter'0) =
    [%#sfilter19] invariant'0 self
     -> unnest'1 (func'0 self) (func'0 succ)
    /\ (exists s : Seq.seq bool, f : Map.map int int . produces'1 (iter'1 self) s (iter'1 succ)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int, j : int . 0 <= i /\ i < j /\ j < Seq.length visited  -> Map.get f i < Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> Seq.get visited i = Seq.get s (Map.get f i))
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> (exists j : int . 0 <= j /\ j < Seq.length visited /\ Map.get f j = i)
    = postcondition_mut'0 (func'0 self) (Seq.get s i) (func'0 self) true))
  
  function produces_trans'0 (a : t_Filter'0) (ab : Seq.seq bool) (b : t_Filter'0) (bc : Seq.seq bool) (c : t_Filter'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Filter'0, ab : Seq.seq bool, b : t_Filter'0, bc : Seq.seq bool, c : t_Filter'0 . ([%#sfilter30] produces'0 a ab b)
   -> ([%#sfilter31] produces'0 b bc c)  -> ([%#sfilter32] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Filter'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Filter'0 . [%#sfilter29] produces'0 self (Seq.empty : Seq.seq bool) self
  
  predicate resolve'5 (self : MutBorrow.t t_Iter'0) =
    [%#sresolve20] self.final = self.current
  
  function view'2 (self : MutBorrow.t t_Iter'0) : Slice64.slice bool =
    [%#smodel47] view'0 self.current
  
  use seq.Seq
  
  predicate completed'1 (self : MutBorrow.t t_Iter'0) =
    [%#sslice34] resolve'5 self /\ view'1 (view'2 self) = (Seq.empty : Seq.seq bool)
  
  predicate completed'0 (self : MutBorrow.t t_Filter'0) =
    [%#sfilter18] (exists s : Seq.seq bool, e : MutBorrow.t t_Iter'0 . produces'1 (iter'1 self.current) s e.current
    /\ completed'1 e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 (func'0 self.current) (Seq.get s i) (func'0 self.final) false))
    /\ func'0 self.current = func'0 self.final
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_Filter'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'1 self}
    any
    [ return' (result:t_Option'0)-> {inv'5 result}
      {[%#siter9] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t t_Filter'0) =
    [%#sresolve20] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_Filter'0) =
    resolve'2 _1
  
  let rec promoted2__test_filter'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_Some'0 ([%#siter10] true) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  predicate inv'6 (_1 : t_Option'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'0 [inv'6 x] . inv'6 x = true
  
  type t_Option'1  =
    | C_None'1
    | C_Some'1 bool
  
  function deep_model'3 (self : bool) : bool =
    [%#smodel50] self
  
  function deep_model'2 (self : bool) : bool =
    [%#smodel21] deep_model'3 self
  
  function deep_model'1 (self : t_Option'0) : t_Option'1 =
    [%#soption36] match self with
      | C_Some'0 t -> C_Some'1 (deep_model'2 t)
      | C_None'0 -> C_None'1
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'1 =
    [%#smodel21] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'6 self}
    {[@expl:eq 'other' type invariant] inv'6 other}
    any
    [ return' (result:bool)-> {[%#soption11] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
  
  
  let rec promoted1__test_filter'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_Some'0 ([%#siter12] true) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  let rec promoted0__test_filter'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  type t_AssertKind'0  =
    | C_Eq'0
    | C_Ne'0
    | C_Match'0
  
  meta "compute_max_steps" 1000000
  
  let rec test_filter'0[#"iter.rs" 12 0 12 20] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted3__test_filter'0 (fun (pr3:Slice64.array bool) ->  [ &_80 <- pr3 ] s1)
      | s1 = iter'0 {_80} (fun (_ret':t_Iter'0) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_6 <- () ] s1 | s1 = filter'0 {_2} {_6} (fun (_ret':t_Filter'0) ->  [ &a <- _ret' ] s2) | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = {inv'0 a}
        MutBorrow.borrow_mut <t_Filter'0> {a}
          (fun (_ret':MutBorrow.t t_Filter'0) ->  [ &_12 <- _ret' ] -{inv'0 _ret'.final}-  [ &a <- _ret'.final ] s1)
      | s1 = {inv'0 _12.current}
        MutBorrow.borrow_final <t_Filter'0> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret':MutBorrow.t t_Filter'0) ->
             [ &_11 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &_12 <- { _12 with current = _ret'.final } ] 
            s2)
      | s2 = next'0 {_11} (fun (_ret':t_Option'0) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb3 ]
    
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 _12} s1
      | s1 = -{resolve'0 _12}- s2
      | s2 = promoted2__test_filter'0 (fun (pr2:t_Option'0) ->  [ &_79 <- pr2 ] s3)
      | s3 =  [ &_8 <- (_10, _79) ] s4
      | s4 =  [ &left_val <- let (r'0, _) = _8 in r'0 ] s5
      | s5 =  [ &right_val <- let (_, r'1) = _8 in r'1 ] s6
      | s6 = eq'0 {left_val} {right_val} (fun (_ret':bool) ->  [ &_19 <- _ret' ] s7)
      | s7 = bb4 ]
    
    | bb4 = any [ br0 -> {_19 = false} (! bb6) | br1 -> {_19} (! bb5) ] 
    | bb5 = s0
      [ s0 = {inv'0 a}
        MutBorrow.borrow_mut <t_Filter'0> {a}
          (fun (_ret':MutBorrow.t t_Filter'0) ->  [ &_36 <- _ret' ] -{inv'0 _ret'.final}-  [ &a <- _ret'.final ] s1)
      | s1 = {inv'0 _36.current}
        MutBorrow.borrow_final <t_Filter'0> {_36.current} {MutBorrow.get_id _36}
          (fun (_ret':MutBorrow.t t_Filter'0) ->
             [ &_35 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &_36 <- { _36 with current = _ret'.final } ] 
            s2)
      | s2 = next'0 {_35} (fun (_ret':t_Option'0) ->  [ &_34 <- _ret' ] s3)
      | s3 = bb7 ]
    
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 _36} s1
      | s1 = -{resolve'0 _36}- s2
      | s2 = promoted1__test_filter'0 (fun (pr1:t_Option'0) ->  [ &_78 <- pr1 ] s3)
      | s3 =  [ &_32 <- (_34, _78) ] s4
      | s4 =  [ &left_val1 <- let (r'0, _) = _32 in r'0 ] s5
      | s5 =  [ &right_val1 <- let (_, r'1) = _32 in r'1 ] s6
      | s6 = eq'0 {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_43 <- _ret' ] s7)
      | s7 = bb8 ]
    
    | bb8 = any [ br0 -> {_43 = false} (! bb10) | br1 -> {_43} (! bb9) ] 
    | bb9 = s0
      [ s0 = {inv'0 a}
        MutBorrow.borrow_mut <t_Filter'0> {a}
          (fun (_ret':MutBorrow.t t_Filter'0) ->  [ &_60 <- _ret' ] -{inv'0 _ret'.final}-  [ &a <- _ret'.final ] s1)
      | s1 = {inv'0 _60.current}
        MutBorrow.borrow_final <t_Filter'0> {_60.current} {MutBorrow.get_id _60}
          (fun (_ret':MutBorrow.t t_Filter'0) ->
             [ &_59 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &_60 <- { _60 with current = _ret'.final } ] 
            s2)
      | s2 = next'0 {_59} (fun (_ret':t_Option'0) ->  [ &_58 <- _ret' ] s3)
      | s3 = bb11 ]
    
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'1 _60} s1
      | s1 = -{resolve'0 _60}- s2
      | s2 = {[@expl:type invariant] inv'0 a} s3
      | s3 = promoted0__test_filter'0 (fun (pr0:t_Option'0) ->  [ &_77 <- pr0 ] s4)
      | s4 =  [ &_56 <- (_58, _77) ] s5
      | s5 =  [ &left_val2 <- let (r'0, _) = _56 in r'0 ] s6
      | s6 =  [ &right_val2 <- let (_, r'1) = _56 in r'1 ] s7
      | s7 = eq'0 {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_65 <- _ret' ] s8)
      | s8 = bb12 ]
    
    | bb12 = any [ br0 -> {_65 = false} (! bb14) | br1 -> {_65} (! bb13) ] 
    | bb13 = return' {_0}
    | bb14 = s0
      [ s0 =  [ &kind2 <- C_Eq'0 ] s1
      | s1 =  [ &_73 <- left_val2 ] s2
      | s2 =  [ &_75 <- right_val2 ] s3
      | s3 = {false} any ]
    
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 =  [ &kind1 <- C_Eq'0 ] s2
      | s2 =  [ &_51 <- left_val1 ] s3
      | s3 =  [ &_53 <- right_val1 ] s4
      | s4 = {false} any ]
    
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 =  [ &kind <- C_Eq'0 ] s2
      | s2 =  [ &_27 <- left_val ] s3
      | s3 =  [ &_29 <- right_val ] s4
      | s4 = {false} any ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : t_Filter'0 = Any.any_l ()
    | & _2 : t_Iter'0 = Any.any_l ()
    | & _6 : () = Any.any_l ()
    | & _8 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _10 : t_Option'0 = Any.any_l ()
    | & _11 : MutBorrow.t t_Filter'0 = Any.any_l ()
    | & _12 : MutBorrow.t t_Filter'0 = Any.any_l ()
    | & left_val : t_Option'0 = Any.any_l ()
    | & right_val : t_Option'0 = Any.any_l ()
    | & _19 : bool = Any.any_l ()
    | & kind : t_AssertKind'0 = Any.any_l ()
    | & _27 : t_Option'0 = Any.any_l ()
    | & _29 : t_Option'0 = Any.any_l ()
    | & _32 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _34 : t_Option'0 = Any.any_l ()
    | & _35 : MutBorrow.t t_Filter'0 = Any.any_l ()
    | & _36 : MutBorrow.t t_Filter'0 = Any.any_l ()
    | & left_val1 : t_Option'0 = Any.any_l ()
    | & right_val1 : t_Option'0 = Any.any_l ()
    | & _43 : bool = Any.any_l ()
    | & kind1 : t_AssertKind'0 = Any.any_l ()
    | & _51 : t_Option'0 = Any.any_l ()
    | & _53 : t_Option'0 = Any.any_l ()
    | & _56 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _58 : t_Option'0 = Any.any_l ()
    | & _59 : MutBorrow.t t_Filter'0 = Any.any_l ()
    | & _60 : MutBorrow.t t_Filter'0 = Any.any_l ()
    | & left_val2 : t_Option'0 = Any.any_l ()
    | & right_val2 : t_Option'0 = Any.any_l ()
    | & _65 : bool = Any.any_l ()
    | & kind2 : t_AssertKind'0 = Any.any_l ()
    | & _73 : t_Option'0 = Any.any_l ()
    | & _75 : t_Option'0 = Any.any_l ()
    | & _77 : t_Option'0 = Any.any_l ()
    | & _78 : t_Option'0 = Any.any_l ()
    | & _79 : t_Option'0 = Any.any_l ()
    | & _80 : Slice64.array bool = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
module M_iter__test_filter_map [#"iter.rs" 22 0 22 24]
  let%span siter0 = "iter.rs" 23 17 23 21
  let%span siter1 = "iter.rs" 23 23 23 28
  let%span siter2 = "iter.rs" 23 30 23 34
  let%span sslice3 = "../../../../creusot-contracts/src/std/slice.rs" 247 0 356 1
  let%span siter4 = "iter.rs" 25 32 25 37
  let%span siter5 = "iter.rs" 24 18 24 63
  let%span siter6 = "../../../../creusot-contracts/src/std/iter.rs" 167 27 167 51
  let%span siter7 = "../../../../creusot-contracts/src/std/iter.rs" 168 27 168 57
  let%span siter8 = "../../../../creusot-contracts/src/std/iter.rs" 169 27 169 49
  let%span siter9 = "../../../../creusot-contracts/src/std/iter.rs" 116 0 245 1
  let%span siter10 = "../../../../creusot-contracts/src/std/iter.rs" 122 26 125 17
  let%span siter11 = "iter.rs" 27 37 27 42
  let%span soption12 = "../../../../creusot-contracts/src/std/option.rs" 23 26 23 75
  let%span siter13 = "iter.rs" 28 37 28 42
  let%span sfilter_map14 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 56 16 56 52
  let%span sfilter_map15 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 48 16 48 50
  let%span sfilter_map16 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 63 16 63 135
  let%span sfilter_map17 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 15 14 15 39
  let%span sfilter_map18 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 22 14 22 39
  let%span sfilter_map19 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 75 12 77 47
  let%span sfilter_map20 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 85 12 98 148
  let%span sresolve21 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel22 = "../../../../creusot-contracts/src/model.rs" 45 8 45 28
  let%span sops23 = "../../../../creusot-contracts/src/std/ops.rs" 109 15 109 59
  let%span sops24 = "../../../../creusot-contracts/src/std/ops.rs" 110 14 110 36
  let%span sops25 = "../../../../creusot-contracts/src/std/ops.rs" 115 14 115 31
  let%span sops26 = "../../../../creusot-contracts/src/std/ops.rs" 120 15 120 29
  let%span sops27 = "../../../../creusot-contracts/src/std/ops.rs" 121 15 121 26
  let%span sops28 = "../../../../creusot-contracts/src/std/ops.rs" 122 14 122 28
  let%span sops29 = "../../../../creusot-contracts/src/std/ops.rs" 127 14 128 105
  let%span sfilter_map30 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 104 14 104 45
  let%span sfilter_map31 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 109 15 109 32
  let%span sfilter_map32 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 110 15 110 32
  let%span sfilter_map33 = "../../../../creusot-contracts/src/std/iter/filter_map.rs" 111 14 111 42
  let%span sslice34 = "../../../../creusot-contracts/src/std/slice.rs" 407 12 407 66
  let%span sslice35 = "../../../../creusot-contracts/src/std/slice.rs" 400 20 400 61
  let%span sinvariant36 = "../../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span soption37 = "../../../../creusot-contracts/src/std/option.rs" 11 8 14 9
  let%span sslice38 = "../../../../creusot-contracts/src/std/slice.rs" 413 14 413 45
  let%span sslice39 = "../../../../creusot-contracts/src/std/slice.rs" 411 4 411 10
  let%span sslice40 = "../../../../creusot-contracts/src/std/slice.rs" 418 15 418 32
  let%span sslice41 = "../../../../creusot-contracts/src/std/slice.rs" 419 15 419 32
  let%span sslice42 = "../../../../creusot-contracts/src/std/slice.rs" 420 14 420 42
  let%span sslice43 = "../../../../creusot-contracts/src/std/slice.rs" 416 4 416 10
  let%span sslice44 = "../../../../creusot-contracts/src/std/slice.rs" 98 14 98 41
  let%span sslice45 = "../../../../creusot-contracts/src/std/slice.rs" 99 14 99 80
  let%span sslice46 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 41
  let%span sslice47 = "../../../../creusot-contracts/src/std/slice.rs" 29 14 29 42
  let%span smodel48 = "../../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span smodel49 = "../../../../creusot-contracts/src/model.rs" 82 8 82 12
  let%span smodel50 = "../../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sindex51 = "../../../../creusot-contracts/src/logic/ops/index.rs" 49 8 49 31
  
  use prelude.slice.Slice64
  
  use prelude.prelude.Any
  
  let rec promoted3__test_filter_map'0 (return'  (ret:Slice64.array bool))= bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array bool)-> (! -{Seq.get __arr_temp.elts 0
          /\ Seq.get __arr_temp.elts 1 = ([%#siter1] false)
          /\ Seq.get __arr_temp.elts 2 /\ Seq.length __arr_temp.elts = 3}-
           [ &_1 <- __arr_temp ] 
          s1) ]
      
      | s1 =  [ &_0 <- _1 ] s2
      | s2 = return' {_0} ]
     ]
     [ & _0 : Slice64.array bool = Any.any_l () | & _1 : Slice64.array bool = Any.any_l () ] 
    [ return' (result:Slice64.array bool)-> return' {result} ]
  
  
  predicate inv'2 (_1 : Slice64.slice bool)
  
  axiom inv_axiom'2 [@rewrite] : forall x : Slice64.slice bool [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_Iter'0  =
    { t_Iter__ptr'0: t_NonNull'0; t_Iter__end_or_len'0: Opaque.ptr; t_Iter__qy95zmarker'0: () }
  
  function view'0 (self : t_Iter'0) : Slice64.slice bool
  
  let rec iter'0 (self:Slice64.slice bool) (return'  (ret:t_Iter'0))= {[@expl:iter 'self' type invariant] inv'2 self}
    any [ return' (result:t_Iter'0)-> {[%#sslice3] view'0 result = self} (! return' {result}) ] 
  
  use prelude.prelude.MutBorrow
  
  predicate resolve'3 (self : MutBorrow.t ()) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t ()) =
    resolve'3 _1
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 bool
  
  predicate postcondition_once'0 (self : ()) (args : bool) (result : t_Option'0) =
    [%#siter5] let (b) = args in result = (if b then C_Some'0 false else C_None'0)
  
  predicate resolve'4 (_1 : ()) =
    true
  
  predicate unnest'0 (self : ()) (_2 : ()) =
    true
  
  predicate postcondition_mut'0 (self : ()) (args : bool) (result_state : ()) (result : t_Option'0) =
    (let (b) = args in result = (if b then C_Some'0 false else C_None'0)) /\ unnest'0 self result_state
  
  function fn_mut_once'0 (self : ()) (args : bool) (res : t_Option'0) : ()
  
  axiom fn_mut_once'0_spec : forall self : (), args : bool, res : t_Option'0 . [%#sops29] postcondition_once'0 self args res
  = (exists res_state : () . postcondition_mut'0 self args res_state res /\ resolve'4 res_state)
  
  function unnest_trans'0 (self : ()) (b : ()) (c : ()) : ()
  
  axiom unnest_trans'0_spec : forall self : (), b : (), c : () . ([%#sops26] unnest'0 self b)
   -> ([%#sops27] unnest'0 b c)  -> ([%#sops28] unnest'0 self c)
  
  function unnest_refl'0 (self : ()) : ()
  
  axiom unnest_refl'0_spec : forall self : () . [%#sops25] unnest'0 self self
  
  function postcondition_mut_unnest'0 (self : ()) (args : bool) (res_state : ()) (res : t_Option'0) : ()
  
  axiom postcondition_mut_unnest'0_spec : forall self : (), args : bool, res_state : (), res : t_Option'0 . ([%#sops23] postcondition_mut'0 self args res_state res)
   -> ([%#sops24] unnest'0 self res_state)
  
  let rec closure0'0[#"iter.rs" 24 8 24 65] (_1:MutBorrow.t ()) (b:bool) (return'  (ret:t_Option'0))= (! bb0
    [ bb0 = s0 [ s0 = -{resolve'1 _1}- s1 | s1 = any [ br0 -> {b = false} (! bb2) | br1 -> {b} (! bb1) ]  ] 
    | bb1 = s0 [ s0 =  [ &res <- C_Some'0 ([%#siter4] false) ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &res <- C_None'0 ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &_0 <- res ] s1 | s1 = return' {_0} ]  ]
    )
    [ & _0 : t_Option'0 = Any.any_l ()
    | & _1 : MutBorrow.t () = _1
    | & b : bool = b
    | & res : t_Option'0 = Any.any_l () ]
    
    [ return' (result:t_Option'0)-> {[@expl:closure ensures] [%#siter5] result
      = (if b then C_Some'0 false else C_None'0)}
      {[@expl:closure unnest] unnest'0 _1.current _1.final}
      (! return' {result}) ]
  
  
  predicate inv'3 (_1 : t_Iter'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Iter'0 [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : ())
  
  axiom inv_axiom'4 [@rewrite] : forall x : () [inv'4 x] . inv'4 x = true
  
  predicate immutable'0 (f : ()) =
    [%#sfilter_map14] forall g : () . unnest'0 f g  -> f = g
  
  predicate precondition'0 (self : ()) (args : bool) =
    let (b) = args in true
  
  predicate no_precondition'0 (f : ()) =
    [%#sfilter_map15] forall i : bool . precondition'0 f (i)
  
  predicate precise'0 (f1 : ()) =
    [%#sfilter_map16] forall f2 : (), i : bool . not ((exists b : bool . postcondition_mut'0 f1 (i) f2 (C_Some'0 b))
    /\ postcondition_mut'0 f1 (i) f2 (C_None'0))
  
  type t_FilterMap'0  =
    { t_FilterMap__iter'0: t_Iter'0; t_FilterMap__f'0: () }
  
  predicate invariant'0 (self : t_FilterMap'0)
  
  predicate inv'0 (_1 : t_FilterMap'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_FilterMap'0 [inv'0 x] . inv'0 x
  = (invariant'0 x
  /\ match x with
    | {t_FilterMap__iter'0 = iter ; t_FilterMap__f'0 = f} -> true
    end)
  
  function iter'1 (self : t_FilterMap'0) : t_Iter'0
  
  axiom iter'1_spec : forall self : t_FilterMap'0 . [%#sfilter_map17] inv'0 self  -> inv'3 (iter'1 self)
  
  function func'0 (self : t_FilterMap'0) : ()
  
  axiom func'0_spec : forall self : t_FilterMap'0 . [%#sfilter_map18] inv'0 self  -> inv'4 (func'0 self)
  
  let rec filter_map'0 (self:t_Iter'0) (f:()) (return'  (ret:t_FilterMap'0))= {[@expl:filter_map 'self' type invariant] inv'3 self}
    {[@expl:filter_map 'f' type invariant] inv'4 f}
    {[@expl:filter_map requires #0] [%#siter6] immutable'0 f}
    {[@expl:filter_map requires #1] [%#siter7] no_precondition'0 f}
    {[@expl:filter_map requires #2] [%#siter8] precise'0 f}
    any
    [ return' (result:t_FilterMap'0)-> {inv'0 result}
      {[%#siter9] iter'1 result = self /\ func'0 result = f}
      (! return' {result}) ]
  
  
  predicate invariant'1 (self : MutBorrow.t t_FilterMap'0) =
    [%#sinvariant36] inv'0 self.current /\ inv'0 self.final
  
  predicate inv'1 (_1 : MutBorrow.t t_FilterMap'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : MutBorrow.t t_FilterMap'0 [inv'1 x] . inv'1 x = invariant'1 x
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x = true
  
  use seq.Seq
  
  use seq.Seq
  
  use map.Map
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.int.UInt64
  
  use prelude.int.UInt64
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use mach.int.Int
  
  use prelude.slice.Slice64
  
  function view'1 (self : Slice64.slice bool) : Seq.seq bool
  
  axiom view'1_spec : forall self : Slice64.slice bool . ([%#sslice46] Seq.length (view'1 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice47] view'1 self = Slice64.id self)
  
  function view'3 (self : Slice64.slice bool) : Seq.seq bool =
    [%#smodel50] view'1 self
  
  use seq.Seq
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : Slice64.slice bool) (ix : int) : bool =
    [%#sindex51] Seq.get (view'1 self) ix
  
  function to_ref_seq'0 (self : Slice64.slice bool) : Seq.seq bool
  
  axiom to_ref_seq'0_spec : forall self : Slice64.slice bool . ([%#sslice44] Seq.length (to_ref_seq'0 self)
  = Seq.length (view'3 self))
  && ([%#sslice45] forall i : int . 0 <= i /\ i < Seq.length (to_ref_seq'0 self)
   -> Seq.get (to_ref_seq'0 self) i = index_logic'0 self i)
  
  predicate produces'1 (self : t_Iter'0) (visited : Seq.seq bool) (tl : t_Iter'0) =
    [%#sslice34] to_ref_seq'0 (view'0 self) = Seq.(++) visited (to_ref_seq'0 (view'0 tl))
  
  function produces_trans'1 (a : t_Iter'0) (ab : Seq.seq bool) (b : t_Iter'0) (bc : Seq.seq bool) (c : t_Iter'0) : () =
    [%#sslice43] ()
  
  axiom produces_trans'1_spec : forall a : t_Iter'0, ab : Seq.seq bool, b : t_Iter'0, bc : Seq.seq bool, c : t_Iter'0 . ([%#sslice40] produces'1 a ab b)
   -> ([%#sslice41] produces'1 b bc c)  -> ([%#sslice42] produces'1 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_Iter'0) : () =
    [%#sslice39] ()
  
  axiom produces_refl'1_spec : forall self : t_Iter'0 . [%#sslice38] produces'1 self (Seq.empty : Seq.seq bool) self
  
  use map.Map
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_FilterMap'0) (visited : Seq.seq bool) (succ : t_FilterMap'0) =
    [%#sfilter_map20] invariant'0 self
     -> unnest'0 (func'0 self) (func'0 succ)
    /\ (exists s : Seq.seq bool, f : Map.map int int . produces'1 (iter'1 self) s (iter'1 succ)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited  -> 0 <= Map.get f i /\ Map.get f i < Seq.length s)
    /\ (forall i : int, j : int . 0 <= i /\ i < j /\ j < Seq.length visited  -> Map.get f i < Map.get f j)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> postcondition_mut'0 (func'0 self) (Seq.get s (Map.get f i)) (func'0 self) (C_Some'0 (Seq.get visited i)))
    /\ (forall j : int . 0 <= j /\ j < Seq.length s
     -> (not (exists i : int . 0 <= i /\ i < Seq.length visited /\ Map.get f i = j))
    = postcondition_mut'0 (func'0 self) (Seq.get s j) (func'0 self) (C_None'0)))
  
  function produces_trans'0 (a : t_FilterMap'0) (ab : Seq.seq bool) (b : t_FilterMap'0) (bc : Seq.seq bool) (c : t_FilterMap'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_FilterMap'0, ab : Seq.seq bool, b : t_FilterMap'0, bc : Seq.seq bool, c : t_FilterMap'0 . ([%#sfilter_map31] produces'0 a ab b)
   -> ([%#sfilter_map32] produces'0 b bc c)  -> ([%#sfilter_map33] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_FilterMap'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_FilterMap'0 . [%#sfilter_map30] produces'0 self (Seq.empty : Seq.seq bool) self
  
  predicate resolve'5 (self : MutBorrow.t t_Iter'0) =
    [%#sresolve21] self.final = self.current
  
  function view'2 (self : MutBorrow.t t_Iter'0) : Slice64.slice bool =
    [%#smodel48] view'0 self.current
  
  predicate completed'1 (self : MutBorrow.t t_Iter'0) =
    [%#sslice35] resolve'5 self /\ view'1 (view'2 self) = (Seq.empty : Seq.seq bool)
  
  predicate completed'0 (self : MutBorrow.t t_FilterMap'0) =
    [%#sfilter_map19] (exists s : Seq.seq bool, e : MutBorrow.t t_Iter'0 . produces'1 (iter'1 self.current) s e.current
    /\ completed'1 e
    /\ (forall i : int . 0 <= i /\ i < Seq.length s
     -> postcondition_mut'0 (func'0 self.current) (Seq.get s i) (func'0 self.final) (C_None'0)))
    /\ func'0 self.current = func'0 self.final
  
  use seq.Seq
  
  let rec next'0 (self:MutBorrow.t t_FilterMap'0) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] inv'1 self}
    any
    [ return' (result:t_Option'0)-> {inv'5 result}
      {[%#siter10] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'2 (self : MutBorrow.t t_FilterMap'0) =
    [%#sresolve21] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t t_FilterMap'0) =
    resolve'2 _1
  
  let rec promoted2__test_filter_map'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_Some'0 ([%#siter11] false) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  predicate inv'6 (_1 : t_Option'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Option'0 [inv'6 x] . inv'6 x = true
  
  function deep_model'2 (self : bool) : bool =
    [%#smodel49] self
  
  function deep_model'1 (self : t_Option'0) : t_Option'0 =
    [%#soption37] match self with
      | C_Some'0 t -> C_Some'0 (deep_model'2 t)
      | C_None'0 -> C_None'0
      end
  
  function deep_model'0 (self : t_Option'0) : t_Option'0 =
    [%#smodel22] deep_model'1 self
  
  let rec eq'0 (self:t_Option'0) (other:t_Option'0) (return'  (ret:bool))= {[@expl:eq 'self' type invariant] inv'6 self}
    {[@expl:eq 'other' type invariant] inv'6 other}
    any
    [ return' (result:bool)-> {[%#soption12] result = (deep_model'0 self = deep_model'0 other)} (! return' {result}) ]
  
  
  let rec promoted1__test_filter_map'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_Some'0 ([%#siter13] false) ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  let rec promoted0__test_filter_map'0 (return'  (ret:t_Option'0))= bb0
    [ bb0 = s0 [ s0 =  [ &_1 <- C_None'0 ] s1 | s1 =  [ &_0 <- _1 ] s2 | s2 = return' {_0} ]  ]
     [ & _0 : t_Option'0 = Any.any_l () | & _1 : t_Option'0 = Any.any_l () ] 
    [ return' (result:t_Option'0)-> return' {result} ]
  
  
  type t_AssertKind'0  =
    | C_Eq'0
    | C_Ne'0
    | C_Match'0
  
  meta "compute_max_steps" 1000000
  
  let rec test_filter_map'0[#"iter.rs" 22 0 22 24] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = promoted3__test_filter_map'0 (fun (pr3:Slice64.array bool) ->  [ &_76 <- pr3 ] s1)
      | s1 = iter'0 {_76} (fun (_ret':t_Iter'0) ->  [ &_2 <- _ret' ] s2)
      | s2 = bb1 ]
    
    | bb1 = s0
      [ s0 =  [ &_6 <- () ] s1
      | s1 = filter_map'0 {_2} {_6} (fun (_ret':t_FilterMap'0) ->  [ &a <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0
      [ s0 = {inv'0 a}
        MutBorrow.borrow_mut <t_FilterMap'0> {a}
          (fun (_ret':MutBorrow.t t_FilterMap'0) ->  [ &_12 <- _ret' ] -{inv'0 _ret'.final}-  [ &a <- _ret'.final ] s1)
      | s1 = {inv'0 _12.current}
        MutBorrow.borrow_final <t_FilterMap'0> {_12.current} {MutBorrow.get_id _12}
          (fun (_ret':MutBorrow.t t_FilterMap'0) ->
             [ &_11 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &_12 <- { _12 with current = _ret'.final } ] 
            s2)
      | s2 = next'0 {_11} (fun (_ret':t_Option'0) ->  [ &_10 <- _ret' ] s3)
      | s3 = bb3 ]
    
    | bb3 = s0
      [ s0 = {[@expl:type invariant] inv'1 _12} s1
      | s1 = -{resolve'0 _12}- s2
      | s2 = promoted2__test_filter_map'0 (fun (pr2:t_Option'0) ->  [ &_75 <- pr2 ] s3)
      | s3 =  [ &_8 <- (_10, _75) ] s4
      | s4 =  [ &left_val <- let (r'0, _) = _8 in r'0 ] s5
      | s5 =  [ &right_val <- let (_, r'1) = _8 in r'1 ] s6
      | s6 = eq'0 {left_val} {right_val} (fun (_ret':bool) ->  [ &_17 <- _ret' ] s7)
      | s7 = bb4 ]
    
    | bb4 = any [ br0 -> {_17 = false} (! bb6) | br1 -> {_17} (! bb5) ] 
    | bb5 = s0
      [ s0 = {inv'0 a}
        MutBorrow.borrow_mut <t_FilterMap'0> {a}
          (fun (_ret':MutBorrow.t t_FilterMap'0) ->  [ &_34 <- _ret' ] -{inv'0 _ret'.final}-  [ &a <- _ret'.final ] s1)
      | s1 = {inv'0 _34.current}
        MutBorrow.borrow_final <t_FilterMap'0> {_34.current} {MutBorrow.get_id _34}
          (fun (_ret':MutBorrow.t t_FilterMap'0) ->
             [ &_33 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &_34 <- { _34 with current = _ret'.final } ] 
            s2)
      | s2 = next'0 {_33} (fun (_ret':t_Option'0) ->  [ &_32 <- _ret' ] s3)
      | s3 = bb7 ]
    
    | bb7 = s0
      [ s0 = {[@expl:type invariant] inv'1 _34} s1
      | s1 = -{resolve'0 _34}- s2
      | s2 = promoted1__test_filter_map'0 (fun (pr1:t_Option'0) ->  [ &_74 <- pr1 ] s3)
      | s3 =  [ &_30 <- (_32, _74) ] s4
      | s4 =  [ &left_val1 <- let (r'0, _) = _30 in r'0 ] s5
      | s5 =  [ &right_val1 <- let (_, r'1) = _30 in r'1 ] s6
      | s6 = eq'0 {left_val1} {right_val1} (fun (_ret':bool) ->  [ &_39 <- _ret' ] s7)
      | s7 = bb8 ]
    
    | bb8 = any [ br0 -> {_39 = false} (! bb10) | br1 -> {_39} (! bb9) ] 
    | bb9 = s0
      [ s0 = {inv'0 a}
        MutBorrow.borrow_mut <t_FilterMap'0> {a}
          (fun (_ret':MutBorrow.t t_FilterMap'0) ->  [ &_56 <- _ret' ] -{inv'0 _ret'.final}-  [ &a <- _ret'.final ] s1)
      | s1 = {inv'0 _56.current}
        MutBorrow.borrow_final <t_FilterMap'0> {_56.current} {MutBorrow.get_id _56}
          (fun (_ret':MutBorrow.t t_FilterMap'0) ->
             [ &_55 <- _ret' ] 
            -{inv'0 _ret'.final}-
             [ &_56 <- { _56 with current = _ret'.final } ] 
            s2)
      | s2 = next'0 {_55} (fun (_ret':t_Option'0) ->  [ &_54 <- _ret' ] s3)
      | s3 = bb11 ]
    
    | bb11 = s0
      [ s0 = {[@expl:type invariant] inv'1 _56} s1
      | s1 = -{resolve'0 _56}- s2
      | s2 = {[@expl:type invariant] inv'0 a} s3
      | s3 = promoted0__test_filter_map'0 (fun (pr0:t_Option'0) ->  [ &_73 <- pr0 ] s4)
      | s4 =  [ &_52 <- (_54, _73) ] s5
      | s5 =  [ &left_val2 <- let (r'0, _) = _52 in r'0 ] s6
      | s6 =  [ &right_val2 <- let (_, r'1) = _52 in r'1 ] s7
      | s7 = eq'0 {left_val2} {right_val2} (fun (_ret':bool) ->  [ &_61 <- _ret' ] s8)
      | s8 = bb12 ]
    
    | bb12 = any [ br0 -> {_61 = false} (! bb14) | br1 -> {_61} (! bb13) ] 
    | bb13 = return' {_0}
    | bb14 = s0
      [ s0 =  [ &kind2 <- C_Eq'0 ] s1
      | s1 =  [ &_69 <- left_val2 ] s2
      | s2 =  [ &_71 <- right_val2 ] s3
      | s3 = {false} any ]
    
    | bb10 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 =  [ &kind1 <- C_Eq'0 ] s2
      | s2 =  [ &_47 <- left_val1 ] s3
      | s3 =  [ &_49 <- right_val1 ] s4
      | s4 = {false} any ]
    
    | bb6 = s0
      [ s0 = {[@expl:type invariant] inv'0 a} s1
      | s1 =  [ &kind <- C_Eq'0 ] s2
      | s2 =  [ &_25 <- left_val ] s3
      | s3 =  [ &_27 <- right_val ] s4
      | s4 = {false} any ]
     ]
    )
    [ & _0 : () = Any.any_l ()
    | & a : t_FilterMap'0 = Any.any_l ()
    | & _2 : t_Iter'0 = Any.any_l ()
    | & _6 : () = Any.any_l ()
    | & _8 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _10 : t_Option'0 = Any.any_l ()
    | & _11 : MutBorrow.t t_FilterMap'0 = Any.any_l ()
    | & _12 : MutBorrow.t t_FilterMap'0 = Any.any_l ()
    | & left_val : t_Option'0 = Any.any_l ()
    | & right_val : t_Option'0 = Any.any_l ()
    | & _17 : bool = Any.any_l ()
    | & kind : t_AssertKind'0 = Any.any_l ()
    | & _25 : t_Option'0 = Any.any_l ()
    | & _27 : t_Option'0 = Any.any_l ()
    | & _30 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _32 : t_Option'0 = Any.any_l ()
    | & _33 : MutBorrow.t t_FilterMap'0 = Any.any_l ()
    | & _34 : MutBorrow.t t_FilterMap'0 = Any.any_l ()
    | & left_val1 : t_Option'0 = Any.any_l ()
    | & right_val1 : t_Option'0 = Any.any_l ()
    | & _39 : bool = Any.any_l ()
    | & kind1 : t_AssertKind'0 = Any.any_l ()
    | & _47 : t_Option'0 = Any.any_l ()
    | & _49 : t_Option'0 = Any.any_l ()
    | & _52 : (t_Option'0, t_Option'0) = Any.any_l ()
    | & _54 : t_Option'0 = Any.any_l ()
    | & _55 : MutBorrow.t t_FilterMap'0 = Any.any_l ()
    | & _56 : MutBorrow.t t_FilterMap'0 = Any.any_l ()
    | & left_val2 : t_Option'0 = Any.any_l ()
    | & right_val2 : t_Option'0 = Any.any_l ()
    | & _61 : bool = Any.any_l ()
    | & kind2 : t_AssertKind'0 = Any.any_l ()
    | & _69 : t_Option'0 = Any.any_l ()
    | & _71 : t_Option'0 = Any.any_l ()
    | & _73 : t_Option'0 = Any.any_l ()
    | & _74 : t_Option'0 = Any.any_l ()
    | & _75 : t_Option'0 = Any.any_l ()
    | & _76 : Slice64.array bool = Any.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
