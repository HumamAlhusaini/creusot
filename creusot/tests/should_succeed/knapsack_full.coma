module M_knapsack_full__max [#"knapsack_full.rs" 16 0 16 35]
  let%span sknapsack_full0 = "knapsack_full.rs" 15 10 15 31
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.UIntSize
  
  use int.MinMax
  
  meta "compute_max_steps" 1000000
  
  let rec max'0 (a:usize) (b:usize) (return'  (ret:usize))= (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.lt {a} {b} (fun (_ret':bool) ->  [ &_4 <- _ret' ] s1)
      | s1 = any [ br0 -> {_4 = false} (! bb2) | br1 -> {_4} (! bb1) ]  ]
      
    | bb1 = s0 [ s0 =  [ &_0 <- b ] s1 | s1 = bb3 ] 
    | bb2 = s0 [ s0 =  [ &_0 <- a ] s1 | s1 = bb3 ] 
    | bb3 = return' {_0} ]
    ) [ & _0 : usize = any_l () | & a : usize = a | & b : usize = b | & _4 : bool = any_l () ] 
    [ return' (result:usize)-> {[@expl:postcondition] [%#sknapsack_full0] UIntSize.to_int result
      = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
end
module M_knapsack_full__sum_weights [#"knapsack_full.rs" 28 0 28 56]
  let%span sknapsack_full0 = "knapsack_full.rs" 26 11 26 33
  let%span sknapsack_full1 = "knapsack_full.rs" 27 10 27 21
  let%span sknapsack_full2 = "knapsack_full.rs" 25 10 25 19
  let%span sknapsack_full3 = "knapsack_full.rs" 29 4 32 5
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  type t_Name'0
  
  use prelude.prelude.UIntSize
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: usize; t_Item__value'0: usize }
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  constant s  : Seq.seq (t_Item'0)
  
  constant i  : int
  
  function sum_weights'0 [#"knapsack_full.rs" 28 0 28 56] (s : Seq.seq (t_Item'0)) (i : int) : int
  
  goal vc_sum_weights'0 : ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    [%#sknapsack_full1] 0 >= 0
  else
    (([%#sknapsack_full0] 0 <= i + 1 /\ i + 1 <= Seq.length s)
    /\ 0 <= ([%#sknapsack_full2] Seq.length s - i)
    /\ ([%#sknapsack_full2] Seq.length s - (i + 1)) < ([%#sknapsack_full2] Seq.length s - i))
    /\ (([%#sknapsack_full1] sum_weights'0 s (i + 1) >= 0)
     -> ([%#sknapsack_full1] UIntSize.to_int (Seq.get s i).t_Item__weight'0 + sum_weights'0 s (i + 1) >= 0))
  )
end
module M_knapsack_full__sum_values [#"knapsack_full.rs" 38 0 38 55]
  let%span sknapsack_full0 = "knapsack_full.rs" 37 11 37 33
  let%span sknapsack_full1 = "knapsack_full.rs" 36 10 36 19
  let%span sknapsack_full2 = "knapsack_full.rs" 39 4 42 5
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  type t_Name'0
  
  use prelude.prelude.UIntSize
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: usize; t_Item__value'0: usize }
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.UIntSize
  
  constant s  : Seq.seq (t_Item'0)
  
  constant i  : int
  
  function sum_values'0 [#"knapsack_full.rs" 38 0 38 55] (s : Seq.seq (t_Item'0)) (i : int) : int
  
  goal vc_sum_values'0 : ([%#sknapsack_full0] i >= 0 /\ i <= Seq.length s)
   -> (if i = Seq.length s then
    true
  else
    ([%#sknapsack_full0] i + 1 >= 0 /\ i + 1 <= Seq.length s)
    /\ 0 <= ([%#sknapsack_full1] Seq.length s - i)
    /\ ([%#sknapsack_full1] Seq.length s - (i + 1)) < ([%#sknapsack_full1] Seq.length s - i)
  )
end
module M_knapsack_full__subseq_rev [#"knapsack_full.rs" 49 0 49 67]
  let%span sknapsack_full0 = "knapsack_full.rs" 47 11 47 36
  let%span sknapsack_full1 = "knapsack_full.rs" 48 11 48 36
  let%span sknapsack_full2 = "knapsack_full.rs" 46 10 46 12
  let%span sknapsack_full3 = "knapsack_full.rs" 50 4 56 5
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  type t_T'0
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  constant s1  : Seq.seq t_T'0
  
  constant i1  : int
  
  constant s2  : Seq.seq t_T'0
  
  constant i2  : int
  
  predicate subseq_rev'0 [#"knapsack_full.rs" 49 0 49 67] (s1 : Seq.seq t_T'0) (i1 : int) (s2 : Seq.seq t_T'0) (i2 : int)
    
  
  goal vc_subseq_rev'0 : ([%#sknapsack_full1] 0 <= i2 /\ i2 <= Seq.length s2)
   -> ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1)
   -> (if i2 = 0 then
    true
  else
    if i1 < Seq.length s1 then
      if Seq.get s1 i1 = Seq.get s2 (i2 - 1) then
        ((([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 + 1 /\ i1 + 1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2))
        /\ (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
      else
        (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
        && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
        /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
      
    else
      (([%#sknapsack_full1] 0 <= i2 - 1 /\ i2 - 1 <= Seq.length s2)
      && ([%#sknapsack_full0] 0 <= i1 /\ i1 <= Seq.length s1))
      /\ 0 <= ([%#sknapsack_full2] i2) /\ ([%#sknapsack_full2] i2 - 1) < ([%#sknapsack_full2] i2)
    
  )
end
module M_knapsack_full__m [#"knapsack_full.rs" 67 0 67 57]
  let%span sknapsack_full0 = "knapsack_full.rs" 61 11 61 37
  let%span sknapsack_full1 = "knapsack_full.rs" 62 11 62 17
  let%span sknapsack_full2 = "knapsack_full.rs" 63 10 63 21
  let%span sknapsack_full3 = "knapsack_full.rs" 64 0 66 2
  let%span sknapsack_full4 = "knapsack_full.rs" 60 10 60 11
  let%span sknapsack_full5 = "knapsack_full.rs" 68 4 75 5
  let%span sknapsack_full6 = "knapsack_full.rs" 47 11 47 36
  let%span sknapsack_full7 = "knapsack_full.rs" 48 11 48 36
  let%span sknapsack_full8 = "knapsack_full.rs" 46 10 46 12
  let%span sknapsack_full9 = "knapsack_full.rs" 50 4 56 5
  let%span sknapsack_full10 = "knapsack_full.rs" 26 11 26 33
  let%span sknapsack_full11 = "knapsack_full.rs" 27 10 27 21
  let%span sknapsack_full12 = "knapsack_full.rs" 25 10 25 19
  let%span sknapsack_full13 = "knapsack_full.rs" 29 4 32 5
  let%span sknapsack_full14 = "knapsack_full.rs" 37 11 37 33
  let%span sknapsack_full15 = "knapsack_full.rs" 36 10 36 19
  let%span sknapsack_full16 = "knapsack_full.rs" 39 4 42 5
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  type t_Name'0
  
  use prelude.prelude.UIntSize
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: usize; t_Item__value'0: usize }
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"knapsack_full.rs" 49 0 49 67] (s1 : Seq.seq (t_Item'0)) (i1 : int) (s2 : Seq.seq (t_Item'0)) (i2 : int)
    
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq (t_Item'0), i1 : int, s2 : Seq.seq (t_Item'0), i2 : int . subseq_rev'0 s1 i1 s2 i2
  = ([%#sknapsack_full9] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  use prelude.prelude.UIntSize
  
  function sum_weights'0 [#"knapsack_full.rs" 28 0 28 56] (s : Seq.seq (t_Item'0)) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq (t_Item'0), i : int . sum_weights'0 s i
  = ([%#sknapsack_full13] if i = Seq.length s then
    0
  else
    UIntSize.to_int (Seq.get s i).t_Item__weight'0 + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq (t_Item'0), i : int . ([%#sknapsack_full10] 0 <= i /\ i <= Seq.length s)
   -> ([%#sknapsack_full11] sum_weights'0 s i >= 0)
  
  function sum_values'0 [#"knapsack_full.rs" 38 0 38 55] (s : Seq.seq (t_Item'0)) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq (t_Item'0), i : int . sum_values'0 s i
  = ([%#sknapsack_full16] if i = Seq.length s then
    0
  else
    UIntSize.to_int (Seq.get s i).t_Item__value'0 + sum_values'0 s (i + 1)
  )
  
  use int.MinMax
  
  constant items  : Seq.seq (t_Item'0)
  
  constant i  : int
  
  constant w  : int
  
  function m'0 [#"knapsack_full.rs" 67 0 67 57] (items : Seq.seq (t_Item'0)) (i : int) (w : int) : int
  
  goal vc_m'0 : ([%#sknapsack_full1] 0 <= w)
   -> ([%#sknapsack_full0] 0 <= i /\ i <= Seq.length items)
   -> (if i = 0 then
    let result = 0 in ([%#sknapsack_full3] forall s : Seq.seq (t_Item'0), j : int . 0 <= j
    /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)
    && ([%#sknapsack_full2] result >= 0)
  else
    if UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0 > w then
      ((([%#sknapsack_full1] 0 <= w) && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full3] forall s : Seq.seq (t_Item'0), j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m'0 items (i - 1) w)
      && ([%#sknapsack_full2] m'0 items (i - 1) w >= 0)
       -> (let result = m'0 items (i - 1) w in ([%#sknapsack_full3] forall s : Seq.seq (t_Item'0), j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)
      && ([%#sknapsack_full2] result >= 0)))
    else
      ((([%#sknapsack_full1] 0 <= w) && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full3] forall s : Seq.seq (t_Item'0), j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items (i - 1) /\ sum_weights'0 s j <= w
       -> sum_values'0 s j <= m'0 items (i - 1) w)
      && ([%#sknapsack_full2] m'0 items (i - 1) w >= 0)
       -> ((([%#sknapsack_full1] 0 <= w - UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0)
      && ([%#sknapsack_full0] 0 <= i - 1 /\ i - 1 <= Seq.length items))
      /\ 0 <= ([%#sknapsack_full4] i) /\ ([%#sknapsack_full4] i - 1) < ([%#sknapsack_full4] i))
      /\ (([%#sknapsack_full3] forall s : Seq.seq (t_Item'0), j : int . 0 <= j
      /\ j <= Seq.length s
      /\ subseq_rev'0 s j items (i - 1)
      /\ sum_weights'0 s j <= w - UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0
       -> sum_values'0 s j <= m'0 items (i - 1) (w - UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0))
      && ([%#sknapsack_full2] m'0 items (i - 1) (w - UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0) >= 0)
       -> (let result = MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w
      - UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0)
      + UIntSize.to_int (Seq.get items (i
      - 1)).t_Item__value'0) in ([%#sknapsack_full3] forall s : Seq.seq (t_Item'0), j : int . 0 <= j
      /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= result)
      && ([%#sknapsack_full2] result >= 0))))
    
  )
end
module M_knapsack_full__knapsack01_dyn [#"knapsack_full.rs" 86 0 86 91]
  let%span sknapsack_full0 = "knapsack_full.rs" 87 51 87 52
  let%span sknapsack_full1 = "knapsack_full.rs" 87 35 87 36
  let%span sknapsack_full2 = "knapsack_full.rs" 87 69 87 70
  let%span sknapsack_full3 = "knapsack_full.rs" 96 13 96 14
  let%span sknapsack_full4 = "knapsack_full.rs" 89 4 89 55
  let%span sknapsack_full5 = "knapsack_full.rs" 89 4 89 55
  let%span sknapsack_full6 = "knapsack_full.rs" 89 4 89 55
  let%span sknapsack_full7 = "knapsack_full.rs" 89 16 89 53
  let%span sknapsack_full8 = "knapsack_full.rs" 89 4 89 55
  let%span sknapsack_full9 = "knapsack_full.rs" 111 17 111 18
  let%span sknapsack_full10 = "knapsack_full.rs" 99 8 99 59
  let%span sknapsack_full11 = "knapsack_full.rs" 99 8 99 59
  let%span sknapsack_full12 = "knapsack_full.rs" 99 8 99 59
  let%span sknapsack_full13 = "knapsack_full.rs" 99 20 99 57
  let%span sknapsack_full14 = "knapsack_full.rs" 99 8 99 59
  let%span sknapsack_full15 = "knapsack_full.rs" 112 27 112 28
  let%span sknapsack_full16 = "knapsack_full.rs" 124 16 124 27
  let%span sknapsack_full17 = "knapsack_full.rs" 125 16 125 34
  let%span sknapsack_full18 = "knapsack_full.rs" 126 16 126 43
  let%span sknapsack_full19 = "knapsack_full.rs" 124 4 124 29
  let%span sknapsack_full20 = "knapsack_full.rs" 142 10 142 11
  let%span sknapsack_full21 = "knapsack_full.rs" 143 13 143 14
  let%span sknapsack_full22 = "knapsack_full.rs" 145 26 145 27
  let%span sknapsack_full23 = "knapsack_full.rs" 78 11 78 34
  let%span sknapsack_full24 = "knapsack_full.rs" 79 11 79 33
  let%span sknapsack_full25 = "knapsack_full.rs" 80 0 80 86
  let%span sknapsack_full26 = "knapsack_full.rs" 86 28 86 33
  let%span sknapsack_full27 = "knapsack_full.rs" 81 10 81 60
  let%span sknapsack_full28 = "knapsack_full.rs" 82 10 82 54
  let%span sknapsack_full29 = "knapsack_full.rs" 83 0 85 2
  let%span sknapsack_full30 = "knapsack_full.rs" 86 75 86 91
  let%span svec31 = "../../../creusot-contracts/src/std/vec.rs" 180 22 180 41
  let%span svec32 = "../../../creusot-contracts/src/std/vec.rs" 181 12 181 78
  let%span svec33 = "../../../creusot-contracts/src/std/vec.rs" 83 26 83 48
  let%span siter34 = "../../../creusot-contracts/src/std/iter.rs" 101 0 214 1
  let%span srange35 = "../../../creusot-contracts/src/std/iter/range.rs" 22 8 28 9
  let%span smodel36 = "../../../creusot-contracts/src/model.rs" 88 8 88 22
  let%span svec37 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span sops38 = "../../../creusot-contracts/src/logic/ops.rs" 20 8 20 31
  let%span sknapsack_full39 = "knapsack_full.rs" 61 11 61 37
  let%span sknapsack_full40 = "knapsack_full.rs" 62 11 62 17
  let%span sknapsack_full41 = "knapsack_full.rs" 63 10 63 21
  let%span sknapsack_full42 = "knapsack_full.rs" 64 0 66 2
  let%span sknapsack_full43 = "knapsack_full.rs" 60 10 60 11
  let%span sknapsack_full44 = "knapsack_full.rs" 68 4 75 5
  let%span siter45 = "../../../creusot-contracts/src/std/iter.rs" 107 26 110 17
  let%span svec46 = "../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span svec47 = "../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span sops48 = "../../../creusot-contracts/src/std/ops.rs" 209 26 209 53
  let%span sops49 = "../../../creusot-contracts/src/std/ops.rs" 210 26 210 49
  let%span sops50 = "../../../creusot-contracts/src/std/ops.rs" 211 16 211 93
  let%span srange51 = "../../../creusot-contracts/src/std/iter/range.rs" 70 8 76 9
  let%span sknapsack_full52 = "knapsack_full.rs" 15 10 15 31
  let%span svec53 = "../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span svec54 = "../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec55 = "../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec56 = "../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec57 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span svec58 = "../../../creusot-contracts/src/std/vec.rs" 78 26 78 44
  let%span sknapsack_full59 = "knapsack_full.rs" 26 11 26 33
  let%span sknapsack_full60 = "knapsack_full.rs" 27 10 27 21
  let%span sknapsack_full61 = "knapsack_full.rs" 25 10 25 19
  let%span sknapsack_full62 = "knapsack_full.rs" 29 4 32 5
  let%span sknapsack_full63 = "knapsack_full.rs" 37 11 37 33
  let%span sknapsack_full64 = "knapsack_full.rs" 36 10 36 19
  let%span sknapsack_full65 = "knapsack_full.rs" 39 4 42 5
  let%span sknapsack_full66 = "knapsack_full.rs" 47 11 47 36
  let%span sknapsack_full67 = "knapsack_full.rs" 48 11 48 36
  let%span sknapsack_full68 = "knapsack_full.rs" 46 10 46 12
  let%span sknapsack_full69 = "knapsack_full.rs" 50 4 56 5
  let%span svec70 = "../../../creusot-contracts/src/std/vec.rs" 87 26 87 56
  let%span siter71 = "../../../creusot-contracts/src/std/iter.rs" 86 20 86 24
  let%span siter72 = "../../../creusot-contracts/src/std/iter.rs" 92 8 92 19
  let%span srange73 = "../../../creusot-contracts/src/std/iter/range.rs" 33 15 33 24
  let%span srange74 = "../../../creusot-contracts/src/std/iter/range.rs" 34 14 34 45
  let%span srange75 = "../../../creusot-contracts/src/std/iter/range.rs" 39 15 39 21
  let%span srange76 = "../../../creusot-contracts/src/std/iter/range.rs" 40 15 40 21
  let%span srange77 = "../../../creusot-contracts/src/std/iter/range.rs" 41 15 41 21
  let%span srange78 = "../../../creusot-contracts/src/std/iter/range.rs" 42 15 42 32
  let%span srange79 = "../../../creusot-contracts/src/std/iter/range.rs" 43 15 43 32
  let%span srange80 = "../../../creusot-contracts/src/std/iter/range.rs" 44 14 44 42
  let%span snum81 = "../../../creusot-contracts/src/std/num.rs" 21 16 21 35
  let%span srange82 = "../../../creusot-contracts/src/std/iter/range.rs" 15 12 15 78
  let%span sresolve83 = "../../../creusot-contracts/src/resolve.rs" 41 20 41 34
  let%span sslice84 = "../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice85 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span sops86 = "../../../creusot-contracts/src/std/ops.rs" 195 4 195 88
  let%span srange87 = "../../../creusot-contracts/src/std/iter/range.rs" 81 14 81 45
  let%span srange88 = "../../../creusot-contracts/src/std/iter/range.rs" 79 4 79 10
  let%span srange89 = "../../../creusot-contracts/src/std/iter/range.rs" 86 15 86 32
  let%span srange90 = "../../../creusot-contracts/src/std/iter/range.rs" 87 15 87 32
  let%span srange91 = "../../../creusot-contracts/src/std/iter/range.rs" 88 14 88 42
  let%span srange92 = "../../../creusot-contracts/src/std/iter/range.rs" 84 4 84 10
  let%span srange93 = "../../../creusot-contracts/src/std/iter/range.rs" 50 10 50 43
  let%span srange94 = "../../../creusot-contracts/src/std/iter/range.rs" 52 4 55 5
  let%span srange95 = "../../../creusot-contracts/src/std/iter/range.rs" 63 12 63 57
  let%span smodel96 = "../../../creusot-contracts/src/model.rs" 106 8 106 22
  let%span sslice97 = "../../../creusot-contracts/src/std/slice.rs" 136 8 136 96
  let%span svec98 = "../../../creusot-contracts/src/std/vec.rs" 65 20 65 41
  let%span sinvariant99 = "../../../creusot-contracts/src/invariant.rs" 24 8 24 18
  let%span sinvariant100 = "../../../creusot-contracts/src/invariant.rs" 34 20 34 44
  let%span sseq101 = "../../../creusot-contracts/src/logic/seq.rs" 444 8 444 97
  let%span sboxed102 = "../../../creusot-contracts/src/std/boxed.rs" 28 8 28 18
  
  use prelude.prelude.UIntSize
  
  predicate inv'5 (_1 : usize)
  
  use seq.Seq
  
  constant v_MAX'0 : usize = (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_Cap'0  =
    { t_Cap__0'0: usize }
  
  type t_RawVec'0  =
    { t_RawVec__ptr'0: t_Unique'0; t_RawVec__cap'0: t_Cap'0; t_RawVec__alloc'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  use seq.Seq
  
  function view'2 (self : t_Vec'0) : Seq.seq usize
  
  axiom view'2_spec : forall self : t_Vec'0 . [%#svec37] Seq.length (view'2 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'3 [@inline:trivial] (self : t_Vec'0) (ix : int) : usize =
    [%#sops38] Seq.get (view'2 self) ix
  
  predicate inv'6 (_1 : t_Vec'0)
  
  predicate inv'0 (_1 : Seq.seq usize)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Seq.seq usize [inv'0 x] . inv'0 x = true
  
  type t_Range'0  =
    { t_Range__start'0: usize; t_Range__end'0: usize }
  
  predicate inv'1 (_1 : t_Range'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Range'0 [inv'1 x] . inv'1 x = true
  
  type t_RangeInclusive'0  =
    { t_RangeInclusive__start'0: usize; t_RangeInclusive__end'0: usize; t_RangeInclusive__exhausted'0: bool }
  
  predicate inv'2 (_1 : t_RangeInclusive'0)
  
  axiom inv_axiom'2 [@rewrite] : forall x : t_RangeInclusive'0 [inv'2 x] . inv'2 x = true
  
  type t_NonNull'2  =
    { t_NonNull__pointer'2: opaque_ptr }
  
  type t_Unique'2  =
    { t_Unique__pointer'2: t_NonNull'2; t_Unique__qy95zmarker'2: () }
  
  type t_RawVec'2  =
    { t_RawVec__ptr'2: t_Unique'2; t_RawVec__cap'2: t_Cap'0; t_RawVec__alloc'2: () }
  
  type t_Vec'2  =
    { t_Vec__buf'2: t_RawVec'2; t_Vec__len'2: usize }
  
  predicate inv'3 (_1 : t_Vec'2)
  
  use seq.Seq
  
  use prelude.prelude.Borrow
  
  type t_Name'0
  
  type t_Item'0  =
    { t_Item__name'0: t_Name'0; t_Item__weight'0: usize; t_Item__value'0: usize }
  
  use seq.Seq
  
  function view'3 (self : t_Vec'2) : Seq.seq (t_Item'0)
  
  axiom view'3_spec : forall self : t_Vec'2 . [%#svec37] Seq.length (view'3 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate inv'19 (_1 : Seq.seq (t_Item'0))
  
  predicate invariant'0 (self : t_Vec'2) =
    [%#svec98] inv'19 (view'3 self)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'2 [inv'3 x] . inv'3 x = invariant'0 x
  
  type t_NonNull'3  =
    { t_NonNull__pointer'3: opaque_ptr }
  
  type t_Unique'3  =
    { t_Unique__pointer'3: t_NonNull'3; t_Unique__qy95zmarker'3: () }
  
  type t_RawVec'3  =
    { t_RawVec__ptr'3: t_Unique'3; t_RawVec__cap'3: t_Cap'0; t_RawVec__alloc'3: () }
  
  type t_Vec'3  =
    { t_Vec__buf'3: t_RawVec'3; t_Vec__len'3: usize }
  
  predicate inv'4 (_1 : t_Vec'3)
  
  predicate inv'20 (_1 : t_Vec'3)
  
  predicate invariant'1 (self : t_Vec'3) =
    [%#sinvariant99] inv'20 self
  
  axiom inv_axiom'4 [@rewrite] : forall x : t_Vec'3 [inv'4 x] . inv'4 x = invariant'1 x
  
  axiom inv_axiom'5 [@rewrite] : forall x : usize [inv'5 x] . inv'5 x = true
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'0 [inv'6 x] . inv'6 x = true
  
  type t_NonNull'1  =
    { t_NonNull__pointer'1: opaque_ptr }
  
  type t_Unique'1  =
    { t_Unique__pointer'1: t_NonNull'1; t_Unique__qy95zmarker'1: () }
  
  type t_RawVec'1  =
    { t_RawVec__ptr'1: t_Unique'1; t_RawVec__cap'1: t_Cap'0; t_RawVec__alloc'1: () }
  
  type t_Vec'1  =
    { t_Vec__buf'1: t_RawVec'1; t_Vec__len'1: usize }
  
  predicate inv'7 (_1 : t_Vec'1)
  
  axiom inv_axiom'7 [@rewrite] : forall x : t_Vec'1 [inv'7 x] . inv'7 x = true
  
  predicate inv'8 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'8 [@rewrite] : forall x : borrowed (t_Range'0) [inv'8 x] . inv'8 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 usize
  
  predicate inv'9 (_1 : t_Option'0)
  
  axiom inv_axiom'9 [@rewrite] : forall x : t_Option'0 [inv'9 x] . inv'9 x = true
  
  predicate inv'10 (_1 : t_Item'0)
  
  predicate inv'21 (_1 : t_Item'0)
  
  predicate invariant'2 (self : t_Item'0) =
    [%#sinvariant99] inv'21 self
  
  axiom inv_axiom'10 [@rewrite] : forall x : t_Item'0 [inv'10 x] . inv'10 x = invariant'2 x
  
  predicate inv'11 (_1 : borrowed (t_RangeInclusive'0))
  
  axiom inv_axiom'11 [@rewrite] : forall x : borrowed (t_RangeInclusive'0) [inv'11 x] . inv'11 x = true
  
  predicate inv'12 (_1 : t_Vec'1)
  
  axiom inv_axiom'12 [@rewrite] : forall x : t_Vec'1 [inv'12 x] . inv'12 x = true
  
  predicate inv'13 (_1 : t_Vec'0)
  
  axiom inv_axiom'13 [@rewrite] : forall x : t_Vec'0 [inv'13 x] . inv'13 x = true
  
  predicate inv'14 (_1 : usize)
  
  axiom inv_axiom'14 [@rewrite] : forall x : usize [inv'14 x] . inv'14 x = true
  
  predicate inv'15 (_1 : borrowed (t_Vec'1))
  
  axiom inv_axiom'15 [@rewrite] : forall x : borrowed (t_Vec'1) [inv'15 x] . inv'15 x = true
  
  predicate inv'16 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'16 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'16 x] . inv'16 x = true
  
  predicate inv'17 (_1 : borrowed usize)
  
  axiom inv_axiom'17 [@rewrite] : forall x : borrowed usize [inv'17 x] . inv'17 x = true
  
  predicate inv'18 (_1 : borrowed (t_Vec'2))
  
  predicate invariant'3 (self : borrowed (t_Vec'2)) =
    [%#sinvariant100] inv'3 self.current /\ inv'3 self.final
  
  axiom inv_axiom'18 [@rewrite] : forall x : borrowed (t_Vec'2) [inv'18 x] . inv'18 x = invariant'3 x
  
  use seq.Seq
  
  predicate inv'23 (_1 : t_Item'0)
  
  predicate invariant'4 (self : Seq.seq (t_Item'0)) =
    [%#sseq101] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'23 (Seq.get self i)
  
  axiom inv_axiom'19 [@rewrite] : forall x : Seq.seq (t_Item'0) [inv'19 x] . inv'19 x = invariant'4 x
  
  use seq.Seq
  
  use seq.Seq
  
  function view'4 (self : t_Vec'3) : Seq.seq (t_Item'0)
  
  axiom view'4_spec : forall self : t_Vec'3 . [%#svec37] Seq.length (view'4 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  predicate inv'24 (_1 : Seq.seq (t_Item'0))
  
  predicate invariant'5 (self : t_Vec'3) =
    [%#svec98] inv'24 (view'4 self)
  
  axiom inv_axiom'20 [@rewrite] : forall x : t_Vec'3 [inv'20 x] . inv'20 x = invariant'5 x
  
  predicate inv'22 (_1 : t_Name'0)
  
  axiom inv_axiom'21 [@rewrite] : forall x : t_Item'0 [inv'21 x] . inv'21 x
  = match x with
    | {t_Item__name'0 = name ; t_Item__weight'0 = weight ; t_Item__value'0 = value} -> inv'22 name
    end
  
  predicate invariant'6 (self : t_Item'0) =
    [%#sboxed102] inv'10 self
  
  axiom inv_axiom'22 [@rewrite] : forall x : t_Item'0 [inv'23 x] . inv'23 x = invariant'6 x
  
  use seq.Seq
  
  predicate inv'25 (_1 : t_Item'0)
  
  predicate invariant'7 (self : Seq.seq (t_Item'0)) =
    [%#sseq101] forall i : int . 0 <= i /\ i < Seq.length self  -> inv'25 (Seq.get self i)
  
  axiom inv_axiom'23 [@rewrite] : forall x : Seq.seq (t_Item'0) [inv'24 x] . inv'24 x = invariant'7 x
  
  predicate invariant'8 (self : t_Item'0) =
    [%#sboxed102] inv'21 self
  
  axiom inv_axiom'24 [@rewrite] : forall x : t_Item'0 [inv'25 x] . inv'25 x = invariant'8 x
  
  let rec from_elem'0 (elem:usize) (n:usize) (return'  (ret:t_Vec'0))= {[@expl:precondition] inv'5 elem}
    any
    [ return' (result:t_Vec'0)-> {inv'6 result}
      {[%#svec32] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'3 result i = elem}
      {[%#svec31] Seq.length (view'2 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  function view'0 (self : t_Vec'3) : Seq.seq (t_Item'0) =
    [%#smodel36] view'4 self
  
  let rec len'0 (self:t_Vec'3) (return'  (ret:usize))= {[@expl:precondition] inv'4 self}
    any
    [ return' (result:usize)-> {[%#svec33] UIntSize.to_int result = Seq.length (view'0 self)} (! return' {result}) ]
    
  
  use seq.Seq
  
  use seq.Seq
  
  function view'1 (self : t_Vec'1) : Seq.seq (t_Vec'0)
  
  axiom view'1_spec : forall self : t_Vec'1 . [%#svec37] Seq.length (view'1 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'1) (ix : int) : t_Vec'0 =
    [%#sops38] Seq.get (view'1 self) ix
  
  let rec from_elem'1 (elem:t_Vec'0) (n:usize) (return'  (ret:t_Vec'1))= {[@expl:precondition] inv'6 elem}
    any
    [ return' (result:t_Vec'1)-> {inv'7 result}
      {[%#svec32] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      {[%#svec31] Seq.length (view'1 result) = UIntSize.to_int n}
      (! return' {result}) ]
    
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter71] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter72] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:precondition] inv'1 self}
    {[@expl:precondition] [%#siter34] into_iter_pre'0 self}
    any [ return' (result:t_Range'0)-> {inv'1 result} {[%#siter34] into_iter_post'0 self result} (! return' {result}) ] 
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function deep_model'0 (self : usize) : int =
    [%#snum81] UIntSize.to_int self
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq usize) (o : t_Range'0) =
    [%#srange35] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  use seq.Seq
  
  use seq.Seq
  
  predicate subseq_rev'0 [#"knapsack_full.rs" 49 0 49 67] (s1 : Seq.seq (t_Item'0)) (i1 : int) (s2 : Seq.seq (t_Item'0)) (i2 : int)
    
  
  axiom subseq_rev'0_def : forall s1 : Seq.seq (t_Item'0), i1 : int, s2 : Seq.seq (t_Item'0), i2 : int . subseq_rev'0 s1 i1 s2 i2
  = ([%#sknapsack_full69] if i2 = 0 then
    i1 = Seq.length s1
  else
    i1 < Seq.length s1 /\ Seq.get s1 i1 = Seq.get s2 (i2 - 1) /\ subseq_rev'0 s1 (i1 + 1) s2 (i2 - 1)
    \/ subseq_rev'0 s1 i1 s2 (i2 - 1)
  )
  
  function sum_weights'0 [#"knapsack_full.rs" 28 0 28 56] (s : Seq.seq (t_Item'0)) (i : int) : int
  
  axiom sum_weights'0_def : forall s : Seq.seq (t_Item'0), i : int . sum_weights'0 s i
  = ([%#sknapsack_full62] if i = Seq.length s then
    0
  else
    UIntSize.to_int (Seq.get s i).t_Item__weight'0 + sum_weights'0 s (i + 1)
  )
  
  axiom sum_weights'0_spec : forall s : Seq.seq (t_Item'0), i : int . ([%#sknapsack_full59] 0 <= i /\ i <= Seq.length s)
   -> ([%#sknapsack_full60] sum_weights'0 s i >= 0)
  
  function sum_values'0 [#"knapsack_full.rs" 38 0 38 55] (s : Seq.seq (t_Item'0)) (i : int) : int
  
  axiom sum_values'0_def : forall s : Seq.seq (t_Item'0), i : int . sum_values'0 s i
  = ([%#sknapsack_full65] if i = Seq.length s then
    0
  else
    UIntSize.to_int (Seq.get s i).t_Item__value'0 + sum_values'0 s (i + 1)
  )
  
  use int.MinMax
  
  function m'0 [#"knapsack_full.rs" 67 0 67 57] (items : Seq.seq (t_Item'0)) (i : int) (w : int) : int
  
  axiom m'0_def : forall items : Seq.seq (t_Item'0), i : int, w : int . m'0 items i w
  = ([%#sknapsack_full44] if i = 0 then
    0
  else
    if UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0 > w then
      m'0 items (i - 1) w
    else
      MinMax.max (m'0 items (i - 1) w) (m'0 items (i - 1) (w - UIntSize.to_int (Seq.get items (i - 1)).t_Item__weight'0)
      + UIntSize.to_int (Seq.get items (i - 1)).t_Item__value'0)
    
  )
  
  axiom m'0_spec : forall items : Seq.seq (t_Item'0), i : int, w : int . ([%#sknapsack_full39] 0 <= i
  /\ i <= Seq.length items)
   -> ([%#sknapsack_full40] 0 <= w)
   -> ([%#sknapsack_full42] forall s : Seq.seq (t_Item'0), j : int . 0 <= j
  /\ j <= Seq.length s /\ subseq_rev'0 s j items i /\ sum_weights'0 s j <= w  -> sum_values'0 s j <= m'0 items i w)
  && ([%#sknapsack_full41] m'0 items i w >= 0)
  
  predicate resolve'4 (self : borrowed (t_Range'0)) =
    [%#sresolve83] self.final = self.current
  
  predicate completed'0 (self : borrowed (t_Range'0)) =
    [%#srange82] resolve'4 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:precondition] inv'8 self}
    any
    [ return' (result:t_Option'0)-> {inv'9 result}
      {[%#siter45] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'0 (_1 : borrowed (t_Range'0)) =
    resolve'4 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : usize [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
    
  
  use seq.Seq
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_Item'0)) =
    [%#sslice84] UIntSize.to_int self < Seq.length seq
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq (t_Item'0)) (out : t_Item'0) =
    [%#sslice85] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'3) (index:usize) (return'  (ret:t_Item'0))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'4 self}
    {[@expl:precondition] [%#svec46] in_bounds'0 index (view'0 self)}
    any
    [ return' (result:t_Item'0)-> {inv'10 result}
      {[%#svec47] has_value'0 index (view'0 self) result}
      (! return' {result}) ]
    
  
  function start_log'0 (self : t_RangeInclusive'0) : usize
  
  function end_log'0 (self : t_RangeInclusive'0) : usize
  
  function is_empty_log'0 (self : t_RangeInclusive'0) : bool
  
  axiom is_empty_log'0_spec : forall self : t_RangeInclusive'0 . [%#sops86] not is_empty_log'0 self
   -> deep_model'0 (start_log'0 self) <= deep_model'0 (end_log'0 self)
  
  let rec new'0 (start:usize) (end':usize) (return'  (ret:t_RangeInclusive'0))= {[@expl:precondition] inv'5 end'}
    {[@expl:precondition] inv'5 start}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'2 result}
      {[%#sops50] deep_model'0 start <= deep_model'0 end'  -> not is_empty_log'0 result}
      {[%#sops49] end_log'0 result = end'}
      {[%#sops48] start_log'0 result = start}
      (! return' {result}) ]
    
  
  predicate into_iter_pre'1 (self : t_RangeInclusive'0) =
    [%#siter71] true
  
  predicate into_iter_post'1 (self : t_RangeInclusive'0) (res : t_RangeInclusive'0) =
    [%#siter72] self = res
  
  let rec into_iter'1 (self:t_RangeInclusive'0) (return'  (ret:t_RangeInclusive'0))= {[@expl:precondition] inv'2 self}
    {[@expl:precondition] [%#siter34] into_iter_pre'1 self}
    any
    [ return' (result:t_RangeInclusive'0)-> {inv'2 result}
      {[%#siter34] into_iter_post'1 self result}
      (! return' {result}) ]
    
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function range_inclusive_len'0 (r : t_RangeInclusive'0) : int =
    [%#srange94] if is_empty_log'0 r then 0 else deep_model'0 (end_log'0 r) - deep_model'0 (start_log'0 r) + 1
  
  axiom range_inclusive_len'0_spec : forall r : t_RangeInclusive'0 . [%#srange93] is_empty_log'0 r
  = (range_inclusive_len'0 r = 0)
  
  predicate produces'1 (self : t_RangeInclusive'0) (visited : Seq.seq usize) (o : t_RangeInclusive'0) =
    [%#srange51] Seq.length visited = range_inclusive_len'0 self - range_inclusive_len'0 o
    /\ (is_empty_log'0 self  -> is_empty_log'0 o)
    /\ (is_empty_log'0 o \/ end_log'0 self = end_log'0 o)
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 (start_log'0 self) + i)
  
  predicate completed'1 (self : borrowed (t_RangeInclusive'0)) =
    [%#srange95] is_empty_log'0 self.current /\ is_empty_log'0 self.final
  
  let rec next'1 (self:borrowed (t_RangeInclusive'0)) (return'  (ret:t_Option'0))= {[@expl:precondition] inv'11 self}
    any
    [ return' (result:t_Option'0)-> {inv'9 result}
      {[%#siter45] match result with
        | C_None'0 -> completed'1 self
        | C_Some'0 v -> produces'1 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
    
  
  predicate resolve'5 (self : borrowed (t_RangeInclusive'0)) =
    [%#sresolve83] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed (t_RangeInclusive'0)) =
    resolve'5 _1
  
  function view'5 (self : t_Vec'1) : Seq.seq (t_Vec'0) =
    [%#smodel36] view'1 self
  
  predicate in_bounds'1 [@inline:trivial] (self : usize) (seq : Seq.seq (t_Vec'0)) =
    [%#sslice84] UIntSize.to_int self < Seq.length seq
  
  predicate has_value'1 [@inline:trivial] (self : usize) (seq : Seq.seq (t_Vec'0)) (out : t_Vec'0) =
    [%#sslice85] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'1 (self:t_Vec'1) (index:usize) (return'  (ret:t_Vec'0))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'12 self}
    {[@expl:precondition] [%#svec46] in_bounds'1 index (view'5 self)}
    any
    [ return' (result:t_Vec'0)-> {inv'13 result}
      {[%#svec47] has_value'1 index (view'5 self) result}
      (! return' {result}) ]
    
  
  function view'6 (self : t_Vec'0) : Seq.seq usize =
    [%#smodel36] view'2 self
  
  predicate in_bounds'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) =
    [%#sslice84] UIntSize.to_int self < Seq.length seq
  
  predicate has_value'2 [@inline:trivial] (self : usize) (seq : Seq.seq usize) (out : usize) =
    [%#sslice85] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'2 (self:t_Vec'0) (index:usize) (return'  (ret:usize))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'13 self}
    {[@expl:precondition] [%#svec46] in_bounds'2 index (view'6 self)}
    any
    [ return' (result:usize)-> {inv'14 result}
      {[%#svec47] has_value'2 index (view'6 self) result}
      (! return' {result}) ]
    
  
  let rec max'0 (a:usize) (b:usize) (return'  (ret:usize))= any
    [ return' (result:usize)-> {[%#sknapsack_full52] UIntSize.to_int result
      = MinMax.max (UIntSize.to_int a) (UIntSize.to_int b)}
      (! return' {result}) ]
    
  
  function view'7 (self : borrowed (t_Vec'1)) : Seq.seq (t_Vec'0) =
    [%#smodel96] view'1 self.current
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq (t_Vec'0)) (fin : Seq.seq (t_Vec'0)) =
    [%#sslice97] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (t_Vec'1)) (index:usize) (return'  (ret:borrowed (t_Vec'0)))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'15 self}
    {[@expl:precondition] [%#svec53] in_bounds'1 index (view'7 self)}
    any
    [ return' (result:borrowed (t_Vec'0))-> {inv'16 result}
      {[%#svec57] Seq.length (view'1 self.final) = Seq.length (view'7 self)}
      {[%#svec56] resolve_elswhere'0 index (view'7 self) (view'1 self.final)}
      {[%#svec55] has_value'1 index (view'1 self.final) result.final}
      {[%#svec54] has_value'1 index (view'7 self) result.current}
      (! return' {result}) ]
    
  
  function view'8 (self : borrowed (t_Vec'0)) : Seq.seq usize =
    [%#smodel96] view'2 self.current
  
  predicate resolve_elswhere'1 [@inline:trivial] (self : usize) (old' : Seq.seq usize) (fin : Seq.seq usize) =
    [%#sslice97] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'1 (self:borrowed (t_Vec'0)) (index:usize) (return'  (ret:borrowed usize))= {[@expl:precondition] inv'5 index}
    {[@expl:precondition] inv'16 self}
    {[@expl:precondition] [%#svec53] in_bounds'2 index (view'8 self)}
    any
    [ return' (result:borrowed usize)-> {inv'17 result}
      {[%#svec57] Seq.length (view'2 self.final) = Seq.length (view'8 self)}
      {[%#svec56] resolve_elswhere'1 index (view'8 self) (view'2 self.final)}
      {[%#svec55] has_value'2 index (view'2 self.final) result.final}
      {[%#svec54] has_value'2 index (view'8 self) result.current}
      (! return' {result}) ]
    
  
  predicate resolve'6 (self : borrowed usize) =
    [%#sresolve83] self.final = self.current
  
  predicate resolve'2 (_1 : borrowed usize) =
    resolve'6 _1
  
  predicate resolve'7 (self : borrowed (t_Vec'0)) =
    [%#sresolve83] self.final = self.current
  
  predicate resolve'3 (_1 : borrowed (t_Vec'0)) =
    resolve'7 _1
  
  let rec with_capacity'0 (capacity:usize) (return'  (ret:t_Vec'2))= any
    [ return' (result:t_Vec'2)-> {inv'3 result} {[%#svec58] Seq.length (view'3 result) = 0} (! return' {result}) ]
    
  
  function index_logic'1 [@inline:trivial] (self : t_Vec'2) (ix : int) : t_Item'0 =
    [%#sops38] Seq.get (view'3 self) ix
  
  function view'9 (self : borrowed (t_Vec'2)) : Seq.seq (t_Item'0) =
    [%#smodel96] view'3 self.current
  
  use seq.Seq
  
  let rec push'0 (self:borrowed (t_Vec'2)) (value:t_Item'0) (return'  (ret:()))= {[@expl:precondition] inv'10 value}
    {[@expl:precondition] inv'18 self}
    any [ return' (result:())-> {[%#svec70] view'3 self.final = Seq.snoc (view'9 self) value} (! return' {result}) ] 
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  function index_logic'2 [@inline:trivial] (self : t_Vec'3) (ix : int) : t_Item'0 =
    [%#sops38] Seq.get (view'4 self) ix
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . ([%#srange73] inv'1 self)
   -> ([%#srange74] produces'0 self (Seq.empty  : Seq.seq usize) self)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq usize) (b : t_Range'0) (bc : Seq.seq usize) (c : t_Range'0) : ()
    
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq usize, b : t_Range'0, bc : Seq.seq usize, c : t_Range'0 . ([%#srange75] inv'1 a)
   -> ([%#srange76] inv'1 b)
   -> ([%#srange77] inv'1 c)
   -> ([%#srange78] produces'0 a ab b)
   -> ([%#srange79] produces'0 b bc c)  -> ([%#srange80] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'1 (self : t_RangeInclusive'0) : () =
    [%#srange88] ()
  
  axiom produces_refl'1_spec : forall self : t_RangeInclusive'0 . [%#srange87] produces'1 self (Seq.empty  : Seq.seq usize) self
  
  function produces_trans'1 (a : t_RangeInclusive'0) (ab : Seq.seq usize) (b : t_RangeInclusive'0) (bc : Seq.seq usize) (c : t_RangeInclusive'0) : ()
    
   =
    [%#srange92] ()
  
  axiom produces_trans'1_spec : forall a : t_RangeInclusive'0, ab : Seq.seq usize, b : t_RangeInclusive'0, bc : Seq.seq usize, c : t_RangeInclusive'0 . ([%#srange89] produces'1 a ab b)
   -> ([%#srange90] produces'1 b bc c)  -> ([%#srange91] produces'1 a (Seq.(++) ab bc) c)
  
  meta "compute_max_steps" 1000000
  
  let rec knapsack01_dyn'0 (items:t_Vec'3) (max_weight:usize) (return'  (ret:t_Vec'2))= {[%#sknapsack_full26] inv'4 items}
    {[%#sknapsack_full25] forall i : int . 0 <= i /\ i < Seq.length (view'0 items)
     -> UIntSize.to_int (index_logic'2 items i).t_Item__value'0 <= 10000000}
    {[%#sknapsack_full24] UIntSize.to_int max_weight < 10000000}
    {[%#sknapsack_full23] Seq.length (view'0 items) < 10000000}
    (! bb0
    [ bb0 = s0
      [ s0 = UIntSize.add {max_weight} {[%#sknapsack_full0] (1 : usize)} (fun (_ret':usize) ->  [ &_11 <- _ret' ] s1)
      | s1 = from_elem'0 {[%#sknapsack_full1] (0 : usize)} {_11} (fun (_ret':t_Vec'0) ->  [ &_10 <- _ret' ] s2)
      | s2 = bb1 ]
      
    | bb1 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_14 <- _ret' ] s1) | s1 = bb2 ] 
    | bb2 = s0
      [ s0 = UIntSize.add {_14} {[%#sknapsack_full2] (1 : usize)} (fun (_ret':usize) ->  [ &_13 <- _ret' ] s1)
      | s1 = from_elem'1 {_10} {_13} (fun (_ret':t_Vec'1) ->  [ &best_value <- _ret' ] s2)
      | s2 = bb3 ]
      
    | bb3 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_19 <- _ret' ] s1) | s1 = bb4 ] 
    | bb4 = s0
      [ s0 =  [ &_18 <- { t_Range__start'0 = ([%#sknapsack_full3] (0 : usize)); t_Range__end'0 = _19 } ] s1
      | s1 = into_iter'0 {_18} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb5 ]
      
    | bb5 = s0 [ s0 =  [ &iter_old <- [%#sknapsack_full4] Snapshot.new iter ] s1 | s1 = bb6 ] 
    | bb6 = s0 [ s0 =  [ &produced <- [%#sknapsack_full5] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb7 ] 
    | bb7 = bb8
    | bb8 = bb9
    | bb9 = bb10
    | bb10 = bb11
    | bb11 = bb12
    | bb12 = bb12
      [ bb12 = {[@expl:loop invariant] [%#sknapsack_full6] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
        {[@expl:loop invariant] [%#sknapsack_full6] forall ii : int, ww : int . 0 <= ii
        /\ ii <= Seq.length (Snapshot.inner produced) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
         -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
        {[@expl:loop invariant] [%#sknapsack_full6] forall i : int . 0 <= i /\ i < Seq.length (view'1 best_value)
         -> UIntSize.to_int max_weight + 1 = Seq.length (view'2 (index_logic'0 best_value i))}
        {[@expl:loop invariant] [%#sknapsack_full7] Seq.length (view'0 items) + 1 = Seq.length (view'1 best_value)}
        {[@expl:loop invariant] [%#sknapsack_full6] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#sknapsack_full6] inv'1 iter}
        {[@expl:loop invariant] [%#sknapsack_full6] inv'0 (Snapshot.inner produced)}
        (! s0) [ s0 = bb13 ] 
        [ bb13 = s0
          [ s0 = Borrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':borrowed (t_Range'0)) ->  [ &_35 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Range'0> {_35.current} {Borrow.get_id _35}
              (fun (_ret':borrowed (t_Range'0)) ->
                 [ &_34 <- _ret' ] 
                 [ &_35 <- { _35 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_34} (fun (_ret':t_Option'0) ->  [ &_33 <- _ret' ] s3)
          | s3 = bb14 ]
          
        | bb14 = s0
          [ s0 = -{resolve'0 _35}- s1
          | s1 = any [ br0 -> {_33 = C_None'0 } (! bb17) | br1 (x0:usize)-> {_33 = C_Some'0 x0} (! bb16) ]  ]
          
        | bb16 = bb18
        | bb18 = s0
          [ s0 = v_Some'0 {_33} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_38 <- [%#sknapsack_full8] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb19 ]
          
        | bb19 = s0
          [ s0 =  [ &produced <- _38 ] s1
          | s1 =  [ &i <- __creusot_proc_iter_elem ] s2
          | s2 = index'0 {items} {i} (fun (_ret':t_Item'0) ->  [ &_42 <- _ret' ] s3)
          | s3 = bb20 ]
          
        | bb20 = s0
          [ s0 =  [ &it <- _42 ] s1
          | s1 = new'0 {[%#sknapsack_full9] (0 : usize)} {max_weight}
              (fun (_ret':t_RangeInclusive'0) ->  [ &_46 <- _ret' ] s2)
          | s2 = bb21 ]
          
        | bb21 = s0 [ s0 = into_iter'1 {_46} (fun (_ret':t_RangeInclusive'0) ->  [ &iter1 <- _ret' ] s1) | s1 = bb22 ] 
        | bb22 = s0 [ s0 =  [ &iter_old1 <- [%#sknapsack_full10] Snapshot.new iter1 ] s1 | s1 = bb23 ] 
        | bb23 = s0
          [ s0 =  [ &produced1 <- [%#sknapsack_full11] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb24 ]
          
        | bb24 = bb25
        | bb25 = bb26
        | bb26 = bb27
        | bb27 = bb28
        | bb28 = bb29
        | bb29 = bb30
        | bb30 = bb30
          [ bb30 = {[@expl:loop invariant] [%#sknapsack_full12] forall ii : int, ww : int . 0 <= ii
            /\ ii <= Seq.length (view'0 items) /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) <= 10000000 * ii}
            {[@expl:loop invariant] [%#sknapsack_full12] forall ww : int . 0 <= ww
            /\ ww <= Seq.length (Snapshot.inner produced1) - 1
             -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value (UIntSize.to_int i + 1))) ww)
            = m'0 (view'0 items) (UIntSize.to_int i + 1) ww}
            {[@expl:loop invariant] [%#sknapsack_full12] forall ii : int, ww : int . 0 <= ii
            /\ ii <= UIntSize.to_int i /\ 0 <= ww /\ ww <= UIntSize.to_int max_weight
             -> UIntSize.to_int (Seq.get (view'2 (index_logic'0 best_value ii)) ww) = m'0 (view'0 items) ii ww}
            {[@expl:loop invariant] [%#sknapsack_full12] forall i : int . 0 <= i /\ i < Seq.length (view'1 best_value)
             -> UIntSize.to_int max_weight + 1 = Seq.length (view'2 (index_logic'0 best_value i))}
            {[@expl:loop invariant] [%#sknapsack_full13] Seq.length (view'0 items) + 1 = Seq.length (view'1 best_value)}
            {[@expl:loop invariant] [%#sknapsack_full12] produces'1 (Snapshot.inner iter_old1) (Snapshot.inner produced1) iter1}
            {[@expl:loop invariant] [%#sknapsack_full12] inv'2 iter1}
            {[@expl:loop invariant] [%#sknapsack_full12] inv'0 (Snapshot.inner produced1)}
            (! s0) [ s0 = bb31 ] 
            [ bb31 = s0
              [ s0 = Borrow.borrow_mut <t_RangeInclusive'0> {iter1}
                  (fun (_ret':borrowed (t_RangeInclusive'0)) ->  [ &_62 <- _ret' ]  [ &iter1 <- _ret'.final ] s1)
              | s1 = Borrow.borrow_final <t_RangeInclusive'0> {_62.current} {Borrow.get_id _62}
                  (fun (_ret':borrowed (t_RangeInclusive'0)) ->
                     [ &_61 <- _ret' ] 
                     [ &_62 <- { _62 with current = _ret'.final } ] 
                    s2)
              | s2 = next'1 {_61} (fun (_ret':t_Option'0) ->  [ &_60 <- _ret' ] s3)
              | s3 = bb32 ]
              
            | bb32 = s0
              [ s0 = -{resolve'1 _62}- s1
              | s1 = any [ br0 -> {_60 = C_None'0 } (! bb35) | br1 (x0:usize)-> {_60 = C_Some'0 x0} (! bb34) ]  ]
              
            | bb34 = bb36
            | bb36 = s0
              [ s0 = v_Some'0 {_60} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem1 <- r0'0 ] s1)
              | s1 = 
                [ &_65 <- [%#sknapsack_full14] Snapshot.new (Seq.(++) (Snapshot.inner produced1) (Seq.singleton __creusot_proc_iter_elem1)) ]
                
                s2
              | s2 = bb37 ]
              
            | bb37 = s0
              [ s0 =  [ &produced1 <- _65 ] s1
              | s1 =  [ &w <- __creusot_proc_iter_elem1 ] s2
              | s2 = UIntSize.gt {it.t_Item__weight'0} {w} (fun (_ret':bool) ->  [ &_69 <- _ret' ] s3)
              | s3 = any [ br0 -> {_69 = false} (! bb41) | br1 -> {_69} (! bb38) ]  ]
              
            | bb38 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_74 <- _ret' ] s1) | s1 = bb39 ] 
            | bb39 = s0 [ s0 = index'2 {_74} {w} (fun (_ret':usize) ->  [ &_72 <- _ret' ] s1) | s1 = bb40 ] 
            | bb40 = s0 [ s0 =  [ &_68 <- _72 ] s1 | s1 = bb47 ] 
            | bb41 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_81 <- _ret' ] s1) | s1 = bb42 ] 
            | bb42 = s0 [ s0 = index'2 {_81} {w} (fun (_ret':usize) ->  [ &_79 <- _ret' ] s1) | s1 = bb43 ] 
            | bb43 = s0 [ s0 = index'1 {best_value} {i} (fun (_ret':t_Vec'0) ->  [ &_89 <- _ret' ] s1) | s1 = bb44 ] 
            | bb44 = s0
              [ s0 = UIntSize.sub {w} {it.t_Item__weight'0} (fun (_ret':usize) ->  [ &_92 <- _ret' ] s1)
              | s1 = index'2 {_89} {_92} (fun (_ret':usize) ->  [ &_87 <- _ret' ] s2)
              | s2 = bb45 ]
              
            | bb45 = s0
              [ s0 = UIntSize.add {_87} {it.t_Item__value'0} (fun (_ret':usize) ->  [ &_85 <- _ret' ] s1)
              | s1 = max'0 {_79} {_85} (fun (_ret':usize) ->  [ &_68 <- _ret' ] s2)
              | s2 = bb46 ]
              
            | bb46 = bb47
            | bb47 = s0
              [ s0 = Borrow.borrow_mut <t_Vec'1> {best_value}
                  (fun (_ret':borrowed (t_Vec'1)) ->  [ &_99 <- _ret' ]  [ &best_value <- _ret'.final ] s1)
              | s1 = UIntSize.add {i} {[%#sknapsack_full15] (1 : usize)} (fun (_ret':usize) ->  [ &_100 <- _ret' ] s2)
              | s2 = index_mut'0 {_99} {_100} (fun (_ret':borrowed (t_Vec'0)) ->  [ &_98 <- _ret' ] s3)
              | s3 = bb48 ]
              
            | bb48 = s0
              [ s0 = Borrow.borrow_final <t_Vec'0> {_98.current} {Borrow.get_id _98}
                  (fun (_ret':borrowed (t_Vec'0)) ->
                     [ &_97 <- _ret' ] 
                     [ &_98 <- { _98 with current = _ret'.final } ] 
                    s1)
              | s1 = index_mut'1 {_97} {w} (fun (_ret':borrowed usize) ->  [ &_96 <- _ret' ] s2)
              | s2 = bb49 ]
              
            | bb49 = s0
              [ s0 =  [ &_96 <- { _96 with current = _68 } ] s1
              | s1 = -{resolve'2 _96}- s2
              | s2 = -{resolve'3 _98}- s3
              | s3 = bb30 ]
               ]
             ]
          
        | bb35 = bb12 ]
         ]
      
    | bb17 = s0 [ s0 = len'0 {items} (fun (_ret':usize) ->  [ &_106 <- _ret' ] s1) | s1 = bb50 ] 
    | bb50 = s0 [ s0 = with_capacity'0 {_106} (fun (_ret':t_Vec'2) ->  [ &result <- _ret' ] s1) | s1 = bb51 ] 
    | bb51 = s0
      [ s0 =  [ &left_weight <- max_weight ] s1
      | s1 = len'0 {items} (fun (_ret':usize) ->  [ &j <- _ret' ] s2)
      | s2 = bb52 ]
      
    | bb52 = bb53
    | bb53 = bb54
    | bb54 = bb55
    | bb55 = bb56
    | bb56 = bb57
    | bb57 = bb57
      [ bb57 = {[@expl:loop invariant] [%#sknapsack_full19] forall r : Seq.seq (t_Item'0) . Seq.length (view'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ subseq_rev'0 r (Seq.length (view'3 result)) (view'0 items) (UIntSize.to_int j)
         -> subseq_rev'0 r 0 (view'0 items) (Seq.length (view'0 items))}
        {[@expl:loop invariant] [%#sknapsack_full19] forall r : Seq.seq (t_Item'0) . Seq.length (view'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_values'0 r (Seq.length (view'3 result))
        = m'0 (view'0 items) (UIntSize.to_int j) (UIntSize.to_int left_weight)
         -> sum_values'0 r 0 = m'0 (view'0 items) (Seq.length (view'0 items)) (UIntSize.to_int max_weight)}
        {[@expl:loop invariant] [%#sknapsack_full19] forall r : Seq.seq (t_Item'0) . Seq.length (view'3 result)
        <= Seq.length r
        /\ (forall i : int . 0 <= i /\ i < Seq.length (view'3 result)  -> index_logic'1 result i = Seq.get r i)
        /\ sum_weights'0 r (Seq.length (view'3 result)) <= UIntSize.to_int left_weight
         -> sum_weights'0 r 0 <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack_full18] UIntSize.to_int left_weight <= UIntSize.to_int max_weight}
        {[@expl:loop invariant] [%#sknapsack_full17] UIntSize.to_int j <= Seq.length (view'0 items)}
        {[@expl:loop invariant] [%#sknapsack_full16] inv'3 result}
        (! s0) [ s0 = bb58 ] 
        [ bb58 = s0
          [ s0 = UIntSize.lt {[%#sknapsack_full20] (0 : usize)} {j} (fun (_ret':bool) ->  [ &_118 <- _ret' ] s1)
          | s1 = any [ br0 -> {_118 = false} (! bb69) | br1 -> {_118} (! bb59) ]  ]
          
        | bb59 = s0
          [ s0 = UIntSize.sub {j} {[%#sknapsack_full21] (1 : usize)} (fun (_ret':usize) ->  [ &j <- _ret' ] s1)
          | s1 = index'0 {items} {j} (fun (_ret':t_Item'0) ->  [ &_121 <- _ret' ] s2)
          | s2 = bb60 ]
          
        | bb60 = s0
          [ s0 =  [ &it1 <- _121 ] s1
          | s1 = UIntSize.add {j} {[%#sknapsack_full22] (1 : usize)} (fun (_ret':usize) ->  [ &_130 <- _ret' ] s2)
          | s2 = index'1 {best_value} {_130} (fun (_ret':t_Vec'0) ->  [ &_128 <- _ret' ] s3)
          | s3 = bb61 ]
          
        | bb61 = s0 [ s0 = index'2 {_128} {left_weight} (fun (_ret':usize) ->  [ &_126 <- _ret' ] s1) | s1 = bb62 ] 
        | bb62 = s0 [ s0 = index'1 {best_value} {j} (fun (_ret':t_Vec'0) ->  [ &_136 <- _ret' ] s1) | s1 = bb63 ] 
        | bb63 = s0 [ s0 = index'2 {_136} {left_weight} (fun (_ret':usize) ->  [ &_134 <- _ret' ] s1) | s1 = bb64 ] 
        | bb64 = s0
          [ s0 = UIntSize.ne {_126} {_134} (fun (_ret':bool) ->  [ &_124 <- _ret' ] s1)
          | s1 = any [ br0 -> {_124 = false} (! bb67) | br1 -> {_124} (! bb65) ]  ]
          
        | bb65 = s0
          [ s0 = {inv'3 result}
            Borrow.borrow_mut <t_Vec'2> {result}
              (fun (_ret':borrowed (t_Vec'2)) ->
                 [ &_141 <- _ret' ] 
                -{inv'3 _ret'.final}-
                 [ &result <- _ret'.final ] 
                s1)
          | s1 = push'0 {_141} {it1} (fun (_ret':()) ->  [ &_140 <- _ret' ] s2)
          | s2 = bb66 ]
          
        | bb66 = s0
          [ s0 = UIntSize.sub {left_weight} {it1.t_Item__weight'0} (fun (_ret':usize) ->  [ &left_weight <- _ret' ] s1)
          | s1 = bb68 ]
          
        | bb67 = bb68
        | bb68 = bb57 ]
         ]
      
    | bb69 = s0 [ s0 =  [ &_0 <- result ] s1 | s1 = bb70 ] 
    | bb70 = bb71
    | bb71 = return' {_0} ]
    )
    [ & _0 : t_Vec'2 = any_l ()
    | & items : t_Vec'3 = items
    | & max_weight : usize = max_weight
    | & best_value : t_Vec'1 = any_l ()
    | & _10 : t_Vec'0 = any_l ()
    | & _11 : usize = any_l ()
    | & _13 : usize = any_l ()
    | & _14 : usize = any_l ()
    | & iter : t_Range'0 = any_l ()
    | & _18 : t_Range'0 = any_l ()
    | & _19 : usize = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _33 : t_Option'0 = any_l ()
    | & _34 : borrowed (t_Range'0) = any_l ()
    | & _35 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _38 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & i : usize = any_l ()
    | & it : t_Item'0 = any_l ()
    | & _42 : t_Item'0 = any_l ()
    | & iter1 : t_RangeInclusive'0 = any_l ()
    | & _46 : t_RangeInclusive'0 = any_l ()
    | & iter_old1 : Snapshot.snap_ty (t_RangeInclusive'0) = any_l ()
    | & produced1 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _60 : t_Option'0 = any_l ()
    | & _61 : borrowed (t_RangeInclusive'0) = any_l ()
    | & _62 : borrowed (t_RangeInclusive'0) = any_l ()
    | & __creusot_proc_iter_elem1 : usize = any_l ()
    | & _65 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & w : usize = any_l ()
    | & _68 : usize = any_l ()
    | & _69 : bool = any_l ()
    | & _72 : usize = any_l ()
    | & _74 : t_Vec'0 = any_l ()
    | & _79 : usize = any_l ()
    | & _81 : t_Vec'0 = any_l ()
    | & _85 : usize = any_l ()
    | & _87 : usize = any_l ()
    | & _89 : t_Vec'0 = any_l ()
    | & _92 : usize = any_l ()
    | & _96 : borrowed usize = any_l ()
    | & _97 : borrowed (t_Vec'0) = any_l ()
    | & _98 : borrowed (t_Vec'0) = any_l ()
    | & _99 : borrowed (t_Vec'1) = any_l ()
    | & _100 : usize = any_l ()
    | & result : t_Vec'2 = any_l ()
    | & _106 : usize = any_l ()
    | & left_weight : usize = any_l ()
    | & j : usize = any_l ()
    | & _118 : bool = any_l ()
    | & it1 : t_Item'0 = any_l ()
    | & _121 : t_Item'0 = any_l ()
    | & _124 : bool = any_l ()
    | & _126 : usize = any_l ()
    | & _128 : t_Vec'0 = any_l ()
    | & _130 : usize = any_l ()
    | & _134 : usize = any_l ()
    | & _136 : t_Vec'0 = any_l ()
    | & _140 : () = any_l ()
    | & _141 : borrowed (t_Vec'2) = any_l () ]
    
    [ return' (result:t_Vec'2)-> {[@expl:postcondition] [%#sknapsack_full30] inv'3 result}
      {[@expl:postcondition] [%#sknapsack_full29] forall s : Seq.seq (t_Item'0) . subseq_rev'0 s 0 (view'0 items) (Seq.length (view'0 items))
      /\ sum_weights'0 s (Seq.length s) <= UIntSize.to_int max_weight
       -> sum_values'0 s (Seq.length s) <= sum_values'0 (view'3 result) (Seq.length (view'3 result))}
      {[@expl:postcondition] [%#sknapsack_full28] subseq_rev'0 (view'3 result) 0 (view'0 items) (Seq.length (view'0 items))}
      {[@expl:postcondition] [%#sknapsack_full27] sum_weights'0 (view'3 result) (Seq.length (view'3 result))
      <= UIntSize.to_int max_weight}
      (! return' {result}) ]
    
end
