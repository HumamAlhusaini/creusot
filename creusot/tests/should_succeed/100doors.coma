module M_100doors__f [#"100doors.rs" 18 0 18 10]
  let%span s100doors0 = "100doors.rs" 19 40 19 45
  let%span s100doors1 = "100doors.rs" 19 47 19 50
  let%span s100doors2 = "100doors.rs" 21 16 21 17
  let%span s100doors3 = "100doors.rs" 21 19 21 22
  let%span s100doors4 = "100doors.rs" 21 4 21 7
  let%span s100doors5 = "100doors.rs" 21 4 21 7
  let%span s100doors6 = "100doors.rs" 20 16 20 39
  let%span s100doors7 = "100doors.rs" 21 4 21 7
  let%span s100doors8 = "100doors.rs" 21 4 21 7
  let%span s100doors9 = "100doors.rs" 24 20 24 43
  let%span s100doors10 = "100doors.rs" 23 20 23 54
  let%span s100doors11 = "100doors.rs" 25 22 25 25
  let%span s100doors12 = "100doors.rs" 26 52 26 53
  let%span s100doors13 = "100doors.rs" 26 29 26 30
  let%span smod14 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3188 27 3188 31
  let%span smod15 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3188 0 3188 55
  let%span svec16 = "../../../creusot-contracts/src/std/vec.rs" 180 22 180 41
  let%span svec17 = "../../../creusot-contracts/src/std/vec.rs" 181 22 181 76
  let%span scollect18 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 322 17 322 21
  let%span siter19 = "../../../creusot-contracts/src/std/iter.rs" 97 0 205 1
  let%span scollect20 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs" 322 4 322 27
  let%span svec21 = "../../../creusot-contracts/src/std/vec.rs" 18 14 18 41
  let%span srange22 = "../../../creusot-contracts/src/std/iter/range.rs" 22 12 26 70
  let%span srange23 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/range.rs" 848 17 848 21
  let%span srange24 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/range.rs" 848 4 848 35
  let%span siter25 = "../../../creusot-contracts/src/std/iter.rs" 103 26 106 17
  let%span smod26 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3359 14 3359 18
  let%span smod27 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3359 20 3359 25
  let%span svec28 = "../../../creusot-contracts/src/std/vec.rs" 162 27 162 46
  let%span smod29 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3359 4 3359 46
  let%span svec30 = "../../../creusot-contracts/src/std/vec.rs" 163 26 163 54
  let%span smod31 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3371 22 3371 26
  let%span smod32 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3371 28 3371 33
  let%span svec33 = "../../../creusot-contracts/src/std/vec.rs" 152 27 152 46
  let%span smod34 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs" 3371 4 3371 58
  let%span svec35 = "../../../creusot-contracts/src/std/vec.rs" 153 26 153 54
  let%span svec36 = "../../../creusot-contracts/src/std/vec.rs" 154 26 154 57
  let%span svec37 = "../../../creusot-contracts/src/std/vec.rs" 155 26 155 62
  let%span svec38 = "../../../creusot-contracts/src/std/vec.rs" 156 26 156 55
  let%span sindex39 = "../../../creusot-contracts/src/logic/ops/index.rs" 27 8 27 31
  let%span siter40 = "../../../creusot-contracts/src/std/iter.rs" 82 20 82 24
  let%span siter41 = "../../../creusot-contracts/src/std/iter.rs" 88 8 88 19
  let%span suint_macros42 = "../../../../../../.rustup/toolchains/nightly-2025-01-31-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/uint_macros.rs" 49 8 49 27
  let%span srange43 = "../../../creusot-contracts/src/std/iter/range.rs" 32 14 32 45
  let%span srange44 = "../../../creusot-contracts/src/std/iter/range.rs" 37 15 37 32
  let%span srange45 = "../../../creusot-contracts/src/std/iter/range.rs" 38 15 38 32
  let%span srange46 = "../../../creusot-contracts/src/std/iter/range.rs" 39 14 39 42
  let%span snum47 = "../../../creusot-contracts/src/std/num.rs" 21 28 21 33
  let%span srange48 = "../../../creusot-contracts/src/std/iter/range.rs" 14 12 14 78
  let%span sresolve49 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  let%span smodel50 = "../../../creusot-contracts/src/model.rs" 54 8 54 22
  let%span sslice51 = "../../../creusot-contracts/src/std/slice.rs" 122 20 122 37
  let%span sslice52 = "../../../creusot-contracts/src/std/slice.rs" 129 20 129 37
  let%span smodel53 = "../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice54 = "../../../creusot-contracts/src/std/slice.rs" 136 20 136 94
  
  use prelude.prelude.UIntSize
  
  predicate inv'2 (_1 : bool)
  
  axiom inv_axiom'2 [@rewrite] : forall x : bool [inv'2 x] . inv'2 x = true
  
  use prelude.prelude.Opaque
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: opaque_ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'0; t_Unique__qy95zmarker'0: () }
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: usize }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: usize }
  
  predicate inv'3 (_1 : t_Vec'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_Vec'0 [inv'3 x] . inv'3 x = true
  
  use seq.Seq
  
  constant v_MAX'0 : usize = [%#suint_macros42] (18446744073709551615 : usize)
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq bool
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec21] Seq.length (view'0 self) <= UIntSize.to_int (v_MAX'0 : usize)
  
  use seq.Seq
  
  function index_logic'0 [@inline:trivial] (self : t_Vec'0) (ix : int) : bool =
    [%#sindex39] Seq.get (view'0 self) ix
  
  let rec from_elem'0 (elem:bool) (n:usize) (return'  (ret:t_Vec'0))= {[@expl:from_elem 'elem' type invariant] [%#smod14] inv'2 elem}
    any
    [ return' (result:t_Vec'0)-> {[%#smod15] inv'3 result}
      {[%#svec16] Seq.length (view'0 result) = UIntSize.to_int n}
      {[%#svec17] forall i : int . 0 <= i /\ i < UIntSize.to_int n  -> index_logic'0 result i = elem}
      (! return' {result}) ]
  
  
  type t_Range'0  =
    { t_Range__start'0: usize; t_Range__end'0: usize }
  
  predicate inv'0 (_1 : t_Range'0)
  
  axiom inv_axiom'0 [@rewrite] : forall x : t_Range'0 [inv'0 x] . inv'0 x = true
  
  predicate into_iter_pre'0 (self : t_Range'0) =
    [%#siter40] true
  
  predicate into_iter_post'0 (self : t_Range'0) (res : t_Range'0) =
    [%#siter41] self = res
  
  let rec into_iter'0 (self:t_Range'0) (return'  (ret:t_Range'0))= {[@expl:into_iter 'self' type invariant] [%#scollect18] inv'0 self}
    {[@expl:into_iter requires] [%#siter19] into_iter_pre'0 self}
    any
    [ return' (result:t_Range'0)-> {[%#scollect20] inv'0 result}
      {[%#siter19] into_iter_post'0 self result}
      (! return' {result}) ]
  
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  use seq.Seq
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  use seq.Seq
  
  function deep_model'0 (self : usize) : int =
    [%#snum47] UIntSize.to_int self
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_Range'0) (visited : Seq.seq usize) (o : t_Range'0) =
    [%#srange22] self.t_Range__end'0 = o.t_Range__end'0
    /\ deep_model'0 self.t_Range__start'0 <= deep_model'0 o.t_Range__start'0
    /\ (Seq.length visited > 0  -> deep_model'0 o.t_Range__start'0 <= deep_model'0 o.t_Range__end'0)
    /\ Seq.length visited = deep_model'0 o.t_Range__start'0 - deep_model'0 self.t_Range__start'0
    /\ (forall i : int . 0 <= i /\ i < Seq.length visited
     -> deep_model'0 (Seq.get visited i) = deep_model'0 self.t_Range__start'0 + i)
  
  function produces_trans'0 (a : t_Range'0) (ab : Seq.seq usize) (b : t_Range'0) (bc : Seq.seq usize) (c : t_Range'0) : ()
  
  
  axiom produces_trans'0_spec : forall a : t_Range'0, ab : Seq.seq usize, b : t_Range'0, bc : Seq.seq usize, c : t_Range'0 . ([%#srange44] produces'0 a ab b)
   -> ([%#srange45] produces'0 b bc c)  -> ([%#srange46] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_Range'0) : ()
  
  axiom produces_refl'0_spec : forall self : t_Range'0 . [%#srange43] produces'0 self (Seq.empty  : Seq.seq usize) self
  
  use prelude.prelude.Snapshot
  
  predicate inv'1 (_1 : Seq.seq usize)
  
  axiom inv_axiom'1 [@rewrite] : forall x : Seq.seq usize [inv'1 x] . inv'1 x = true
  
  use prelude.prelude.Borrow
  
  predicate inv'4 (_1 : borrowed (t_Range'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : borrowed (t_Range'0) [inv'4 x] . inv'4 x = true
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 usize
  
  predicate inv'5 (_1 : t_Option'0)
  
  axiom inv_axiom'5 [@rewrite] : forall x : t_Option'0 [inv'5 x] . inv'5 x = true
  
  predicate resolve'2 (self : borrowed (t_Range'0)) =
    [%#sresolve49] self.final = self.current
  
  predicate completed'0 (self : borrowed (t_Range'0)) =
    [%#srange48] resolve'2 self
    /\ deep_model'0 (self.current).t_Range__start'0 >= deep_model'0 (self.current).t_Range__end'0
  
  use seq.Seq
  
  let rec next'0 (self:borrowed (t_Range'0)) (return'  (ret:t_Option'0))= {[@expl:next 'self' type invariant] [%#srange23] inv'4 self}
    any
    [ return' (result:t_Option'0)-> {[%#srange24] inv'5 result}
      {[%#siter25] match result with
        | C_None'0 -> completed'0 self
        | C_Some'0 v -> produces'0 self.current (Seq.singleton v) self.final
        end}
      (! return' {result}) ]
  
  
  predicate resolve'0 (_1 : borrowed (t_Range'0)) =
    resolve'2 _1
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:usize))= any
    [ good (field_0:usize)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : usize [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  predicate inv'6 (_1 : t_Vec'0)
  
  axiom inv_axiom'6 [@rewrite] : forall x : t_Vec'0 [inv'6 x] . inv'6 x = true
  
  predicate inv'7 (_1 : usize)
  
  axiom inv_axiom'7 [@rewrite] : forall x : usize [inv'7 x] . inv'7 x = true
  
  function view'1 (self : t_Vec'0) : Seq.seq bool =
    [%#smodel50] view'0 self
  
  predicate in_bounds'0 [@inline:trivial] (self : usize) (seq : Seq.seq bool) =
    [%#sslice51] UIntSize.to_int self < Seq.length seq
  
  predicate inv'8 (_1 : bool)
  
  axiom inv_axiom'8 [@rewrite] : forall x : bool [inv'8 x] . inv'8 x = true
  
  predicate has_value'0 [@inline:trivial] (self : usize) (seq : Seq.seq bool) (out : bool) =
    [%#sslice52] Seq.get seq (UIntSize.to_int self) = out
  
  let rec index'0 (self:t_Vec'0) (index:usize) (return'  (ret:bool))= {[@expl:index 'self' type invariant] [%#smod26] inv'6 self}
    {[@expl:index 'index' type invariant] [%#smod27] inv'7 index}
    {[@expl:index requires] [%#svec28] in_bounds'0 index (view'1 self)}
    any
    [ return' (result:bool)-> {[%#smod29] inv'8 result}
      {[%#svec30] has_value'0 index (view'1 self) result}
      (! return' {result}) ]
  
  
  predicate inv'9 (_1 : borrowed (t_Vec'0))
  
  axiom inv_axiom'9 [@rewrite] : forall x : borrowed (t_Vec'0) [inv'9 x] . inv'9 x = true
  
  function view'2 (self : borrowed (t_Vec'0)) : Seq.seq bool =
    [%#smodel53] view'0 self.current
  
  predicate inv'10 (_1 : borrowed bool)
  
  axiom inv_axiom'10 [@rewrite] : forall x : borrowed bool [inv'10 x] . inv'10 x = true
  
  predicate resolve_elswhere'0 [@inline:trivial] (self : usize) (old' : Seq.seq bool) (fin : Seq.seq bool) =
    [%#sslice54] forall i : int . 0 <= i /\ i <> UIntSize.to_int self /\ i < Seq.length old'
     -> Seq.get old' i = Seq.get fin i
  
  let rec index_mut'0 (self:borrowed (t_Vec'0)) (index:usize) (return'  (ret:borrowed bool))= {[@expl:index_mut 'self' type invariant] [%#smod31] inv'9 self}
    {[@expl:index_mut 'index' type invariant] [%#smod32] inv'7 index}
    {[@expl:index_mut requires] [%#svec33] in_bounds'0 index (view'2 self)}
    any
    [ return' (result:borrowed bool)-> {[%#smod34] inv'10 result}
      {[%#svec35] has_value'0 index (view'2 self) result.current}
      {[%#svec36] has_value'0 index (view'0 self.final) result.final}
      {[%#svec37] resolve_elswhere'0 index (view'2 self) (view'0 self.final)}
      {[%#svec38] Seq.length (view'0 self.final) = Seq.length (view'2 self)}
      (! return' {result}) ]
  
  
  predicate resolve'3 (self : borrowed bool) =
    [%#sresolve49] self.final = self.current
  
  predicate resolve'1 (_1 : borrowed bool) =
    resolve'3 _1
  
  use prelude.prelude.Intrinsic
  
  use prelude.prelude.Snapshot
  
  use prelude.prelude.Snapshot
  
  meta "compute_max_steps" 1000000
  
  let rec f'0 (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = from_elem'0 {[%#s100doors0] false} {[%#s100doors1] (100 : usize)}
          (fun (_ret':t_Vec'0) ->  [ &door_open <- _ret' ] s1)
      | s1 = bb1 ]
    
    | bb1 = s0
      [ s0 = 
        [ &_3 <- { t_Range__start'0 = ([%#s100doors2] (1 : usize)); t_Range__end'0 = ([%#s100doors3] (101 : usize)) } ]
        
        s1
      | s1 = into_iter'0 {_3} (fun (_ret':t_Range'0) ->  [ &iter <- _ret' ] s2)
      | s2 = bb2 ]
    
    | bb2 = s0 [ s0 =  [ &iter_old <- [%#s100doors4] Snapshot.new iter ] s1 | s1 = bb3 ] 
    | bb3 = s0 [ s0 =  [ &produced <- [%#s100doors5] Snapshot.new (Seq.empty  : Seq.seq usize) ] s1 | s1 = bb4 ] 
    | bb4 = bb5
    | bb5 = bb5
      [ bb5 = {[@expl:for invariant] [%#s100doors7] inv'1 (Snapshot.inner produced)}
        {[@expl:for invariant] [%#s100doors7] inv'0 iter}
        {[@expl:for invariant] [%#s100doors7] produces'0 (Snapshot.inner iter_old) (Snapshot.inner produced) iter}
        {[@expl:loop invariant] [%#s100doors6] Seq.length (view'0 door_open) = 100}
        (! s0) [ s0 = bb6 ] 
        [ bb6 = bb7
        | bb7 = s0
          [ s0 = Borrow.borrow_mut <t_Range'0> {iter}
              (fun (_ret':borrowed (t_Range'0)) ->  [ &_16 <- _ret' ]  [ &iter <- _ret'.final ] s1)
          | s1 = Borrow.borrow_final <t_Range'0> {_16.current} {Borrow.get_id _16}
              (fun (_ret':borrowed (t_Range'0)) ->
                 [ &_15 <- _ret' ] 
                 [ &_16 <- { _16 with current = _ret'.final } ] 
                s2)
          | s2 = next'0 {_15} (fun (_ret':t_Option'0) ->  [ &_14 <- _ret' ] s3)
          | s3 = bb8 ]
        
        | bb8 = s0
          [ s0 = -{resolve'0 _16}- s1
          | s1 = any [ br0 -> {_14 = C_None'0 } (! bb11) | br1 (x0:usize)-> {_14 = C_Some'0 x0} (! bb10) ]  ]
        
        | bb10 = bb12
        | bb12 = s0
          [ s0 = v_Some'0 {_14} (fun (r0'0:usize) ->  [ &__creusot_proc_iter_elem <- r0'0 ] s1)
          | s1 = 
            [ &_19 <- [%#s100doors8] Snapshot.new (Seq.(++) (Snapshot.inner produced) (Seq.singleton __creusot_proc_iter_elem)) ]
            
            s2
          | s2 = bb13 ]
        
        | bb13 = s0
          [ s0 =  [ &produced <- _19 ] s1
          | s1 =  [ &pass <- __creusot_proc_iter_elem ] s2
          | s2 =  [ &door <- pass ] s3
          | s3 = bb14 ]
        
        | bb14 = bb14
          [ bb14 = {[@expl:loop invariant #0] [%#s100doors10] 1 <= UIntSize.to_int door
            /\ UIntSize.to_int door <= 100 + UIntSize.to_int pass}
            {[@expl:loop invariant #1] [%#s100doors9] Seq.length (view'0 door_open) = 100}
            (! s0) [ s0 = bb15 ] 
            [ bb15 = bb16
            | bb16 = s0
              [ s0 = UIntSize.le {door} {[%#s100doors11] (100 : usize)} (fun (_ret':bool) ->  [ &_26 <- _ret' ] s1)
              | s1 = any [ br0 -> {_26 = false} (! bb20) | br1 -> {_26} (! bb17) ]  ]
            
            | bb17 = s0
              [ s0 = UIntSize.sub {door} {[%#s100doors12] (1 : usize)} (fun (_ret':usize) ->  [ &_31 <- _ret' ] s1)
              | s1 = index'0 {door_open} {_31} (fun (_ret':bool) ->  [ &_29 <- _ret' ] s2)
              | s2 = bb18 ]
            
            | bb18 = s0
              [ s0 = Borrow.borrow_mut <t_Vec'0> {door_open}
                  (fun (_ret':borrowed (t_Vec'0)) ->  [ &_34 <- _ret' ]  [ &door_open <- _ret'.final ] s1)
              | s1 = UIntSize.sub {door} {[%#s100doors13] (1 : usize)} (fun (_ret':usize) ->  [ &_35 <- _ret' ] s2)
              | s2 = index_mut'0 {_34} {_35} (fun (_ret':borrowed bool) ->  [ &_33 <- _ret' ] s3)
              | s3 = bb19 ]
            
            | bb19 = s0
              [ s0 =  [ &_33 <- { _33 with current = not _29 } ] s1
              | s1 = -{resolve'1 _33}- s2
              | s2 = UIntSize.add {door} {pass} (fun (_ret':usize) ->  [ &door <- _ret' ] s3)
              | s3 = bb14 ]
             ]
           ]
        
        | bb20 = bb5 ]
       ]
    
    | bb11 = bb21
    | bb21 = return' {_0} ]
    )
    [ & _0 : () = any_l ()
    | & door_open : t_Vec'0 = any_l ()
    | & iter : t_Range'0 = any_l ()
    | & _3 : t_Range'0 = any_l ()
    | & iter_old : Snapshot.snap_ty (t_Range'0) = any_l ()
    | & produced : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & _14 : t_Option'0 = any_l ()
    | & _15 : borrowed (t_Range'0) = any_l ()
    | & _16 : borrowed (t_Range'0) = any_l ()
    | & __creusot_proc_iter_elem : usize = any_l ()
    | & _19 : Snapshot.snap_ty (Seq.seq usize) = any_l ()
    | & pass : usize = any_l ()
    | & door : usize = any_l ()
    | & _26 : bool = any_l ()
    | & _29 : bool = any_l ()
    | & _31 : usize = any_l ()
    | & _33 : borrowed bool = any_l ()
    | & _34 : borrowed (t_Vec'0) = any_l ()
    | & _35 : usize = any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
