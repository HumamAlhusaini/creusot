
module T_model__Seven [#"model.rs" 4 0 4 16]
  type t_Seven  =
    | C_Seven
  
  let rec t_Seven (input:t_Seven) (ret  )= any [ good -> {C_Seven  = input} (! ret) ] 
end
module T_model__Pair [#"model.rs" 23 0 23 21]
  type t_Pair 't_T'0 't_U'0 =
    | C_Pair 't_T'0 't_U'0
  
  let rec t_Pair < 't_T'0 > < 't_U'0 > (input:t_Pair 't_T'0 't_U'0) (ret  (field_0:'t_T'0) (field_1:'t_U'0))= any
    [ good (field_0:'t_T'0) (field_1:'t_U'0)-> {C_Pair field_0 field_1 = input} (! ret {field_0} {field_1}) ]
    
end
module T_core__ptr__non_null__NonNull
  use prelude.prelude.Opaque
  
  type t_NonNull 't_T'0 =
    | C_NonNull opaque_ptr
  
  let rec t_NonNull < 't_T'0 > (input:t_NonNull 't_T'0) (ret  (pointer:opaque_ptr))= any
    [ good (pointer:opaque_ptr)-> {C_NonNull pointer = input} (! ret {pointer}) ]
    
end
module T_core__cell__UnsafeCell
  type t_UnsafeCell 't_T'0 =
    | C_UnsafeCell 't_T'0
  
  let rec t_UnsafeCell < 't_T'0 > (input:t_UnsafeCell 't_T'0) (ret  (value:'t_T'0))= any
    [ good (value:'t_T'0)-> {C_UnsafeCell value = input} (! ret {value}) ]
    
end
module T_core__sync__atomic__AtomicUsize
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__cell__UnsafeCell as UnsafeCell'0
  
  type t_AtomicUsize  =
    | C_AtomicUsize (UnsafeCell'0.t_UnsafeCell usize)
  
  let rec t_AtomicUsize (input:t_AtomicUsize) (ret  (v:UnsafeCell'0.t_UnsafeCell usize))= any
    [ good (v:UnsafeCell'0.t_UnsafeCell usize)-> {C_AtomicUsize v = input} (! ret {v}) ]
    
end
module T_alloc__sync__ArcInner
  use T_core__sync__atomic__AtomicUsize as AtomicUsize'0
  
  type t_ArcInner 't_T'0 =
    | C_ArcInner (AtomicUsize'0.t_AtomicUsize) (AtomicUsize'0.t_AtomicUsize) 't_T'0
  
  let rec t_ArcInner < 't_T'0 > (input:t_ArcInner 't_T'0) (ret  (strong:AtomicUsize'0.t_AtomicUsize) (weak:AtomicUsize'0.t_AtomicUsize) (data:'t_T'0))= any
    [ good (strong:AtomicUsize'0.t_AtomicUsize) (weak:AtomicUsize'0.t_AtomicUsize) (data:'t_T'0)-> {C_ArcInner strong weak data
      = input}
      (! ret {strong} {weak} {data}) ]
    
end
module T_core__marker__PhantomData
  type t_PhantomData 't_T'0 =
    | C_PhantomData
  
  let rec t_PhantomData < 't_T'0 > (input:t_PhantomData 't_T'0) (ret  )= any
    [ good -> {C_PhantomData  = input} (! ret) ]
    
end
module T_alloc__sync__Arc
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_alloc__sync__ArcInner as ArcInner'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Arc 't_T'0 't_A'0 =
    | C_Arc (NonNull'0.t_NonNull (ArcInner'0.t_ArcInner 't_T'0)) (PhantomData'0.t_PhantomData (ArcInner'0.t_ArcInner 't_T'0)) 't_A'0
  
  let rec t_Arc < 't_T'0 > < 't_A'0 > (input:t_Arc 't_T'0 't_A'0) (ret  (ptr:NonNull'0.t_NonNull (ArcInner'0.t_ArcInner 't_T'0)) (phantom:PhantomData'0.t_PhantomData (ArcInner'0.t_ArcInner 't_T'0)) (alloc:'t_A'0))= any
    [ good (ptr:NonNull'0.t_NonNull (ArcInner'0.t_ArcInner 't_T'0)) (phantom:PhantomData'0.t_PhantomData (ArcInner'0.t_ArcInner 't_T'0)) (alloc:'t_A'0)-> {C_Arc ptr phantom alloc
      = input}
      (! ret {ptr} {phantom} {alloc}) ]
    
end
module T_alloc__alloc__Global
  type t_Global  =
    | C_Global
  
  let rec t_Global (input:t_Global) (ret  )= any [ good -> {C_Global  = input} (! ret) ] 
end
module M_model__test_arc [#"model.rs" 43 0 43 41]
  let%span smodel0 = "model.rs" 42 11 42 19
  let%span smodel1 = "../../../../creusot-contracts/src/model.rs" 73 20 73 26
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__sync__Arc as Arc'0
  
  use prelude.prelude.UIntSize
  
  function view'0 (self : Arc'0.t_Arc usize (Global'0.t_Global)) : usize
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_arc (a:Arc'0.t_Arc usize (Global'0.t_Global)) (return'  (ret:()))= {[%#smodel0] UIntSize.to_int (view'0 a)
    = 0}
    (! bb0 [ bb0 = bb1 | bb1 = bb2 | bb2 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module T_core__cell__Cell
  use T_core__cell__UnsafeCell as UnsafeCell'0
  
  type t_Cell 't_T'0 =
    | C_Cell (UnsafeCell'0.t_UnsafeCell 't_T'0)
  
  let rec t_Cell < 't_T'0 > (input:t_Cell 't_T'0) (ret  (value:UnsafeCell'0.t_UnsafeCell 't_T'0))= any
    [ good (value:UnsafeCell'0.t_UnsafeCell 't_T'0)-> {C_Cell value = input} (! ret {value}) ]
    
end
module T_alloc__rc__RcBox
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_core__cell__Cell as Cell'0
  
  type t_RcBox 't_T'0 =
    | C_RcBox (Cell'0.t_Cell usize) (Cell'0.t_Cell usize) 't_T'0
  
  let rec t_RcBox < 't_T'0 > (input:t_RcBox 't_T'0) (ret  (strong:Cell'0.t_Cell usize) (weak:Cell'0.t_Cell usize) (value:'t_T'0))= any
    [ good (strong:Cell'0.t_Cell usize) (weak:Cell'0.t_Cell usize) (value:'t_T'0)-> {C_RcBox strong weak value = input}
      (! ret {strong} {weak} {value}) ]
    
end
module T_alloc__rc__Rc
  use T_core__marker__PhantomData as PhantomData'0
  
  use T_alloc__rc__RcBox as RcBox'0
  
  use T_core__ptr__non_null__NonNull as NonNull'0
  
  type t_Rc 't_T'0 't_A'0 =
    | C_Rc (NonNull'0.t_NonNull (RcBox'0.t_RcBox 't_T'0)) (PhantomData'0.t_PhantomData (RcBox'0.t_RcBox 't_T'0)) 't_A'0
  
  let rec t_Rc < 't_T'0 > < 't_A'0 > (input:t_Rc 't_T'0 't_A'0) (ret  (ptr:NonNull'0.t_NonNull (RcBox'0.t_RcBox 't_T'0)) (phantom:PhantomData'0.t_PhantomData (RcBox'0.t_RcBox 't_T'0)) (alloc:'t_A'0))= any
    [ good (ptr:NonNull'0.t_NonNull (RcBox'0.t_RcBox 't_T'0)) (phantom:PhantomData'0.t_PhantomData (RcBox'0.t_RcBox 't_T'0)) (alloc:'t_A'0)-> {C_Rc ptr phantom alloc
      = input}
      (! ret {ptr} {phantom} {alloc}) ]
    
end
module M_model__test_rc [#"model.rs" 46 0 46 37]
  let%span smodel0 = "model.rs" 45 11 45 19
  let%span smodel1 = "../../../../creusot-contracts/src/model.rs" 43 20 43 26
  
  use T_alloc__alloc__Global as Global'0
  
  use prelude.prelude.UIntSize
  
  use prelude.prelude.Int
  
  use T_alloc__rc__Rc as Rc'0
  
  use prelude.prelude.UIntSize
  
  function view'0 (self : Rc'0.t_Rc usize (Global'0.t_Global)) : usize
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_rc (v:Rc'0.t_Rc usize (Global'0.t_Global)) (return'  (ret:()))= {[%#smodel0] UIntSize.to_int (view'0 v)
    = 0}
    (! bb0 [ bb0 = bb1 | bb1 = bb2 | bb2 = return' {_0} ] ) [ & _0 : () = any_l () ] 
    [ return' (result:())-> (! return' {result}) ]
    
end
module M_model__qyi5879598729426635324 [#"model.rs" 6 0 6 19] (* <Seven as creusot_contracts::View> *)
  
end
module M_model__qyi3342034741243391773 [#"model.rs" 25 0 25 30] (* <Pair<T, U> as creusot_contracts::View> *)
  type t_T'0
  
  type t_U'0
end
