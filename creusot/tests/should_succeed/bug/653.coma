module M_653__omg [#"653.rs" 8 0 8 29]
  let%span s6530 = "653.rs" 7 10 7 38
  
  use prelude.int.UInt64
  
  use prelude.prelude.Intrinsic
  
  use prelude.int.UInt64
  
  use mach.int.Int
  
  meta "compute_max_steps" 1000000
  
  let rec omg'0[#"653.rs" 8 0 8 29] (n:UInt64.t) (return'  (ret:UInt64.t))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- n ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : UInt64.t = Intrinsic.any_l () | & n : UInt64.t = n ] 
    [ return' (result:UInt64.t)-> {[@expl:omg ensures] [%#s6530] UInt64.t'int result
      = Int.div (UInt64.t'int n * (UInt64.t'int n + 1)) 2}
      (! return' {result}) ]

end
