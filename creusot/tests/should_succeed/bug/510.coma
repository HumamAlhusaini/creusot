module M_510__test_bool [#"510.rs" 3 0 3 27]
  use prelude.int.UInt8
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_bool'0[#"510.rs" 3 0 3 27] (inp:bool) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.of_bool {inp} (fun (_ret_from:UInt8.t) ->  [ &_bing <- _ret_from ] s1) | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & inp : bool = inp | & _bing : UInt8.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_510__test_char [#"510.rs" 7 0 7 18]
  let%span s5100 = "510.rs" 8 4 8 6
  
  use prelude.int.UInt8
  
  use prelude.prelude.Char
  
  use prelude.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_char'0[#"510.rs" 7 0 7 18] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.to_int {[%#s5100] (22 : UInt8.t)}
          (fun (_ret_to:int) -> Char.of_int {_ret_to} (fun (_ret_from:Char.t) ->  [ &_1 <- _ret_from ] s1))
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & _1 : Char.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
