module M_1312__foo [#"1312.rs" 3 0 3 12]
  let%span s13120 = "1312.rs" 6 29 6 45
  
  use prelude.int.Int32
  
  type t_Option'0  =
    | C_None'0
    | C_Some'0 Int32.t
  
  let rec v_Some'0 (input:t_Option'0) (ret  (field_0:Int32.t))= any
    [ good (field_0:Int32.t)-> {C_Some'0 field_0 = input} (! ret {field_0})
    | bad -> {forall field_0 : Int32.t [C_Some'0 field_0 : t_Option'0] . C_Some'0 field_0 <> input} (! {false} any) ]
  
  
  use prelude.prelude.Intrinsic
  
  let rec promoted0__fooqy58zqy58zqy123zclosureqy35z0qy125z'0[@coma:extspec] (return'  (ret:string))= bb0
    [ bb0 = s0 [ s0 =  [ &_0 <- [%#s13120] "unwrapped None" ] s1 | s1 = return' {_0} ]  ]
     [ & _0 : string = Intrinsic.any_l () ]  [ return' (result:string)-> return' {result} ] 
  
  let rec closure0'0[#"1312.rs" 4 22 4 38] [@coma:extspec] (_1:()) (x:t_Option'0) (return'  (ret:Int32.t))= bb0
    [ bb0 = any [ br0 -> {x = C_None'0 } (! bb3) | br1 (x0:Int32.t)-> {x = C_Some'0 x0} (! bb2) ] 
    | bb2 = bb4
    | bb4 = s0
      [ s0 = v_Some'0 {x} (fun (r0'0:Int32.t) ->  [ &y <- r0'0 ] s1) | s1 =  [ &_0 <- y ] s2 | s2 = return' {_0} ]
    
    | bb3 = s0
      [ s0 = promoted0__fooqy58zqy58zqy123zclosureqy35z0qy125z'0 (fun (pr0:string) ->  [ &_10 <- pr0 ] s1)
      | s1 =  [ &_8 <- _10 ] s2
      | s2 = {false} any ]
     ]
    
    [ & _0 : Int32.t = Intrinsic.any_l ()
    | & x : t_Option'0 = x
    | & y : Int32.t = Intrinsic.any_l ()
    | & _8 : string = Intrinsic.any_l ()
    | & _10 : string = Intrinsic.any_l () ]
     [ return' (result:Int32.t)-> return' {result} ] 
  
  meta "compute_max_steps" 1000000
  
  let rec foo'0[#"1312.rs" 3 0 3 12] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0 [ s0 =  [ &_my_closure <- () ] s1 | s1 = return' {_0} ]  ]
    ) [ & _0 : () = Intrinsic.any_l () | & _my_closure : () = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
