module M_511__test_u8 [#"511.rs" 5 0 5 23]
  use creusot.int.UInt8
  
  use creusot.int.UInt64
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_u8'0[#"511.rs" 5 0 5 23] (inp:UInt8.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt8.to_int {inp}
          (fun (_ret_to:int) -> UInt64.of_int {_ret_to} (fun (_ret_from:UInt64.t) ->  [ &_bing <- _ret_from ] s1))
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & inp : UInt8.t = inp | & _bing : UInt64.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_511__test_u16 [#"511.rs" 9 0 9 25]
  use creusot.int.UInt16
  
  use creusot.int.UInt64
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_u16'0[#"511.rs" 9 0 9 25] (inp:UInt16.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt16.to_int {inp}
          (fun (_ret_to:int) -> UInt64.of_int {_ret_to} (fun (_ret_from:UInt64.t) ->  [ &_bing <- _ret_from ] s1))
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & inp : UInt16.t = inp | & _bing : UInt64.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_511__test_u128 [#"511.rs" 13 0 13 27]
  use creusot.int.UInt128
  
  use creusot.int.UInt64
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_u128'0[#"511.rs" 13 0 13 27] (inp:UInt128.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = UInt128.to_int {inp}
          (fun (_ret_to:int) -> UInt64.of_int {_ret_to} (fun (_ret_from:UInt64.t) ->  [ &_bing <- _ret_from ] s1))
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & inp : UInt128.t = inp | & _bing : UInt64.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_511__test_i8 [#"511.rs" 17 0 17 23]
  use creusot.int.Int8
  
  use creusot.int.UInt64
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_i8'0[#"511.rs" 17 0 17 23] (inp:Int8.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Int8.to_int {inp}
          (fun (_ret_to:int) -> UInt64.of_int {_ret_to} (fun (_ret_from:UInt64.t) ->  [ &_bing <- _ret_from ] s1))
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & inp : Int8.t = inp | & _bing : UInt64.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_511__test_i16 [#"511.rs" 21 0 21 25]
  use creusot.int.Int16
  
  use creusot.int.UInt64
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_i16'0[#"511.rs" 21 0 21 25] (inp:Int16.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Int16.to_int {inp}
          (fun (_ret_to:int) -> UInt64.of_int {_ret_to} (fun (_ret_from:UInt64.t) ->  [ &_bing <- _ret_from ] s1))
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & inp : Int16.t = inp | & _bing : UInt64.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
module M_511__test_i128 [#"511.rs" 25 0 25 27]
  use creusot.int.Int128
  
  use creusot.int.UInt64
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec test_i128'0[#"511.rs" 25 0 25 27] (inp:Int128.t) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = Int128.to_int {inp}
          (fun (_ret_to:int) -> UInt64.of_int {_ret_to} (fun (_ret_from:UInt64.t) ->  [ &_bing <- _ret_from ] s1))
      | s1 = return' {_0} ]
     ]
    ) [ & _0 : () = Intrinsic.any_l () | & inp : Int128.t = inp | & _bing : UInt64.t = Intrinsic.any_l () ] 
    [ return' (result:())-> (! return' {result}) ]

end
