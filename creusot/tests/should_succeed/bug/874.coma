module M_874__can_extend [#"874.rs" 4 0 4 19]
  let%span s8740 = "874.rs" 5 21 5 22
  let%span s8741 = "874.rs" 5 24 5 25
  let%span s8742 = "874.rs" 5 27 5 28
  let%span s8743 = "874.rs" 6 17 6 18
  let%span s8744 = "874.rs" 6 20 6 21
  let%span s8745 = "874.rs" 6 23 6 24
  let%span s8746 = "874.rs" 9 17 9 18
  let%span s8747 = "874.rs" 9 20 9 21
  let%span s8748 = "874.rs" 9 23 9 24
  let%span s8749 = "874.rs" 9 26 9 27
  let%span s87410 = "874.rs" 9 29 9 30
  let%span s87411 = "874.rs" 9 32 9 33
  let%span s87412 = "874.rs" 10 18 10 31
  let%span sslice13 = "../../../../creusot-contracts/src/std/slice.rs" 333 18 333 35
  let%span svec14 = "../../../../creusot-contracts/src/std/vec.rs" 144 27 144 47
  let%span svec15 = "../../../../creusot-contracts/src/std/vec.rs" 145 26 148 102
  let%span svec16 = "../../../../creusot-contracts/src/std/vec.rs" 20 14 20 41
  let%span sboxed17 = "../../../../creusot-contracts/src/std/boxed.rs" 22 8 22 22
  let%span svec18 = "../../../../creusot-contracts/src/std/vec.rs" 197 20 197 24
  let%span svec19 = "../../../../creusot-contracts/src/std/vec.rs" 203 20 203 33
  let%span svec20 = "../../../../creusot-contracts/src/std/vec.rs" 268 20 268 57
  let%span svec21 = "../../../../creusot-contracts/src/std/vec.rs" 275 12 275 41
  let%span smodel22 = "../../../../creusot-contracts/src/model.rs" 72 8 72 22
  let%span sslice23 = "../../../../creusot-contracts/src/std/slice.rs" 27 14 27 41
  let%span sslice24 = "../../../../creusot-contracts/src/std/slice.rs" 28 14 28 42
  let%span svec25 = "../../../../creusot-contracts/src/std/vec.rs" 281 14 281 45
  let%span svec26 = "../../../../creusot-contracts/src/std/vec.rs" 279 4 279 10
  let%span svec27 = "../../../../creusot-contracts/src/std/vec.rs" 286 15 286 32
  let%span svec28 = "../../../../creusot-contracts/src/std/vec.rs" 287 15 287 32
  let%span svec29 = "../../../../creusot-contracts/src/std/vec.rs" 288 14 288 42
  let%span svec30 = "../../../../creusot-contracts/src/std/vec.rs" 284 4 284 10
  let%span sresolve31 = "../../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use creusot.slice.Slice64
  
  use creusot.int.Int32
  
  predicate inv'0 (_1 : Slice64.slice Int32.t)
  
  axiom inv_axiom'0 [@rewrite] : forall x : Slice64.slice Int32.t [inv'0 x] . inv'0 x = true
  
  use creusot.prelude.Opaque
  
  type t_NonNull'1  =
    { t_NonNull__pointer'1: Opaque.ptr }
  
  type t_Unique'0  =
    { t_Unique__pointer'0: t_NonNull'1; t_Unique__qy95zmarker'0: () }
  
  use creusot.int.UInt64
  
  type t_UsizeNoHighBit'0  =
    { t_UsizeNoHighBit__0'0: UInt64.t }
  
  type t_RawVecInner'0  =
    { t_RawVecInner__ptr'0: t_Unique'0; t_RawVecInner__cap'0: t_UsizeNoHighBit'0; t_RawVecInner__alloc'0: () }
  
  type t_RawVec'0  =
    { t_RawVec__inner'0: t_RawVecInner'0; t_RawVec__qy95zmarker'0: () }
  
  type t_Vec'0  =
    { t_Vec__buf'0: t_RawVec'0; t_Vec__len'0: UInt64.t }
  
  predicate inv'1 (_1 : t_Vec'0)
  
  axiom inv_axiom'1 [@rewrite] : forall x : t_Vec'0 [inv'1 x] . inv'1 x = true
  
  use seq.Seq
  
  constant v_MAX'0 : UInt64.t = (18446744073709551615 : UInt64.t)
  
  use creusot.int.UInt64
  
  use mach.int.Int
  
  use seq.Seq
  
  function view'0 (self : t_Vec'0) : Seq.seq Int32.t
  
  axiom view'0_spec : forall self : t_Vec'0 . [%#svec16] Seq.length (view'0 self) <= UInt64.t'int (v_MAX'0 : UInt64.t)
  
  use creusot.slice.Slice64
  
  function view'3 (self : Slice64.slice Int32.t) : Seq.seq Int32.t
  
  axiom view'3_spec : forall self : Slice64.slice Int32.t . ([%#sslice23] Seq.length (view'3 self)
  <= UInt64.t'int (v_MAX'0 : UInt64.t))
  && ([%#sslice24] view'3 self = Slice64.id self)
  
  function view'1 (self : Slice64.slice Int32.t) : Seq.seq Int32.t =
    [%#sboxed17] view'3 self
  
  let rec into_vec'0 (self:Slice64.slice Int32.t) (return'  (ret:t_Vec'0))= {[@expl:into_vec 'self' type invariant] inv'0 self}
    any [ return' (result:t_Vec'0)-> {inv'1 result} {[%#sslice13] view'0 result = view'1 self} (! return' {result}) ] 
  
  use creusot.prelude.MutBorrow
  
  predicate inv'2 (_1 : MutBorrow.t (t_Vec'0))
  
  axiom inv_axiom'2 [@rewrite] : forall x : MutBorrow.t (t_Vec'0) [inv'2 x] . inv'2 x = true
  
  predicate into_iter_pre'0 (self : t_Vec'0) =
    [%#svec18] true
  
  type t_NonNull'0  =
    { t_NonNull__pointer'0: Opaque.ptr }
  
  type t_ManuallyDrop'0  =
    { t_ManuallyDrop__value'0: () }
  
  type t_IntoIter'0  =
    { t_IntoIter__buf'0: t_NonNull'0;
      t_IntoIter__phantom'0: ();
      t_IntoIter__cap'0: UInt64.t;
      t_IntoIter__alloc'0: t_ManuallyDrop'0;
      t_IntoIter__ptr'0: t_NonNull'0;
      t_IntoIter__end'0: Opaque.ptr }
  
  predicate inv'3 (_1 : t_IntoIter'0)
  
  axiom inv_axiom'3 [@rewrite] : forall x : t_IntoIter'0 [inv'3 x] . inv'3 x = true
  
  predicate inv'4 (_1 : MutBorrow.t (t_IntoIter'0))
  
  axiom inv_axiom'4 [@rewrite] : forall x : MutBorrow.t (t_IntoIter'0) [inv'4 x] . inv'4 x = true
  
  predicate inv'5 (_1 : Seq.seq Int32.t)
  
  axiom inv_axiom'5 [@rewrite] : forall x : Seq.seq Int32.t [inv'5 x] . inv'5 x = true
  
  function view'4 (self : t_IntoIter'0) : Seq.seq Int32.t
  
  predicate into_iter_post'0 (self : t_Vec'0) (res : t_IntoIter'0) =
    [%#svec19] view'0 self = view'4 res
  
  use seq.Seq
  
  use seq.Seq
  
  predicate produces'0 (self : t_IntoIter'0) (visited : Seq.seq Int32.t) (rhs : t_IntoIter'0) =
    [%#svec21] view'4 self = Seq.(++) visited (view'4 rhs)
  
  function produces_trans'0 (a : t_IntoIter'0) (ab : Seq.seq Int32.t) (b : t_IntoIter'0) (bc : Seq.seq Int32.t) (c : t_IntoIter'0) : ()
  
   =
    [%#svec30] ()
  
  axiom produces_trans'0_spec : forall a : t_IntoIter'0, ab : Seq.seq Int32.t, b : t_IntoIter'0, bc : Seq.seq Int32.t, c : t_IntoIter'0 . ([%#svec27] produces'0 a ab b)
   -> ([%#svec28] produces'0 b bc c)  -> ([%#svec29] produces'0 a (Seq.(++) ab bc) c)
  
  function produces_refl'0 (self : t_IntoIter'0) : () =
    [%#svec26] ()
  
  axiom produces_refl'0_spec : forall self : t_IntoIter'0 . [%#svec25] produces'0 self (Seq.empty : Seq.seq Int32.t) self
  
  predicate resolve'0 (self : MutBorrow.t (t_IntoIter'0)) =
    [%#sresolve31] self.final = self.current
  
  function view'5 (self : MutBorrow.t (t_IntoIter'0)) : Seq.seq Int32.t =
    [%#smodel22] view'4 self.current
  
  predicate completed'0 (self : MutBorrow.t (t_IntoIter'0)) =
    [%#svec20] resolve'0 self /\ view'5 self = (Seq.empty : Seq.seq Int32.t)
  
  function view'2 (self : MutBorrow.t (t_Vec'0)) : Seq.seq Int32.t =
    [%#smodel22] view'0 self.current
  
  let rec extend'0 (self:MutBorrow.t (t_Vec'0)) (iter:t_Vec'0) (return'  (ret:()))= {[@expl:extend 'self' type invariant] inv'2 self}
    {[@expl:extend 'iter' type invariant] inv'1 iter}
    {[@expl:extend requires] [%#svec14] into_iter_pre'0 iter}
    any
    [ return' (result:())-> {[%#svec15] exists start_ : t_IntoIter'0, done' : MutBorrow.t (t_IntoIter'0), prod : Seq.seq Int32.t . inv'3 start_
      /\ inv'4 done'
      /\ inv'5 prod
      /\ into_iter_post'0 iter start_
      /\ completed'0 done' /\ produces'0 start_ prod done'.current /\ view'0 self.final = Seq.(++) (view'2 self) prod}
      (! return' {result}) ]
  
  
  use seq.Seq
  
  use creusot.prelude.Intrinsic
  
  meta "compute_max_steps" 1000000
  
  let rec can_extend'0[#"874.rs" 4 0 4 19] (_1:()) (return'  (ret:()))= (! bb0
    [ bb0 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8740] (1 : Int32.t))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8741] (2 : Int32.t))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8742] (3 : Int32.t)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_4 <- __arr_temp ] 
          s1) ]
      
      | s1 = bb1 ]
    
    | bb1 = bb2
    | bb2 = s0 [ s0 = into_vec'0 {_4} (fun (_ret':t_Vec'0) ->  [ &v <- _ret' ] s1) | s1 = bb3 ] 
    | bb3 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8743] (4 : Int32.t))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8744] (5 : Int32.t))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8745] (6 : Int32.t)) /\ Seq.length __arr_temp.elts = 3}-
           [ &_8 <- __arr_temp ] 
          s1) ]
      
      | s1 = bb4 ]
    
    | bb4 = bb5
    | bb5 = s0 [ s0 = into_vec'0 {_8} (fun (_ret':t_Vec'0) ->  [ &w <- _ret' ] s1) | s1 = bb6 ] 
    | bb6 = s0
      [ s0 = MutBorrow.borrow_mut <t_Vec'0> {v}
          (fun (_ret':MutBorrow.t (t_Vec'0)) ->  [ &_10 <- _ret' ]  [ &v <- _ret'.final ] s1)
      | s1 = extend'0 {_10} {w} (fun (_ret':()) ->  [ &_9 <- _ret' ] s2)
      | s2 = bb7 ]
    
    | bb7 = s0
      [ s0 = any
        [ any_ (__arr_temp:Slice64.array Int32.t)-> (! -{Seq.get __arr_temp.elts 0 = ([%#s8746] (1 : Int32.t))
          /\ Seq.get __arr_temp.elts 1 = ([%#s8747] (2 : Int32.t))
          /\ Seq.get __arr_temp.elts 2 = ([%#s8748] (3 : Int32.t))
          /\ Seq.get __arr_temp.elts 3 = ([%#s8749] (4 : Int32.t))
          /\ Seq.get __arr_temp.elts 4 = ([%#s87410] (5 : Int32.t))
          /\ Seq.get __arr_temp.elts 5 = ([%#s87411] (6 : Int32.t)) /\ Seq.length __arr_temp.elts = 6}-
           [ &_15 <- __arr_temp ] 
          s1) ]
      
      | s1 = bb8 ]
    
    | bb8 = bb9
    | bb9 = s0 [ s0 = into_vec'0 {_15} (fun (_ret':t_Vec'0) ->  [ &z <- _ret' ] s1) | s1 = bb10 ] 
    | bb10 = s0 [ s0 = {[@expl:assertion] [%#s87412] Seq.(==) (view'0 z) (view'0 v)} s1 | s1 = bb11 ] 
    | bb11 = bb12
    | bb12 = bb13
    | bb13 = bb14
    | bb14 = return' {_0} ]
    )
    [ & _0 : () = Intrinsic.any_l ()
    | & v : t_Vec'0 = Intrinsic.any_l ()
    | & _4 : Slice64.array Int32.t = Intrinsic.any_l ()
    | & w : t_Vec'0 = Intrinsic.any_l ()
    | & _8 : Slice64.array Int32.t = Intrinsic.any_l ()
    | & _9 : () = Intrinsic.any_l ()
    | & _10 : MutBorrow.t (t_Vec'0) = Intrinsic.any_l ()
    | & z : t_Vec'0 = Intrinsic.any_l ()
    | & _15 : Slice64.array Int32.t = Intrinsic.any_l () ]
     [ return' (result:())-> (! return' {result}) ] 
end
