module M_unnest__unnest [#"unnest.rs" 8 0 8 64]
  let%span sunnest0 = "unnest.rs" 5 10 5 24
  let%span sunnest1 = "unnest.rs" 6 10 6 24
  let%span sunnest2 = "unnest.rs" 7 10 7 20
  let%span sresolve3 = "../../../creusot-contracts/src/resolve.rs" 54 20 54 34
  
  use prelude.prelude.MutBorrow
  
  use prelude.int.UInt32
  
  predicate resolve'2 (self : MutBorrow.t UInt32.t) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'0 (_1 : MutBorrow.t UInt32.t) =
    resolve'2 _1
  
  predicate resolve'3 (self : MutBorrow.t (MutBorrow.t UInt32.t)) =
    [%#sresolve3] self.final = self.current
  
  predicate resolve'1 (_1 : MutBorrow.t (MutBorrow.t UInt32.t)) =
    resolve'3 _1
  
  use prelude.prelude.Any
  
  meta "compute_max_steps" 1000000
  
  let rec unnest'0[#"unnest.rs" 8 0 8 64] (x:MutBorrow.t (MutBorrow.t UInt32.t)) (return'  (ret:MutBorrow.t UInt32.t))= (! bb0
    [ bb0 = s0
      [ s0 = MutBorrow.borrow_mut <UInt32.t> {(x.current).current}
          (fun (_ret':MutBorrow.t UInt32.t) ->
             [ &_2 <- _ret' ] 
             [ &x <- { x with current = { x.current with current = _ret'.final } } ] 
            s1)
      | s1 = MutBorrow.borrow_final <UInt32.t> {_2.current} {MutBorrow.get_id _2}
          (fun (_ret':MutBorrow.t UInt32.t) ->  [ &_0 <- _ret' ]  [ &_2 <- { _2 with current = _ret'.final } ] s2)
      | s2 = -{resolve'0 _2}- s3
      | s3 = -{resolve'1 x}- s4
      | s4 = return' {_0} ]
     ]
    )
    [ & _0 : MutBorrow.t UInt32.t = Any.any_l ()
    | & x : MutBorrow.t (MutBorrow.t UInt32.t) = x
    | & _2 : MutBorrow.t UInt32.t = Any.any_l () ]
    
    [ return' (result:MutBorrow.t UInt32.t)-> {[@expl:unnest ensures #0] [%#sunnest0] result.current
      = (x.current).current}
      {[@expl:unnest ensures #1] [%#sunnest1] result.final = (x.final).current}
      {[@expl:unnest ensures #2] [%#sunnest2] (x.current).final = (x.final).final}
      (! return' {result}) ]

end
